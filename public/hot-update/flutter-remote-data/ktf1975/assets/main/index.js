System.register("chunks:///_virtual/AlignFullScreenButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, log, sys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      log = module.log;
      sys = module.sys;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4607cFKlhRB97qftGoKlR4P", "AlignFullScreenButton", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let AlignFullScreenButton = exports('AlignFullScreenButton', (_dec = ccclass('AlignFullScreenButton'), _dec(_class = (_class2 = class AlignFullScreenButton extends Component {
        constructor(...args) {
          super(...args);
          this.alignFunc = null;

          _initializerDefineProperty(this, "position", _descriptor, this);
        }

        onLoad() {
          this.node.on('UPDATE_POSITION', this.updatePosition.bind(this));
        }

        start() {
          this.updatePosition();
        }

        updatePosition() {
          log('update button position ' + this.position);

          if (sys.isBrowser && sys.isMobile) {
            if (this.position == "TOP_RIGHT") {
              this.alignFunc = this.alignTopRight.bind(this);
            } else if (this.position == "BOT_LEFT") {
              this.alignFunc = this.alignBotLeft.bind(this);
            } else if (this.position == "BOT_LEFT_23") {
              this.alignFunc = this.alignBotLeft23.bind(this);
            } else if (this.position == "CENTER_LEFT") {
              this.alignFunc = this.alignCenterLeft.bind(this);
            } //add your align here


            if (this.alignFunc) {
              this.alignFunc();
              window.addEventListener('resize', this.alignFunc);
            }
          }
        }

        alignTopRight() {
          const enterFullscreen = document.getElementById('enterFullscreen');
          const exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopRight");
              exitFullscreen.classList.add("alignTopRight");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotRight");
              exitFullscreen.classList.add("alignBotRight");
            }
          }
        }

        alignBotLeft() {
          const enterFullscreen = document.getElementById('enterFullscreen');
          const exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft");
              exitFullscreen.classList.add("alignBotLeft");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft");
              exitFullscreen.classList.add("alignTopLeft");
            }
          }
        }

        alignBotLeft23() {
          const enterFullscreen = document.getElementById('enterFullscreen');
          const exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft23");
              exitFullscreen.classList.add("alignBotLeft23");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft23");
              exitFullscreen.classList.add("alignTopLeft23");
            }
          }
        }

        alignCenterLeft() {
          const enterFullscreen = document.getElementById('enterFullscreen');
          const exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Landscape");
              exitFullscreen.classList.add("exitFullScreen_Landscape");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Portrait");
              exitFullscreen.classList.add("exitFullScreen_Portrait");
            }
          }
        }

        removeAllClass(element) {
          element.classList.remove('alignTopRight', 'alignBotRight', 'alignTopLeft', 'alignBotLeft', 'exitFullScreen_Landscape', 'exitFullScreen_Portrait', 'alignBotLeft23', 'alignTopLeft23', 'enterFullScreen_Landscape', 'enterFullScreen_Portrait');
        }

        onDestroy() {
          if (sys.isBrowser && sys.isMobile && this.alignFunc) {
            window.removeEventListener('resize', this.alignFunc);
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "position", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "TOP_RIGHT";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/animateNumberLabel.ts", ['cc', './utils.ts'], function (exports) {
  var cclegacy, Component, Label, _decorator, formatMoney, formatWalletMoney;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      formatMoney = module.formatMoney;
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4eb529uDf5AQaMqTM8WSBKT", "animateNumberLabel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let AnimateNumberLabel = exports('AnimateNumberLabel', (_dec = ccclass('AnimateNumberLabel'), _dec(_class = class AnimateNumberLabel extends Component {
        constructor(...args) {
          super(...args);
          this.currentValue = void 0;
          this.timer = void 0;
        }

        onLoad() {
          this.node.onUpdateValue = this.onUpdateValue.bind(this);
          this.node.onUpdateWallet = this.onUpdateWallet.bind(this);
          this.node.onUpdateWinValue = this.onUpdateWinValue.bind(this);
          this.node.resetValue = this.resetValue.bind(this);
        }

        resetValue() {
          if (!this.node) return;
          clearInterval(this.timer);
          const label = this.node.getComponent(Label);
          label.string = '';
          this.currentValue = 0;
        }

        onUpdateValue(end, animationDuration = 3000, acceptRunDown = true, prefix = "", suffixes = "") {
          clearInterval(this.timer);
          if (!this.node) return;
          let label = this.node.getComponent(Label);
          let start = this.currentValue ? this.currentValue : 0;

          if (!acceptRunDown && end < start) {
            this.currentValue = end;
            label.string = prefix + formatMoney(this.currentValue) + suffixes;
            return;
          } // assumes integer values for start and end


          const range = end - start; // no timer shorter than 50ms (not really visible any way)

          const minTimer = 50; // calc step time to show all interediate values

          let stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          const startTime = new Date().getTime();
          const endTime = startTime + animationDuration;
          this.timer;

          const run = () => {
            const now = new Date().getTime();
            const remaining = Math.max((endTime - now) / animationDuration, 0);
            const value = Math.round(end - remaining * range);
            this.currentValue = value;
            label.string = prefix + formatMoney(value) + suffixes;

            if (value == end) {
              clearInterval(this.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        }

        onUpdateWinValue(end, animationDuration = 3000, callbackWin, isSkip, millisecond = 1000, timeUpdate = 50, superWinRate = 50, megaWinRate = 30) {
          clearInterval(this.timer);
          if (!this.node) return;
          let timeRate = millisecond / timeUpdate;
          this.currentValue = this.currentValue || 0;
          let valuePerTimes = Math.round(end / (animationDuration / millisecond * timeRate)); // a = ((s - v0 * t) * 2) / t^2

          const valueAccelerator = (end - valuePerTimes * timeUpdate) * 2 / Math.pow(timeUpdate, 2);

          const run = () => {
            let label = this.node.getComponent(Label);
            this.currentValue = Math.round(this.currentValue <= end / 2 ? this.currentValue + valuePerTimes + valueAccelerator : this.currentValue + valuePerTimes - valueAccelerator);
            let value = this.currentValue;
            label.string = '' + formatMoney(value >= end ? end : value);
            const isSuper = end >= callbackWin.currentBetData * superWinRate;
            const isMega = end >= callbackWin.currentBetData * megaWinRate;
            let finalWin = isSuper ? 'super' : isMega ? 'mega' : 'big';
            let per = value / end;
            per = per > 1 ? 1 : per;
            callbackWin.enterFrame(per, finalWin);

            if (value >= callbackWin.currentBetData * superWinRate && !isSkip) {
              callbackWin.runSuperWin();
            } else if (value >= callbackWin.currentBetData * megaWinRate && !isSkip) {
              callbackWin.runMegaWin();
            } else if (value + callbackWin.currentBetData * 2 == end && !isSkip) {
              callbackWin.runFinishBigWin();
            }

            if (value >= end) {
              callbackWin.runFinishWin();
              clearInterval(this.timer);
            }
          };

          this.timer = setInterval(run, timeUpdate);
          run();
        }

        onUpdateWallet(end, animationDuration = 3000) {
          clearInterval(this.timer);
          if (!this.node) return;
          const label = this.node.getComponent(Label);
          const start = this.currentValue ? this.currentValue : 0; // assumes integer values for start and end

          const range = end - start; // no timer shorter than 50ms (not really visible any way)

          const minTimer = 50; // calc step time to show all interediate values

          let stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          const startTime = new Date().getTime();
          const endTime = startTime + animationDuration;
          this.timer;

          const run = () => {
            const now = new Date().getTime();
            const remaining = Math.max((endTime - now) / animationDuration, 0);
            const value = Math.round(end - remaining * range);
            this.currentValue = value;
            label.string = '' + formatWalletMoney(value);

            if (value == end) {
              clearInterval(this.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        }

        onDestroy() {
          clearInterval(this.timer);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationCacheConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Enum, sp, _decorator, Component, sys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c4f88vC9N1B/o44RqT9YRau", "AnimationCacheConfig", undefined);

      const {
        ccclass,
        property,
        requireComponent
      } = _decorator;
      let PlatformType = exports('PlatformType', /*#__PURE__*/function (PlatformType) {
        PlatformType[PlatformType["NATIVE_WINDOWS"] = 0] = "NATIVE_WINDOWS";
        PlatformType[PlatformType["NATIVE_LINUS"] = 1] = "NATIVE_LINUS";
        PlatformType[PlatformType["NATIVE_MACOS"] = 2] = "NATIVE_MACOS";
        PlatformType[PlatformType["NATIVE_ANDROID"] = 3] = "NATIVE_ANDROID";
        PlatformType[PlatformType["NATIVE_IPHONE"] = 4] = "NATIVE_IPHONE";
        PlatformType[PlatformType["NATIVE_IPAD"] = 5] = "NATIVE_IPAD";
        PlatformType[PlatformType["NATIVE_UNKNOWN"] = 999] = "NATIVE_UNKNOWN";
        PlatformType[PlatformType["WEB_MOBILE"] = 100] = "WEB_MOBILE";
        PlatformType[PlatformType["WEB_DESKTOP"] = 101] = "WEB_DESKTOP";
        PlatformType[PlatformType["OTHER"] = 9999] = "OTHER";
        return PlatformType;
      }({}));
      Enum(PlatformType);
      let CacheConfigData = exports('CacheConfigData', (_dec = ccclass("CacheConfigData"), _dec2 = property({
        type: PlatformType
      }), _dec3 = property({
        type: sp.AnimationCacheMode
      }), _dec(_class = (_class2 = class CacheConfigData {
        constructor() {
          _initializerDefineProperty(this, "platformType", _descriptor, this);

          _initializerDefineProperty(this, "cacheMode", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "platformType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return PlatformType.WEB_MOBILE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cacheMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return sp.AnimationCacheMode.REALTIME;
        }
      })), _class2)) || _class));
      let AnimationCacheConfig = exports('AnimationCacheConfig', (_dec4 = ccclass('AnimationCacheConfig'), _dec5 = requireComponent(sp.Skeleton), _dec6 = property({
        type: CacheConfigData
      }), _dec7 = property({
        type: CacheConfigData
      }), _dec4(_class4 = _dec5(_class4 = (_class5 = class AnimationCacheConfig extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "configs", _descriptor3, this);

          _initializerDefineProperty(this, "fallBackConfig", _descriptor4, this);

          this.spineSkeleton = null;
        }

        onEnable() {
          if (!this.spineSkeleton) this.spineSkeleton = this.getComponent(sp.Skeleton);
          let hasConfig = false;

          for (let i = 0; i < this.configs.length; i++) {
            const config = this.configs[i];

            if (config && Number(config.platformType) === Number(sys.platform)) {
              this.spineSkeleton.setAnimationCacheMode(config.cacheMode);
              hasConfig = true;
              break;
            }
          }

          if (!hasConfig) {
            this.spineSkeleton.setAnimationCacheMode(this.fallBackConfig.cacheMode);
          }
        }

      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "configs", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "fallBackConfig", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimUtils.ts", ['cc', './utils.ts'], function (exports) {
  var cclegacy, UIOpacity, tween, formatMoney;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      exports({
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        getOpacity: getOpacity,
        setOpacity: setOpacity,
        tweenMoney: tweenMoney
      });

      cclegacy._RF.push({}, "815ccOKTWNAjKVvmajqY+tC", "AnimUtils", undefined);

      function fadeTo(target, duration, opacity, options) {
        let uiOpacity = target.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = target.addComponent(UIOpacity);
        let tweenFade = tween(uiOpacity);
        tweenFade.to(duration, {
          opacity
        }, options).start();
        target.tweenFade = tweenFade;
        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        let uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        let uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        uiOpacity.opacity = opacity;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        let currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        const _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        let tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(() => {
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AntialiasConfig.ts", ['cc'], function (exports) {
  var cclegacy, sys, macro, log, Component, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      macro = module.macro;
      log = module.log;
      Component = module.Component;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "91475cv2pxCx7TABC+Sdx/j", "AntialiasConfig", undefined);

      const {
        ccclass,
        property
      } = _decorator; // SET ENABLE_WEBGL_ANTIALIAS HERE

      if (sys.isNative) macro.ENABLE_WEBGL_ANTIALIAS = false;
      log("ENABLE_WEBGL_ANTIALIAS " + macro.ENABLE_WEBGL_ANTIALIAS);
      let AntialiasConfig = exports('AntialiasConfig', (_dec = ccclass('AntialiasConfig'), _dec(_class = class AntialiasConfig extends Component {}) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig-debug.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e030CMy5lBK5Dcbb4Meioo", "appConfig-debug", undefined);

      log('VERSION GAME', '1.0.0'); ////////////////////////////////////////////////////

      let urlConstant = exports('urlConstant', {});

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37333FieqpOxp7nSpV3N+9B", "appConfig", undefined);

      log('VERSION GAME', '1.0.0'); ////////////////////////////////////////////////////

      let urlConstant = exports('urlConstant', {
        API_URL: "https://api.staging.enostd.gay/",
        NETWORK_V3: true,
        USER_TOKEN: "user_token",
        SOCKET_URL: "wss://sock.staging.enostd.gay",
        LOBBY_SCENE_NAME: "Lobby",
        LOGIN_SCENE_NAME: "Login",
        IPMaster1974: "wss://dev.fish.enostd.gay/lobby-1974/",
        IPMaster1978: "wss://dev.fish.enostd.gay/lobby-1978/",
        IPMaster2998: "wss://staging.fish.enostd.gay/lobby-2998/",
        IPMaster1900: "wss://staging.fish.enostd.gay/lobby-1900/",
        IPMaster1984: "wss://staging.fish.enostd.gay/lobby-1984/",
        IS_LOBBY_PORTRAIT: false
      }); ////////////////////////////////////////////////////

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetBundle1975.ts", ['cc', './gfAssetBundle.ts', './Config1975.ts', './PoolManager1975.ts'], function (exports) {
  var Prefab, cclegacy, gfAssetBundle, Config1975, PoolManager1975;
  return {
    setters: [function (module) {
      Prefab = module.Prefab;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      PoolManager1975 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c7bd0/GArVBCrOeNZXUwAER", "AssetBundle1975", undefined);

      class AssetBundle1975 extends gfAssetBundle {
        constructor() {
          super();
          AssetBundle1975.instance = this;
        }

        destroy() {
          super.destroy();
          AssetBundle1975.instance = null;
        }

        releaseVipRoomAssets() {
          if (!this.GameBundle) return;
          const listBoss = Object.keys(Config1975.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            for (let i = 0; i < listBoss.length; i++) {
              this.GameBundle.release(Config1975.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab);
            }

            PoolManager1975.instance.releaseBoss();
          }
        }

        loadVipRoomAssets(callback) {
          //chua lam vip room
          if (!this.GameBundle) {
            callback && callback();
            return;
          }

          const listBoss = Object.keys(Config1975.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            for (let i = 0; i < listBoss.length; i++) {
              this.GameBundle.load(Config1975.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab, (err, prefab) => {
                PoolManager1975.instance.instantiateBoss(prefab);

                if (listBoss.length - 1 === i) {
                  callback && callback();
                }
              });
            }
          } else {
            callback && callback();
          }
        }

      }

      exports('default', AssetBundle1975);
      AssetBundle1975.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioClipDatabase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomTypeShare.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, CustomAudioClip, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "407a4S8Y3ZDSKdNroZdcVMR", "AudioClipDatabase", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let AudioClipDatabase = exports('AudioClipDatabase', (_dec = ccclass('AudioClipDatabase'), _dec2 = property(CustomAudioClip), _dec(_class = (_class2 = class AudioClipDatabase extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "audioList", _descriptor, this);
        }

        onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: this.audioList
          }));
        }

        onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: null
          }));
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "audioList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundController1975.ts", ['cc', './gfEventEmitter.ts', './EventsCode1975.ts', './Config1975.ts', './gfActionHelper.ts', './gfBackgroundController.ts', './DataStore1975.ts'], function (exports) {
  var cclegacy, v3, tween, _decorator, gfEventEmitter, EventsCode1975, Config1975, fadeOut, fadeIn, stopAllActions, GfBackgroundController, DataStore1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      GfBackgroundController = module.GfBackgroundController;
    }, function (module) {
      DataStore1975 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "549f4WwN5lMn72T3cibf9VE", "BackgroundController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BackgroundController1975 = exports('default', (_dec = ccclass('BackgroundController1975'), _dec(_class = class BackgroundController1975 extends GfBackgroundController {
        onInitBackground(data) {
          const {
            SceneKind
          } = data;
          DataStore1975.instance.setSceneKind(SceneKind);
          super.onInitBackground(data);
          const flip = DataStore1975.instance.getSelfDeskStation() > 1;

          if (flip) {
            this.background1.node.scale = v3(-1, -1, 1);
            this.background2.node.scale = v3(-1, -1, 1);
          } else {
            this.background1.node.scale = v3(1, 1, 1);
            this.background2.node.scale = v3(1, 1, 1);
          }
        }

        onChangeRound(data) {
          let {
            SceneKind,
            isFishGroupToNormal
          } = data;

          if (Config1975.instance.IsNewLogin) {
            SceneKind -= 1;
          }

          if (this._curBackgroundID == SceneKind) return;
          this._curBackgroundID = SceneKind;
          DataStore1975.instance.setSceneKind(SceneKind);
          tween(this.background1.node).delay(1).then(fadeOut(1.5)).call(() => {
            this.background1.spriteFrame = this.arrDataBackground[this._curBackgroundID];
          }).then(fadeIn(0)).start();
          tween(this.background2.node).then(fadeOut(0)).call(() => {
            this.background2.spriteFrame = this.arrDataBackground[this._curBackgroundID];
          }).delay(1).then(fadeIn(1.5)).start();

          if (!isFishGroupToNormal && this._curBackgroundID != 1) {
            gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
          }

          if (isFishGroupToNormal && this._curBackgroundID == 2) {
            gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
          }

          if (!isFishGroupToNormal) {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP);
          } else {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        }

        resetOnExit() {
          super.resetOnExit();
          stopAllActions(this.node);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/big.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        (function (GLOBAL) {
          var Big,
              DP = 20,
              RM = 1,
              MAX_DP = 1E6,
              MAX_POWER = 1E6,
              NE = -7,
              PE = 21,
              STRICT = false,
              NAME = '[big.js] ',
              INVALID = NAME + 'Invalid ',
              INVALID_DP = INVALID + 'decimal places',
              INVALID_RM = INVALID + 'rounding mode',
              DIV_BY_ZERO = NAME + 'Division by zero',
              P = {},
              UNDEFINED = void 0,
              NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

          function _Big_() {
            function Big(n) {
              var x = this;
              if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

              if (n instanceof Big) {
                x.s = n.s;
                x.e = n.e;
                x.c = n.c.slice();
              } else {
                if (typeof n !== 'string') {
                  if (Big.strict === true && typeof n !== 'bigint') {
                    throw TypeError(INVALID + 'value');
                  }

                  n = n === 0 && 1 / n < 0 ? '-0' : String(n);
                }

                parse(x, n);
              }

              x.constructor = Big;
            }

            Big.prototype = P;
            Big.DP = DP;
            Big.RM = RM;
            Big.NE = NE;
            Big.PE = PE;
            Big.strict = STRICT;
            Big.roundDown = 0;
            Big.roundHalfUp = 1;
            Big.roundHalfEven = 2;
            Big.roundUp = 3;
            return Big;
          }

          function parse(x, n) {
            var e, i, nl;

            if (!NUMERIC.test(n)) {
              throw Error(INVALID + 'number');
            }

            x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;
            if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

            if ((i = n.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +n.slice(i + 1);
              n = n.substring(0, i);
            } else if (e < 0) {
              e = n.length;
            }

            nl = n.length;

            for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

            if (i == nl) {
              x.c = [x.e = 0];
            } else {
              for (; nl > 0 && n.charAt(--nl) == '0';);

              x.e = e - i - 1;
              x.c = [];

              for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
            }

            return x;
          }

          function round(x, sd, rm, more) {
            var xc = x.c;
            if (rm === UNDEFINED) rm = x.constructor.RM;

            if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
              throw Error(INVALID_RM);
            }

            if (sd < 1) {
              more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
              xc.length = 1;

              if (more) {
                x.e = x.e - sd + 1;
                xc[0] = 1;
              } else {
                xc[0] = x.e = 0;
              }
            } else if (sd < xc.length) {
              more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
              xc.length = sd;

              if (more) {
                for (; ++xc[--sd] > 9;) {
                  xc[sd] = 0;

                  if (sd === 0) {
                    ++x.e;
                    xc.unshift(1);
                    break;
                  }
                }
              }

              for (sd = xc.length; !xc[--sd];) xc.pop();
            }

            return x;
          }

          function stringify(x, doExponential, isNonzero) {
            var e = x.e,
                s = x.c.join(''),
                n = s.length;

            if (doExponential) {
              s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;
            } else if (e < 0) {
              for (; ++e;) s = '0' + s;

              s = '0.' + s;
            } else if (e > 0) {
              if (++e > n) {
                for (e -= n; e--;) s += '0';
              } else if (e < n) {
                s = s.slice(0, e) + '.' + s.slice(e);
              }
            } else if (n > 1) {
              s = s.charAt(0) + '.' + s.slice(1);
            }

            return x.s < 0 && isNonzero ? '-' + s : s;
          }

          P.abs = function () {
            var x = new this.constructor(this);
            x.s = 1;
            return x;
          };

          P.cmp = function (y) {
            var isneg,
                x = this,
                xc = x.c,
                yc = (y = new x.constructor(y)).c,
                i = x.s,
                j = y.s,
                k = x.e,
                l = y.e;
            if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
            if (i != j) return i;
            isneg = i < 0;
            if (k != l) return k > l ^ isneg ? 1 : -1;
            j = (k = xc.length) < (l = yc.length) ? k : l;

            for (i = -1; ++i < j;) {
              if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
            }

            return k == l ? 0 : k > l ^ isneg ? 1 : -1;
          };

          P.div = function (y) {
            var x = this,
                Big = x.constructor,
                a = x.c,
                b = (y = new Big(y)).c,
                k = x.s == y.s ? 1 : -1,
                dp = Big.DP;

            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }

            if (!b[0]) {
              throw Error(DIV_BY_ZERO);
            }

            if (!a[0]) {
              y.s = k;
              y.c = [y.e = 0];
              return y;
            }

            var bl,
                bt,
                n,
                cmp,
                ri,
                bz = b.slice(),
                ai = bl = b.length,
                al = a.length,
                r = a.slice(0, bl),
                rl = r.length,
                q = y,
                qc = q.c = [],
                qi = 0,
                p = dp + (q.e = x.e - y.e) + 1;
            q.s = k;
            k = p < 0 ? 0 : p;
            bz.unshift(0);

            for (; rl++ < bl;) r.push(0);

            do {
              for (n = 0; n < 10; n++) {
                if (bl != (rl = r.length)) {
                  cmp = bl > rl ? 1 : -1;
                } else {
                  for (ri = -1, cmp = 0; ++ri < bl;) {
                    if (b[ri] != r[ri]) {
                      cmp = b[ri] > r[ri] ? 1 : -1;
                      break;
                    }
                  }
                }

                if (cmp < 0) {
                  for (bt = rl == bl ? b : bz; rl;) {
                    if (r[--rl] < bt[rl]) {
                      ri = rl;

                      for (; ri && !r[--ri];) r[ri] = 9;

                      --r[ri];
                      r[rl] += 10;
                    }

                    r[rl] -= bt[rl];
                  }

                  for (; !r[0];) r.shift();
                } else {
                  break;
                }
              }

              qc[qi++] = cmp ? n : ++n;
              if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];
            } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

            if (!qc[0] && qi != 1) {
              qc.shift();
              q.e--;
              p--;
            }

            if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);
            return q;
          };

          P.eq = function (y) {
            return this.cmp(y) === 0;
          };

          P.gt = function (y) {
            return this.cmp(y) > 0;
          };

          P.gte = function (y) {
            return this.cmp(y) > -1;
          };

          P.lt = function (y) {
            return this.cmp(y) < 0;
          };

          P.lte = function (y) {
            return this.cmp(y) < 1;
          };

          P.minus = P.sub = function (y) {
            var i,
                j,
                t,
                xlty,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (a != b) {
              y.s = -b;
              return x.plus(y);
            }

            var xc = x.c.slice(),
                xe = x.e,
                yc = y.c,
                ye = y.e;

            if (!xc[0] || !yc[0]) {
              if (yc[0]) {
                y.s = -b;
              } else if (xc[0]) {
                y = new Big(x);
              } else {
                y.s = 1;
              }

              return y;
            }

            if (a = xe - ye) {
              if (xlty = a < 0) {
                a = -a;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }

              t.reverse();

              for (b = a; b--;) t.push(0);

              t.reverse();
            } else {
              j = ((xlty = xc.length < yc.length) ? xc : yc).length;

              for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                  xlty = xc[b] < yc[b];
                  break;
                }
              }
            }

            if (xlty) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
            }

            if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

            for (b = i; j > a;) {
              if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i];) xc[i] = 9;

                --xc[i];
                xc[j] += 10;
              }

              xc[j] -= yc[j];
            }

            for (; xc[--b] === 0;) xc.pop();

            for (; xc[0] === 0;) {
              xc.shift();
              --ye;
            }

            if (!xc[0]) {
              y.s = 1;
              xc = [ye = 0];
            }

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.mod = function (y) {
            var ygtx,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (!y.c[0]) {
              throw Error(DIV_BY_ZERO);
            }

            x.s = y.s = 1;
            ygtx = y.cmp(x) == 1;
            x.s = a;
            y.s = b;
            if (ygtx) return new Big(x);
            a = Big.DP;
            b = Big.RM;
            Big.DP = Big.RM = 0;
            x = x.div(y);
            Big.DP = a;
            Big.RM = b;
            return this.minus(x.times(y));
          };

          P.neg = function () {
            var x = new this.constructor(this);
            x.s = -x.s;
            return x;
          };

          P.plus = P.add = function (y) {
            var e,
                k,
                t,
                x = this,
                Big = x.constructor;
            y = new Big(y);

            if (x.s != y.s) {
              y.s = -y.s;
              return x.minus(y);
            }

            var xe = x.e,
                xc = x.c,
                ye = y.e,
                yc = y.c;

            if (!xc[0] || !yc[0]) {
              if (!yc[0]) {
                if (xc[0]) {
                  y = new Big(x);
                } else {
                  y.s = x.s;
                }
              }

              return y;
            }

            xc = xc.slice();

            if (e = xe - ye) {
              if (e > 0) {
                ye = xe;
                t = yc;
              } else {
                e = -e;
                t = xc;
              }

              t.reverse();

              for (; e--;) t.push(0);

              t.reverse();
            }

            if (xc.length - yc.length < 0) {
              t = yc;
              yc = xc;
              xc = t;
            }

            e = yc.length;

            for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

            if (k) {
              xc.unshift(k);
              ++ye;
            }

            for (e = xc.length; xc[--e] === 0;) xc.pop();

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.pow = function (n) {
            var x = this,
                one = new x.constructor('1'),
                y = one,
                isneg = n < 0;

            if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
              throw Error(INVALID + 'exponent');
            }

            if (isneg) n = -n;

            for (;;) {
              if (n & 1) y = y.times(x);
              n >>= 1;
              if (!n) break;
              x = x.times(x);
            }

            return isneg ? one.div(y) : y;
          };

          P.prec = function (sd, rm) {
            if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
              throw Error(INVALID + 'precision');
            }

            return round(new this.constructor(this), sd, rm);
          };

          P.round = function (dp, rm) {
            if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }
            return round(new this.constructor(this), dp + this.e + 1, rm);
          };

          P.sqrt = function () {
            var r,
                c,
                t,
                x = this,
                Big = x.constructor,
                s = x.s,
                e = x.e,
                half = new Big('0.5');
            if (!x.c[0]) return new Big(x);

            if (s < 0) {
              throw Error(NAME + 'No square root');
            }

            s = Math.sqrt(x + '');

            if (s === 0 || s === 1 / 0) {
              c = x.c.join('');
              if (!(c.length + e & 1)) c += '0';
              s = Math.sqrt(c);
              e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
              r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
            } else {
              r = new Big(s + '');
            }

            e = r.e + (Big.DP += 4);

            do {
              t = r;
              r = half.times(t.plus(x.div(t)));
            } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

            return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
          };

          P.times = P.mul = function (y) {
            var c,
                x = this,
                Big = x.constructor,
                xc = x.c,
                yc = (y = new Big(y)).c,
                a = xc.length,
                b = yc.length,
                i = x.e,
                j = y.e;
            y.s = x.s == y.s ? 1 : -1;

            if (!xc[0] || !yc[0]) {
              y.c = [y.e = 0];
              return y;
            }

            y.e = i + j;

            if (a < b) {
              c = xc;
              xc = yc;
              yc = c;
              j = a;
              a = b;
              b = j;
            }

            for (c = new Array(j = a + b); j--;) c[j] = 0;

            for (i = b; i--;) {
              b = 0;

              for (j = a + i; j > i;) {
                b = c[j] + yc[i] * xc[j - i - 1] + b;
                c[j--] = b % 10;
                b = b / 10 | 0;
              }

              c[j] = b;
            }

            if (b) ++y.e;else c.shift();

            for (i = c.length; !c[--i];) c.pop();

            y.c = c;
            return y;
          };

          P.toExponential = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), ++dp, rm);

              for (; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, true, !!n);
          };

          P.toFixed = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), dp + x.e + 1, rm);

              for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, false, !!n);
          };

          P.toJSON = P.toString = function () {
            var x = this,
                Big = x.constructor;
            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
          };

          P.toNumber = function () {
            var n = Number(stringify(this, true, true));

            if (this.constructor.strict === true && !this.eq(n.toString())) {
              throw Error(NAME + 'Imprecise conversion');
            }

            return n;
          };

          P.toPrecision = function (sd, rm) {
            var x = this,
                Big = x.constructor,
                n = x.c[0];

            if (sd !== UNDEFINED) {
              if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                throw Error(INVALID + 'precision');
              }

              x = round(new Big(x), sd, rm);

              for (; x.c.length < sd;) x.c.push(0);
            }

            return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
          };

          P.valueOf = function () {
            var x = this,
                Big = x.constructor;

            if (Big.strict === true) {
              throw Error(NAME + 'valueOf disallowed');
            }

            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
          };

          Big = _Big_();
          Big['default'] = Big.Big = Big;

          if (typeof define === 'function' && define.amd) {
            define(function () {
              return Big;
            });
          } else if (typeof module !== 'undefined' && module.exports) {
            module.exports = Big;
          } else {
            GLOBAL.Big = Big;
          }
        })(this); // #endregion ORIGINAL CODE


        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BombFx1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './EventsCode1975.ts', './TurtleSkillEffect1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, tween, gfEventEmitter, gfBaseEvents, EventsCode1975, TurtleSkillEffect1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      TurtleSkillEffect1975 = module.TurtleSkillEffect1975;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "68695Nfm/VPFaX3aBbwnYck", "BombFx1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BombFx1975 = exports('BombFx1975', (_dec = ccclass('BombFx1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class BombFx1975 extends TurtleSkillEffect1975 {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "skillSpine", _descriptor, this);
        }

        playAnimation(data, callBack = null) {
          super.playAnimation(data, callBack);
          this.skillSpine.node.angle = data.fishAngle;
        }

        runAnimationSequence(data, callBack) {
          let timeExplosion = this.skillSpine.findAnimation("animation").duration;
          let delayPlaySound = 0.1;
          tween(this.node).call(() => {
            this.turtleSpine.setAnimation(0, 'transform_explosion', false);
            this.turtleSpine.setCompleteListener(trackEntry => {
              if (trackEntry.animation.name === 'transform_explosion') {
                this.turtleSpine.node.active = false;
              }
            });
          }).call(() => {
            this.skillSpine.setAnimation(0, "animation", true);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.03,
              amplitude: 5
            });
          }).call(() => {
            if (typeof callBack === "function") {
              callBack();
            }
          }).delay(delayPlaySound).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOM_SKILL);
          }).delay(timeExplosion - delayPlaySound).call(() => this.node.destroy()).start();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skillSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BossExtraSound1975.ts", ['cc', './gfEventEmitter.ts', './gfBossExtraSound.ts', './gfBaseEvents.ts', './gfUtilities.ts', './EventsCode1975.ts'], function (exports) {
  var cclegacy, _decorator, gfEventEmitter, gfBossExtraSound, gfBaseEvents, registerEvent, EventsCode1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBossExtraSound = module.gfBossExtraSound;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "70564AGysxC6ZP0RjXOHLWX", "BossExtraSound1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BossExtraSound1975 = exports('BossExtraSound1975', (_dec = ccclass('BossExtraSound1975'), _dec(_class = class BossExtraSound1975 extends gfBossExtraSound {
        constructor(...args) {
          super(...args);
          this.coinLoopId = {
            soundID: null
          };
          this.soundJPLoop = {
            soundID: null
          };
        }

        onLoad() {
          this.initExtraEvents();
        }

        initExtraEvents() {
          super.initExtraEvents();
          registerEvent(EventsCode1975.SOUND.SOUND_BOSS_DROP_ITEM, this.playSfxBossDropItem, this);
          registerEvent(EventsCode1975.SOUND.SOUND_BOSS_DIE, this.playSfxBossDie, this);
          registerEvent(EventsCode1975.SOUND.SOUND_BOSS_WARNING, this.playSfxBossWarning, this);
          registerEvent(EventsCode1975.SOUND.SOUND_BOSS_JACKPOT, this.playSfxJP, this);
          registerEvent(EventsCode1975.SOUND.SOUND_STOP_BOSS_JACKPOT, this.stopSfxJP, this);
          registerEvent(EventsCode1975.SOUND.SOUND_BOSS_JACKPOT_END, this.playSfxJPEnd, this);
          registerEvent(EventsCode1975.SOUND.PLAY_EFFECT_JACKPOT_COIN, this.playSfxJackpotCoin, this);
          registerEvent(EventsCode1975.SOUND.STOP_EFFECT_JACKPOT_COIN, this.stopSfxJackpotCoin, this);
        }

        playSfxBossDropItem() {
          const data = {
            name: "sfxItemDrop"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBossDie() {
          const data = {
            name: "sfxBossDie",
            ratio: 1
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBossWarning() {
          const data = {
            name: "sfxBossWarning"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxJP() {
          const data = {
            name: "sfxJP",
            loop: true,
            ratio: 0.4,
            sound: this.soundJPLoop,
            callBack: soundID => {
              this.soundJPLoop.soundID = soundID;
            }
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        stopSfxJP() {
          if (this.soundJPLoop) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_SOUND, this.soundJPLoop.soundID);
            this.soundJPLoop.soundID = 0;
          }
        }

        playSfxJPEnd() {
          const data = {
            name: "sfxJPEnd"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxJPDie() {
          const data = {
            name: "1975_sfx_boss_die"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        stopSfxJackpotCoin() {
          if (this.coinLoopId) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_SOUND, this.coinLoopId.soundID);
            this.coinLoopId.soundID = 0;
          }
        }

        playSfxJackpotCoin() {
          const data = {
            name: "sfxJackpot_coin",
            loop: true,
            ratio: 1,
            sound: this.coinLoopId,
            callBack: soundID => {
              this.coinLoopId.soundID = soundID;
            }
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BoxWave1975.ts", ['cc', './gfBaseFish.ts'], function (exports) {
  var cclegacy, Component, Collider2D, Contact2DType, _decorator, gfBaseFish;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "03cfeztIb1PP7n2NZU/y5RT", "BoxWave1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BoxWave1975 = exports('BoxWave1975', (_dec = ccclass('BoxWave1975'), _dec(_class = class BoxWave1975 extends Component {
        onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        }

        onCollisionEnter(self, other, contact) {
          let fish = other.getComponent(gfBaseFish) || other.node.parent.parent.getComponent(gfBaseFish);

          if (fish && !fish.checkDie() && !fish.checkFishGroup()) {
            fish.stopAllActions();
            fish.onDie();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BubbleFloatGames.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, director, instantiate, Label, resources, Prefab, view, v3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
      instantiate = module.instantiate;
      Label = module.Label;
      resources = module.resources;
      Prefab = module.Prefab;
      view = module.view;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6ff6fKe98ZMXLiUByeCzDj7", "BubbleFloatGames", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BubbleFloatGames = exports('BubbleFloatGames', (_dec = ccclass('BubbleFloatGames'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = class BubbleFloatGames extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "rootNode", _descriptor, this);

          _initializerDefineProperty(this, "cloneItem", _descriptor2, this);

          _initializerDefineProperty(this, "layoutContainer", _descriptor3, this);

          this.mainGame = void 0;
          this._mapGameItemViewById = void 0;
          this._mapLoadingStatusByGameId = void 0;
        }

        onLoad() {
          this.mainGame = this.node;
          this._mapGameItemViewById = {};
          this._mapLoadingStatusByGameId = {};

          this._initTouch();
        }

        onDestroy() {
          director.off("director_before_scene_launch", this._onBeforeSceneLaunch, this);
          director.off("director_after_scene_launch", this._onAfterSceneLaunch, this);
        }

        addGame(id, config) {
          if (!this._mapGameItemViewById[id]) {
            let item = instantiate(this.cloneItem);
            item.getChildByName("label").getComponent(Label).string = config.gameName;
            item.active = true;
            this.layoutContainer.addChild(item);
            let now = 0;
            item.on(Node.EventType.TOUCH_START, e => {
              now = Date.now();
            });
            item.on(Node.EventType.TOUCH_END, e => {
              if (Date.now() - now <= 250) {
                this._requestPlayGame({
                  gameId: id,
                  config
                });
              }
            });
            this._mapGameItemViewById[id] = item;
          }
        }

        _requestPlayGame(ev) {
          if (ev.config.prefabPath) {
            let sceneName = director.getScene().name;

            if (sceneName && sceneName.includes(ev.config.excludeScene)) {
              return;
            }

            let mainNode = this.node.parent.getChildByName(ev.config.prefabPath);

            if (mainNode) {
              director.emit(ev.config.openEvent);
              this.rootNode.setSiblingIndex(10000);
            } else {
              let icon = this._mapGameItemViewById[ev.gameId];

              if (!this._mapLoadingStatusByGameId[ev.gameId]) {
                this._mapLoadingStatusByGameId[ev.gameId] = true;
                this.loadFromResource(ev.config.prefabPath, percent => {
                  icon.getChildByName("label").getComponent(Label).string = `Load ${Math.floor(percent)}%`;
                }, (err, asset, status) => {
                  let prefab = asset;

                  if (prefab.data.name == ev.config.prefabPath) {
                    icon.getChildByName("label").getComponent(Label).string = ev.config.gameName;
                    let node = instantiate(prefab);
                    this.node.parent.addChild(node);
                    this.rootNode.setSiblingIndex(10000);
                    this._mapLoadingStatusByGameId[ev.gameId] = false;
                  }
                });
              }
            }
          }
        }

        loadFromResource(prefabPath, onProgress, onComplete) {
          resources.load(prefabPath, Prefab, (finish, total, item) => {
            let percent = 100 * finish / total;
            onProgress && onProgress(percent);
          }, (error, asset) => {
            if (error) {
              onComplete && onComplete(error, [], "load prefab error");
              return;
            }

            onComplete(error, asset, "done");
          });
        }

        getGameItemViewById(gameId) {
          return this._mapGameItemViewById[gameId];
        }

        _initTouch() {
          let node = this.mainGame; //TOUCH_MOVE

          node.on(Node.EventType.TOUCH_MOVE, e => {
            let delta = e.getDelta();
            let disTanceX = this.mainGame.getPosition().x;
            let disTanceY = this.mainGame.getPosition().y;
            disTanceX += delta.x;
            disTanceY += delta.y;
            let maxX = (view.getVisibleSize().width - node.width) / 2;
            let minX = -maxX;
            let maxY = (view.getVisibleSize().height - node.height) / 2;
            let minY = -maxY;
            disTanceX = Math.min(Math.max(disTanceX, minX), maxX);
            disTanceY = Math.min(Math.max(disTanceY, minY), maxY);
            this.mainGame.setPosition(v3(disTanceX, disTanceY));
          });
          director.on("director_before_scene_launch", this._onBeforeSceneLaunch, this);
          director.on("director_after_scene_launch", this._onAfterSceneLaunch, this);
        }

        _onBeforeSceneLaunch() {
          this.rootNode.active = false;
        }

        _onAfterSceneLaunch() {
          this.rootNode.active = true;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rootNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cloneItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "layoutContainer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CanvasScaleByOrientation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCBoolean, Canvas, CCInteger, Widget, _decorator, Component, sys, view, macro, director, screen, log, ResolutionPolicy, game, Camera, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCBoolean = module.CCBoolean;
      Canvas = module.Canvas;
      CCInteger = module.CCInteger;
      Widget = module.Widget;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      view = module.view;
      macro = module.macro;
      director = module.director;
      screen = module.screen;
      log = module.log;
      ResolutionPolicy = module.ResolutionPolicy;
      game = module.game;
      Camera = module.Camera;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "b4c0egcgEpKdZ75o3AkPNx+", "CanvasScaleByOrientation", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CanvasScaleByOrientation = exports('CanvasScaleByOrientation', (_dec = ccclass('CanvasScaleByOrientation'), _dec2 = property(CCBoolean), _dec3 = property(CCBoolean), _dec4 = property({
        type: Canvas
      }), _dec5 = property(CCBoolean), _dec6 = property(CCBoolean), _dec7 = property(CCInteger), _dec8 = property(CCInteger), _dec9 = property({
        type: Widget
      }), _dec10 = property(CCBoolean), _dec11 = property({
        type: CCInteger
      }), _dec(_class = (_class2 = class CanvasScaleByOrientation extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "autoOrientation", _descriptor, this);

          _initializerDefineProperty(this, "isPortrait", _descriptor2, this);

          _initializerDefineProperty(this, "canvas", _descriptor3, this);

          _initializerDefineProperty(this, "fitByOrientation", _descriptor4, this);

          _initializerDefineProperty(this, "useCustomDesignResolution", _descriptor5, this);

          _initializerDefineProperty(this, "customDSWidth", _descriptor6, this);

          _initializerDefineProperty(this, "customDSHeight", _descriptor7, this);

          _initializerDefineProperty(this, "widgetNodes", _descriptor8, this);

          _initializerDefineProperty(this, "isDebug", _descriptor9, this);

          _initializerDefineProperty(this, "minScreenRatio", _descriptor10, this);

          this._thisOnResized = void 0;
          this.innerSize = void 0;
        }

        onLoad() {
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();

          if (LOGIN_IFRAME) {
            if (this.isPortrait) {
              this.customDSHeight = 1280;
            } else {
              this.customDSWidth = 1280;
            }
          }

          this.innerSize = {
            width: window.innerWidth,
            height: window.innerHeight
          };
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isBrowser) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          if (!sys.isNative) {
            var divFullscreen = document.getElementById('div_full_screen');

            if (this.isPortrait) {
              if (divFullscreen) {
                divFullscreen.style.visibility = "hidden";
              }
            }

            if (this.autoOrientation) {
              view.setOrientation(macro.ORIENTATION_AUTO);
            } else if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }
        }

        start() {
          if (sys.isMobile) {
            const eventResize = new Event('gameShow');
            window.dispatchEvent(eventResize);
          }

          if (sys.isNative) {
            director.emit("INTEGRATION_SET_CANVAS_ORIENT", this.isPortrait ? 0 : 1);
          }

          this.scaleCanvasByOrientation();
        }

        updateOrientation() {
          const screenWidth = window ? window.innerWidth : screen.windowSize.width;
          const screenHeight = window ? window.innerHeight : screen.windowSize.height;

          if (this.autoOrientation) {
            if (screenWidth < screenHeight) {
              this.isPortrait = true;
            } else {
              this.isPortrait = false;
            }
          } else {
            if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);

              if (this.isDebug) {
                log("Update Game Orientation to Portrait");
              }
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);

              if (this.isDebug) {
                log("Update Game Orientation to Landscape");
              }
            }
          }
        }

        scaleCanvas() {
          const screenWidth = window ? window.innerWidth : screen.windowSize.width;
          const screenHeight = window ? window.innerHeight : screen.windowSize.height;

          if (this.canvas) {
            this.canvas.alignCanvasWithScreen = true;

            if (this.fitByOrientation) {
              const designRatio = this.useCustomDesignResolution ? this.customDSWidth / this.customDSHeight : view.getDesignResolutionSize().width / view.getDesignResolutionSize().height;
              let screenRatio = screenWidth / screenHeight;

              if (window && sys.isMobile && sys.isBrowser) {
                const isLandscapeOrien = this.isLandscapeScreen();

                if (this.isPortrait) {
                  screenRatio = isLandscapeOrien ? screenHeight / screenWidth : screenWidth / screenHeight;
                } else {
                  screenRatio = isLandscapeOrien ? window.innerWidth / window.innerHeight : window.innerHeight / window.innerWidth;
                }
              } else if (sys.isNative && sys.isMobile) {
                if (this.isPortrait) {
                  screenRatio = screenWidth < screenHeight ? screenWidth / screenHeight : screenHeight / screenWidth;
                } else {
                  screenRatio = screenWidth > screenHeight ? screenWidth / screenHeight : screenHeight / screenWidth;
                }
              }

              if (this.isDebug) {
                log(`[TestResize]View size width: ${screenWidth}, height: ${screenHeight}  Design Resolution: W: ${view.getDesignResolutionSize().width}, H: ${view.getDesignResolutionSize().height},  Screen Ratio: ${screenRatio}, Design Ratio: ${designRatio}, minScreenRatio: ${this.minScreenRatio}`);
              }

              if (this.isPortrait) {
                if (screenRatio < designRatio) {
                  this.setDesignResolutionFitWidth();
                } else {
                  this.setDesignResolutionFitHeight();
                }

                this.rotateRootPortraitGame();
              } else {
                if (screenRatio < designRatio && screenRatio >= this.minScreenRatio) {
                  this.setDesignResolutionFitWidth();
                } else {
                  this.setDesignResolutionFitHeight();
                }
              }
            }
          } else {
            if (this.isDebug) {
              log(`No canvas component`);
            }
          }
        }

        setDesignResolutionFitWidth() {
          view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);

          if (this.isDebug) {
            log(`[TestResize]CANVAS FIT WIDTH`);
          }
        }

        setDesignResolutionFitHeight() {
          view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);

          if (this.isDebug) {
            log(`[TestResize]CANVAS FIT HEIGHT`);
          }
        }

        updateWidgetAlignment() {
          if (this.widgetNodes && this.widgetNodes.length > 0) {
            for (let i = 0; i < this.widgetNodes.length; i++) {
              const widget = this.widgetNodes[i];

              if (widget) {
                this.widgetNodes[i].updateAlignment();
              }
            }
          }
        }

        scaleCanvasByOrientation() {
          this.updateOrientation();
          this.scaleCanvas();
          this.updateWidgetAlignment();
          game.emit('FINISHED_UPDATE_VIEW');
        }

        onScreenResized() {
          this.scaleCanvasByOrientation();
        }

        isLandscapeScreen() {
          if (sys.isMobile && sys.isBrowser && typeof window.matchMedia === 'function') {
            if (window.matchMedia("(orientation: landscape)").matches) {
              return true;
            }

            if (window.matchMedia("(orientation: portrait)").matches) {
              return false;
            }
          }

          return true;
        }

        isShowKeyboard() {
          let currentViewSize = window.innerWidth * window.innerHeight;
          let rate = currentViewSize / (this.innerSize.width * this.innerSize.height);
          return rate < 0.8;
        }

        rotateRootPortraitGame() {
          if (!this.isPortrait) return;

          if (sys.isMobile && sys.isBrowser) {
            const isLandScapeView = this.isLandscapeScreen() && !this.isShowKeyboard();
            this.node.children.forEach(child => {
              if (!child.getComponent(Camera)) {
                child.angle = isLandScapeView ? 180 : 0;
              }
            });
          }
        }

        onDestroy() {
          if (sys.isBrowser) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoOrientation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fitByOrientation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useCustomDesignResolution", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 1280;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 720;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "widgetNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "minScreenRatio", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/captureButton.ts", ['cc', './eEventEmitter.ts', './eItem.ts', './StateEvents.ts'], function (exports) {
  var cclegacy, Vec3, tween, v3, _decorator, eEventEmitter, eItem, StateEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
      _decorator = module._decorator;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eItem = module.eItem;
    }, function (module) {
      StateEvents = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "9e46cW4VNZJmLsRxFNXduk5", "captureButton", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CaptureButton = exports('CaptureButton', ccclass(_class = class CaptureButton extends eItem {
        constructor(...args) {
          super(...args);
          this.tweenEffect = void 0;
        }

        onLoad() {
          this.callback = this.captureScreen.bind(this);
        }

        captureScreen() {
          this.onclickCaptureEffect();
          eEventEmitter.getInstance().emit(StateEvents.CAPTURE_SCREEN);
        }

        onclickCaptureEffect() {
          if (this.tweenEffect) this.tweenEffect.stop();
          this.node.setScale(Vec3.ONE);
          this.tweenEffect = tween(this.node).sequence(tween().to(0.2, {
            scale: v3(1.2, 1.2, 1)
          }), tween().to(0.2, {
            scale: v3(1, 1, 1)
          })).start();
        }

        onDisable() {
          super.onDisable();
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClickAndShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, UIOpacity, tween, setOpacity, fadeIn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f1c22FetS9D86F5ibiTjmyB", "ClickAndShow", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ClickAndShow = exports('ClickAndShow', (_dec = ccclass('ClickAndShow'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = class ClickAndShow extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "panel", _descriptor, this);

          this.fadeSpeed = 0.9;
          this.isShowing = false;
        }

        onLoad() {
          this.node.on("SHOW_PANEL", this.enter, this);
          this.node.on("HIDE_PANEL", this.exit, this);
          this.panel.active = false;
        }

        enter() {
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          this.isShowing = true;
          this.panel.active = true;
          setOpacity(this.panel, 0);
          fadeIn(this.panel, this.fadeSpeed);
        }

        exit() {
          if (!this.isShowing) return;
          this.isShowing = false;
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          let uiOp = this.panel.getComponent(UIOpacity);
          tween(uiOp).to(this.fadeSpeed, {
            opacity: 0
          }).call(() => {
            this.panel.active = false;
          }).start();
        }

        start() {// [3]
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config1975.ts", ['cc', './gfBaseConfig.ts'], function (exports) {
  var v3, cclegacy, gfBaseConfig;
  return {
    setters: [function (module) {
      v3 = module.v3;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3cf4f9hLjRAmI8CoRyTHczX", "Config1975", undefined);

      class Config1975 extends gfBaseConfig {
        constructor() {
          super();
          this.GameId = "1975";
          this.GameVersion = "0.0.1";
          this.IPMasterName = "IPMaster1975";
          this.RoomVersion = "10";
          this.ProductVersion = "|1";
          this.BundleName = 'bundle1975';
          this.LoadGameByPrefab = true;
          this.SceneName = {
            Lobby: 'ktfLobby1975',
            Game1: 'ktfGame1975_1',
            Game2: 'ktfGame1975_2',
            Game3: 'ktfGame1975_3'
          };
          this.DEFAULT_AVATAR = "Avatar01";
          this.BOSS_KIND = 32;
          this.LIST_SCENE_KIND_OF_FISH_GROUP = [2, 4, 6, 8];
          this.BOTTOM_Z_INDEX = {
            PORTAL: 50,
            BULLET: 1000
          };
          this.PERSIST_Z_INDEX = {
            NOTIFY: 1,
            CUTSCENE: 6,
            POPUP: 8,
            WAITING: 10,
            JOIN_GAME_TRANSITION: 9
          };
          this.SKILL_TYPE = {
            ONE_SHOT_GUN: "ONE_SHOT_GUN",
            RIFLE_GUN: "RIFLE_GUN",
            SPECIAL_FISH: "SPECIAL_FISH",
            FISH_BOOM: "FISH_BOOM",
            BOMB_3: "BOMB_3",
            DRILL: "DRILL"
          };
          this.SKILL_CONFIG = {
            ONE_SHOT_GUN: {
              SkillID: 1,
              Type: this.SKILL_TYPE.ONE_SHOT_GUN,
              TIME_OUT: 30
            },
            FISH_BOOM: {
              SkillID: 5,
              Type: this.SKILL_TYPE.FISH_BOOM,
              WARNING_ANIM: "turtlebomb"
            },
            VORTEX: {
              SkillID: 6,
              Type: this.SKILL_TYPE.BOMB_3,
              WARNING_ANIM: "turtlevortex"
            },
            DRILL: {
              SkillID: 7,
              Type: this.SKILL_TYPE.DRILL,
              WARNING_ANIM: "turtlerocket"
            },
            RIFLE_GUN: {
              SkillID: 2,
              Type: this.SKILL_TYPE.RIFLE_GUN
            },
            PROMOTION_GUN: {
              SkillID: 99,
              Type: this.SKILL_TYPE.RIFLE_GUN
            }
          };
          this.NetFx = {
            ExplostionNet: 7,
            NormalNet: 1
          };
          this.LOAD_DYNAMIC_ASSET = true;
          this.NOTIFY_MESSAGE = {
            position: {
              [this.SceneName.Game1]: v3(0, 265),
              [this.SceneName['Game2']]: v3(0, 220),
              [this.SceneName.Lobby]: v3(0, -338)
            },
            limited_stack_size: 10
          };
          this.NOTIFY_JACKPOT = {
            array_type_notify_jackpot: [this.NOTIFY_TYPE.JACKPOT],
            limited_stack_size: 10
          };
          this.SOUND_SLIDER = true;
          this.LIST_SPECIAL_FISH_KIND = [27, 45, 43, 33, 44];
          this.LIST_FISH_ROOM_VIP = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 15, 17, 22, 20, 23, 25, 24, 30, 33, 34, 35, 36, 37, 43, 44, 45];
          this.LIST_FISH_ROOM_NORMAL = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 15, 17, 22, 20, 23, 25, 24, 30, 33, 34, 35, 36, 37, 43, 44];
          /***** PRIORITY_FISH *****/

          /* 
              cá có độ ưu tiên cao hơn sẽ được sắp xếp ở đầu mảng
          */

          this.CursorBase64 = "";
          this.POS_WIFI_STATUS = {
            LEFT: v3(-440, -263),
            RIGHT: v3(440, -263)
          };
          this.ITEM = {
            Fin1: 5,
            Fin2: 6,
            Fin3: 7
          };
          this.USE_GUN_SKILL = true;
          this.GunSkill = {
            LASER: "GunSkill1"
          };
          this.isLazyLoad = true;
          this.GUN_CONFIG = [{
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }, {
            shoot: "shoot",
            idle: "idle",
            muzzle: "shoot"
          }];
          this.POS_BTN_QUICK_HUNT = {
            LEFT: v3(-565, -180, 1),
            RIGHT: v3(565, -180, 1)
          };
          this.block_touch_timeout = 3.66;
          Config1975.instance = this;
          this.IsNewLogin = true;
          this.RoomKind.VIP = "2", this.LOCAL_STORE = {
            LOCAL_LOGIN_VAR: "ktfllv_1979",
            NOT_SHOW_NT: "NSNT",
            MUSIC_VOLUME: "ktf1979_music_volume",
            EFFECT_VOLUME: "ktf1979_effect_volume",
            SHOW_EVENT_INFO: "SEIF"
          };
          this.NOTIFY_CONFIG = {
            [this.NOTIFY_TYPE.JACKPOT]: {
              userName: 0,
              goldReward: 1
            },
            [this.NOTIFY_TYPE.MESSAGE_BIG_FISH]: {
              userName: 0,
              fishKind: 1,
              multiple: 3,
              goldReward: 2
            },
            [this.NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL]: {
              userName: 0,
              subID: 1,
              goldReward: 2,
              multiple: 3
            },
            [this.NOTIFY_TYPE.MESSAGE_DRAGON_BALL]: {
              userName: 0,
              countBall: 1,
              goldReward: 2
            },
            [this.NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS]: {
              userName: 0,
              fishKind: 1,
              goldReward: 3,
              itemID: 2,
              multiple: 4
            }
          };
          this.BOSS_CONFIG = {
            BOSS: 32
          };
          this.BOSS_KIND = this.BOSS_CONFIG.BOSS;
        }

        destroy() {
          super.destroy();
          Config1975.instance = null;
        }

      }

      exports('default', Config1975);
      Config1975.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/connectNetwork.ts", ['cc', './loadConfigAsync.ts', './serviceRest.ts', './gameCommonUtils.ts', './globalNetwork.ts', './mock.ts'], function (exports) {
  var cclegacy, sys, log, loadConfigAsync, apiObject, gameCommonUtils, globalNetwork, mock;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      mock = module.mock;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9aa5GoLR9JNqfGizKqYr82", "connectNetwork", undefined);

      class ConnectNetwork {
        constructor() {
          this.gameId = '';
        }

        getToken() {
          const {
            LOGIN_IFRAME,
            URL_TOKEN,
            USER_TOKEN
          } = loadConfigAsync.getConfig();
          let token = '';

          if (LOGIN_IFRAME) {
            const {
              getUrlParam
            } = gameCommonUtils;
            token = getUrlParam(URL_TOKEN);
            sys.localStorage.setItem(USER_TOKEN, token);
          } else if (typeof window !== 'undefined' && typeof window["__Game_Bridge"] !== 'undefined' && typeof window["__Game_Bridge"].getUSS === 'function') {
            token = window["__Game_Bridge"].getUSS();
          } else {
            token = sys.localStorage.getItem(USER_TOKEN);
          }

          return token;
        }

        getRefreshToken() {
          const {
            LOGIN_IFRAME,
            URL_REFRESH_TOKEN = 'refresh-token',
            USER_REFRESH_TOKEN = 'user-refresh-token'
          } = loadConfigAsync.getConfig();
          let refreshToken = '';

          if (LOGIN_IFRAME) {
            const {
              getUrlParam
            } = gameCommonUtils;
            refreshToken = getUrlParam(URL_REFRESH_TOKEN);
            sys.localStorage.setItem(USER_REFRESH_TOKEN, refreshToken);
          } else {
            refreshToken = sys.localStorage.getItem(USER_REFRESH_TOKEN);
          }

          return refreshToken;
        }

        loginScene({
          callback = () => {},
          gameId = '',
          callbackAuthFailed = () => {}
        }) {
          log("Login using V3");
          const {
            IS_FINISHED_REMOTE,
            DEV_ENV,
            USER_TOKEN
          } = loadConfigAsync.getConfig();

          if (!IS_FINISHED_REMOTE) {
            setTimeout(() => {
              this.loginScene({
                callback,
                gameId,
                callbackAuthFailed
              });
            }, 100);
            return;
          }

          this.gameId = gameId;
          let token = this.getToken();
          const refreshToken = this.getRefreshToken();
          const {
            LOGIN_IFRAME,
            API_URL
          } = loadConfigAsync.getConfig();
          const envId = LOGIN_IFRAME ? 'iframe' : 'portal';
          const gameIdSocket = LOGIN_IFRAME ? gameId : 'all';
          const {
            getUrlParam
          } = gameCommonUtils;
          const history = getUrlParam('history');
          if (LOGIN_IFRAME && history && history === 'true') return;

          if (token || !DEV_ENV) {
            if (token) {
              globalNetwork.init(token, refreshToken, envId, gameIdSocket);
              callback();
            } else {
              callbackAuthFailed();
            }
          } else {
            let dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            };
            apiObject.post({
              url: 'auth/login',
              data: dataPost,
              callback: ({
                data
              }) => {
                if (data.data.token) {
                  sys.localStorage.setItem(USER_TOKEN, data.data.token);
                  globalNetwork.init(data.data.token, '', envId, gameIdSocket);
                  callback();
                } else {
                  callbackAuthFailed && callbackAuthFailed();
                }
              },
              callbackErr: () => {
                callbackAuthFailed && callbackAuthFailed();
              },
              apiUrl: API_URL
            });
          }
        }

      }

      const connectNetwork = exports('default', new ConnectNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/crypto-core.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28fa8SvM8xEGLnNgEyetyJC", "crypto-core", undefined);
      /* eslint-disable no-prototype-builtins */

      /* globals , globalThis*/

      /**
       * CryptoJS core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names


      const CryptoJS = exports('default', function (Math, undefined$1) {
        // // Native crypto from window (Browser)
        // if (typeof window !== 'undefined' && window.crypto) {
        //     crypto = window.crypto;
        // }
        // // Native crypto in web worker (Browser)
        // if (typeof self !== 'undefined' && self.crypto) {
        //     crypto = self.crypto;
        // }
        // // Native crypto from worker
        // if (typeof globalThis !== 'undefined' && globalThis.crypto) {
        //     crypto = globalThis.crypto;
        // }
        // // Native (experimental IE 11) crypto from window (Browser)
        // if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
        //     crypto = window.msCrypto;
        // }
        // // Native crypto from global (NodeJS)
        // if (!crypto && typeof global !== 'undefined' && global.crypto) {
        //     crypto = global.crypto;
        // }
        // // Native crypto import via require (NodeJS)
        // if (!crypto && typeof require === 'function') {
        //     try {
        //         crypto = require('crypto');
        //     } catch (err) {
        //         //
        //     }
        // }

        /*
         * Cryptographically secure pseudorandom number generator
         *
         * As Math.random() is cryptographically not safe to use
         */
        var cryptoSecureRandomInt = function () {
          throw new Error('Native crypto module could not be used to get secure random number.');
        };
        /*
         * Local polyfill of Object.create
          */


        var create = Object.create || function () {
          function F() {}

          return function (obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        /**
         * CryptoJS namespace.
         */


        var C = {};
        /**
         * Library namespace.
         */

        var C_lib = C.lib = {};
        /**
         * Base object for prototypal inheritance.
         */

        var Base = C_lib.Base = function () {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function (overrides) {
              // Spawn
              var subtype = create(this); // Augment

              if (overrides) {
                subtype.mixIn(overrides);
              } // Create default initializer
              // eslint-disable-next-line no-prototype-builtins


              if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                subtype.init = function () {
                  subtype.$super.init.apply(this, arguments);
                };
              } // Initializer's prototype is the subtype object


              subtype.init.prototype = subtype; // Reference supertype

              subtype.$super = this;
              return subtype;
            },

            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function () {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },

            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function () {},

            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function (properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              } // IE won't copy toString using the loop above


              if (properties.hasOwnProperty('toString')) {
                this.toString = properties.toString;
              }
            },

            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function () {
              return this.init.prototype.extend(this);
            }
          };
        }();
        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */


        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function (words, sigBytes) {
            words = this.words = words || [];

            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },

          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function (encoder) {
            return (encoder || Hex).stringify(this);
          },

          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function (wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

            this.clamp(); // Concat

            if (thisSigBytes % 4) {
              // Copy one byte at a time
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              // Copy one word at a time
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }

            this.sigBytes += thatSigBytes; // Chainable

            return this;
          },

          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function () {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes; // Clamp

            words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
            words.length = Math.ceil(sigBytes / 4);
          },

          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function () {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },

          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function (nBytes) {
            var words = [];

            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }

            return new WordArray.init(words, nBytes);
          }
        });
        /**
         * Encoder namespace.
         */

        var C_enc = C.enc = {};
        /**
         * Hex encoding strategy.
         */

        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var hexChars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 0x0f).toString(16));
            }

            return hexChars.join('');
          },

          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function (hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length; // Convert

            var words = [];

            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }

            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        /**
         * Latin1 encoding strategy.
         */

        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var latin1Chars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              latin1Chars.push(String.fromCharCode(bite));
            }

            return latin1Chars.join('');
          },

          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function (latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length; // Convert

            var words = [];

            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
            }

            return new WordArray.init(words, latin1StrLength);
          }
        };
        /**
         * UTF-8 encoding strategy.
         */

        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function (wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error('Malformed UTF-8 data');
            }
          },

          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function (utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */

        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function () {
            // Initial values
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },

          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function (data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
              data = Utf8.parse(data);
            } // Append


            this._data.concat(data);

            this._nDataBytes += data.sigBytes;
          },

          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function (doFlush) {
            var processedWords; // Shortcuts

            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4; // Count blocks ready

            var nBlocksReady = dataSigBytes / blockSizeBytes;

            if (doFlush) {
              // Round up to include partial blocks
              nBlocksReady = Math.ceil(nBlocksReady);
            } else {
              // Round down to include only full blocks,
              // less the number of blocks that must remain in the buffer
              nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            } // Count words ready


            var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                // Perform concrete-algorithm logic
                this._doProcessBlock(dataWords, offset);
              } // Remove processed words


              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            } // Return processed words


            return new WordArray.init(processedWords, nBytesReady);
          },

          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function () {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */

        C_lib.Hasher = BufferedBlockAlgorithm.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars

          /**
           * Configuration options.
           */
          cfg: Base.extend(null),

          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function (cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Set initial values

            this.reset();
          },

          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

            this._doReset();
          },

          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function (messageUpdate) {
            // Append
            this._append(messageUpdate); // Update the hash


            this._process(); // Chainable


            return this;
          },

          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function (messageUpdate) {
            // Final message update
            if (messageUpdate) {
              this._append(messageUpdate);
            } // Perform concrete-hasher logic


            var hash = this._doFinalize();

            return hash;
          },
          blockSize: 512 / 32,

          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function (hasher) {
            return function (message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },

          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function (hasher) {
            return function (message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        /**
         * Algorithm namespace.
         */

        var C_algo = C.algo = {};
        return C;
      }(Math));
      /**
       * Cipher core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names

      CryptoJS.lib.Cipher || function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc; // var Utf8 = C_enc.Utf8;  // eslint-disable-line @typescript-eslint/no-unused-vars

        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */

        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),

          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function (key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },

          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function (key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },

          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function (xformMode, key, cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Store transform mode and key

            this._xformMode = xformMode;
            this._key = key; // Set initial values

            this.reset();
          },

          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

            this._doReset();
          },

          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function (dataUpdate) {
            // Append
            this._append(dataUpdate); // Process available blocks


            return this._process();
          },

          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function (dataUpdate) {
            // Final data update
            if (dataUpdate) {
              this._append(dataUpdate);
            } // Perform concrete-cipher logic


            var finalProcessedData = this._doFinalize();

            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,

          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function () {
            function selectCipherStrategy(key) {
              if (typeof key == 'string') {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }

            return function (cipher) {
              return {
                encrypt: function (message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function (ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */

        C_lib.StreamCipher = Cipher.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars
          _doFinalize: function () {
            // Process partial blocks
            var finalProcessedBlocks = this._process(!!'flush');

            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        /**
         * Mode namespace.
         */

        var C_mode = C.mode = {};
        /**
         * Abstract base block cipher mode template.
         */

        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function (cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },

          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function (cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },

          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function (cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        /**
         * Cipher Block Chaining mode.
         */

        var CBC = C_mode.CBC = function () {
          /**
           * Abstract base CBC mode.
           */
          var CBC = BlockCipherMode.extend();
          /**
           * CBC encryptor.
           */

          CBC.Encryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // XOR and encrypt

              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset); // Remember this block to use with next block

              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          /**
           * CBC decryptor.
           */

          CBC.Decryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // Remember this block to use with next block

              var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

              this._prevBlock = thisBlock;
            }
          });

          function xorBlock(words, offset, blockSize) {
            var block; // Shortcut

            var iv = this._iv; // Choose mixing block

            if (iv) {
              block = iv; // Remove IV for subsequent blocks

              this._iv = undefined;
            } else {
              block = this._prevBlock;
            } // XOR blocks


            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }

          return CBC;
        }();
        /**
         * Padding namespace.
         */


        var C_pad = C.pad = {};
        /**
         * PKCS #5/7 padding strategy.
         */

        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4; // Count padding bytes

            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

            var paddingWords = [];

            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }

            var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

            data.concat(padding);
          },

          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

            data.sigBytes -= nPaddingBytes;
          }
        };
        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */

        C_lib.BlockCipher = Cipher.extend({
          // eslint-disable-line @typescript-eslint/no-unused-vars

          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function () {
            var modeCreator; // Reset cipher

            Cipher.reset.call(this); // Shortcuts

            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode; // Reset block mode

            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

                this._minBufferSize = 1;
              }

            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function (words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function () {
            var finalProcessedBlocks; // Shortcut

            var padding = this.cfg.padding; // Finalize

            if (this._xformMode == this._ENC_XFORM_MODE) {
              // Pad data
              padding.pad(this._data, this.blockSize); // Process final blocks

              finalProcessedBlocks = this._process(!!'flush');
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                // Process final blocks
                finalProcessedBlocks = this._process(!!'flush'); // Unpad data

                padding.unpad(finalProcessedBlocks);
              }

            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */

        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function (cipherParams) {
            this.mixIn(cipherParams);
          },

          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function (formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        /**
         * Format namespace.
         */

        var C_format = C.format = {};
        /**
         * OpenSSL formatting strategy.
         */

        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function (cipherParams) {
            var wordArray; // Shortcuts

            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt; // Format

            if (salt) {
              wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }

            return wordArray.toString(Base64);
          },

          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function (openSSLStr) {
            var salt; // Parse base64

            var ciphertext = Base64.parse(openSSLStr); // Shortcut

            var ciphertextWords = ciphertext.words; // Test for salt

            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
              // Extract salt
              salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }

            return CipherParams.create({
              ciphertext: ciphertext,
              salt: salt
            });
          }
        };
        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */

        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),

          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function (cipher, message, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Encrypt

            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message); // Shortcut

            var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

            return CipherParams.create({
              ciphertext: ciphertext,
              key: key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },

          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function (cipher, ciphertext, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },

          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function (ciphertext, format) {
            if (typeof ciphertext == 'string') {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        /**
         * Key derivation function namespace.
         */

        var C_kdf = C.kdf = {};
        /**
         * OpenSSL key derivation function.
         */

        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function (password, keySize, ivSize, salt) {
            // Generate random salt
            if (!salt) {
              salt = WordArray.random(64 / 8);
            } // Derive key and IV


            var key = EvpKDF.create({
              keySize: keySize + ivSize
            }).compute(password, salt); // Separate key and IV

            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4; // Return params

            return CipherParams.create({
              key: key,
              iv: iv,
              salt: salt
            });
          }
        };
        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */

        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),

          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function (cipher, message, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

            cfg.iv = derivedParams.iv; // Encrypt

            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },

          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function (cipher, ciphertext, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

            cfg.iv = derivedParams.iv; // Decrypt

            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomCanvasSize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './CanvasScaleByOrientation.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCInteger, _decorator, Component, view, ResolutionPolicy, sys, loadConfigAsync, gameCommonUtils, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCInteger = module.CCInteger;
      _decorator = module._decorator;
      Component = module.Component;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      sys = module.sys;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "765a98ou0RK46VyyIsLn7md", "CustomCanvasSize", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CustomCanvasSize = exports('CustomCanvasSize', (_dec = ccclass('CustomCanvasSize'), _dec2 = property(CCInteger), _dec3 = property(CCInteger), _dec(_class = (_class2 = class CustomCanvasSize extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "customDSWidth", _descriptor, this);

          _initializerDefineProperty(this, "customDSHeight", _descriptor2, this);

          _initializerDefineProperty(this, "isPortrait", _descriptor3, this);

          this._defaultDesignResolution = {};
          this._defaultResolutionPolicy = null;
          this._thisOnResized = void 0;
          this._canvasScaleComp = null;
        }

        onLoad() {
          this._canvasScaleComp = this.node.scene.getComponentInChildren(CanvasScaleByOrientation);
          this.updateCustomScreen();
        }

        updateCustomScreen() {
          const {
            LOGIN_IFRAME,
            IS_FINISHED_REMOTE
          } = loadConfigAsync.getConfig();

          if (!IS_FINISHED_REMOTE) {
            setTimeout(() => {
              this.updateCustomScreen();
            }, 100);
            return;
          }

          if (!LOGIN_IFRAME) {
            this.updateCustomCanvasSize();
            this.updateWindowOrientation();
            this.scaleCanvasByOrientation(0.1);
          }
        }

        updateCustomCanvasSize() {
          const resolutionSize = view.getDesignResolutionSize();
          this._defaultDesignResolution.width = resolutionSize.width;
          this._defaultDesignResolution.height = resolutionSize.height;
          this._defaultResolutionPolicy = view.getResolutionPolicy();

          const _currentResolutionPolicy = this.isPortrait ? ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.FIXED_WIDTH;

          view.setDesignResolutionSize(this.customDSWidth, this.customDSHeight, _currentResolutionPolicy);
        }

        updateWindowOrientation() {
          if (!sys.isNative && window && this.isMobile()) {
            const event = new CustomEvent('orientationchange', {
              detail: {
                type: "manualCall"
              }
            });
            window.dispatchEvent(event);
          }
        }

        scaleCanvasByOrientation(delay) {
          this.scheduleOnce(() => {
            if (this._canvasScaleComp) {
              this._canvasScaleComp.scaleCanvasByOrientation();
            }
          }, delay);
        }

        isMobile() {
          const isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i) != null;
          return isMobile;
        }

        onDestroy() {
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();

          if (!LOGIN_IFRAME) {
            const {
              gameCanvasSize
            } = gameCommonUtils;

            if (gameCanvasSize && gameCanvasSize.width && gameCanvasSize.height) {
              const {
                width,
                height,
                resolutionPolicy
              } = gameCanvasSize;
              view.setDesignResolutionSize(width, height, resolutionPolicy ? resolutionPolicy : this._defaultResolutionPolicy);
            } else {
              const {
                width,
                height
              } = this._defaultDesignResolution;
              view.setDesignResolutionSize(width, height, this._defaultResolutionPolicy);
            }

            this.updateWindowOrientation();
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 1280;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 720;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomDataType1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Asset, Prefab, _decorator, Texture2D, error;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Asset = module.Asset;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Texture2D = module.Texture2D;
      error = module.error;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor2, _descriptor3, _descriptor4, _dec8, _dec9, _dec10, _dec11, _class7, _class8, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "8aba5iSNYBJp4HHvQ2qPI2F", "CustomDataType1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ExtraAsset1975 = exports('ExtraAsset1975', (_dec = ccclass('ExtraAsset1975'), _dec2 = property(Asset), _dec3 = property({
        visible: true
      }), _dec(_class = (_class2 = class ExtraAsset1975 {
        constructor() {
          this._asset = null;

          _initializerDefineProperty(this, "_name", _descriptor, this);
        }

        set asset(asset) {
          if (asset instanceof Texture2D) {
            error('Should add Sprite Instead');
            return;
          }

          this._asset = asset;
        }

        get asset() {
          return this._asset;
        }

      }, (_applyDecoratedDescriptor(_class2.prototype, "asset", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "asset"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class2)) || _class));
      let PoolAssetExist1975 = exports('PoolAssetExist1975', (_dec4 = ccclass('PoolAssetExist1975'), _dec5 = property([ExtraAsset1975]), _dec6 = property({
        visible: true
      }), _dec7 = property({
        visible: true
      }), _dec4(_class4 = (_class5 = class PoolAssetExist1975 {
        constructor() {
          _initializerDefineProperty(this, "assetData", _descriptor2, this);

          _initializerDefineProperty(this, "_assetName", _descriptor3, this);

          _initializerDefineProperty(this, "_typeName", _descriptor4, this);
        }

      }, (_descriptor2 = _applyDecoratedDescriptor(_class5.prototype, "assetData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "_assetName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_typeName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class5)) || _class4));
      let NewPoolAsset1975 = exports('NewPoolAsset1975', (_dec8 = ccclass('NewPoolAsset1975'), _dec9 = property(Prefab), _dec10 = property({
        visible: true
      }), _dec11 = property({
        visible: true
      }), _dec8(_class7 = (_class8 = class NewPoolAsset1975 {
        constructor() {
          _initializerDefineProperty(this, "nodePoolPrefab", _descriptor5, this);

          _initializerDefineProperty(this, "_assetName", _descriptor6, this);

          _initializerDefineProperty(this, "_typeName", _descriptor7, this);
        }

      }, (_descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "nodePoolPrefab", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "_assetName", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class8.prototype, "_typeName", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class8)) || _class7));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomPageViewIndicator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, SpriteFrame, _decorator, PageViewIndicator, SpriteComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      PageViewIndicator = module.PageViewIndicator;
      SpriteComponent = module.SpriteComponent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "db9c0YejNNPNITBLdrMDU11", "CustomPageViewIndicator", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CustomPageViewIndicator = exports('CustomPageViewIndicator', (_dec = ccclass('CustomPageViewIndicator'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = class CustomPageViewIndicator extends PageViewIndicator {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "unSelectedSpriteFrame", _descriptor, this);
        }

        _changedState() {
          let indicators = this._indicators;
          if (indicators.length === 0) return;
          let idx = this._pageView._curPageIdx;
          if (idx >= indicators.length) return;

          for (let i = 0; i < indicators.length; ++i) {
            let node = indicators[i];

            if (node) {
              let sprite = node.getComponent(SpriteComponent);

              if (sprite) {
                sprite.spriteFrame = this.unSelectedSpriteFrame;
              }
            }
          }

          this.setSpriteFrame({
            indicators,
            idx
          });
        }

        setSpriteFrame({
          indicators,
          idx
        }) {
          let node = indicators[idx];

          if (node) {
            let sprite = node.getComponent(SpriteComponent);

            if (sprite) {
              sprite.spriteFrame = this.spriteFrame;
            }
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "unSelectedSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomTiledAssembler.ts", ['cc'], function (exports) {
  var Sprite, cclegacy, Mat4, Color;
  return {
    setters: [function (module) {
      Sprite = module.Sprite;
      cclegacy = module.cclegacy;
      Mat4 = module.Mat4;
      Color = module.Color;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cb46ddDJ3tCI411ei7p6A1q", "CustomTiledAssembler", undefined);

      const m = new Mat4();
      let origin;
      let leftInner;
      let rightInner;
      let rightOuter;
      let bottomInner;
      let topInner;
      let topOuter;
      let tempRenderDataLength = 0;
      const tempRenderData = [];
      let QUAD_INDICES;

      function has9SlicedOffsetVertexCount(spriteFrame) {
        if (spriteFrame) {
          if (spriteFrame.insetTop > 0 || spriteFrame.insetBottom > 0 || spriteFrame.insetLeft > 0 || spriteFrame.insetRight > 0) {
            return 2; // left + right
          }
        }

        return 0;
      }

      const customTiled = exports('customTiled', {
        createData(sprite) {
          return sprite.requestRenderData();
        },

        updateRenderData(sprite) {
          const renderData = sprite.renderData;
          const frame = sprite.spriteFrame;

          if (!frame || !renderData) {
            return;
          }

          if (!renderData.vertDirty) {
            return;
          }

          const uiTrans = sprite.node._uiProps.uiTransformComp;
          const contentWidth = Math.abs(uiTrans.width);
          const contentHeight = Math.abs(uiTrans.height);
          const rect = frame.getRect();
          const leftWidth = frame.insetLeft;
          const rightWidth = frame.insetRight;
          const centerWidth = rect.width - leftWidth - rightWidth;
          const topHeight = frame.insetTop;
          const bottomHeight = frame.insetBottom;
          const centerHeight = rect.height - topHeight - bottomHeight;
          let sizableWidth = contentWidth - leftWidth - rightWidth;
          let sizableHeight = contentHeight - topHeight - bottomHeight;
          sizableWidth = sizableWidth > 0 ? sizableWidth : 0;
          sizableHeight = sizableHeight > 0 ? sizableHeight : 0;
          const hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          const vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          const offsetVertexCount = has9SlicedOffsetVertexCount(frame);
          const row = Math.ceil(vRepeat + offsetVertexCount);
          const col = Math.ceil(hRepeat + offsetVertexCount);
          renderData.dataLength = row * 2 * (col * 2);
          this.updateVerts(sprite, sizableWidth, sizableHeight, row, col);

          if (renderData.vertexCount !== row * col * 4) {
            sprite.renderEntity.colorDirty = true;
          } // update data property


          renderData.resize(row * col * 4, row * col * 6); // update index here

          if (globalThis.CC_JSB) {
            const indexCount = renderData.indexCount;
            this.createQuadIndices(indexCount);
            renderData.chunk.setIndexBuffer(QUAD_INDICES); // may can update color & uv here
            // need dirty

            this.updateWorldUVData(sprite); //this.updateColorLate(sprite);
          }

          renderData.updateRenderData(sprite, frame);
        },

        createQuadIndices(indexCount) {
          if (indexCount % 6 !== 0) {
            console.error('illegal index count!');
            return;
          }

          const quadCount = indexCount / 6;
          QUAD_INDICES = null;
          QUAD_INDICES = new Uint16Array(indexCount);
          let offset = 0;

          for (let i = 0; i < quadCount; i++) {
            QUAD_INDICES[offset++] = 0 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 3 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
          }
        },

        // dirty Mark
        // the real update uv is on updateWorldUVData
        updateUVs(sprite) {
          const renderData = sprite.renderData;
          renderData.vertDirty = true;
          sprite.markForUpdateRenderData();
        },

        fillBuffers(sprite, renderer) {
          const node = sprite.node;
          const renderData = sprite.renderData;
          const chunk = renderData.chunk;

          if (node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexAndUVData(sprite, chunk);
            renderData.vertDirty = false;
          } // forColor


          this.updateColorLate(sprite); // update indices

          const bid = chunk.bufferId;
          let vid = chunk.vertexOffset;
          const meshBuffer = chunk.meshBuffer;
          const ib = chunk.meshBuffer.iData;
          let indexOffset = meshBuffer.indexOffset;

          for (let i = 0; i < renderData.indexCount; i += 6) {
            ib[indexOffset++] = vid;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 2;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 3;
            ib[indexOffset++] = vid + 2;
            vid += 4;
            meshBuffer.indexOffset += 6;
          }

          meshBuffer.setDirty();
        },

        updateWorldUVData(sprite) {
          const renderData = sprite.renderData;
          const stride = renderData.floatStride;
          const dataList = renderData.data;
          const vData = renderData.chunk.vb;

          for (let i = 0; i < dataList.length; i++) {
            const offset = i * stride;
            vData[offset + 3] = dataList[i].u;
            vData[offset + 4] = dataList[i].v;
          }
        },

        // only for TS
        updateWorldVertexAndUVData(sprite, chunk) {
          const node = sprite.node;
          node.getWorldMatrix(m);
          const renderData = sprite.renderData;
          const stride = renderData.floatStride;
          const dataList = renderData.data;
          const vData = chunk.vb;
          const length = dataList.length;

          for (let i = 0; i < length; i++) {
            const x = dataList[i].x;
            const y = dataList[i].y;
            const z = dataList[i].z;
            let rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            const offset = i * stride;
            vData[offset] = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
            vData[offset + 1] = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
            vData[offset + 2] = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
          }

          this.updateWorldUVData(sprite);
        },

        updateVerts(sprite, sizableWidth, sizableHeight, row, col) {
          const uiTrans = sprite.node._uiProps.uiTransformComp;
          const renderData = sprite.renderData;
          const dataList = renderData.data;
          const frame = sprite.spriteFrame;
          const rect = frame.rect;
          const contentWidth = Math.abs(uiTrans.width);
          const contentHeight = Math.abs(uiTrans.height);
          const appx = uiTrans.anchorX * contentWidth;
          const appy = uiTrans.anchorY * contentHeight;
          const leftWidth = frame.insetLeft;
          const rightWidth = frame.insetRight;
          const centerWidth = rect.width - leftWidth - rightWidth;
          const topHeight = frame.insetTop;
          const bottomHeight = frame.insetBottom;
          const centerHeight = rect.height - topHeight - bottomHeight;
          const xScale = uiTrans.width / (leftWidth + rightWidth) > 1 ? 1 : uiTrans.width / (leftWidth + rightWidth);
          const yScale = uiTrans.height / (topHeight + bottomHeight) > 1 ? 1 : uiTrans.height / (topHeight + bottomHeight);
          let offsetWidth = 0;
          let offsetHeight = 0;

          if (centerWidth > 0) {
            /*
             * Because the float numerical calculation in javascript is not accurate enough,
             * there is an expected result of 1.0, but the actual result is 1.000001.
             */
            offsetWidth = Math.floor(sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : sizableWidth % centerWidth;
          } else {
            offsetWidth = sizableWidth;
          }

          if (centerHeight > 0) {
            offsetHeight = Math.floor(sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : sizableHeight % centerHeight;
          } else {
            offsetHeight = sizableHeight;
          } // 临时变量存前置数据


          tempRenderData.length = 0;
          tempRenderDataLength = Math.max(row + 1, col + 1);

          for (let i = 0; i < tempRenderDataLength; i++) {
            tempRenderData.push({
              x: 0,
              y: 0,
              z: 0,
              u: 0,
              v: 0,
              color: new Color()
            });
          }

          const offsetVertexCount = has9SlicedOffsetVertexCount(frame);

          if (offsetVertexCount === 0) {
            for (let i = 0; i < tempRenderDataLength; i++) {
              // for x
              if (i >= col) {
                tempRenderData[i].x = contentWidth - appx;
              } else {
                tempRenderData[i].x = -appx + i * centerWidth;
              } // for y


              if (i >= row) {
                tempRenderData[i].y = contentHeight - appy;
              } else {
                tempRenderData[i].y = -appy + i * centerHeight;
              }
            }
          } else {
            for (let i = 0; i < tempRenderDataLength; i++) {
              // for x
              if (i === 0) {
                tempRenderData[i].x = -appx;
              } else if (i === 1) {
                tempRenderData[i].x = -appx + leftWidth * xScale;
              } else if (i > 1 && i < col - 1) {
                if (centerWidth > 0) {
                  tempRenderData[i].x = -appx + leftWidth * xScale + centerWidth * (i - 1);
                } else {
                  tempRenderData[i].x = leftWidth + sizableWidth - appx;
                }
              } else if (i === col - 1) {
                tempRenderData[i].x = -appx + leftWidth * xScale + offsetWidth + centerWidth * (i - 2);
              } else if (i >= col) {
                tempRenderData[i].x = Math.min(leftWidth + sizableWidth + rightWidth, contentWidth) - appx;
              } // for y


              if (i === 0) {
                tempRenderData[i].y = -appy;
              } else if (i === 1) {
                tempRenderData[i].y = -appy + bottomHeight * yScale;
              } else if (i > 1 && i < row - 1) {
                if (centerHeight > 0) {
                  tempRenderData[i].y = -appy + bottomHeight * yScale + centerHeight * (i - 1);
                } else {
                  tempRenderData[i].y = bottomHeight + sizableHeight - appy;
                }
              } else if (i === row - 1) {
                tempRenderData[i].y = -appy + bottomHeight * yScale + offsetHeight + centerHeight * (i - 2);
              } else if (i >= row) {
                tempRenderData[i].y = Math.min(bottomHeight + sizableHeight + topHeight, contentHeight) - appy;
              }
            }
          } // 填datalist


          let x = 0;
          let x1 = 0;
          let y = 0;
          let y1 = 0;

          for (let yIndex = 0; yIndex < row; ++yIndex) {
            y = tempRenderData[yIndex].y;
            y1 = tempRenderData[yIndex + 1].y;

            for (let xIndex = 0; xIndex < col; ++xIndex) {
              x = tempRenderData[xIndex].x;
              x1 = tempRenderData[xIndex + 1].x; // 4 vertices in a rect

              const curIndex = 4 * (yIndex * col + xIndex); //left bottom

              dataList[curIndex].x = x;
              dataList[curIndex].y = y; //right bottom

              dataList[curIndex + 1].x = x1;
              dataList[curIndex + 1].y = y; //left top

              dataList[curIndex + 2].x = x;
              dataList[curIndex + 2].y = y1; //right top

              dataList[curIndex + 3].x = x1;
              dataList[curIndex + 3].y = y1;
            }
          }

          const rotated = frame.rotated;
          const uv = frame.uv;
          const uvSliced = frame.uvSliced; // origin at left bottom

          origin = uvSliced[0]; // on bottom edge

          leftInner = uvSliced[1];
          rightInner = uvSliced[2];
          rightOuter = uvSliced[3]; // on left edge

          bottomInner = uvSliced[4];
          topInner = uvSliced[8];
          topOuter = uvSliced[12];
          let coefU = 0;
          let coefV = 0;
          const hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          const vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          const tempXVerts = [];
          const tempYVerts = [];

          for (let yIndexUV = 0; yIndexUV < row; ++yIndexUV) {
            if (sizableHeight > centerHeight) {
              //if 9 sliced, we should exclude bottom border vertex (yIndex-1)
              const curYRectCount = offsetVertexCount > 0 ? yIndexUV : yIndexUV + 1; // The height of the rect which contains the left bottom vertex in current loop should be calculated in total height.

              if (sizableHeight >= curYRectCount * centerHeight) {
                coefV = 1;
              } else {
                coefV = vRepeat % 1;
              }
            } else {
              coefV = vRepeat;
            }

            for (let xIndexUV = 0; xIndexUV < col; ++xIndexUV) {
              if (sizableWidth > centerWidth) {
                //if 9 sliced, we should exclude left border vertex (xIndex-1)
                const curXRectCount = offsetVertexCount > 0 ? xIndexUV : xIndexUV + 1; // The width of the rect which contains the left bottom vertex in current loop should be calculated in total width.
                // Example: xIndex = 2 means that these is the third vertex, we should take the rect whose left bottom vertex is this
                // vertex into account, so the following condition should be comparing the values of content size and (2+1)*centerWidth.

                if (sizableWidth >= curXRectCount * centerWidth) {
                  coefU = 1;
                } else {
                  coefU = hRepeat % 1;
                }
              } else {
                coefU = hRepeat;
              }

              if (rotated) {
                if (offsetVertexCount === 0) {
                  //无九宫
                  tempXVerts[0] = bottomInner.u;
                  tempXVerts[1] = bottomInner.u;
                  tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  tempYVerts[0] = leftInner.v;
                  tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                  tempYVerts[2] = leftInner.v;
                } else {
                  //有九宫
                  if (yIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = origin.u;
                    tempXVerts[2] = bottomInner.u;
                  } else if (yIndexUV < row - 1) {
                    tempXVerts[0] = bottomInner.u;
                    tempXVerts[1] = bottomInner.u;
                    tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempXVerts[0] = topInner.u;
                    tempXVerts[1] = topInner.u;
                    tempXVerts[2] = topOuter.u;
                  }

                  if (xIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = leftInner.v;
                    tempYVerts[2] = origin.v;
                  } else if (xIndexUV < col - 1) {
                    tempYVerts[0] = leftInner.v;
                    tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                    tempYVerts[2] = leftInner.v;
                  } else if (xIndexUV === col - 1) {
                    tempYVerts[0] = rightInner.v;
                    tempYVerts[1] = rightOuter.v;
                    tempYVerts[2] = rightInner.v;
                  }
                }

                tempXVerts[3] = tempXVerts[2];
                tempYVerts[3] = tempYVerts[1];
              } else {
                if (offsetVertexCount === 0) {
                  //无九宫
                  tempXVerts[0] = leftInner.u;
                  tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                  tempXVerts[2] = leftInner.u;
                  tempYVerts[0] = bottomInner.v;
                  tempYVerts[1] = bottomInner.v;
                  tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                } else {
                  //有九宫
                  if (xIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = leftInner.u;
                    tempXVerts[2] = origin.u;
                  } else if (xIndexUV < col - 1) {
                    tempXVerts[0] = leftInner.u;
                    tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                    tempXVerts[2] = leftInner.u;
                  } else if (xIndexUV === col - 1) {
                    tempXVerts[0] = rightInner.u;
                    tempXVerts[1] = rightOuter.u;
                    tempXVerts[2] = rightInner.u;
                  }

                  if (yIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = origin.v;
                    tempYVerts[2] = bottomInner.v;
                  } else if (yIndexUV < row - 1) {
                    tempYVerts[0] = bottomInner.v;
                    tempYVerts[1] = bottomInner.v;
                    tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempYVerts[0] = topInner.v;
                    tempYVerts[1] = topInner.v;
                    tempYVerts[2] = topOuter.v;
                  }
                }

                tempXVerts[3] = tempXVerts[1];
                tempYVerts[3] = tempYVerts[2];
              } // it represents the left bottom corner vertex of a rect


              const curIndex = 4 * (yIndexUV * col + xIndexUV); // lb

              dataList[curIndex].u = tempXVerts[0];
              dataList[curIndex].v = tempYVerts[0]; // rb

              dataList[curIndex + 1].u = tempXVerts[1];
              dataList[curIndex + 1].v = tempYVerts[1]; // lt

              dataList[curIndex + 2].u = tempXVerts[2];
              dataList[curIndex + 2].v = tempYVerts[2]; // rt

              dataList[curIndex + 3].u = tempXVerts[3];
              dataList[curIndex + 3].v = tempYVerts[3];
            }
          }
        },

        // fill color here
        updateColorLate(sprite) {
          const renderData = sprite.renderData;
          const vData = renderData.chunk.vb;
          const stride = renderData.floatStride;
          const vertexCount = renderData.vertexCount;
          let colorOffset = 5;
          const color = sprite.color;
          const colorR = color.r / 255;
          const colorG = color.g / 255;
          const colorB = color.b / 255;
          const colorA = sprite.node._uiProps.opacity;

          for (let i = 0; i < vertexCount; i++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        },

        // Too early
        updateColor(sprite) {}

      });
      const originalGetAssembler = Sprite.Assembler.getAssembler;

      class CustomTiledAssembler {
        static custom() {
          Sprite.Assembler.getAssembler = function (sprite) {
            if (sprite.type == Sprite.Type.TILED) {
              return customTiled;
            }

            return originalGetAssembler.bind(this)(sprite);
          };
        }

        static restore() {
          Sprite.Assembler.getAssembler = originalGetAssembler;
        }

      }

      exports('default', CustomTiledAssembler);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomTypeShare.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, AudioClip, AudioSource, Event, _decorator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      Event = module.Event;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _dec4, _class4;

      cclegacy._RF.push({}, "a9b9bNRtfxJ4ZzdD4GzCwFi", "CustomTypeShare", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CustomAudioClip = exports('CustomAudioClip', (_dec = ccclass('CustomAudioClip'), _dec2 = property({
        type: AudioClip
      }), _dec3 = property({
        type: AudioSource,
        visible: false
      }), _dec(_class = (_class2 = class CustomAudioClip {
        constructor() {
          _initializerDefineProperty(this, "isMusic", _descriptor, this);

          _initializerDefineProperty(this, "isEffect", _descriptor2, this);

          _initializerDefineProperty(this, "destroyedOnSwitchMode", _descriptor3, this);

          _initializerDefineProperty(this, "soundId", _descriptor4, this);

          _initializerDefineProperty(this, "maxCount", _descriptor5, this);

          _initializerDefineProperty(this, "ignoreCheckMaxChannel", _descriptor6, this);

          _initializerDefineProperty(this, "audioFile", _descriptor7, this);

          _initializerDefineProperty(this, "audioSource", _descriptor8, this);

          this.audioSourcePool = [];
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isMusic", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isEffect", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "destroyedOnSwitchMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 1;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ignoreCheckMaxChannel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "audioFile", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "audioSource", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      let CustomEvent = exports('CustomEvent', (_dec4 = ccclass('CustomEvent'), _dec4(_class4 = class CustomEvent extends Event {
        constructor(name, bubbles, details) {
          super(name, bubbles);
          this.details = null;
          this.details = details;
        }

      }) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore1975.ts", ['cc', './gfDataStore.ts'], function (exports) {
  var cclegacy, gfDataStore;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0ca41iUzNVBDqanVCmFseKZ", "DataStore1975", undefined);

      class DataStore1975 extends gfDataStore {
        constructor() {
          super();
          this.sceneKind = void 0;
          gfDataStore.instance = this;
        }

        getSceneKind() {
          return this.sceneKind;
        }

        setSceneKind(sceneKind) {
          this.sceneKind = sceneKind;
        }

      }

      exports('default', DataStore1975);
      DataStore1975.instance = null;
      DataStore1975.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class DebugViewRuntimeControl extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "compositeModeToggle", _descriptor, this);

          _initializerDefineProperty(this, "singleModeToggle", _descriptor2, this);

          _initializerDefineProperty(this, "EnableAllCompositeModeButton", _descriptor3, this);

          this._single = 0;
          this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          this.compositeModeToggleList = [];
          this.singleModeToggleList = [];
          this.miscModeToggleList = [];
          this.textComponentList = [];
          this.labelComponentList = [];
          this.textContentList = [];
          this.hideButtonLabel = void 0;
          this._currentColorIndex = 0;
          this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
        }

        start() {
          // get canvas resolution
          const canvas = this.node.parent.getComponent(Canvas);

          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }

          const uiTransform = this.node.parent.getComponent(UITransform);
          const halfScreenWidth = uiTransform.width * 0.5;
          const halfScreenHeight = uiTransform.height * 0.5;
          let x = -halfScreenWidth + halfScreenWidth * 0.1,
              y = halfScreenHeight - halfScreenHeight * 0.1;
          const width = 200,
                height = 20; // new nodes

          const miscNode = this.node.getChildByName('MiscMode');
          const buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          const titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles'; // title

          for (let i = 0; i < 2; i++) {
            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;
            const labelComponent = newLabel.getComponent(Label);
            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            labelComponent.color = Color.WHITE;
            labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = labelComponent;
          }

          y -= height; // single

          let currentRow = 0;

          for (let i = 0; i < this.strSingle.length; i++, currentRow++) {
            if (i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }

            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            const textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[i] = newNode;
          }

          x += width; // buttons

          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          const changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          const HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent; // misc

          y -= 40;

          for (let i = 0; i < this.strMisc.length; i++) {
            const newNode = instantiate(this.compositeModeToggle);
            newNode.setPosition(x, y - height * i, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = miscNode;
            const textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strMisc[i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            const toggleComponent = newNode.getComponent(Toggle);
            toggleComponent.isChecked = i ? true : false;
            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);
            this.miscModeToggleList[i] = newNode;
          } // composite


          y -= 150;

          for (let i = 0; i < this.strComposite.length; i++) {
            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;
            newNode.setPosition(x, y - height * i, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.compositeModeToggle.parent;
            const textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strComposite[i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);
            this.compositeModeToggleList[i] = newNode;
          }
        }

        isTextMatched(textUI, textDescription) {
          let tempText = new String(textUI);
          const findIndex = tempText.search('>');

          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        }

        toggleSingleMode(toggle) {
          const debugView = director.root.debugView;
          const textComponent = toggle.getComponentInChildren(RichText);

          for (let i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        }

        toggleCompositeMode(toggle) {
          const debugView = director.root.debugView;
          const textComponent = toggle.getComponentInChildren(RichText);

          for (let i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        }

        toggleLightingWithAlbedo(toggle) {
          const debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        }

        toggleCSMColoration(toggle) {
          const debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        }

        enableAllCompositeMode(button) {
          const debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);

          for (let i = 0; i < this.compositeModeToggleList.length; i++) {
            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);
            toggleComponent.isChecked = true;
          }

          let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        }

        hideUI(button) {
          const titleNode = this.node.getChildByName('Titles');
          const activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        }

        changeTextColor(button) {
          this._currentColorIndex++;

          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }

          for (let i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }

          for (let i = 0; i < this.labelComponentList.length; i++) {
            this.labelComponentList[i].color = this.color[this._currentColorIndex];
          }
        }

        onLoad() {}

        update(deltaTime) {}

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Drill1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfActionHelper.ts', './Config1975.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfBaseFish.ts', './gfReferenceManager.ts', './gfEffectLayer.ts', './PoolManager1975.ts', './gfGameScheduler.ts', './gfBaseConfig.ts', './TurtleSkillEffect1975.ts', './EventsCode1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Collider2D, Contact2DType, BoxCollider2D, UITransform, misc, tween, isValid, v3, gfEventEmitter, fadeIn, fadeOut, Config1975, gfBaseEvents, getRotation, gfBaseFish, gfReferenceManager, gfEffectLayer, PoolManager1975, gfGameScheduler, gfBaseConfig, TurtleSkillEffect1975, EventsCode1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      UITransform = module.UITransform;
      misc = module.misc;
      tween = module.tween;
      isValid = module.isValid;
      v3 = module.v3;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      PoolManager1975 = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      TurtleSkillEffect1975 = module.TurtleSkillEffect1975;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "32bd0z8yEtM7JnMcZND+8SM", "Drill1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const CONFIG_BULLET = {
        INITIAL_SPEED: 1500,
        MOVE_CENTER_SPEED: 400,
        FINAL_SPEED: 500,
        SPEED_STATE_DIS_SPARK: 560,
        SPEED_STATE_ROTATE: 550,
        ACCELERATION: 0.01,
        ACC_HIT_WALL: 0.05,
        ACC_HIT_FISH: 0.003,
        ANGLE: [45, 135, 225, 315]
      };
      const STATE_BULLET = {
        NORMAL_BOUNCE: 1,
        MOVE_OUT: 2,
        DROP_TO_CENTER: 3,
        BIG_EXPLOSION: 4
      };
      const SCENE_BOX_TYPE = {
        RIGHT: "RIGHT",
        LEFT: "LEFT",
        TOP: "TOP",
        BOTTOM: "BOTTOM"
      };
      let Drill1975 = exports('Drill1975', (_dec = ccclass('Drill1975'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = class Drill1975 extends TurtleSkillEffect1975 {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mainSpine", _descriptor, this);

          _initializerDefineProperty(this, "boostSpine", _descriptor2, this);

          this._dataCatchFish = null;
          this._vectorX = 0;
          this._vectorY = 0;
          this._currentState = 0;
          this._countCircle = 0;
          this._lastPos = null;
          this._isFlying = false;
          this._listFish = [];
          this._currentSpeed = CONFIG_BULLET.INITIAL_SPEED;
          this._countBounce = 0;
          this._MAX_BOUNCE = 6;
          this._cb = void 0;
        }

        onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.boostSpine.node.active = false;
        }

        runAnimationSequence(data, callBack) {
          const {
            ListFish,
            mainPoint,
            fishAngle
          } = data;
          this._dataCatchFish = data;
          this._listFish = ListFish;
          this._cb = callBack; // this.setDataListFish(ListFish);

          this.node.getComponent(BoxCollider2D).enabled = false;
          const startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          this.node.setPosition(startPos.x, startPos.y);
          this.node.angle = fishAngle;
          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          this.handleHitWall(STATE_BULLET.NORMAL_BOUNCE);
          this.playAnimation();
        }

        playAnimation() {
          tween(this.node).call(() => {
            // SOUND_DRILL_TRANS_FORM
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_DRILL_TRANS_FORM);
            this.turtleSpine.setAnimation(0, "transform_drill", false);
            this.turtleSpine.setCompleteListener(trackEntry => {
              if (trackEntry.animation.name === 'transform_drill') {
                this.turtleSpine.node.active = false;
              }
            });
            this.mainSpine.setAnimation(0, "transform", false);
            this.mainSpine.addAnimation(0, "idle", true);
          }).delay(1.).parallel(tween().then(fadeIn(0.1)), tween().call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_DRILL_FLY);
            this.node.getComponent(BoxCollider2D).enabled = true;
            this._isFlying = true;
          })).start();
        }

        update(dt) {
          if (this._isFlying) {
            if (this._lastPos) {
              this.updatePositionBullet(dt);
              this.node.angle = getRotation(this.node.getPosition(), this._lastPos);
            }

            this._lastPos = this.node.getPosition();
          }
        }

        handleHitWall(nextState) {
          if (nextState == this._currentState) return;

          switch (nextState) {
            case STATE_BULLET.MOVE_OUT:
              this.playMoveOut();
              break;
          }

          this._currentState = nextState;
        }

        calculateSpeedAndState() {
          let nextState = this._currentState;
          const curSpeed = this._currentSpeed;

          switch (nextState) {
            case STATE_BULLET.NORMAL_BOUNCE:
              if (this._countBounce >= this._MAX_BOUNCE) {
                nextState = STATE_BULLET.MOVE_OUT;
              }

              break;
          }

          return {
            nextState,
            curSpeed
          };
        }

        updatePositionBullet(dt) {
          const {
            nextState,
            curSpeed
          } = this.calculateSpeedAndState();
          const delta = dt * Math.max(curSpeed, CONFIG_BULLET.FINAL_SPEED);
          let isHitWall = false;
          let {
            x,
            y
          } = this.node.position;
          const {
            Width,
            Height
          } = Config1975.instance.realSize;
          const sceneBox = {
            Left: Width / -2,
            Bottom: Height / -2,
            Right: Width / 2,
            Top: Height / 2
          };

          const checkWallCollision = (pos, min, max, vector, type) => {
            if (this._countBounce > this._MAX_BOUNCE) return {
              pos,
              vector
            };

            if (pos > max) {
              vector *= -1;
              pos = max;
              isHitWall = this.onShakeScreen(type);
            } else if (pos < min) {
              vector *= -1;
              pos = min;
              isHitWall = this.onShakeScreen(type);
            }

            return {
              pos,
              vector
            };
          };

          ({
            pos: x,
            vector: this._vectorX
          } = checkWallCollision(x, sceneBox.Left, sceneBox.Right, this._vectorX, SCENE_BOX_TYPE.RIGHT));
          ({
            pos: y,
            vector: this._vectorY
          } = checkWallCollision(y, sceneBox.Bottom, sceneBox.Top, this._vectorY, SCENE_BOX_TYPE.TOP));

          if (isHitWall && this._countBounce <= this._MAX_BOUNCE) {
            const hitPosition = this.node.getPosition().clone();
            PoolManager1975.instance.createDrillFxExplosion({
              position: hitPosition
            });
            this._countBounce++;
            this._currentSpeed -= CONFIG_BULLET.INITIAL_SPEED * CONFIG_BULLET.ACC_HIT_WALL;
            this.handleHitWall(nextState);
          }

          x += this._vectorX * delta;
          y += this._vectorY * delta;
          this.node.setPosition(x, y, 0);
        }

        onShakeScreen(sceneBoxType) {
          const configShakeStyle = Config1975.instance.SHAKE_SCREEN_STYLE;
          const isHorizontal = sceneBoxType == SCENE_BOX_TYPE.LEFT || sceneBoxType == SCENE_BOX_TYPE.RIGHT;
          const shakeStyle = isHorizontal ? configShakeStyle.HORIZONTAL : configShakeStyle.VERTICAL;
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_DRILL_IMPACT);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.1,
            amplitude: 4,
            countStep: 1,
            shakeStyle: shakeStyle
          });
          return true;
        }

        onCollisionEnter(self, other) {
          if (!this._listFish) return;
          const {
            DeskStation,
            BulletMultiple
          } = this._dataCatchFish;
          let fish = other.getComponent(gfBaseFish);
          if (!fish || !isValid(fish)) return;

          for (let index = this._listFish.length - 1; index >= 0; index--) {
            const elm = this._listFish[index];

            if (elm.FishID === fish.getId()) {
              const data = {
                FishKind: elm.FishKind,
                DeskStation: DeskStation,
                FishID: elm.FishID,
                GoldReward: elm.GoldReward,
                isSkill: true,
                skipUpdateWallet: true,
                isDie: true,
                isLuckyFish: elm.isLuckyFish,
                BulletMultiple: BulletMultiple
              };
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH, data);

              this._listFish.splice(index, 1);
            }
          }
        }

        playMoveOut() {
          tween(this.node).call(() => {
            this._isFlying = false;
          }).then(this.playDrift()).then(this.playDropToCenter()).then(this.playBigExplosion()).start();
        }

        playDrift() {
          return tween(this.node).parallel(tween().to(2., {
            position: v3(0, 0, 0),
            angle: -270
          }, {
            easing: "backOut"
          }), tween().to(1., {
            scale: v3(1.5, 1.5, 1)
          }, {
            easing: "sineOut"
          }).to(1., {
            scale: v3(1.0, 1.0, 1)
          }, {
            easing: "sineIn"
          })).call(() => {
            this.boostSpine.node.active = true;
            this.boostSpine.setAnimation(0, "transform", false);
          }).delay(.5).to(.2, {
            position: v3(0, 1000, 0),
            scale: v3(2, 2, 1)
          }).delay(1.);
        }

        playDropToCenter() {
          return tween(this.node).call(() => {// this.boostSpine.node.active = true;
            // this.node.setPosition(v3(0, 1000))
            // this.node.angle = -90;
            // this.node.setScale(3., 3., 1)
          });
        }

        playBigExplosion() {
          return tween(this.node).call(() => {
            this.mainSpine.node.active = false;
            this.turtleSpine.node.active = false;
            this.boostSpine.node.active = false;
            PoolManager1975.instance.createDrillBigExplosion();
          }).to(.2, {
            position: v3(0, 0, 0),
            scale: v3(1., 1., 1)
          }).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_STOP_DRILL_FLY);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10,
              countStep: 4,
              shakeStyle: Config1975.instance.SHAKE_SCREEN_STYLE.FULL
            });
            this._dataCatchFish.ListFish = this._listFish;
            this.playEffectCatchListFish(this._dataCatchFish);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_DRILL_SKILL);
          }).repeat(4, tween().to(.1, {
            position: v3(0, 40, 0),
            scale: v3(1.05, 1.05, 1)
          }).to(.1, {
            position: v3(0, 0, 0),
            scale: v3(1., 1., 1)
          })).then(fadeOut(.2)).call(() => {
            if (typeof this._cb === "function") {
              this._cb();
            }
          }).delay(1).call(() => {
            this._listFish.length = 0;
            this.node.destroy();
          });
        }

        playEffectCatchListFish(data) {
          const {
            TotalReward,
            DeskStation,
            BulletMultiple,
            fishKind
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const effectComponent = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          data.delayFishDie = 1.0;
          const {
            Width,
            Height
          } = gfBaseConfig.instance.AppSize;
          data.mainPoint = v3(Width / 2, Height / 2, 0);
          effectComponent.catchListFishEffect(data, () => {
            gfGameScheduler.scheduleOnce(() => {
              effectComponent.onPlayBigWinWheelEffect({
                player,
                GoldReward: TotalReward,
                bet: BulletMultiple,
                fishKind
              });
            }, 2.0);
          });
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boostSpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eDebugStats.ts", ['cc', './eToggle.ts'], function (exports) {
  var cclegacy, isDisplayStats, setDisplayStats, _decorator, eToggle;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      isDisplayStats = module.isDisplayStats;
      setDisplayStats = module.setDisplayStats;
      _decorator = module._decorator;
    }, function (module) {
      eToggle = module.eToggle;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "1853dIvcRZJ67fOy8tGnjKQ", "eDebugStats", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eDebugStats = exports('eDebugStats', ccclass(_class = class eDebugStats extends eToggle {
        constructor(...args) {
          super(...args);
          this.callback = void 0;
          this.eventData = void 0;
        }

        onLoad() {
          this.callback = this.toggleStats.bind(this);
          this.toggle.isChecked = isDisplayStats();
        }

        toggleStats() {
          setDisplayStats(this.toggle.isChecked);
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCString, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCString = module.CCString;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d9791JrPBZDmJf4nES8Lg6A", "eDialog", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eDialog = exports('eDialog', (_dec = property(CCString), ccclass(_class = (_class2 = class eDialog extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "dialogName", _descriptor, this);
        }

        onLoad() {
          this.hide();
        }

        show(data) {
          this.node.active = true;
        }

        hide() {
          this.node.active = false;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dialogName", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "defaultDialog";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eDialogController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eEventEmitter.ts', './eDialog.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, director, instantiate, eEventEmitter, eDialog;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
      instantiate = module.instantiate;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eDialog = module.eDialog;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "532b7YtSWRBLqW5+OtNLDbQ", "eDialogController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eDialogController = exports('eDialogController', (_dec = property({
        type: [Prefab]
      }), ccclass(_class = (_class2 = class eDialogController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "prefabDialog", _descriptor, this);

          this._lstPopup = new Map();
        }

        onLoad() {
          // this.node.removeFromParent();
          director.addPersistRootNode(this.node);
          this.node.setSiblingIndex(100);
          this.prefabDialog.forEach(dialog => {
            this.addDialog(dialog);
          });
          this.closeAll();
          this.initEvents();
        }

        initEvents() {
          eEventEmitter.getInstance().registerEvent("OPEN_POPUP", this.openPopupByName.bind(this));
        }

        addDialog(dialogPrefab) {
          const dialog = instantiate(dialogPrefab);
          dialog.parent = this.node;
          const compDialog = dialog.getComponent(eDialog);

          this._lstPopup.set(compDialog.dialogName, compDialog);
        }

        openPopupByName(name, data) {
          const dialog = this._lstPopup.get(name);

          dialog.show(data);
        }

        closeAll() {
          this._lstPopup.forEach(dialog => {
            dialog.hide();
          });
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabDialog", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eDragUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, UITransform, _decorator, Component, Node;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      _decorator = module._decorator;
      Component = module.Component;
      Node = module.Node;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "eec86NcQJpJypUXh9L2XNlU", "eDragUI", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eDragUI = exports('eDragUI', (_dec = ccclass('Draggable'), _dec2 = property(UITransform), _dec(_class = (_class2 = class eDragUI extends Component {
        constructor(...args) {
          super(...args);
          this.deltaY = 0;
          this.originalY = 0;
          this.originalX = 0;
          this.dragging = false;

          _initializerDefineProperty(this, "dragHolder", _descriptor, this);
        }

        onLoad() {
          this.node.on(Node.EventType.TOUCH_START, this._onDragStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
          this.node.on(Node.EventType.TOUCH_END, this._onDragEnd, this);
        }

        _onDragStart(event) {
          this.dragging = true;
          this.originalX = this.node.position.x;
          this.originalY = this.node.position.y;
          this.deltaY = event.getLocationY() - this.node.position.y;
        }

        _onDragMove(event) {
          if (!this.dragging) return;
          this.dragging = true;
          let delta = event.getUIDelta();
          const fullHeight = this.dragHolder.height;
          let minY = 0;
          let maxY = fullHeight;
          let moveY = this.node.position.y + delta.y;

          if (moveY < minY) {
            moveY = minY;
          } else if (moveY > maxY) {
            moveY = maxY;
          }

          this.node.setPosition(this.originalX, moveY);
        }

        _onDragEnd(event) {
          this.dragging = false;
        }

        onDestroy() {
          if (this.node) {
            this.node.off(Node.EventType.TOUCH_START, this._onDragStart, this);
            this.node.off(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
            this.node.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eDupLogin.ts", ['cc', './eItem.ts'], function (exports) {
  var cclegacy, director, _decorator, eItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      _decorator = module._decorator;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e1b95IEvYVN3aZDwfpun3jP", "eDupLogin", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eDupLogin = exports('eDupLogin', (_dec = ccclass('eDupLogin'), _dec(_class = class eDupLogin extends eItem {
        onLoad() {
          this.callback = this.dupLogin.bind(this);
        }

        dupLogin() {
          director.emit('LOGGED_IN_OTHER_DEVICE');
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eEventEmitter.ts", ['cc', './events.mjs_cjs=&original=.js', './events.js'], function (exports) {
  var cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3a262ZDsIBFjprm89mkwgg3", "eEventEmitter", undefined);

      class eEventEmitter {
        constructor() {
          this._emitter = null;

          if (eEventEmitter._instance) {
            throw new Error("Error:use getInstance() instead");
          }

          eEventEmitter._instance = this;
          this._emitter = new _cjsExports();

          this._emitter.setMaxListeners(100);
        }

        static getInstance() {
          if (!eEventEmitter._instance) {
            eEventEmitter._instance = new eEventEmitter();
          }

          return eEventEmitter._instance;
        }

        emit(...args) {
          this._emitter.emit(...args);
        }

        registerEvent(event, listener) {
          this._emitter.on(event, listener);
        }

        registerOnce(event, listener) {
          this._emitter.once(event, listener);
        }

        removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        }

        destroy() {
          this._emitter.removeAllListeners();

          this._emitter = null;
          eEventEmitter._instance = null;
        }

      }

      exports('eEventEmitter', eEventEmitter);
      eEventEmitter._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLayer1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEffectLayer.ts', './gfReferenceManager.ts', './gfEventEmitter.ts', './Config1975.ts', './gfUtilities.ts', './gfBaseEvents.ts', './Drill1975.ts', './utils.ts', './BombFx1975.ts', './VortexEffect1975.ts', './WarningSkill1975.ts', './gfPoolManager.ts', './gfBaseConfig.ts', './NodePoolConfig1975.ts', './gfActionHelper.ts', './EventsCode1975.ts', './LightningChainEffect1975.ts', './gf3DParticle.ts', './PoolManager1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Vec2, Prefab, _decorator, instantiate, UITransform, v3, tween, v2, UIOpacity, gfEffectLayer, gfReferenceManager, gfEventEmitter, Config1975, registerEvent, SetZIndex, getSkillTypeBySkillID, getPositionInOtherNode, formatCoin, gfBaseEvents, Drill1975, getRandomInt, BombFx1975, VortexEffect1975, WarningSkill1975, gfPoolManager, gfBaseConfig, NodePoolConfig1975, v3f, fadeOut, stopAllActions, fadeIn, moveTo, bezierTo, EventsCode1975, LightningChainEffect1975, gf3DParticle, PoolManager1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      v2 = module.v2;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
      getPositionInOtherNode = module.getPositionInOtherNode;
      formatCoin = module.formatCoin;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      Drill1975 = module.Drill1975;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      BombFx1975 = module.BombFx1975;
    }, function (module) {
      VortexEffect1975 = module.VortexEffect1975;
    }, function (module) {
      WarningSkill1975 = module.WarningSkill1975;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      NodePoolConfig1975 = module.default;
    }, function (module) {
      v3f = module.v3f;
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      bezierTo = module.bezierTo;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      LightningChainEffect1975 = module.LightningChainEffect1975;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      PoolManager1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "ac828IJNYFLdrT3ZpVNxGmr", "EffectLayer1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const SMALL_EXPLOSION_SIZE = new Vec2(230, 230);
      const MIN_SCALE_SMALL_EXPLOSION = 0.25;
      const MAX_SCALE_SMALL_EXPLOSION = 1.5;
      let EffectLayer1975 = exports('EffectLayer1975', (_dec = ccclass('EffectLayer1975'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec(_class = (_class2 = class EffectLayer1975 extends gfEffectLayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "drillFx", _descriptor, this);

          _initializerDefineProperty(this, "vortexEffect", _descriptor2, this);

          _initializerDefineProperty(this, "warningSkill", _descriptor3, this);

          _initializerDefineProperty(this, "lightningChainEffect", _descriptor4, this);

          _initializerDefineProperty(this, "leaderFishExplode", _descriptor5, this);
        }

        initEvents() {
          super.initEvents();
          registerEvent(EventsCode1975.EFFECT_LAYER.PLAY_WARNING_SKILL, this.playWarningSkill, this);
          registerEvent(EventsCode1975.LEADER_FISH.CATCH_FISH_BY_LIGHTNING_CHAIN, this.catchListFishByLightningChain, this);
          registerEvent(EventsCode1975.LEADER_FISH.CREATE_EXPLODE_LEADER_FISH, this.playExplodeLeaderFish, this);
        }

        playEffectSpecialFish(data) {
          const {
            SkillID
          } = data;
          const skillConfig = Config1975.instance.SKILL_CONFIG;
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, data);
          data.skipUpdateWallet = true;
          data.isSkill = true;

          switch (SkillID) {
            case skillConfig.FISH_BOOM.SkillID:
              this.playBombEffect(data);
              break;

            case skillConfig.VORTEX.SkillID:
              this.playVortexEffect(data);
              break;

            case skillConfig.DRILL.SkillID:
              this.playDrillEffect(data);
              break;
          }
        }

        playVortexEffect(data) {
          const {
            mainPoint,
            TotalReward,
            BulletMultiple,
            fishKind,
            DeskStation
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const vortexEffect = instantiate(this.vortexEffect);
          const vortexEffectComp = vortexEffect.getComponent(VortexEffect1975);
          this.node.addChild(vortexEffect);

          this._listSkillItem.push(vortexEffect);

          SetZIndex(vortexEffect, -1);
          let posConvert = this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          vortexEffect.setPosition(posConvert.x, posConvert.y);
          vortexEffectComp.playAnimation(data, () => {
            this.onPlayBigWinWheelEffect({
              player,
              GoldReward: TotalReward,
              bet: BulletMultiple,
              fishKind
            });
          });
        }

        playBombEffect(data) {
          const {
            TotalReward,
            DeskStation,
            BulletMultiple,
            mainPoint,
            fishKind,
            fishAngle
          } = data;
          const itemBomb = instantiate(this.itemBomb);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          const itemBombComp = itemBomb.getComponent(BombFx1975);
          SetZIndex(itemBomb, 0);
          let posConvert = this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          itemBomb.setPosition(posConvert.x, posConvert.y);
          data.delayFishDie = 0.7;
          data.speedDie = 2500;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          itemBombComp.playAnimation(data, () => {
            this.catchListFishEffect(data, () => {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward: TotalReward,
                bet: BulletMultiple,
                fishKind
              });
            });
          });
        }

        playDrillEffect(data) {
          const drillBullet = instantiate(this.drillFx);
          const drillBulletComp = drillBullet.getComponent(Drill1975);
          this.node.addChild(drillBullet);

          this._listSkillItem.push(drillBullet);

          SetZIndex(drillBullet, 0);
          drillBulletComp.runAnimationSequence(data);
        }

        playWarningSkill(skillID) {
          const warningSkill = instantiate(this.warningSkill);
          this.node.addChild(warningSkill);

          this._listSkillItem.push(warningSkill);

          SetZIndex(warningSkill, 0);
          warningSkill.setPosition(v3(0, 0, 0));
          const warningSkillComp = warningSkill.getComponent(WarningSkill1975);
          warningSkillComp.showWarning(skillID);
        } // extend this function to handle effect explosion can scale by fish kind


        playRewardEffect(rewardData, isPlayLabelCoin = true) {
          if (!rewardData.GoldReward) {
            return;
          }

          rewardData.isPlayLabelCoin = isPlayLabelCoin;
          let {
            GoldReward,
            fishPos,
            SkillID,
            FishKind,
            fishKind,
            skipUpdateWallet,
            isSkill,
            BulletMultiple,
            DeskStation,
            isSmallLeaderFish
          } = rewardData;

          if (fishKind && FishKind == undefined) {
            FishKind = fishKind;
          }

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else {
            const {
              ONE_SHOT_GUN
            } = gfBaseConfig.instance.SKILL_TYPE;

            if (getSkillTypeBySkillID(SkillID) == ONE_SHOT_GUN) {
              fishPos = this.getRandomPositionOutScreenByGunAngle(DeskStation);
            } else {
              fishPos = this.getRandomPositionOutScreen();
            }
          }

          const isBigWin = GoldReward >= BulletMultiple * gfBaseConfig.instance.BIG_WIN_RATIO.BIG_WIN;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const endPos = getPositionInOtherNode(this.node, player.avatar.node);
          rewardData.beganPos = fishPos;
          rewardData.endPos = endPos;
          rewardData.player = player;
          rewardData.delayTime = 0;

          if (isSkill) {
            // add more data for effect explosion can scale by fish kind
            rewardData.delayTime = 0.8;
            this.playFXCatchFishBySkill(SkillID, {
              fishPos,
              FishKind
            }, rewardData);
          } else if (isBigWin && !skipUpdateWallet) {
            const canShowBigWin = this.wheelController.canShowBigWinWheel(player.index);
            rewardData.skipUpdateWallet = canShowBigWin;
            gfPoolManager.instance.createBigExplosion({
              position: fishPos
            });
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10
            });
            this.playParticleEffect(rewardData);

            if (canShowBigWin) {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward,
                bet: BulletMultiple,
                FishKind
              });
            }
          }

          this.onPlayRewardEffect(rewardData);
        }

        playFXCatchFishBySkill(SkillID, fishData, rewardData) {
          let effect;

          if (SkillID === Config1975.instance.SKILL_CONFIG.DRILL.SkillID) {
            effect = PoolManager1975.instance.createDrillImpact({
              position: fishData.fishPos
            });
          } else {
            effect = gfPoolManager.instance.createSmallExplosion({
              position: fishData.fishPos
            });
          }

          if (NodePoolConfig1975.instance.getFishConfig(fishData.FishKind)) {
            const visibleSize = NodePoolConfig1975.instance.getFishConfig(fishData.FishKind).visibleSize;
            const scaleX = visibleSize.x / SMALL_EXPLOSION_SIZE.x;
            const scaleY = visibleSize.y / SMALL_EXPLOSION_SIZE.y;
            const maxScale = Math.max(scaleX, scaleY);
            const finalScale = Math.max(MIN_SCALE_SMALL_EXPLOSION, Math.min(MAX_SCALE_SMALL_EXPLOSION, maxScale));
            effect.setScale(finalScale, finalScale);
            this.playParticleEffectByFishKind(rewardData);
          }
        }

        playLabelCoinEffect(data) {
          const {
            beganPos,
            player,
            GoldReward,
            SkillID
          } = data;

          if (SkillID && SkillID == Config1975.instance.SKILL_CONFIG.VORTEX.SkillID) {
            const label = gfPoolManager.instance.getLabelCoin(player.isMe);
            this.node.addChild(label.node);
            SetZIndex(label.node, Config1975.instance.TOP_Z_INDEX.COIN_LABEL);
            label.node.setPosition(beganPos);
            label.setString(`+${formatCoin(GoldReward)}`);
            label.node.scale = v3f(0);
            const posLabel = label.node.position;
            tween(label.node).to(0.1, {
              scale: v3f(0.8)
            }).parallel(tween().to(0.3, {
              position: v3(posLabel.x, posLabel.y + 50, 0)
            }), tween().delay(0.2).then(fadeOut(0.1))).call(() => {
              label.returnPool();
            }).start();
          } else {
            super.playLabelCoinEffect(data);
          }
        }

        catchListFishByLightningChain(data) {
          const {
            TotalReward,
            DeskStation,
            FishID,
            ListFish,
            SkillID,
            BulletMultiple,
            fishKind
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.addGoldReward(TotalReward);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, data);
          const lightningChainEffect = instantiate(this.lightningChainEffect);
          this.node.addChild(lightningChainEffect);

          this._listSkillItem.push(lightningChainEffect);

          SetZIndex(lightningChainEffect, 0);
          const lightningChainEffectComp = lightningChainEffect.getComponent(LightningChainEffect1975);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_FISH_LANTERN);
          lightningChainEffectComp.playAnimation(data, () => {
            this.catchListFishEffect(data, null);
          });
        }

        playExplodeLeaderFish(fishPosition) {
          const leaderFishExplode = instantiate(this.leaderFishExplode);
          this.node.addChild(leaderFishExplode);
          let posConvert = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPosition);
          leaderFishExplode.setPosition(posConvert);

          this._listSkillItem.push(leaderFishExplode);

          SetZIndex(leaderFishExplode, 0);
        }

        playParticleEffectByFishKind(data) {
          const {
            DeskStation,
            beganPos,
            GoldReward,
            fishKind
          } = data;

          if (GoldReward === 0) {
            return;
          }

          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
          const particle = instantiate(this.particle3D).getComponent(gf3DParticle);
          particle.node.parent = this.node;
          SetZIndex(particle.node, Config1975.instance.TOP_Z_INDEX.COIN);
          let spawnRate = 5;

          if (fishKind < 10) {
            spawnRate = 1;
          } else if (fishKind < 20) {
            spawnRate = 3;
          } else if (fishKind < 30) {
            spawnRate = 8;
          }

          this._lisParticle.push(particle.node);

          particle.node.position = v3(beganPos.x, beganPos.y, 0);
          particle.setIsMe(player.isMe);
          particle.setLifetime(0.22);
          particle.setSpawnRate(spawnRate);
          particle.setItemSpeed(450, 650);
          particle.setGravity(-200);
          particle.setSpawnInterval(0.2);
          particle.setDuration(0.25);
          particle.startAnimation();
          tween(particle.node).delay(0.65).then(fadeOut(0.4)).removeSelf().call(() => {
            particle.stopAnimation();
            stopAllActions(particle.node);
            particle.node.destroy();

            const index = this._lisParticle.indexOf(particle.node);

            if (index >= 0) {
              this._lisParticle.splice(index, 1);
            }
          }).start();
        }

        playCoinEffect(data) {
          const {
            GoldReward,
            BulletMultiple,
            beganPos,
            endPos,
            player,
            isSkill,
            skipUpdateWallet,
            bounceAmplitude = 100
          } = data;
          const coinCount = this.calculateCoin(GoldReward, BulletMultiple);
          let duration = 0;

          for (let i = 0; i < coinCount; i++) {
            const configPoint1 = v2(beganPos.x + (beganPos.x - endPos.x) * 0.3, beganPos.y);
            const configPoint2 = v2(endPos.x, beganPos.y + (beganPos.y - endPos.y) * 0.3);

            if (player.index < 2 && beganPos.y < endPos.y) {
              configPoint2.y = endPos.y + endPos.y - beganPos.y;
            }

            const bezierConfig = [configPoint1, configPoint2, endPos];
            let xRandom = i % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
            xRandom *= i;
            const yRandom = getRandomInt(-5, 5) * 7.5 - 50;
            const coinFX = player.isMe ? PoolManager1975.instance.getCoin(Config1975.instance.COIN_TYPE.MY_COIN) : PoolManager1975.instance.getCoin(Config1975.instance.COIN_TYPE.OTHER_COIN);
            this.node.addChild(coinFX.node);
            SetZIndex(coinFX.node, Config1975.instance.TOP_Z_INDEX.COIN);
            coinFX.node.setScale(v3f(0.4));
            coinFX.startAnimation();
            coinFX.node.setPosition(beganPos);
            coinFX.node.getComponent(UIOpacity).opacity = 0;
            const anim = tween(coinFX.node).then(fadeIn(0.01)).then(moveTo(0.175, beganPos.x + xRandom / 2, beganPos.y + bounceAmplitude, 0)).parallel(moveTo(0.5, beganPos.x + xRandom, beganPos.y + yRandom, 0, "bounceOut"), tween().call(() => {
              if (player.isMe && i === 0 && !isSkill) {
                gfEventEmitter.instance.emit(EventsCode1975.SOUND.EFFECT_GOLD);
              }
            })).delay(0.05 * i + 0.15).then(bezierTo(1, bezierConfig, "sineIn")).call(() => {
              if (!skipUpdateWallet && i === 0 && player.isMe) {
                player.addToDisplayWallet(GoldReward);
              }

              coinFX.stopAnimation();

              if (player.isMe && i === 0) {
                gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_COIN_EARN);
              }
            }).start();

            if (i === coinCount - 1) {
              duration = anim["_finalAction"].getDuration();
            }
          }

          return duration;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "drillFx", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "vortexEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "warningSkill", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lightningChainEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "leaderFishExplode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLeviathan1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBossEffectLayer.ts', './gfUtilities.ts', './EventsCode1975.ts', './gfBossController.ts', './Leviathan1975.ts', './Config1975.ts', './gfReferenceManager.ts', './gfEventEmitter.ts', './ItemLeviathan1975.ts', './LeviathanExplosion1975.ts', './gfCustomDataType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, instantiate, UITransform, gfBossEffectLayer, registerEvent, SetZIndex, EventsCode1975, gfBossController, LEVIATHAN_STATE, Config1975, gfReferenceManager, gfEventEmitter, ItemLeviathan1975, LeviathanExplosion1975, WheelType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
    }, function (module) {
      gfBossEffectLayer = module.gfBossEffectLayer;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      LEVIATHAN_STATE = module.LEVIATHAN_STATE;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      ItemLeviathan1975 = module.ItemLeviathan1975;
    }, function (module) {
      LeviathanExplosion1975 = module.LeviathanExplosion1975;
    }, function (module) {
      WheelType = module.WheelType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ffa47vDTG5AnJZcpusrDiHc", "EffectLeviathan1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let EffectLeviathan1975 = exports('EffectLeviathan1975', (_dec = ccclass('EffectLeviathan1975'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = class EffectLeviathan1975 extends gfBossEffectLayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bonusItemPrefab", _descriptor, this);

          _initializerDefineProperty(this, "armorItemPrefab", _descriptor2, this);

          _initializerDefineProperty(this, "cutSceneJackpotPrefab", _descriptor3, this);

          _initializerDefineProperty(this, "leviathanExplosion", _descriptor4, this);

          this.endData = null;
        }

        initEvents() {
          super.initEvents();
          registerEvent(EventsCode1975.LEVIATHAN.ON_REWARD, this.onRewardLeviathan, this);
          registerEvent(EventsCode1975.LEVIATHAN.DROP_BONUS_ITEM, this.playDropBonusItem, this);
          registerEvent(EventsCode1975.LEVIATHAN.DROP_ARMOR_ITEM, this.playDropArmorItem, this);
          registerEvent(EventsCode1975.LEVIATHAN.CATCH_JP, this.onRewardJackpot, this);
          registerEvent(EventsCode1975.LEVIATHAN.ESCAPE, this.onEscape, this);
          registerEvent(EventsCode1975.LEVIATHAN.EXPLOSION, this.onPlayExplosion, this);
          registerEvent(EventsCode1975.EFFECT_LAYER.PLAY_BOSS_JACKPOT, this.onShowJackpot, this);
          registerEvent(EventsCode1975.BOSS.JACKPOT_WIN_AMOUNT_POPUP_CLOSE, this.updatePlayerWallet, this);
        }

        onRewardLeviathan(data) {
          const bossLeviathan = gfBossController.instance.getBossByKind(Config1975.instance.BOSS_KIND);

          if (bossLeviathan) {
            const {
              DeskStation,
              TotalReward,
              bonus,
              bossInfo
            } = data;

            if (TotalReward) {
              const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

              if (player && player.isMe) {
                if (!bossInfo || bossInfo.State != LEVIATHAN_STATE.JACKPOT) {
                  player.addGoldReward(TotalReward);
                }
              }
            }

            if (bonus) {
              bossLeviathan.onDropBonus(data);
            }

            if (bossInfo) {
              bossLeviathan.bossChangeState(data);
            }
          }
        }

        playDropBonusItem(data) {
          const callback = data => {
            const {
              DeskStation,
              bonus,
              BulletMultiple,
              endPosReward
            } = data;
            const dataInput = {
              fishPos: endPosReward,
              fishKind: 0,
              DeskStation,
              GoldReward: bonus,
              BulletMultiple
            };
            gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_REWARD_EFFECT, dataInput);
          };

          const item = instantiate(this.bonusItemPrefab);
          const posStart = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.posStartItem);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          effectLayer.addChild(item); // this.node.addChild(item);

          this._listFXItem.push(item);

          item.setPosition(posStart);
          SetZIndex(item, -1);
          item.getComponent(ItemLeviathan1975).playAnimation(data, callback);
        }

        playDropArmorItem(data) {
          const callback = data => {
            const {
              DeskStation,
              bonus,
              BulletMultiple,
              endPosReward
            } = data;
            const dataInput = {
              fishPos: endPosReward,
              fishKind: 0,
              DeskStation,
              GoldReward: bonus,
              BulletMultiple
            };
            gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_REWARD_EFFECT, dataInput);
          };

          const item = instantiate(this.armorItemPrefab);
          const posStart = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.posStartItem);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          effectLayer.addChild(item); // this.node.addChild(item);

          this._listFXItem.push(item);

          item.setPosition(posStart);
          SetZIndex(item, -1);
          item.getComponent(ItemLeviathan1975).playAnimation(data, callback);
        }

        onPlayExplosion(data) {
          const item = instantiate(this.leviathanExplosion);
          const posStart = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.posStartItem);
          this.node.addChild(item);

          this._listFXItem.push(item);

          item.setPosition(posStart);
          item.getComponent(LeviathanExplosion1975).playAnimation();
        }

        onRewardJackpot(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player.isActive()) {
            if (player.isMe) {
              this.endData = data;
              gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "JACKPOT", data);
            } else {
              this.onShowBigWinWheel(data);
            }
          }
        }

        onShowBigWinWheel(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, {
            player: player,
            wheelType: WheelType.BOSS,
            GoldReward: data.bossInfo.GoldReward,
            fishKind: Config1975.instance.BOSS_KIND
          });
        }

        onShowJackpot() {
          gfEventEmitter.instance.emit(EventsCode1975.CUT_SCENE.SHOW_CUT_SCENE, this.cutSceneJackpotPrefab, {
            jackpotAmount: this.endData.bossInfo.GoldReward
          });
        }

        updatePlayerWallet() {
          if (this.endData) {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              player.addToDisplayWallet(this.endData.bossInfo.GoldReward);
            }
          }

          this.endData = null;
        }

        onEscape() {
          const leviathan = gfBossController.instance.getBossByKind(Config1975.instance.BOSS_KIND);
          leviathan && leviathan.onEscape();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bonusItemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "armorItemPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneJackpotPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "leviathanExplosion", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLockFish1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEffectLockFish.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, gfEffectLockFish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
    }, function (module) {
      gfEffectLockFish = module.gfEffectLockFish;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "45a99smT3xBFpXMCpi+pslJ", "EffectLockFish1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let EffectLockFish1975 = exports('EffectLockFish1975', (_dec = ccclass('EffectLockFish1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class EffectLockFish1975 extends gfEffectLockFish {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mainSpine", _descriptor, this);
        }

        playChangeTargetAnim() {
          if (this.mainSpine) {
            this.mainSpine.setAnimation(0, "appear", false);
            this.mainSpine.addAnimation(0, "idle", true);
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eFishNotify.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './eItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCInteger, _decorator, gfEventEmitter, gfBaseEvents, eItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCInteger = module.CCInteger;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "31579kIs31HupU2hBo84ePU", "eFishNotify", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const USER_NAME = ["SAOTRAOTAOGAOSAO", "WHOSEWHEREWHEN"];
      let eFishNotify = exports('eFishNotify', (_dec = ccclass('eFishNotify'), _dec2 = property(CCInteger), _dec(_class = (_class2 = class eFishNotify extends eItem {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "notifyType", _descriptor, this);
        }

        onLoad() {
          this.callback = this.notifyToGame.bind(this);
        }

        notifyToGame() {
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          switch (this.notifyType) {
            case 0:
              this.notifyNormal();
              break;

            case 1:
              this.notifyJackpot();
              break;

            case 2:
              this.notifyEvent();
              break;
          }
        }

        notifyNormal() {
          var userName = this.getUsername();
          let data = {
            type: 2,
            data: [userName, 22, "18,000", 180],
            message: "",
            roomKind: "1",
            env: 0
          };
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        }

        notifyJackpot() {
          var userName = this.getUsername();
          let data = {
            type: 1,
            data: [userName, "20,500,000"],
            message: "",
            env: 0
          };
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        }

        notifyEvent() {
          var userName = this.getUsername();
          let data = {
            type: 7,
            data: [userName, "10,000,000"],
            message: "",
            env: 0
          };
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        }

        getUsername() {
          const randomIndex = Math.floor(Math.random() * USER_NAME.length);
          return USER_NAME[randomIndex];
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eForceLobby.ts", ['cc', './eItem.ts'], function (exports) {
  var cclegacy, director, _decorator, eItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      _decorator = module._decorator;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "343eepNwBVOM6tea3yr6abj", "eForceLobby", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eForceLobby = exports('eForceLobby', (_dec = ccclass('eForceLobby'), _dec(_class = class eForceLobby extends eItem {
        onLoad() {
          this.callback = this.backToLobby.bind(this);
        }

        backToLobby() {
          // if (!gfEventEmitter || !gfEventEmitter.instance) return;
          // gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          // gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          director.loadScene('Lobby');
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eFPSGraph.ts", ['cc', './eGraph.ts'], function (exports) {
  var cclegacy, UITransform, _decorator, eGraph;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      eGraph = module.eGraph;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "53c4ePlzhBEIreuNl8RbMQb", "eFPSGraph", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eFPSGraph = exports('eFPSGraph', ccclass(_class = class eFPSGraph extends eGraph {
        constructor(...args) {
          super(...args);
          this.time = 0;
          this.counter = 0;
        }

        onLoad() {
          this._x = this.lineGraph.node.getComponent(UITransform).width;
          this._y = this.lineGraph.node.getComponent(UITransform).height * 0.85;
          this._limit = 60;
          this._points = 14;
        }

        update(dt) {
          this.counter += 1;
          this.time += dt;

          if (this.time >= 1) {
            this.updateData(this.counter);
            this.time -= 1;
            this.nameLabel.string = "FPS: " + this.counter;
            this.counter = 0;
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eGraph.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Graphics, _decorator, Component, UITransform, NodeEventType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Graphics = module.Graphics;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      NodeEventType = module.NodeEventType;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a771fZZLdZGl7QpJPt5rrQV", "eGraph", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eGraph = exports('eGraph', (_dec = property({
        type: Label
      }), _dec2 = property({
        type: Graphics
      }), ccclass(_class = (_class2 = class eGraph extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nameLabel", _descriptor, this);

          _initializerDefineProperty(this, "lineGraph", _descriptor2, this);

          this.callback = void 0;
          this.positions = [];
          this._x = 100;
          this._y = 18;
          this._points = 10;
          this._limit = 60;
        }

        updateData(data) {
          const length = this.positions.length;

          if (length >= this._points) {
            this.positions.shift();
          }

          this.positions.push(data);
          this.drawLine();
        }

        init(name, cb, limit = 60, points = 10) {
          this.node.name = name;
          this.nameLabel.string = name;
          cb && (this.callback = cb);
          this._x = this.lineGraph.node.getComponent(UITransform).width;
          this._y = this.lineGraph.node.getComponent(UITransform).height * 0.85;
          this._limit = limit;
          this._points = Math.max(Math.floor(points), 3);
        }

        drawLine() {
          const length = this.positions.length;
          if (length < 2) return;
          this.lineGraph.clear();
          const x = this._x * 0.5;
          const y = this._y * 0.5;
          const height = this._y;
          const offset = this._x / (this._points - 1);

          for (let i = 0; i < length; i++) {
            const scale = Math.min(this.positions[i] / this._limit, 1.05);

            const _y = height * scale - y;

            const _x = i * offset - x;

            if (i == 0) {
              this.lineGraph.moveTo(_x, _y);
            } else {
              this.lineGraph.lineTo(_x, _y);
            }
          }

          this.lineGraph.stroke();
        }

        onEnable() {
          this.node.on(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onDisable() {
          this.node.off(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onClick() {
          if (!this.callback) return;
          const result = this.callback();

          if (result) {
            this.nameLabel.string = String(result) || this.nameLabel.string;
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lineGraph", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eItem.ts', './eToggle.ts', './eGraph.ts', './eList.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Prefab, Label, _decorator, Component, NodeEventType, instantiate, eItem, eToggle, eGraph, eList;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      NodeEventType = module.NodeEventType;
      instantiate = module.instantiate;
    }, function (module) {
      eItem = module.eItem;
    }, function (module) {
      eToggle = module.eToggle;
    }, function (module) {
      eGraph = module.eGraph;
    }, function (module) {
      eList = module.eList;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "d6276fTQJFEcqL7adlnP2Dg", "eGroup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eGroup = exports('eGroup', (_dec = property({
        type: Node
      }), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: Prefab
      }), _dec7 = property({
        type: Prefab
      }), _dec8 = property({
        type: Label
      }), ccclass(_class = (_class2 = class eGroup extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "arrow", _descriptor, this);

          _initializerDefineProperty(this, "tittle", _descriptor2, this);

          _initializerDefineProperty(this, "menuItem", _descriptor3, this);

          _initializerDefineProperty(this, "toggleItem", _descriptor4, this);

          _initializerDefineProperty(this, "groupItem", _descriptor5, this); // @property({type:Prefab}) editItem = null;


          _initializerDefineProperty(this, "listItem", _descriptor6, this);

          _initializerDefineProperty(this, "graphItem", _descriptor7, this);

          _initializerDefineProperty(this, "nameLabel", _descriptor8, this);

          this._isVisible = true;
          this._groupName = "";
          this.parentComp = void 0;
          this._time = 0;
        }

        set groupName(v) {
          this._groupName = v;
          this.nameLabel.string = v;
        }

        getParent() {
          return this.parentComp;
        }

        onEnable() {
          this.tittle.on(NodeEventType.TOUCH_END, this.changeVisible, this);
        }

        touchStart() {
          this._time = Date.now();
        }
        /**
         * @Description: add new group comp
         * @param {string} name
         * @return {*}
         */


        addGroup(name) {
          const item = instantiate(this.groupItem);
          const easyGroup = item.getComponent(eGroup); // easyGroup.size = this.size

          item.parent = this.node;

          if (name) {
            easyGroup.groupName = name;
          }

          easyGroup.parentComp = this.getParent();
          return easyGroup;
        }

        addGraph(name, cb, limit = 60, points = 10) {
          const item = instantiate(this.graphItem); // item.setContentSize(this._size);

          item.parent = this.node;
          const graphItem = item.getComponent(eGraph);
          graphItem && graphItem.init(name, cb, limit, points);
          return this;
        } // /**
        //  * @Description: add new item comp, could be use for btn or string
        //  * @param {string} name of item comp
        //  * @param {function} cb call back for item click event
        //  * @return {*}
        //  */


        addItem(name, cb) {
          const item = instantiate(this.menuItem); // item.setContentSize(this._size);

          item.parent = this.node;
          const menuItem = item.getComponent(eItem);
          menuItem && menuItem.init(name, cb);
          return this;
        }

        addList(name, cb) {
          const item = instantiate(this.listItem); // item.setContentSize(this._size);

          item.parent = this.node;
          const listItem = item.getComponent(eList);
          listItem && listItem.init(name, cb);
          return this;
        }

        addToggle(name, cb, checked = true) {
          const item = instantiate(this.toggleItem); // item.setContentSize(this._size);

          item.parent = this.node;
          const toggleItem = item.getComponent(eToggle);
          toggleItem.toggle.isChecked = checked;
          toggleItem && toggleItem.init(name, cb);
          return this;
        }

        changeVisible() {
          this._isVisible = !this._isVisible;
          const children = this.node.children;
          this.arrow.angle = !this._isVisible ? 90 : 0;

          for (var i = 1; i < children.length; i++) {
            children[i].active = this._isVisible;
          }
        }

        collapse() {
          this.changeVisible();
          this._isVisible = false;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrow", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tittle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "menuItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "groupItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listItem", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "graphItem", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eHideHelper.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, eItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ef147pzs3NBGbRitPG3+B+l", "eHideHelper", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eHideHelper = exports('eHideHelper', (_dec = property(Node), ccclass(_class = (_class2 = class eHideHelper extends eItem {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "helperUI", _descriptor, this);
        }

        onLoad() {
          this.callback = this.hideHelper.bind(this);
        }

        hideHelper() {
          this.helperUI.active = false;
          return "Hide Helper";
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "helperUI", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eImageMemory.ts", ['cc', './eItem.ts'], function (exports) {
  var cclegacy, loader, Texture2D, _decorator, eItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      loader = module.loader;
      Texture2D = module.Texture2D;
      _decorator = module._decorator;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "ef5fcf/C9NIDbYY1Y55CaaL", "eImageMemory", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eImageMemory = exports('eImageMemory', ccclass(_class = class eImageMemory extends eItem {
        onLoad() {
          this.callback = this.calculateImageMemory.bind(this);
          this.schedule(this.trackImgMemory, 0.75);
        }

        calculateImageMemory() {
          let imgMemory = 0;
          let loadCache = Object.values(loader['_cache']);
          let imgList = [];
          loadCache.forEach(asset => {
            if (asset instanceof Texture2D) {
              const num = Math.floor(asset.width * asset.height * (this.validateJpgType(asset.image.url) ? 3 : 4) / 1024 / 1024 * 10000) / 10000;
              imgMemory += num;
              imgList.push(asset.image.url);
            }
          });
          imgMemory = Math.floor(imgMemory * 10000) / 10000;
          return "Image Memory:" + imgMemory.toFixed(2) + "Mb";
        }

        validateJpgType(imageName) {
          return imageName.includes("jpg");
        }

        trackImgMemory() {
          const result = this.calculateImageMemory();

          if (result) {
            this.nameLabel.string = String(result) || this.nameLabel.string;
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, NodeEventType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      NodeEventType = module.NodeEventType;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6c26eCaHLFABbKzR75lquN/", "eItem", undefined); // import { eEdit } from './eEdit';
      // import { eList } from './eList';
      // import { eGraph } from './eGraph';


      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eItem = exports('eItem', (_dec = property({
        type: Label
      }), ccclass(_class = (_class2 = class eItem extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nameLabel", _descriptor, this);

          this.callback = void 0;
          this.eventData = void 0;
        }

        init(name, cb) {
          this.node.name = name;
          this.nameLabel.string = name;
          cb && (this.callback = cb);
        }

        onEnable() {
          this.node.on(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onDisable() {
          this.node.off(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onClick() {
          if (!this.callback) return;
          const result = this.callback();

          if (result) {
            this.nameLabel.string = String(result) || this.nameLabel.string;
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Label, _decorator, Component, NodeEventType, instantiate, ScrollView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      NodeEventType = module.NodeEventType;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b88a1VFifxMSInTJlHJPQbs", "eList", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eList = exports('eList', (_dec = property({
        type: Node
      }), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), ccclass(_class = (_class2 = class eList extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "touchArea", _descriptor, this);

          _initializerDefineProperty(this, "listLabel", _descriptor2, this);

          _initializerDefineProperty(this, "nameLabel", _descriptor3, this);

          this.callback = void 0;
          this.eventData = void 0;
        }

        init(name, cb) {
          this.node.name = name;
          this.nameLabel.string = name;
          cb && (this.callback = cb);
        }

        onEnable() {
          this.touchArea.on(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onDisable() {
          this.touchArea.off(NodeEventType.TOUCH_END, this.onClick, this);
        }

        onClick() {
          if (!this.callback) return;
          const result = this.callback();

          if (result) {
            for (let i = 0; i < result.length; ++i) {
              let item = instantiate(this.listLabel.node);
              item.active = true;
              item.getComponent(Label).string = "" + result[i];
              let scrollView = this.node.getComponentInChildren(ScrollView);
              scrollView.content.addChild(item);
            }
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "touchArea", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eGroup.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, instantiate, eGroup;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      eGroup = module.eGroup;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "39d3cThoIxMjIQUzLTnM69I", "eMenu", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let eMenu = exports('eMenu', (_dec = ccclass('eMenu'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        visible: false
      }), _dec(_class = (_class2 = class eMenu extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "GroupPrefab", _descriptor, this);

          _initializerDefineProperty(this, "_groups", _descriptor2, this);
        }

        onLoad() {
          this._groups = new Map();
        }

        addGroup(name) {
          const groupNode = instantiate(this.GroupPrefab);
          const easyGroup = groupNode.getComponent(eGroup);

          if (name) {
            easyGroup.groupName = name;

            this._groups.set(name, groupNode);
          }

          easyGroup.parentComp = this;
          groupNode.parent = this.node;
          return easyGroup;
        }

        getGroup(name) {
          return this._groups.get(name) || null;
        }

        deleteGroup(name) {
          const group = this.getGroup(name);

          if (group) {
            this._groups.delete(name);

            group.removeFromParent();
            group.destroy();
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "GroupPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_groups", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return new Map();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Slider, EditBox, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Slider = module.Slider;
      EditBox = module.EditBox;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bf831yidzBPi7oF4L3/66YF", "eSlider", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eSlider = exports('eSlider', (_dec = property({
        type: Label
      }), _dec2 = property({
        type: Slider
      }), _dec3 = property({
        type: EditBox
      }), ccclass(_class = (_class2 = class eSlider extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nameLabel", _descriptor, this);

          _initializerDefineProperty(this, "slider", _descriptor2, this);

          _initializerDefineProperty(this, "editBox", _descriptor3, this);

          this.callback = void 0;
          this.eventData = void 0;
          this._step = 1;
          this._maxValue = 60;
        }

        onLoad() {
          this.editBox.string = "" + this._maxValue;
          this.slider.progress = 1;
          this._step = this._maxValue <= 1 ? 0.1 : 1;
        }

        init(name, cb, maxValue) {
          this.node.name = name;
          this.nameLabel.string = name;
          cb && (this.callback = cb);
          maxValue && (this._maxValue = maxValue);
          this._step = this._maxValue <= 1 ? 0.1 : 1;
        }

        onSliderCallback(slider, customEventData) {
          const fixedProgress = Number(this.calculateNearestValue(slider.progress));
          this.editBox.string = "" + fixedProgress;
          slider.progress = this.calculateProgress(fixedProgress);
          this.callback && this.callback(fixedProgress);
        }

        calculateNearestValue(progress) {
          let realProgress = progress * this._maxValue;
          if (realProgress < this._step) return 0;
          if (realProgress > this._maxValue) return this._maxValue;
          realProgress = realProgress < 1 ? realProgress.toFixed(1) : Math.round(realProgress);
          return realProgress;
        }

        calculateProgress(value) {
          return value / this._maxValue;
        }

        onEditDidEnded(editbox, customEventData) {
          const value = this.calculateNearestValue(Number(editbox.string) / this._maxValue);
          this.callback && this.callback(value);
          this.slider.progress = Number(value) / this._maxValue;
          this.editBox.string = "" + value;
        }

        onClick() {
          if (!this.callback) return;
          this.callback(this.slider.progress);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "slider", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "editBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eSlowNetwork.ts", ['cc', './eToggle.ts'], function (exports) {
  var cclegacy, director, warn, _decorator, Event, eToggle;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      warn = module.warn;
      _decorator = module._decorator;
      Event = module.Event;
    }, function (module) {
      eToggle = module.eToggle;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "c59eeECUsJCQbhNwxD15KV1", "eSlowNetwork", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class CustomEvent extends Event {
        constructor(name, bubbles, details) {
          super(name, bubbles);
          this.details = null;
          this.details = details;
        }

      }

      let eSlowNetwork = exports('eSlowNetwork', ccclass(_class = class eSlowNetwork extends eToggle {
        constructor(...args) {
          super(...args);
          this.callback = void 0;
          this.eventData = void 0;
        }

        onLoad() {
          this.callback = this.toggleNetwork.bind(this);
          this.toggle.setIsCheckedWithoutNotify(false);
          this.node.on('FORCE_NETWORK_GLT', this.forceNetwork.bind(this));
        }

        forceNetwork(event) {
          const {
            isForced
          } = event.userData;
          this.toggle.setIsCheckedWithoutNotify(isForced);
        }

        toggleNetwork() {
          let event = new CustomEvent("FORCE_NETWORK_GLT", true);
          event['userData'] = {
            isForced: this.toggle.isChecked
          };
          const scene = director.getScene();
          const slotDirector = scene.getComponentInChildren('Director');

          if (slotDirector) {
            slotDirector.node.dispatchEvent(event);
          } else {
            warn('eSlowNetwork toggleNetwork slotDirector not found');
            this.toggle.setIsCheckedWithoutNotify(false);
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eSnapMem.ts", ['cc', './eItem.ts'], function (exports) {
  var cclegacy, loader, _decorator, eItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      loader = module.loader;
      _decorator = module._decorator;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "5cca4WZi81OwoLI43nHrQzt", "eSnapMem", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eImageMemory = exports('eImageMemory', ccclass(_class = class eImageMemory extends eItem {
        constructor(...args) {
          super(...args);
          this._lstImg = [];
          this.isSnapping = false;
          this.isLock = false;
        }

        onLoad() {
          this.callback = this.checkSnap.bind(this);
        }

        snapImgMemory() {
          let loadCache = Object.values(loader['_cache']);
          loadCache.forEach(asset => {
            this._lstImg.push(asset['_uuid']);
          });
          this.nameLabel.string = "Snap again";
          this.isSnapping = true;
        }

        compare() {
          let newArr = [];
          let loadCache = Object.values(loader['_cache']);
          loadCache.forEach(asset => {
            newArr.push(asset['_uuid']);
          });
          let arrResult = newArr.filter(val => !this._lstImg.includes(val));

          if (arrResult.length) {
            console.group("Start compare snapshots");

            for (let i = 0; i < arrResult.length; ++i) {
              console.log('UUID: ' + arrResult[i]);
            }

            console.groupEnd();
            this.nameLabel.string = "Check console!";
          } else {
            this.nameLabel.string = "Perfect!";
          }

          this._lstImg = [];
          this.isSnapping = false;
          this.isLock = true;
          this.scheduleOnce(() => {
            this.isLock = false;
            this.nameLabel.string = "Snap Memory";
          }, 0.75);
        }

        checkSnap() {
          if (this.isLock) {
            return;
          }

          if (!this.isSnapping) {
            this.snapImgMemory();
          } else {
            this.compare();
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Toggle, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Toggle = module.Toggle;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "23c2e68yWRNo7LVRieLezYe", "eToggle", undefined);

      const {
        ccclass,
        property,
        executeInEditMode
      } = _decorator;
      let eToggle = exports('eToggle', (_dec = property({
        type: Label
      }), _dec2 = property({
        type: Toggle
      }), ccclass(_class = (_class2 = class eToggle extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nameLabel", _descriptor, this);

          _initializerDefineProperty(this, "toggle", _descriptor2, this);

          this.callback = void 0;
          this.eventData = void 0;
        }

        init(name, cb) {
          this.node.name = name;
          this.nameLabel.string = name;
          cb && (this.callback = cb);
        }

        onToggleCallback(toggle) {
          this.callback && this.callback(toggle.isChecked);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/eUPNG.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e68bfQy2LNC+p6X+kVdJdxI", "eUPNG", undefined);

      var UZIP = {};
      var UNPNG = exports('default', {});

      UZIP["parse"] = function (buf, onlyNames) // ArrayBuffer
      {
        var rUs = UZIP.bin.readUshort,
            rUi = UZIP.bin.readUint,
            o = 0,
            out = {};
        var data = new Uint8Array(buf);
        var eocd = data.length - 4;

        while (rUi(data, eocd) != 0x06054b50) eocd--;

        var o = eocd;
        o += 4; // sign  = 0x06054b50

        o += 4; // disks = 0;

        var cnu = rUs(data, o);
        o += 2;
        var cnt = rUs(data, o);
        o += 2;
        var csize = rUi(data, o);
        o += 4;
        var coffs = rUi(data, o);
        o += 4;
        o = coffs;

        for (var i = 0; i < cnu; i++) {
          var sign = rUi(data, o);
          o += 4;
          o += 4; // versions;

          o += 4; // flag + compr

          o += 4; // time

          var crc32 = rUi(data, o);
          o += 4;
          var csize = rUi(data, o);
          o += 4;
          var usize = rUi(data, o);
          o += 4;
          var nl = rUs(data, o),
              el = rUs(data, o + 2),
              cl = rUs(data, o + 4);
          o += 6; // name, extra, comment

          o += 8; // disk, attribs

          var roff = rUi(data, o);
          o += 4;
          o += nl + el + cl;

          UZIP._readLocal(data, roff, out, csize, usize, onlyNames);
        } //console.log(out);


        return out;
      };

      UZIP._readLocal = function (data, o, out, csize, usize, onlyNames) {
        var rUs = UZIP.bin.readUshort,
            rUi = UZIP.bin.readUint;
        var sign = rUi(data, o);
        o += 4;
        var ver = rUs(data, o);
        o += 2;
        var gpflg = rUs(data, o);
        o += 2; //if((gpflg&8)!=0) throw "unknown sizes";

        var cmpr = rUs(data, o);
        o += 2;
        var time = rUi(data, o);
        o += 4;
        var crc32 = rUi(data, o);
        o += 4; //var csize = rUi(data, o);  o+=4;
        //var usize = rUi(data, o);  o+=4;

        o += 8;
        var nlen = rUs(data, o);
        o += 2;
        var elen = rUs(data, o);
        o += 2;
        var name = UZIP.bin.readUTF8(data, o, nlen);
        o += nlen; //console.log(name);

        o += elen; //console.log(sign.toString(16), ver, gpflg, cmpr, crc32.toString(16), "csize, usize", csize, usize, nlen, elen, name, o);

        if (onlyNames) {
          out[name] = {
            size: usize,
            csize: csize
          };
          return;
        }

        var file = new Uint8Array(data.buffer, o);
        if (cmpr == 0) out[name] = new Uint8Array(file.buffer.slice(o, o + csize));else if (cmpr == 8) {
          var buf = new Uint8Array(usize);
          UZIP.inflateRaw(file, buf);
          /*var nbuf = pako["inflateRaw"](file);
          if(usize>8514000) {
          	//console.log(PUtils.readASCII(buf , 8514500, 500));
          	//console.log(PUtils.readASCII(nbuf, 8514500, 500));
          }
          for(var i=0; i<buf.length; i++) if(buf[i]!=nbuf[i]) {  console.log(buf.length, nbuf.length, usize, i);  throw "e";  }
          */

          out[name] = buf;
        } else throw "unknown compression method: " + cmpr;
      };

      UZIP.inflateRaw = function (file, buf) {
        return UZIP.F.inflate(file, buf);
      };

      UZIP.inflate = function (file, buf) {
        var CMF = file[0],
            FLG = file[1]; //console.log(CM, CINFO,CMF,FLG);

        return UZIP.inflateRaw(new Uint8Array(file.buffer, file.byteOffset + 2, file.length - 6), buf);
      };

      UZIP.deflate = function (data, opts
      /*, buf, off*/
      ) {
        if (opts == null) opts = {
          level: 6
        };
        var off = 0,
            buf = new Uint8Array(50 + Math.floor(data.length * 1.1));
        buf[off] = 120;
        buf[off + 1] = 156;
        off += 2;
        off = UZIP.F.deflateRaw(data, buf, off, opts.level);
        var crc = UZIP.adler(data, 0, data.length);
        buf[off + 0] = crc >>> 24 & 255;
        buf[off + 1] = crc >>> 16 & 255;
        buf[off + 2] = crc >>> 8 & 255;
        buf[off + 3] = crc >>> 0 & 255;
        return new Uint8Array(buf.buffer, 0, off + 4);
      };

      UZIP.deflateRaw = function (data, opts) {
        if (opts == null) opts = {
          level: 6
        };
        var buf = new Uint8Array(50 + Math.floor(data.length * 1.1));
        var off = UZIP.F.deflateRaw(data, buf, off, opts.level);
        return new Uint8Array(buf.buffer, 0, off);
      };

      UZIP.encode = function (obj, noCmpr) {
        if (noCmpr == null) noCmpr = false;
        var tot = 0,
            wUi = UZIP.bin.writeUint,
            wUs = UZIP.bin.writeUshort;
        var zpd = {};

        for (var p in obj) {
          var cpr = !UZIP._noNeed(p) && !noCmpr,
              buf = obj[p],
              crc = UZIP.crc.crc(buf, 0, buf.length);
          zpd[p] = {
            cpr: cpr,
            usize: buf.length,
            crc: crc,
            file: cpr ? UZIP.deflateRaw(buf) : buf
          };
        }

        for (var p in zpd) tot += zpd[p].file.length + 30 + 46 + 2 * UZIP.bin.sizeUTF8(p);

        tot += 22;
        var data = new Uint8Array(tot),
            o = 0;
        var fof = [];

        for (var p in zpd) {
          var file = zpd[p];
          fof.push(o);
          o = UZIP._writeHeader(data, o, p, file, 0);
        }

        var i = 0,
            ioff = o;

        for (var p in zpd) {
          var file = zpd[p];
          fof.push(o);
          o = UZIP._writeHeader(data, o, p, file, 1, fof[i++]);
        }

        var csize = o - ioff;
        wUi(data, o, 0x06054b50);
        o += 4;
        o += 4; // disks

        wUs(data, o, i);
        o += 2;
        wUs(data, o, i);
        o += 2; // number of c d records

        wUi(data, o, csize);
        o += 4;
        wUi(data, o, ioff);
        o += 4;
        o += 2;
        return data.buffer;
      }; // no need to compress .PNG, .ZIP, .JPEG ....


      UZIP._noNeed = function (fn) {
        var ext = fn.split(".").pop().toLowerCase();
        return "png,jpg,jpeg,zip".indexOf(ext) != -1;
      };

      UZIP._writeHeader = function (data, o, p, obj, t, roff) {
        var wUi = UZIP.bin.writeUint,
            wUs = UZIP.bin.writeUshort;
        var file = obj.file;
        wUi(data, o, t == 0 ? 0x04034b50 : 0x02014b50);
        o += 4; // sign

        if (t == 1) o += 2; // ver made by

        wUs(data, o, 20);
        o += 2; // ver

        wUs(data, o, 0);
        o += 2; // gflip

        wUs(data, o, obj.cpr ? 8 : 0);
        o += 2; // cmpr

        wUi(data, o, 0);
        o += 4; // time

        wUi(data, o, obj.crc);
        o += 4; // crc32

        wUi(data, o, file.length);
        o += 4; // csize

        wUi(data, o, obj.usize);
        o += 4; // usize

        wUs(data, o, UZIP.bin.sizeUTF8(p));
        o += 2; // nlen

        wUs(data, o, 0);
        o += 2; // elen

        if (t == 1) {
          o += 2; // comment length

          o += 2; // disk number

          o += 6; // attributes

          wUi(data, o, roff);
          o += 4; // usize
        }

        var nlen = UZIP.bin.writeUTF8(data, o, p);
        o += nlen;

        if (t == 0) {
          data.set(file, o);
          o += file.length;
        }

        return o;
      };

      UZIP.crc = {
        table: function () {
          var tab = new Uint32Array(256);

          for (var n = 0; n < 256; n++) {
            var c = n;

            for (var k = 0; k < 8; k++) {
              if (c & 1) c = 0xedb88320 ^ c >>> 1;else c = c >>> 1;
            }

            tab[n] = c;
          }

          return tab;
        }(),
        update: function (c, buf, off, len) {
          for (var i = 0; i < len; i++) c = UZIP.crc.table[(c ^ buf[off + i]) & 0xff] ^ c >>> 8;

          return c;
        },
        crc: function (b, o, l) {
          return UZIP.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;
        }
      };

      UZIP.adler = function (data, o, len) {
        var a = 1,
            b = 0;
        var off = o,
            end = o + len;

        while (off < end) {
          var eend = Math.min(off + 5552, end);

          while (off < eend) {
            a += data[off++];
            b += a;
          }

          a = a % 65521;
          b = b % 65521;
        }

        return b << 16 | a;
      };

      UZIP.bin = {
        readUshort: function (buff, p) {
          return buff[p] | buff[p + 1] << 8;
        },
        writeUshort: function (buff, p, n) {
          buff[p] = n & 255;
          buff[p + 1] = n >> 8 & 255;
        },
        readUint: function (buff, p) {
          return buff[p + 3] * (256 * 256 * 256) + (buff[p + 2] << 16 | buff[p + 1] << 8 | buff[p]);
        },
        writeUint: function (buff, p, n) {
          buff[p] = n & 255;
          buff[p + 1] = n >> 8 & 255;
          buff[p + 2] = n >> 16 & 255;
          buff[p + 3] = n >> 24 & 255;
        },
        readASCII: function (buff, p, l) {
          var s = "";

          for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);

          return s;
        },
        writeASCII: function (data, p, s) {
          for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);
        },
        pad: function (n) {
          return n.length < 2 ? "0" + n : n;
        },
        readUTF8: function (buff, p, l) {
          var s = "",
              ns;

          for (var i = 0; i < l; i++) s += "%" + UZIP.bin.pad(buff[p + i].toString(16));

          try {
            ns = decodeURIComponent(s);
          } catch (e) {
            return UZIP.bin.readASCII(buff, p, l);
          }

          return ns;
        },
        writeUTF8: function (buff, p, str) {
          var strl = str.length,
              i = 0;

          for (var ci = 0; ci < strl; ci++) {
            var code = str.charCodeAt(ci);

            if ((code & 0xffffffff - (1 << 7) + 1) == 0) {
              buff[p + i] = code;
              i++;
            } else if ((code & 0xffffffff - (1 << 11) + 1) == 0) {
              buff[p + i] = 192 | code >> 6;
              buff[p + i + 1] = 128 | code >> 0 & 63;
              i += 2;
            } else if ((code & 0xffffffff - (1 << 16) + 1) == 0) {
              buff[p + i] = 224 | code >> 12;
              buff[p + i + 1] = 128 | code >> 6 & 63;
              buff[p + i + 2] = 128 | code >> 0 & 63;
              i += 3;
            } else if ((code & 0xffffffff - (1 << 21) + 1) == 0) {
              buff[p + i] = 240 | code >> 18;
              buff[p + i + 1] = 128 | code >> 12 & 63;
              buff[p + i + 2] = 128 | code >> 6 & 63;
              buff[p + i + 3] = 128 | code >> 0 & 63;
              i += 4;
            } else throw "e";
          }

          return i;
        },
        sizeUTF8: function (str) {
          var strl = str.length,
              i = 0;

          for (var ci = 0; ci < strl; ci++) {
            var code = str.charCodeAt(ci);

            if ((code & 0xffffffff - (1 << 7) + 1) == 0) {
              i++;
            } else if ((code & 0xffffffff - (1 << 11) + 1) == 0) {
              i += 2;
            } else if ((code & 0xffffffff - (1 << 16) + 1) == 0) {
              i += 3;
            } else if ((code & 0xffffffff - (1 << 21) + 1) == 0) {
              i += 4;
            } else throw "e";
          }

          return i;
        }
      };
      UZIP.F = {};

      UZIP.F.deflateRaw = function (data, out, opos, lvl) {
        var opts = [
        /*
                   ush good_length; /* reduce lazy search above this match length
                   ush max_lazy;    /* do not perform lazy search above this match length
                   ush nice_length; /* quit search above this match length
              */

        /*      good lazy nice chain */

        /* 0 */
        [0, 0, 0, 0, 0],
        /* store only */

        /* 1 */
        [4, 4, 8, 4, 0],
        /* max speed, no lazy matches */

        /* 2 */
        [4, 5, 16, 8, 0],
        /* 3 */
        [4, 6, 16, 16, 0],
        /* 4 */
        [4, 10, 16, 32, 0],
        /* lazy matches */

        /* 5 */
        [8, 16, 32, 32, 0],
        /* 6 */
        [8, 16, 128, 128, 0],
        /* 7 */
        [8, 32, 128, 256, 0],
        /* 8 */
        [32, 128, 258, 1024, 1],
        /* 9 */
        [32, 258, 258, 4096, 1]];
        /* max compression */

        var opt = opts[lvl];
        var U = UZIP.F.U,
            goodIndex = UZIP.F._goodIndex,
            hash = UZIP.F._hash,
            putsE = UZIP.F._putsE;
        var i = 0,
            pos = opos << 3,
            cvrd = 0,
            dlen = data.length;

        if (lvl == 0) {
          while (i < dlen) {
            var len = Math.min(0xffff, dlen - i);
            putsE(out, pos, i + len == dlen ? 1 : 0);
            pos = UZIP.F._copyExact(data, i, len, out, pos + 8);
            i += len;
          }

          return pos >>> 3;
        }

        var lits = U.lits,
            strt = U.strt,
            prev = U.prev,
            li = 0,
            lc = 0,
            bs = 0,
            ebits = 0,
            c = 0,
            nc = 0; // last_item, literal_count, block_start

        if (dlen > 2) {
          nc = UZIP.F._hash(data, 0);
          strt[nc] = 0;
        }

        for (i = 0; i < dlen; i++) {
          c = nc; //*

          if (i + 1 < dlen - 2) {
            nc = UZIP.F._hash(data, i + 1);
            var ii = i + 1 & 0x7fff;
            prev[ii] = strt[nc];
            strt[nc] = ii;
          } //*/


          if (cvrd <= i) {
            if ((li > 14000 || lc > 26697) && dlen - i > 100) {
              if (cvrd < i) {
                lits[li] = i - cvrd;
                li += 2;
                cvrd = i;
              }

              pos = UZIP.F._writeBlock(i == dlen - 1 || cvrd == dlen ? 1 : 0, lits, li, ebits, data, bs, i - bs, out, pos);
              li = lc = ebits = 0;
              bs = i;
            }

            var mch = 0; //if(nmci==i) mch= nmch;  else

            if (i < dlen - 2) mch = UZIP.F._bestMatch(data, i, prev, c, Math.min(opt[2], dlen - i), opt[3]);
            /*
            if(mch!=0 && opt[4]==1 && (mch>>>16)<opt[1] && i+1<dlen-2) {
            	nmch = UZIP.F._bestMatch(data, i+1, prev, nc, opt[2], opt[3]);  nmci=i+1;
            	//var mch2 = UZIP.F._bestMatch(data, i+2, prev, nnc);  //nmci=i+1;
            	if((nmch>>>16)>(mch>>>16)) mch=0;
            }//*/

            var len = mch >>> 16,
                dst = mch & 0xffff; //if(i-dst<0) throw "e";

            if (mch != 0) {
              var len = mch >>> 16,
                  dst = mch & 0xffff; //if(i-dst<0) throw "e";

              var lgi = goodIndex(len, U.of0);
              U.lhst[257 + lgi]++;
              var dgi = goodIndex(dst, U.df0);
              U.dhst[dgi]++;
              ebits += U.exb[lgi] + U.dxb[dgi];
              lits[li] = len << 23 | i - cvrd;
              lits[li + 1] = dst << 16 | lgi << 8 | dgi;
              li += 2;
              cvrd = i + len;
            } else {
              U.lhst[data[i]]++;
            }

            lc++;
          }
        }

        if (bs != i || data.length == 0) {
          if (cvrd < i) {
            lits[li] = i - cvrd;
            li += 2;
            cvrd = i;
          }

          pos = UZIP.F._writeBlock(1, lits, li, ebits, data, bs, i - bs, out, pos);
          li = 0;
          lc = 0;
          li = lc = ebits = 0;
          bs = i;
        }

        while ((pos & 7) != 0) pos++;

        return pos >>> 3;
      };

      UZIP.F._bestMatch = function (data, i, prev, c, nice, chain) {
        var ci = i & 0x7fff,
            pi = prev[ci]; //console.log("----", i);

        var dif = ci - pi + (1 << 15) & 0x7fff;
        if (pi == ci || c != UZIP.F._hash(data, i - dif)) return 0;
        var tl = 0,
            td = 0; // top length, top distance

        var dlim = Math.min(0x7fff, i);

        while (dif <= dlim && --chain != 0 && pi != ci
        /*&& c==UZIP.F._hash(data,i-dif)*/
        ) {
          if (tl == 0 || data[i + tl] == data[i + tl - dif]) {
            var cl = UZIP.F._howLong(data, i, dif);

            if (cl > tl) {
              tl = cl;
              td = dif;
              if (tl >= nice) break; //*

              if (dif + 2 < cl) cl = dif + 2;
              var maxd = 0; // pi does not point to the start of the word

              for (var j = 0; j < cl - 2; j++) {
                var ei = i - dif + j + (1 << 15) & 0x7fff;
                var li = prev[ei];
                var curd = ei - li + (1 << 15) & 0x7fff;

                if (curd > maxd) {
                  maxd = curd;
                  pi = ei;
                }
              } //*/

            }
          }

          ci = pi;
          pi = prev[ci];
          dif += ci - pi + (1 << 15) & 0x7fff;
        }

        return tl << 16 | td;
      };

      UZIP.F._howLong = function (data, i, dif) {
        if (data[i] != data[i - dif] || data[i + 1] != data[i + 1 - dif] || data[i + 2] != data[i + 2 - dif]) return 0;
        var oi = i,
            l = Math.min(data.length, i + 258);
        i += 3; //while(i+4<l && data[i]==data[i-dif] && data[i+1]==data[i+1-dif] && data[i+2]==data[i+2-dif] && data[i+3]==data[i+3-dif]) i+=4;

        while (i < l && data[i] == data[i - dif]) i++;

        return i - oi;
      };

      UZIP.F._hash = function (data, i) {
        return (data[i] << 8 | data[i + 1]) + (data[i + 2] << 4) & 0xffff; //var hash_shift = 0, hash_mask = 255;
        //var h = data[i+1] % 251;
        //h = (((h << 8) + data[i+2]) % 251);
        //h = (((h << 8) + data[i+2]) % 251);
        //h = ((h<<hash_shift) ^ (c) ) & hash_mask;
        //return h | (data[i]<<8);
        //return (data[i] | (data[i+1]<<8));
      }; //UZIP.___toth = 0;


      UZIP.saved = 0;

      UZIP.F._writeBlock = function (BFINAL, lits, li, ebits, data, o0, l0, out, pos) {
        var U = UZIP.F.U,
            putsF = UZIP.F._putsF,
            putsE = UZIP.F._putsE; //*

        var T, ML, MD, MH, numl, numd, numh, lset, dset;
        U.lhst[256]++;
        T = UZIP.F.getTrees();
        ML = T[0];
        MD = T[1];
        MH = T[2];
        numl = T[3];
        numd = T[4];
        numh = T[5];
        lset = T[6];
        dset = T[7];
        var cstSize = ((pos + 3 & 7) == 0 ? 0 : 8 - (pos + 3 & 7)) + 32 + (l0 << 3);
        var fxdSize = ebits + UZIP.F.contSize(U.fltree, U.lhst) + UZIP.F.contSize(U.fdtree, U.dhst);
        var dynSize = ebits + UZIP.F.contSize(U.ltree, U.lhst) + UZIP.F.contSize(U.dtree, U.dhst);
        dynSize += 14 + 3 * numh + UZIP.F.contSize(U.itree, U.ihst) + (U.ihst[16] * 2 + U.ihst[17] * 3 + U.ihst[18] * 7);

        for (var j = 0; j < 286; j++) U.lhst[j] = 0;

        for (var j = 0; j < 30; j++) U.dhst[j] = 0;

        for (var j = 0; j < 19; j++) U.ihst[j] = 0; //*/


        var BTYPE = cstSize < fxdSize && cstSize < dynSize ? 0 : fxdSize < dynSize ? 1 : 2;
        putsF(out, pos, BFINAL);
        putsF(out, pos + 1, BTYPE);
        pos += 3;

        if (BTYPE == 0) {
          while ((pos & 7) != 0) pos++;

          pos = UZIP.F._copyExact(data, o0, l0, out, pos);
        } else {
          var ltree, dtree;

          if (BTYPE == 1) {
            ltree = U.fltree;
            dtree = U.fdtree;
          }

          if (BTYPE == 2) {
            UZIP.F.makeCodes(U.ltree, ML);
            UZIP.F.revCodes(U.ltree, ML);
            UZIP.F.makeCodes(U.dtree, MD);
            UZIP.F.revCodes(U.dtree, MD);
            UZIP.F.makeCodes(U.itree, MH);
            UZIP.F.revCodes(U.itree, MH);
            ltree = U.ltree;
            dtree = U.dtree;
            putsE(out, pos, numl - 257);
            pos += 5; // 286

            putsE(out, pos, numd - 1);
            pos += 5; // 30

            putsE(out, pos, numh - 4);
            pos += 4; // 19

            for (var i = 0; i < numh; i++) putsE(out, pos + i * 3, U.itree[(U.ordr[i] << 1) + 1]);

            pos += 3 * numh;
            pos = UZIP.F._codeTiny(lset, U.itree, out, pos);
            pos = UZIP.F._codeTiny(dset, U.itree, out, pos);
          }

          var off = o0;

          for (var si = 0; si < li; si += 2) {
            var qb = lits[si],
                len = qb >>> 23,
                end = off + (qb & (1 << 23) - 1);

            while (off < end) pos = UZIP.F._writeLit(data[off++], ltree, out, pos);

            if (len != 0) {
              var qc = lits[si + 1],
                  dst = qc >> 16,
                  lgi = qc >> 8 & 255,
                  dgi = qc & 255;
              pos = UZIP.F._writeLit(257 + lgi, ltree, out, pos);
              putsE(out, pos, len - U.of0[lgi]);
              pos += U.exb[lgi];
              pos = UZIP.F._writeLit(dgi, dtree, out, pos);
              putsF(out, pos, dst - U.df0[dgi]);
              pos += U.dxb[dgi];
              off += len;
            }
          }

          pos = UZIP.F._writeLit(256, ltree, out, pos);
        } //console.log(pos-opos, fxdSize, dynSize, cstSize);


        return pos;
      };

      UZIP.F._copyExact = function (data, off, len, out, pos) {
        var p8 = pos >>> 3;
        out[p8] = len;
        out[p8 + 1] = len >>> 8;
        out[p8 + 2] = 255 - out[p8];
        out[p8 + 3] = 255 - out[p8 + 1];
        p8 += 4;
        out.set(new Uint8Array(data.buffer, off, len), p8); //for(var i=0; i<len; i++) out[p8+i]=data[off+i];

        return pos + (len + 4 << 3);
      };
      /*
      	Interesting facts:
      	- decompressed block can have bytes, which do not occur in a Huffman tree (copied from the previous block by reference)
      */


      UZIP.F.getTrees = function () {
        var U = UZIP.F.U;

        var ML = UZIP.F._hufTree(U.lhst, U.ltree, 15);

        var MD = UZIP.F._hufTree(U.dhst, U.dtree, 15);

        var lset = [],
            numl = UZIP.F._lenCodes(U.ltree, lset);

        var dset = [],
            numd = UZIP.F._lenCodes(U.dtree, dset);

        for (var i = 0; i < lset.length; i += 2) U.ihst[lset[i]]++;

        for (var i = 0; i < dset.length; i += 2) U.ihst[dset[i]]++;

        var MH = UZIP.F._hufTree(U.ihst, U.itree, 7);

        var numh = 19;

        while (numh > 4 && U.itree[(U.ordr[numh - 1] << 1) + 1] == 0) numh--;

        return [ML, MD, MH, numl, numd, numh, lset, dset];
      };

      UZIP.F.getSecond = function (a) {
        var b = [];

        for (var i = 0; i < a.length; i += 2) b.push(a[i + 1]);

        return b;
      };

      UZIP.F.nonZero = function (a) {
        var b = "";

        for (var i = 0; i < a.length; i += 2) if (a[i + 1] != 0) b += (i >> 1) + ",";

        return b;
      };

      UZIP.F.contSize = function (tree, hst) {
        var s = 0;

        for (var i = 0; i < hst.length; i++) s += hst[i] * tree[(i << 1) + 1];

        return s;
      };

      UZIP.F._codeTiny = function (set, tree, out, pos) {
        for (var i = 0; i < set.length; i += 2) {
          var l = set[i],
              rst = set[i + 1]; //console.log(l, pos, tree[(l<<1)+1]);

          pos = UZIP.F._writeLit(l, tree, out, pos);
          var rsl = l == 16 ? 2 : l == 17 ? 3 : 7;

          if (l > 15) {
            UZIP.F._putsE(out, pos, rst, rsl);

            pos += rsl;
          }
        }

        return pos;
      };

      UZIP.F._lenCodes = function (tree, set) {
        var len = tree.length;

        while (len != 2 && tree[len - 1] == 0) len -= 2; // when no distances, keep one code with length 0


        for (var i = 0; i < len; i += 2) {
          var l = tree[i + 1],
              nxt = i + 3 < len ? tree[i + 3] : -1,
              nnxt = i + 5 < len ? tree[i + 5] : -1,
              prv = i == 0 ? -1 : tree[i - 1];

          if (l == 0 && nxt == l && nnxt == l) {
            var lz = i + 5;

            while (lz + 2 < len && tree[lz + 2] == l) lz += 2;

            var zc = Math.min(lz + 1 - i >>> 1, 138);
            if (zc < 11) set.push(17, zc - 3);else set.push(18, zc - 11);
            i += zc * 2 - 2;
          } else if (l == prv && nxt == l && nnxt == l) {
            var lz = i + 5;

            while (lz + 2 < len && tree[lz + 2] == l) lz += 2;

            var zc = Math.min(lz + 1 - i >>> 1, 6);
            set.push(16, zc - 3);
            i += zc * 2 - 2;
          } else set.push(l, 0);
        }

        return len >>> 1;
      };

      UZIP.F._hufTree = function (hst, tree, MAXL) {
        var list = [],
            hl = hst.length,
            tl = tree.length,
            i = 0;

        for (i = 0; i < tl; i += 2) {
          tree[i] = 0;
          tree[i + 1] = 0;
        }

        for (i = 0; i < hl; i++) if (hst[i] != 0) list.push({
          lit: i,
          f: hst[i]
        });

        var end = list.length,
            l2 = list.slice(0);
        if (end == 0) return 0; // empty histogram (usually for dist)

        if (end == 1) {
          var lit = list[0].lit,
              l2 = lit == 0 ? 1 : 0;
          tree[(lit << 1) + 1] = 1;
          tree[(l2 << 1) + 1] = 1;
          return 1;
        }

        list.sort(function (a, b) {
          return a.f - b.f;
        });
        var a = list[0],
            b = list[1],
            i0 = 0,
            i1 = 1,
            i2 = 2;
        list[0] = {
          lit: -1,
          f: a.f + b.f,
          l: a,
          r: b,
          d: 0
        };

        while (i1 != end - 1) {
          if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {
            a = list[i0++];
          } else {
            a = list[i2++];
          }

          if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {
            b = list[i0++];
          } else {
            b = list[i2++];
          }

          list[i1++] = {
            lit: -1,
            f: a.f + b.f,
            l: a,
            r: b
          };
        }

        var maxl = UZIP.F.setDepth(list[i1 - 1], 0);

        if (maxl > MAXL) {
          UZIP.F.restrictDepth(l2, MAXL, maxl);
          maxl = MAXL;
        }

        for (i = 0; i < end; i++) tree[(l2[i].lit << 1) + 1] = l2[i].d;

        return maxl;
      };

      UZIP.F.setDepth = function (t, d) {
        if (t.lit != -1) {
          t.d = d;
          return d;
        }

        return Math.max(UZIP.F.setDepth(t.l, d + 1), UZIP.F.setDepth(t.r, d + 1));
      };

      UZIP.F.restrictDepth = function (dps, MD, maxl) {
        var i = 0,
            bCost = 1 << maxl - MD,
            dbt = 0;
        dps.sort(function (a, b) {
          return b.d == a.d ? a.f - b.f : b.d - a.d;
        });

        for (i = 0; i < dps.length; i++) if (dps[i].d > MD) {
          var od = dps[i].d;
          dps[i].d = MD;
          dbt += bCost - (1 << maxl - od);
        } else break;

        dbt = dbt >>> maxl - MD;

        while (dbt > 0) {
          var od = dps[i].d;

          if (od < MD) {
            dps[i].d++;
            dbt -= 1 << MD - od - 1;
          } else i++;
        }

        for (; i >= 0; i--) if (dps[i].d == MD && dbt < 0) {
          dps[i].d--;
          dbt++;
        }

        if (dbt != 0) console.log("debt left");
      };

      UZIP.F._goodIndex = function (v, arr) {
        var i = 0;
        if (arr[i | 16] <= v) i |= 16;
        if (arr[i | 8] <= v) i |= 8;
        if (arr[i | 4] <= v) i |= 4;
        if (arr[i | 2] <= v) i |= 2;
        if (arr[i | 1] <= v) i |= 1;
        return i;
      };

      UZIP.F._writeLit = function (ch, ltree, out, pos) {
        UZIP.F._putsF(out, pos, ltree[ch << 1]);

        return pos + ltree[(ch << 1) + 1];
      };

      UZIP.F.inflate = function (data, buf) {
        var u8 = Uint8Array;
        if (data[0] == 3 && data[1] == 0) return buf ? buf : new u8(0);
        var F = UZIP.F,
            bitsF = F._bitsF,
            bitsE = F._bitsE,
            decodeTiny = F._decodeTiny,
            makeCodes = F.makeCodes,
            codes2map = F.codes2map,
            get17 = F._get17;
        var U = F.U;
        var noBuf = buf == null;
        if (noBuf) buf = new u8(data.length >>> 2 << 3);
        var BFINAL = 0,
            BTYPE = 0,
            HLIT = 0,
            HDIST = 0,
            HCLEN = 0,
            ML = 0,
            MD = 0;
        var off = 0,
            pos = 0;
        var lmap, dmap;

        while (BFINAL == 0) {
          BFINAL = bitsF(data, pos, 1);
          BTYPE = bitsF(data, pos + 1, 2);
          pos += 3; //console.log(BFINAL, BTYPE);

          if (BTYPE == 0) {
            if ((pos & 7) != 0) pos += 8 - (pos & 7);
            var p8 = (pos >>> 3) + 4,
                len = data[p8 - 4] | data[p8 - 3] << 8; //console.log(len);//bitsF(data, pos, 16),

            if (noBuf) buf = UZIP.F._check(buf, off + len);
            buf.set(new u8(data.buffer, data.byteOffset + p8, len), off); //for(var i=0; i<len; i++) buf[off+i] = data[p8+i];
            //for(var i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw "e";

            pos = p8 + len << 3;
            off += len;
            continue;
          }

          if (noBuf) buf = UZIP.F._check(buf, off + (1 << 17)); // really not enough in many cases (but PNG and ZIP provide buffer in advance)

          if (BTYPE == 1) {
            lmap = U.flmap;
            dmap = U.fdmap;
            ML = (1 << 9) - 1;
            MD = (1 << 5) - 1;
          }

          if (BTYPE == 2) {
            HLIT = bitsE(data, pos, 5) + 257;
            HDIST = bitsE(data, pos + 5, 5) + 1;
            HCLEN = bitsE(data, pos + 10, 4) + 4;
            pos += 14;

            for (var i = 0; i < 38; i += 2) {
              U.itree[i] = 0;
              U.itree[i + 1] = 0;
            }

            var tl = 1;

            for (var i = 0; i < HCLEN; i++) {
              var l = bitsE(data, pos + i * 3, 3);
              U.itree[(U.ordr[i] << 1) + 1] = l;
              if (l > tl) tl = l;
            }

            pos += 3 * HCLEN; //console.log(itree);

            makeCodes(U.itree, tl);
            codes2map(U.itree, tl, U.imap);
            lmap = U.lmap;
            dmap = U.dmap;
            pos = decodeTiny(U.imap, (1 << tl) - 1, HLIT + HDIST, data, pos, U.ttree);

            var mx0 = F._copyOut(U.ttree, 0, HLIT, U.ltree);

            ML = (1 << mx0) - 1;

            var mx1 = F._copyOut(U.ttree, HLIT, HDIST, U.dtree);

            MD = (1 << mx1) - 1; //var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);

            makeCodes(U.ltree, mx0);
            codes2map(U.ltree, mx0, lmap); //var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);

            makeCodes(U.dtree, mx1);
            codes2map(U.dtree, mx1, dmap);
          } //var ooff=off, opos=pos;


          while (true) {
            var code = lmap[get17(data, pos) & ML];
            pos += code & 15;
            var lit = code >>> 4; //U.lhst[lit]++;

            if (lit >>> 8 == 0) {
              buf[off++] = lit;
            } else if (lit == 256) {
              break;
            } else {
              var end = off + lit - 254;

              if (lit > 264) {
                var ebs = U.ldef[lit - 257];
                end = off + (ebs >>> 3) + bitsE(data, pos, ebs & 7);
                pos += ebs & 7;
              } //UZIP.F.dst[end-off]++;


              var dcode = dmap[get17(data, pos) & MD];
              pos += dcode & 15;
              var dlit = dcode >>> 4;
              var dbs = U.ddef[dlit],
                  dst = (dbs >>> 4) + bitsF(data, pos, dbs & 15);
              pos += dbs & 15; //var o0 = off-dst, stp = Math.min(end-off, dst);
              //if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else
              //if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else
              //if(dst==1) buf.fill(buf[off-1], off, end);  else

              if (noBuf) buf = UZIP.F._check(buf, off + (1 << 17));

              while (off < end) {
                buf[off] = buf[off++ - dst];
                buf[off] = buf[off++ - dst];
                buf[off] = buf[off++ - dst];
                buf[off] = buf[off++ - dst];
              }

              off = end; //while(off!=end) {  buf[off]=buf[off++-dst];  }
            }
          } //console.log(off-ooff, (pos-opos)>>>3);

        } //console.log(UZIP.F.dst);
        //console.log(tlen, dlen, off-tlen+tcnt);


        return buf.length == off ? buf : buf.slice(0, off);
      };

      UZIP.F._check = function (buf, len) {
        var bl = buf.length;
        if (len <= bl) return buf;
        var nbuf = new Uint8Array(Math.max(bl << 1, len));
        nbuf.set(buf, 0); //for(var i=0; i<bl; i+=4) {  nbuf[i]=buf[i];  nbuf[i+1]=buf[i+1];  nbuf[i+2]=buf[i+2];  nbuf[i+3]=buf[i+3];  }

        return nbuf;
      };

      UZIP.F._decodeTiny = function (lmap, LL, len, data, pos, tree) {
        var bitsE = UZIP.F._bitsE,
            get17 = UZIP.F._get17;
        var i = 0;

        while (i < len) {
          var code = lmap[get17(data, pos) & LL];
          pos += code & 15;
          var lit = code >>> 4;

          if (lit <= 15) {
            tree[i] = lit;
            i++;
          } else {
            var ll = 0,
                n = 0;

            if (lit == 16) {
              n = 3 + bitsE(data, pos, 2);
              pos += 2;
              ll = tree[i - 1];
            } else if (lit == 17) {
              n = 3 + bitsE(data, pos, 3);
              pos += 3;
            } else if (lit == 18) {
              n = 11 + bitsE(data, pos, 7);
              pos += 7;
            }

            var ni = i + n;

            while (i < ni) {
              tree[i] = ll;
              i++;
            }
          }
        }

        return pos;
      };

      UZIP.F._copyOut = function (src, off, len, tree) {
        var mx = 0,
            i = 0,
            tl = tree.length >>> 1;

        while (i < len) {
          var v = src[i + off];
          tree[i << 1] = 0;
          tree[(i << 1) + 1] = v;
          if (v > mx) mx = v;
          i++;
        }

        while (i < tl) {
          tree[i << 1] = 0;
          tree[(i << 1) + 1] = 0;
          i++;
        }

        return mx;
      };

      UZIP.F.makeCodes = function (tree, MAX_BITS) {
        // code, length
        var U = UZIP.F.U;
        var max_code = tree.length;
        var code, bits, n, i, len;
        var bl_count = U.bl_count;

        for (var i = 0; i <= MAX_BITS; i++) bl_count[i] = 0;

        for (i = 1; i < max_code; i += 2) bl_count[tree[i]]++;

        var next_code = U.next_code; // smallest code for each length

        code = 0;
        bl_count[0] = 0;

        for (bits = 1; bits <= MAX_BITS; bits++) {
          code = code + bl_count[bits - 1] << 1;
          next_code[bits] = code;
        }

        for (n = 0; n < max_code; n += 2) {
          len = tree[n + 1];

          if (len != 0) {
            tree[n] = next_code[len];
            next_code[len]++;
          }
        }
      };

      UZIP.F.codes2map = function (tree, MAX_BITS, map) {
        var max_code = tree.length;
        var U = UZIP.F.U,
            r15 = U.rev15;

        for (var i = 0; i < max_code; i += 2) if (tree[i + 1] != 0) {
          var lit = i >> 1;
          var cl = tree[i + 1],
              val = lit << 4 | cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);

          var rest = MAX_BITS - cl,
              i0 = tree[i] << rest,
              i1 = i0 + (1 << rest); //tree[i]=r15[i0]>>>(15-MAX_BITS);

          while (i0 != i1) {
            var p0 = r15[i0] >>> 15 - MAX_BITS;
            map[p0] = val;
            i0++;
          }
        }
      };

      UZIP.F.revCodes = function (tree, MAX_BITS) {
        var r15 = UZIP.F.U.rev15,
            imb = 15 - MAX_BITS;

        for (var i = 0; i < tree.length; i += 2) {
          var i0 = tree[i] << MAX_BITS - tree[i + 1];
          tree[i] = r15[i0] >>> imb;
        }
      }; // used only in deflate


      UZIP.F._putsE = function (dt, pos, val) {
        val = val << (pos & 7);
        var o = pos >>> 3;
        dt[o] |= val;
        dt[o + 1] |= val >>> 8;
      };

      UZIP.F._putsF = function (dt, pos, val) {
        val = val << (pos & 7);
        var o = pos >>> 3;
        dt[o] |= val;
        dt[o + 1] |= val >>> 8;
        dt[o + 2] |= val >>> 16;
      };

      UZIP.F._bitsE = function (dt, pos, length) {
        return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8) >>> (pos & 7) & (1 << length) - 1;
      };

      UZIP.F._bitsF = function (dt, pos, length) {
        return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7) & (1 << length) - 1;
      };
      /*
      UZIP.F._get9 = function(dt, pos) {
      	return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;
      } */


      UZIP.F._get17 = function (dt, pos) {
        // return at least 17 meaningful bytes
        return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7);
      };

      UZIP.F._get25 = function (dt, pos) {
        // return at least 17 meaningful bytes
        return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16 | dt[(pos >>> 3) + 3] << 24) >>> (pos & 7);
      };

      UZIP.F.U = function () {
        var u16 = Uint16Array,
            u32 = Uint32Array;
        return {
          next_code: new u16(16),
          bl_count: new u16(16),
          ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
          of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],
          exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],
          ldef: new u16(32),
          df0: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],
          dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],
          ddef: new u32(32),
          flmap: new u16(512),
          fltree: [],
          fdmap: new u16(32),
          fdtree: [],
          lmap: new u16(32768),
          ltree: [],
          ttree: [],
          dmap: new u16(32768),
          dtree: [],
          imap: new u16(512),
          itree: [],
          //rev9 : new u16(  512)
          rev15: new u16(1 << 15),
          lhst: new u32(286),
          dhst: new u32(30),
          ihst: new u32(19),
          lits: new u32(15000),
          strt: new u16(1 << 16),
          prev: new u16(1 << 15)
        };
      }();

      (function () {
        var U = UZIP.F.U;
        var len = 1 << 15;

        for (var i = 0; i < len; i++) {
          var x = i;
          x = (x & 0xaaaaaaaa) >>> 1 | (x & 0x55555555) << 1;
          x = (x & 0xcccccccc) >>> 2 | (x & 0x33333333) << 2;
          x = (x & 0xf0f0f0f0) >>> 4 | (x & 0x0f0f0f0f) << 4;
          x = (x & 0xff00ff00) >>> 8 | (x & 0x00ff00ff) << 8;
          U.rev15[i] = (x >>> 16 | x << 16) >>> 17;
        }

        function pushV(tgt, n, sv) {
          while (n-- != 0) tgt.push(0, sv);
        }

        for (var i = 0; i < 32; i++) {
          U.ldef[i] = U.of0[i] << 3 | U.exb[i];
          U.ddef[i] = U.df0[i] << 4 | U.dxb[i];
        }

        pushV(U.fltree, 144, 8);
        pushV(U.fltree, 255 - 143, 9);
        pushV(U.fltree, 279 - 255, 7);
        pushV(U.fltree, 287 - 279, 8);
        /*
        var i = 0;
        for(; i<=143; i++) U.fltree.push(0,8);
        for(; i<=255; i++) U.fltree.push(0,9);
        for(; i<=279; i++) U.fltree.push(0,7);
        for(; i<=287; i++) U.fltree.push(0,8);
        */

        UZIP.F.makeCodes(U.fltree, 9);
        UZIP.F.codes2map(U.fltree, 9, U.flmap);
        UZIP.F.revCodes(U.fltree, 9);
        pushV(U.fdtree, 32, 5); //for(i=0;i<32; i++) U.fdtree.push(0,5);

        UZIP.F.makeCodes(U.fdtree, 5);
        UZIP.F.codes2map(U.fdtree, 5, U.fdmap);
        UZIP.F.revCodes(U.fdtree, 5);
        pushV(U.itree, 19, 0);
        pushV(U.ltree, 286, 0);
        pushV(U.dtree, 30, 0);
        pushV(U.ttree, 320, 0);
        /*
        for(var i=0; i< 19; i++) U.itree.push(0,0);
        for(var i=0; i<286; i++) U.ltree.push(0,0);
        for(var i=0; i< 30; i++) U.dtree.push(0,0);
        for(var i=0; i<320; i++) U.ttree.push(0,0);
        */
      })();

      UNPNG.toRGBA8 = function (out) {
        var w = out.width,
            h = out.height;
        if (out.tabs.acTL == null) return [UNPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer];
        var frms = [];
        if (out.frames[0].data == null) out.frames[0].data = out.data;
        var len = w * h * 4,
            img = new Uint8Array(len),
            empty = new Uint8Array(len),
            prev = new Uint8Array(len);

        for (var i = 0; i < out.frames.length; i++) {
          var frm = out.frames[i];
          var fx = frm.rect.x,
              fy = frm.rect.y,
              fw = frm.rect.width,
              fh = frm.rect.height;
          var fdata = UNPNG.toRGBA8.decodeImage(frm.data, fw, fh, out);
          if (i != 0) for (var j = 0; j < len; j++) prev[j] = img[j];
          if (frm.blend == 0) UNPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);else if (frm.blend == 1) UNPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);
          frms.push(img.buffer.slice(0));
          if (frm.dispose == 0) ;else if (frm.dispose == 1) UNPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);else if (frm.dispose == 2) for (var j = 0; j < len; j++) img[j] = prev[j];
        }

        return frms;
      };

      UNPNG.toRGBA8.decodeImage = function (data, w, h, out) {
        var area = w * h,
            bpp = UNPNG.decode._getBPP(out);

        var bpl = Math.ceil(w * bpp / 8); // bytes per line

        var bf = new Uint8Array(area * 4),
            bf32 = new Uint32Array(bf.buffer);
        var ctype = out.ctype,
            depth = out.depth;
        var rs = UNPNG._bin.readUshort;

        if (ctype == 6) {
          // RGB + alpha
          var qarea = area << 2;
          if (depth == 8) for (var i = 0; i < qarea; i += 4) {
            bf[i] = data[i];
            bf[i + 1] = data[i + 1];
            bf[i + 2] = data[i + 2];
            bf[i + 3] = data[i + 3];
          }
          if (depth == 16) for (var i = 0; i < qarea; i++) {
            bf[i] = data[i << 1];
          }
        } else if (ctype == 2) {
          // RGB
          var ts = out.tabs["tRNS"];

          if (ts == null) {
            if (depth == 8) for (var i = 0; i < area; i++) {
              var ti = i * 3;
              bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];
            }
            if (depth == 16) for (var i = 0; i < area; i++) {
              var ti = i * 6;
              bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];
            }
          } else {
            var tr = ts[0],
                tg = ts[1],
                tb = ts[2];
            if (depth == 8) for (var i = 0; i < area; i++) {
              var qi = i << 2,
                  ti = i * 3;
              bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];
              if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0;
            }
            if (depth == 16) for (var i = 0; i < area; i++) {
              var qi = i << 2,
                  ti = i * 6;
              bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];
              if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0;
            }
          }
        } else if (ctype == 3) {
          // palette
          var p = out.tabs["PLTE"],
              ap = out.tabs["tRNS"],
              tl = ap ? ap.length : 0; //console.log(p, ap);

          if (depth == 1) for (var y = 0; y < h; y++) {
            var s0 = y * bpl,
                t0 = y * w;

            for (var i = 0; i < w; i++) {
              var qi = t0 + i << 2,
                  j = data[s0 + (i >> 3)] >> 7 - ((i & 7) << 0) & 1,
                  cj = 3 * j;
              bf[qi] = p[cj];
              bf[qi + 1] = p[cj + 1];
              bf[qi + 2] = p[cj + 2];
              bf[qi + 3] = j < tl ? ap[j] : 255;
            }
          }
          if (depth == 2) for (var y = 0; y < h; y++) {
            var s0 = y * bpl,
                t0 = y * w;

            for (var i = 0; i < w; i++) {
              var qi = t0 + i << 2,
                  j = data[s0 + (i >> 2)] >> 6 - ((i & 3) << 1) & 3,
                  cj = 3 * j;
              bf[qi] = p[cj];
              bf[qi + 1] = p[cj + 1];
              bf[qi + 2] = p[cj + 2];
              bf[qi + 3] = j < tl ? ap[j] : 255;
            }
          }
          if (depth == 4) for (var y = 0; y < h; y++) {
            var s0 = y * bpl,
                t0 = y * w;

            for (var i = 0; i < w; i++) {
              var qi = t0 + i << 2,
                  j = data[s0 + (i >> 1)] >> 4 - ((i & 1) << 2) & 15,
                  cj = 3 * j;
              bf[qi] = p[cj];
              bf[qi + 1] = p[cj + 1];
              bf[qi + 2] = p[cj + 2];
              bf[qi + 3] = j < tl ? ap[j] : 255;
            }
          }
          if (depth == 8) for (var i = 0; i < area; i++) {
            var qi = i << 2,
                j = data[i],
                cj = 3 * j;
            bf[qi] = p[cj];
            bf[qi + 1] = p[cj + 1];
            bf[qi + 2] = p[cj + 2];
            bf[qi + 3] = j < tl ? ap[j] : 255;
          }
        } else if (ctype == 4) {
          // gray + alpha
          if (depth == 8) for (var i = 0; i < area; i++) {
            var qi = i << 2,
                di = i << 1,
                gr = data[di];
            bf[qi] = gr;
            bf[qi + 1] = gr;
            bf[qi + 2] = gr;
            bf[qi + 3] = data[di + 1];
          }
          if (depth == 16) for (var i = 0; i < area; i++) {
            var qi = i << 2,
                di = i << 2,
                gr = data[di];
            bf[qi] = gr;
            bf[qi + 1] = gr;
            bf[qi + 2] = gr;
            bf[qi + 3] = data[di + 2];
          }
        } else if (ctype == 0) {
          // gray
          var tr = out.tabs["tRNS"] ? out.tabs["tRNS"] : -1;

          for (var y = 0; y < h; y++) {
            var off = y * bpl,
                to = y * w;
            if (depth == 1) for (var x = 0; x < w; x++) {
              var gr = 255 * (data[off + (x >>> 3)] >>> 7 - (x & 7) & 1),
                  al = gr == tr * 255 ? 0 : 255;
              bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;
            } else if (depth == 2) for (var x = 0; x < w; x++) {
              var gr = 85 * (data[off + (x >>> 2)] >>> 6 - ((x & 3) << 1) & 3),
                  al = gr == tr * 85 ? 0 : 255;
              bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;
            } else if (depth == 4) for (var x = 0; x < w; x++) {
              var gr = 17 * (data[off + (x >>> 1)] >>> 4 - ((x & 1) << 2) & 15),
                  al = gr == tr * 17 ? 0 : 255;
              bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;
            } else if (depth == 8) for (var x = 0; x < w; x++) {
              var gr = data[off + x],
                  al = gr == tr ? 0 : 255;
              bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;
            } else if (depth == 16) for (var x = 0; x < w; x++) {
              var gr = data[off + (x << 1)],
                  al = rs(data, off + (x << 1)) == tr ? 0 : 255;
              bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;
            }
          }
        } //console.log(Date.now()-time);


        return bf;
      };

      UNPNG.decode = function (buff) {
        var data = new Uint8Array(buff),
            offset = 8,
            bin = UNPNG._bin,
            rUs = bin.readUshort,
            rUi = bin.readUint;
        var out = {
          tabs: {},
          frames: []
        };
        var dd = new Uint8Array(data.length),
            doff = 0; // put all IDAT data into it

        var fd,
            foff = 0; // frames

        var mgck = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];

        for (var i = 0; i < 8; i++) if (data[i] != mgck[i]) throw "The input is not a PNG file!";

        while (offset < data.length) {
          var len = bin.readUint(data, offset);
          offset += 4;
          var type = bin.readASCII(data, offset, 4);
          offset += 4; //console.log(type,len);

          if (type == "IHDR") {
            UNPNG.decode._IHDR(data, offset, out);
          } else if (type == "CgBI") {
            out.tabs[type] = data.slice(offset, offset + 4);
          } else if (type == "IDAT") {
            for (var i = 0; i < len; i++) dd[doff + i] = data[offset + i];

            doff += len;
          } else if (type == "acTL") {
            out.tabs[type] = {
              num_frames: rUi(data, offset),
              num_plays: rUi(data, offset + 4)
            };
            fd = new Uint8Array(data.length);
          } else if (type == "fcTL") {
            if (foff != 0) {
              var fr = out.frames[out.frames.length - 1];
              fr.data = UNPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);
              foff = 0;
            }

            var rct = {
              x: rUi(data, offset + 12),
              y: rUi(data, offset + 16),
              width: rUi(data, offset + 4),
              height: rUi(data, offset + 8)
            };
            var del = rUs(data, offset + 22);
            del = rUs(data, offset + 20) / (del == 0 ? 100 : del);
            var frm = {
              rect: rct,
              delay: Math.round(del * 1000),
              dispose: data[offset + 24],
              blend: data[offset + 25]
            }; //console.log(frm);

            out.frames.push(frm);
          } else if (type == "fdAT") {
            for (var i = 0; i < len - 4; i++) fd[foff + i] = data[offset + i + 4];

            foff += len - 4;
          } else if (type == "pHYs") {
            out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]];
          } else if (type == "cHRM") {
            out.tabs[type] = [];

            for (var i = 0; i < 8; i++) out.tabs[type].push(bin.readUint(data, offset + i * 4));
          } else if (type == "tEXt" || type == "zTXt") {
            if (out.tabs[type] == null) out.tabs[type] = {};
            var nz = bin.nextZero(data, offset);
            var keyw = bin.readASCII(data, offset, nz - offset);
            var text,
                tl = offset + len - nz - 1;
            if (type == "tEXt") text = bin.readASCII(data, nz + 1, tl);else {
              var bfr = UNPNG.decode._inflate(data.slice(nz + 2, nz + 2 + tl));

              text = bin.readUTF8(bfr, 0, bfr.length);
            }
            out.tabs[type][keyw] = text;
          } else if (type == "iTXt") {
            if (out.tabs[type] == null) out.tabs[type] = {};
            var nz = 0,
                off = offset;
            nz = bin.nextZero(data, off);
            var keyw = bin.readASCII(data, off, nz - off);
            off = nz + 1;
            var cflag = data[off];
            off += 2;
            nz = bin.nextZero(data, off);
            var ltag = bin.readASCII(data, off, nz - off);
            off = nz + 1;
            nz = bin.nextZero(data, off);
            var tkeyw = bin.readUTF8(data, off, nz - off);
            off = nz + 1;
            var text,
                tl = len - (off - offset);
            if (cflag == 0) text = bin.readUTF8(data, off, tl);else {
              var bfr = UNPNG.decode._inflate(data.slice(off, off + tl));

              text = bin.readUTF8(bfr, 0, bfr.length);
            }
            out.tabs[type][keyw] = text;
          } else if (type == "PLTE") {
            out.tabs[type] = bin.readBytes(data, offset, len);
          } else if (type == "hIST") {
            var pl = out.tabs["PLTE"].length / 3;
            out.tabs[type] = [];

            for (var i = 0; i < pl; i++) out.tabs[type].push(rUs(data, offset + i * 2));
          } else if (type == "tRNS") {
            if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len);else if (out.ctype == 0) out.tabs[type] = rUs(data, offset);else if (out.ctype == 2) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)]; //else console.log("tRNS for unsupported color type",out.ctype, len);
          } else if (type == "gAMA") out.tabs[type] = bin.readUint(data, offset) / 100000;else if (type == "sRGB") out.tabs[type] = data[offset];else if (type == "bKGD") {
            if (out.ctype == 0 || out.ctype == 4) out.tabs[type] = [rUs(data, offset)];else if (out.ctype == 2 || out.ctype == 6) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];else if (out.ctype == 3) out.tabs[type] = data[offset];
          } else if (type == "IEND") {
            break;
          } //else {  console.log("unknown chunk type", type, len);  out.tabs[type]=data.slice(offset,offset+len);  }


          offset += len;
          var crc = bin.readUint(data, offset);
          offset += 4;
        }

        if (foff != 0) {
          var fr = out.frames[out.frames.length - 1];
          fr.data = UNPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);
        }

        out.data = UNPNG.decode._decompress(out, dd, out.width, out.height);
        delete out.compress;
        delete out.interlace;
        delete out.filter;
        return out;
      };

      UNPNG.decode._decompress = function (out, dd, w, h) {
        var bpp = UNPNG.decode._getBPP(out),
            bpl = Math.ceil(w * bpp / 8),
            buff = new Uint8Array((bpl + 1 + out.interlace) * h);

        if (out.tabs["CgBI"]) dd = UNPNG.inflateRaw(dd, buff);else dd = UNPNG.decode._inflate(dd, buff);
        if (out.interlace == 0) dd = UNPNG.decode._filterZero(dd, out, 0, w, h);else if (out.interlace == 1) dd = UNPNG.decode._readInterlace(dd, out); //console.log(Date.now()-time);

        return dd;
      };

      UNPNG.decode._inflate = function (data, buff) {
        var out = UNPNG["inflateRaw"](new Uint8Array(data.buffer, 2, data.length - 6), buff);
        return out;
      };

      UNPNG.inflateRaw = function () {
        var H = {};
        H.H = {};

        H.H.N = function (N, W) {
          var R = Uint8Array,
              i = 0,
              m = 0,
              J = 0,
              h = 0,
              Q = 0,
              X = 0,
              u = 0,
              w = 0,
              d = 0,
              v,
              C;
          if (N[0] == 3 && N[1] == 0) return W ? W : new R(0);
          var V = H.H,
              n = V.b,
              A = V.e,
              l = V.R,
              M = V.n,
              I = V.A,
              e = V.Z,
              b = V.m,
              Z = W == null;
          if (Z) W = new R(N.length >>> 2 << 5);

          while (i == 0) {
            i = n(N, d, 1);
            m = n(N, d + 1, 2);
            d += 3;

            if (m == 0) {
              if ((d & 7) != 0) d += 8 - (d & 7);
              var D = (d >>> 3) + 4,
                  q = N[D - 4] | N[D - 3] << 8;
              if (Z) W = H.H.W(W, w + q);
              W.set(new R(N.buffer, N.byteOffset + D, q), w);
              d = D + q << 3;
              w += q;
              continue;
            }

            if (Z) W = H.H.W(W, w + (1 << 17));

            if (m == 1) {
              v = b.J;
              C = b.h;
              X = (1 << 9) - 1;
              u = (1 << 5) - 1;
            }

            if (m == 2) {
              J = A(N, d, 5) + 257;
              h = A(N, d + 5, 5) + 1;
              Q = A(N, d + 10, 4) + 4;
              d += 14;
              var j = 1;

              for (var c = 0; c < 38; c += 2) {
                b.Q[c] = 0;
                b.Q[c + 1] = 0;
              }

              for (var c = 0; c < Q; c++) {
                var K = A(N, d + c * 3, 3);
                b.Q[(b.X[c] << 1) + 1] = K;
                if (K > j) j = K;
              }

              d += 3 * Q;
              M(b.Q, j);
              I(b.Q, j, b.u);
              v = b.w;
              C = b.d;
              d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);
              var r = V.V(b.v, 0, J, b.C);
              X = (1 << r) - 1;
              var S = V.V(b.v, J, h, b.D);
              u = (1 << S) - 1;
              M(b.C, r);
              I(b.C, r, v);
              M(b.D, S);
              I(b.D, S, C);
            }

            while (!0) {
              var T = v[e(N, d) & X];
              d += T & 15;
              var p = T >>> 4;

              if (p >>> 8 == 0) {
                W[w++] = p;
              } else if (p == 256) {
                break;
              } else {
                var z = w + p - 254;

                if (p > 264) {
                  var _ = b.q[p - 257];
                  z = w + (_ >>> 3) + A(N, d, _ & 7);
                  d += _ & 7;
                }

                var $ = C[e(N, d) & u];
                d += $ & 15;
                var s = $ >>> 4,
                    Y = b.c[s],
                    a = (Y >>> 4) + n(N, d, Y & 15);
                d += Y & 15;

                while (w < z) {
                  W[w] = W[w++ - a];
                  W[w] = W[w++ - a];
                  W[w] = W[w++ - a];
                  W[w] = W[w++ - a];
                }

                w = z;
              }
            }
          }

          return W.length == w ? W : W.slice(0, w);
        };

        H.H.W = function (N, W) {
          var R = N.length;
          if (W <= R) return N;
          var V = new Uint8Array(R << 1);
          V.set(N, 0);
          return V;
        };

        H.H.R = function (N, W, R, V, n, A) {
          var l = H.H.e,
              M = H.H.Z,
              I = 0;

          while (I < R) {
            var e = N[M(V, n) & W];
            n += e & 15;
            var b = e >>> 4;

            if (b <= 15) {
              A[I] = b;
              I++;
            } else {
              var Z = 0,
                  m = 0;

              if (b == 16) {
                m = 3 + l(V, n, 2);
                n += 2;
                Z = A[I - 1];
              } else if (b == 17) {
                m = 3 + l(V, n, 3);
                n += 3;
              } else if (b == 18) {
                m = 11 + l(V, n, 7);
                n += 7;
              }

              var J = I + m;

              while (I < J) {
                A[I] = Z;
                I++;
              }
            }
          }

          return n;
        };

        H.H.V = function (N, W, R, V) {
          var n = 0,
              A = 0,
              l = V.length >>> 1;

          while (A < R) {
            var M = N[A + W];
            V[A << 1] = 0;
            V[(A << 1) + 1] = M;
            if (M > n) n = M;
            A++;
          }

          while (A < l) {
            V[A << 1] = 0;
            V[(A << 1) + 1] = 0;
            A++;
          }

          return n;
        };

        H.H.n = function (N, W) {
          var R = H.H.m,
              V = N.length,
              n,
              A,
              l,
              M,
              I,
              e = R.j;

          for (var M = 0; M <= W; M++) e[M] = 0;

          for (M = 1; M < V; M += 2) e[N[M]]++;

          var b = R.K;
          n = 0;
          e[0] = 0;

          for (A = 1; A <= W; A++) {
            n = n + e[A - 1] << 1;
            b[A] = n;
          }

          for (l = 0; l < V; l += 2) {
            I = N[l + 1];

            if (I != 0) {
              N[l] = b[I];
              b[I]++;
            }
          }
        };

        H.H.A = function (N, W, R) {
          var V = N.length,
              n = H.H.m,
              A = n.r;

          for (var l = 0; l < V; l += 2) if (N[l + 1] != 0) {
            var M = l >> 1,
                I = N[l + 1],
                e = M << 4 | I,
                b = W - I,
                Z = N[l] << b,
                m = Z + (1 << b);

            while (Z != m) {
              var J = A[Z] >>> 15 - W;
              R[J] = e;
              Z++;
            }
          }
        };

        H.H.l = function (N, W) {
          var R = H.H.m.r,
              V = 15 - W;

          for (var n = 0; n < N.length; n += 2) {
            var A = N[n] << W - N[n + 1];
            N[n] = R[A] >>> V;
          }
        };

        H.H.M = function (N, W, R) {
          R = R << (W & 7);
          var V = W >>> 3;
          N[V] |= R;
          N[V + 1] |= R >>> 8;
        };

        H.H.I = function (N, W, R) {
          R = R << (W & 7);
          var V = W >>> 3;
          N[V] |= R;
          N[V + 1] |= R >>> 8;
          N[V + 2] |= R >>> 16;
        };

        H.H.e = function (N, W, R) {
          return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1;
        };

        H.H.b = function (N, W, R) {
          return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1;
        };

        H.H.Z = function (N, W) {
          return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7);
        };

        H.H.i = function (N, W) {
          return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7);
        };

        H.H.m = function () {
          var N = Uint16Array,
              W = Uint32Array;
          return {
            K: new N(16),
            j: new N(16),
            X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
            S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],
            T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],
            q: new N(32),
            p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],
            z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],
            c: new W(32),
            J: new N(512),
            _: [],
            h: new N(32),
            $: [],
            w: new N(32768),
            C: [],
            v: [],
            d: new N(32768),
            D: [],
            u: new N(512),
            Q: [],
            r: new N(1 << 15),
            s: new W(286),
            Y: new W(30),
            a: new W(19),
            t: new W(15e3),
            k: new N(1 << 16),
            g: new N(1 << 15)
          };
        }();

        (function () {
          var N = H.H.m,
              W = 1 << 15;

          for (var R = 0; R < W; R++) {
            var V = R;
            V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;
            V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;
            V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;
            V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;
            N.r[R] = (V >>> 16 | V << 16) >>> 17;
          }

          function n(A, l, M) {
            while (l-- != 0) A.push(0, M);
          }

          for (var R = 0; R < 32; R++) {
            N.q[R] = N.S[R] << 3 | N.T[R];
            N.c[R] = N.p[R] << 4 | N.z[R];
          }

          n(N._, 144, 8);
          n(N._, 255 - 143, 9);
          n(N._, 279 - 255, 7);
          n(N._, 287 - 279, 8);
          H.H.n(N._, 9);
          H.H.A(N._, 9, N.J);
          H.H.l(N._, 9);
          n(N.$, 32, 5);
          H.H.n(N.$, 5);
          H.H.A(N.$, 5, N.h);
          H.H.l(N.$, 5);
          n(N.Q, 19, 0);
          n(N.C, 286, 0);
          n(N.D, 30, 0);
          n(N.v, 320, 0);
        })();

        return H.H.N;
      }();

      UNPNG.decode._readInterlace = function (data, out) {
        var w = out.width,
            h = out.height;

        var bpp = UNPNG.decode._getBPP(out),
            cbpp = bpp >> 3,
            bpl = Math.ceil(w * bpp / 8);

        var img = new Uint8Array(h * bpl);
        var di = 0;
        var starting_row = [0, 0, 4, 0, 2, 0, 1];
        var starting_col = [0, 4, 0, 2, 0, 1, 0];
        var row_increment = [8, 8, 8, 4, 4, 2, 2];
        var col_increment = [8, 8, 4, 4, 2, 2, 1];
        var pass = 0;

        while (pass < 7) {
          var ri = row_increment[pass],
              ci = col_increment[pass];
          var sw = 0,
              sh = 0;
          var cr = starting_row[pass];

          while (cr < h) {
            cr += ri;
            sh++;
          }

          var cc = starting_col[pass];

          while (cc < w) {
            cc += ci;
            sw++;
          }

          var bpll = Math.ceil(sw * bpp / 8);

          UNPNG.decode._filterZero(data, out, di, sw, sh);

          var y = 0,
              row = starting_row[pass];

          while (row < h) {
            var col = starting_col[pass];
            var cdi = di + y * bpll << 3;

            while (col < w) {
              if (bpp == 1) {
                var val = data[cdi >> 3];
                val = val >> 7 - (cdi & 7) & 1;
                img[row * bpl + (col >> 3)] |= val << 7 - ((col & 7) << 0);
              }

              if (bpp == 2) {
                var val = data[cdi >> 3];
                val = val >> 6 - (cdi & 7) & 3;
                img[row * bpl + (col >> 2)] |= val << 6 - ((col & 3) << 1);
              }

              if (bpp == 4) {
                var val = data[cdi >> 3];
                val = val >> 4 - (cdi & 7) & 15;
                img[row * bpl + (col >> 1)] |= val << 4 - ((col & 1) << 2);
              }

              if (bpp >= 8) {
                var ii = row * bpl + col * cbpp;

                for (var j = 0; j < cbpp; j++) img[ii + j] = data[(cdi >> 3) + j];
              }

              cdi += bpp;
              col += ci;
            }

            y++;
            row += ri;
          }

          if (sw * sh != 0) di += sh * (1 + bpll);
          pass = pass + 1;
        }

        return img;
      };

      UNPNG.decode._getBPP = function (out) {
        var noc = [1, null, 3, 1, 2, null, 4][out.ctype];
        return noc * out.depth;
      };

      UNPNG.decode._filterZero = function (data, out, off, w, h) {
        var bpp = UNPNG.decode._getBPP(out),
            bpl = Math.ceil(w * bpp / 8),
            paeth = UNPNG.decode._paeth;

        bpp = Math.ceil(bpp / 8);
        var i,
            di,
            type = data[off],
            x = 0;
        if (type > 1) data[off] = [0, 0, 1][type - 2];
        if (type == 3) for (x = bpp; x < bpl; x++) data[x + 1] = data[x + 1] + (data[x + 1 - bpp] >>> 1) & 255;

        for (var y = 0; y < h; y++) {
          i = off + y * bpl;
          di = i + y + 1;
          type = data[di - 1];
          x = 0;
          if (type == 0) for (; x < bpl; x++) data[i + x] = data[di + x];else if (type == 1) {
            for (; x < bpp; x++) data[i + x] = data[di + x];

            for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpp];
          } else if (type == 2) {
            for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpl];
          } else if (type == 3) {
            for (; x < bpp; x++) data[i + x] = data[di + x] + (data[i + x - bpl] >>> 1);

            for (; x < bpl; x++) data[i + x] = data[di + x] + (data[i + x - bpl] + data[i + x - bpp] >>> 1);
          } else {
            for (; x < bpp; x++) data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0);

            for (; x < bpl; x++) data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]);
          }
        }

        return data;
      };

      UNPNG.decode._paeth = function (a, b, c) {
        var p = a + b - c,
            pa = p - a,
            pb = p - b,
            pc = p - c;
        if (pa * pa <= pb * pb && pa * pa <= pc * pc) return a;else if (pb * pb <= pc * pc) return b;
        return c;
      };

      UNPNG.decode._IHDR = function (data, offset, out) {
        var bin = UNPNG._bin;
        out.width = bin.readUint(data, offset);
        offset += 4;
        out.height = bin.readUint(data, offset);
        offset += 4;
        out.depth = data[offset];
        offset++;
        out.ctype = data[offset];
        offset++;
        out.compress = data[offset];
        offset++;
        out.filter = data[offset];
        offset++;
        out.interlace = data[offset];
        offset++;
      };

      UNPNG._bin = {
        nextZero: function (data, p) {
          while (data[p] != 0) p++;

          return p;
        },
        readUshort: function (buff, p) {
          return buff[p] << 8 | buff[p + 1];
        },
        writeUshort: function (buff, p, n) {
          buff[p] = n >> 8 & 255;
          buff[p + 1] = n & 255;
        },
        readUint: function (buff, p) {
          return buff[p] * (256 * 256 * 256) + (buff[p + 1] << 16 | buff[p + 2] << 8 | buff[p + 3]);
        },
        writeUint: function (buff, p, n) {
          buff[p] = n >> 24 & 255;
          buff[p + 1] = n >> 16 & 255;
          buff[p + 2] = n >> 8 & 255;
          buff[p + 3] = n & 255;
        },
        readASCII: function (buff, p, l) {
          var s = "";

          for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);

          return s;
        },
        writeASCII: function (data, p, s) {
          for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);
        },
        readBytes: function (buff, p, l) {
          var arr = [];

          for (var i = 0; i < l; i++) arr.push(buff[p + i]);

          return arr;
        },
        pad: function (n) {
          return n.length < 2 ? "0" + n : n;
        },
        readUTF8: function (buff, p, l) {
          var s = "",
              ns;

          for (var i = 0; i < l; i++) s += "%" + UNPNG._bin.pad(buff[p + i].toString(16));

          try {
            ns = decodeURIComponent(s);
          } catch (e) {
            return UNPNG._bin.readASCII(buff, p, l);
          }

          return ns;
        }
      };

      UNPNG._copyTile = function (sb, sw, sh, tb, tw, th, xoff, yoff, mode) {
        var w = Math.min(sw, tw),
            h = Math.min(sh, th);
        var si = 0,
            ti = 0;

        for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {
          if (xoff >= 0 && yoff >= 0) {
            si = y * sw + x << 2;
            ti = (yoff + y) * tw + xoff + x << 2;
          } else {
            si = (-yoff + y) * sw - xoff + x << 2;
            ti = y * tw + x << 2;
          }

          if (mode == 0) {
            tb[ti] = sb[si];
            tb[ti + 1] = sb[si + 1];
            tb[ti + 2] = sb[si + 2];
            tb[ti + 3] = sb[si + 3];
          } else if (mode == 1) {
            var fa = sb[si + 3] * (1 / 255),
                fr = sb[si] * fa,
                fg = sb[si + 1] * fa,
                fb = sb[si + 2] * fa;
            var ba = tb[ti + 3] * (1 / 255),
                br = tb[ti] * ba,
                bg = tb[ti + 1] * ba,
                bb = tb[ti + 2] * ba;
            var ifa = 1 - fa,
                oa = fa + ba * ifa,
                ioa = oa == 0 ? 0 : 1 / oa;
            tb[ti + 3] = 255 * oa;
            tb[ti + 0] = (fr + br * ifa) * ioa;
            tb[ti + 1] = (fg + bg * ifa) * ioa;
            tb[ti + 2] = (fb + bb * ifa) * ioa;
          } else if (mode == 2) {
            // copy only differences, otherwise zero
            var fa = sb[si + 3],
                fr = sb[si],
                fg = sb[si + 1],
                fb = sb[si + 2];
            var ba = tb[ti + 3],
                br = tb[ti],
                bg = tb[ti + 1],
                bb = tb[ti + 2];

            if (fa == ba && fr == br && fg == bg && fb == bb) {
              tb[ti] = 0;
              tb[ti + 1] = 0;
              tb[ti + 2] = 0;
              tb[ti + 3] = 0;
            } else {
              tb[ti] = fr;
              tb[ti + 1] = fg;
              tb[ti + 2] = fb;
              tb[ti + 3] = fa;
            }
          } else if (mode == 3) {
            // check if can be blended
            var fa = sb[si + 3],
                fr = sb[si],
                fg = sb[si + 1],
                fb = sb[si + 2];
            var ba = tb[ti + 3],
                br = tb[ti],
                bg = tb[ti + 1],
                bb = tb[ti + 2];
            if (fa == ba && fr == br && fg == bg && fb == bb) continue; //if(fa!=255 && ba!=0) return false;

            if (fa < 220 && ba > 20) return false;
          }
        }

        return true;
      };

      UNPNG.encode = function (bufs, w, h, ps, dels, tabs, forbidPlte) {
        if (ps == null) ps = 0;
        if (forbidPlte == null) forbidPlte = false;
        var nimg = UNPNG.encode.compress(bufs, w, h, ps, [false, false, false, 0, forbidPlte, false]);
        UNPNG.encode.compressPNG(nimg, -1);
        return UNPNG.encode._main(nimg, w, h, dels, tabs);
      };

      UNPNG.encodeLL = function (bufs, w, h, cc, ac, depth, dels, tabs) {
        var nimg = {
          ctype: 0 + (cc == 1 ? 0 : 2) + (ac == 0 ? 0 : 4),
          depth: depth,
          frames: []
        };
        var bipp = (cc + ac) * depth,
            bipl = bipp * w;

        for (var i = 0; i < bufs.length; i++) nimg.frames.push({
          rect: {
            x: 0,
            y: 0,
            width: w,
            height: h
          },
          img: new Uint8Array(bufs[i]),
          blend: 0,
          dispose: 1,
          bpp: Math.ceil(bipp / 8),
          bpl: Math.ceil(bipl / 8)
        });

        UNPNG.encode.compressPNG(nimg, 0, true);

        var out = UNPNG.encode._main(nimg, w, h, dels, tabs);

        return out;
      };

      UNPNG.encode._main = function (nimg, w, h, dels, tabs) {
        if (tabs == null) tabs = {};
        var crc = UNPNG.crc.crc,
            wUi = UNPNG._bin.writeUint,
            wUs = UNPNG._bin.writeUshort,
            wAs = UNPNG._bin.writeASCII;
        var offset = 8,
            anim = nimg.frames.length > 1,
            pltAlpha = false;
        var leng = 8 + (16 + 5 + 4)
        /*+ (9+4)*/
        + (anim ? 20 : 0);
        if (tabs["sRGB"] != null) leng += 8 + 1 + 4;
        if (tabs["pHYs"] != null) leng += 8 + 9 + 4;

        if (nimg.ctype == 3) {
          var dl = nimg.plte.length;

          for (var i = 0; i < dl; i++) if (nimg.plte[i] >>> 24 != 255) pltAlpha = true;

          leng += 8 + dl * 3 + 4 + (pltAlpha ? 8 + dl * 1 + 4 : 0);
        }

        for (var j = 0; j < nimg.frames.length; j++) {
          var fr = nimg.frames[j];
          if (anim) leng += 38;
          leng += fr.cimg.length + 12;
          if (j != 0) leng += 4;
        }

        leng += 12;
        var data = new Uint8Array(leng);
        var wr = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];

        for (var i = 0; i < 8; i++) data[i] = wr[i];

        wUi(data, offset, 13);
        offset += 4;
        wAs(data, offset, "IHDR");
        offset += 4;
        wUi(data, offset, w);
        offset += 4;
        wUi(data, offset, h);
        offset += 4;
        data[offset] = nimg.depth;
        offset++; // depth

        data[offset] = nimg.ctype;
        offset++; // ctype

        data[offset] = 0;
        offset++; // compress

        data[offset] = 0;
        offset++; // filter

        data[offset] = 0;
        offset++; // interlace

        wUi(data, offset, crc(data, offset - 17, 17));
        offset += 4; // crc
        // 13 bytes to say, that it is sRGB

        if (tabs["sRGB"] != null) {
          wUi(data, offset, 1);
          offset += 4;
          wAs(data, offset, "sRGB");
          offset += 4;
          data[offset] = tabs["sRGB"];
          offset++;
          wUi(data, offset, crc(data, offset - 5, 5));
          offset += 4; // crc
        }

        if (tabs["pHYs"] != null) {
          wUi(data, offset, 9);
          offset += 4;
          wAs(data, offset, "pHYs");
          offset += 4;
          wUi(data, offset, tabs["pHYs"][0]);
          offset += 4;
          wUi(data, offset, tabs["pHYs"][1]);
          offset += 4;
          data[offset] = tabs["pHYs"][2];
          offset++;
          wUi(data, offset, crc(data, offset - 13, 13));
          offset += 4; // crc
        }

        if (anim) {
          wUi(data, offset, 8);
          offset += 4;
          wAs(data, offset, "acTL");
          offset += 4;
          wUi(data, offset, nimg.frames.length);
          offset += 4;
          wUi(data, offset, tabs["loop"] != null ? tabs["loop"] : 0);
          offset += 4;
          wUi(data, offset, crc(data, offset - 12, 12));
          offset += 4; // crc
        }

        if (nimg.ctype == 3) {
          var dl = nimg.plte.length;
          wUi(data, offset, dl * 3);
          offset += 4;
          wAs(data, offset, "PLTE");
          offset += 4;

          for (var i = 0; i < dl; i++) {
            var ti = i * 3,
                c = nimg.plte[i],
                r = c & 255,
                g = c >>> 8 & 255,
                b = c >>> 16 & 255;
            data[offset + ti + 0] = r;
            data[offset + ti + 1] = g;
            data[offset + ti + 2] = b;
          }

          offset += dl * 3;
          wUi(data, offset, crc(data, offset - dl * 3 - 4, dl * 3 + 4));
          offset += 4; // crc

          if (pltAlpha) {
            wUi(data, offset, dl);
            offset += 4;
            wAs(data, offset, "tRNS");
            offset += 4;

            for (var i = 0; i < dl; i++) data[offset + i] = nimg.plte[i] >>> 24 & 255;

            offset += dl;
            wUi(data, offset, crc(data, offset - dl - 4, dl + 4));
            offset += 4; // crc
          }
        }

        var fi = 0;

        for (var j = 0; j < nimg.frames.length; j++) {
          var fr = nimg.frames[j];

          if (anim) {
            wUi(data, offset, 26);
            offset += 4;
            wAs(data, offset, "fcTL");
            offset += 4;
            wUi(data, offset, fi++);
            offset += 4;
            wUi(data, offset, fr.rect.width);
            offset += 4;
            wUi(data, offset, fr.rect.height);
            offset += 4;
            wUi(data, offset, fr.rect.x);
            offset += 4;
            wUi(data, offset, fr.rect.y);
            offset += 4;
            wUs(data, offset, dels[j]);
            offset += 2;
            wUs(data, offset, 1000);
            offset += 2;
            data[offset] = fr.dispose;
            offset++; // dispose

            data[offset] = fr.blend;
            offset++; // blend

            wUi(data, offset, crc(data, offset - 30, 30));
            offset += 4; // crc
          }

          var imgd = fr.cimg,
              dl = imgd.length;
          wUi(data, offset, dl + (j == 0 ? 0 : 4));
          offset += 4;
          var ioff = offset;
          wAs(data, offset, j == 0 ? "IDAT" : "fdAT");
          offset += 4;

          if (j != 0) {
            wUi(data, offset, fi++);
            offset += 4;
          }

          data.set(imgd, offset);
          offset += dl;
          wUi(data, offset, crc(data, ioff, offset - ioff));
          offset += 4; // crc
        }

        wUi(data, offset, 0);
        offset += 4;
        wAs(data, offset, "IEND");
        offset += 4;
        wUi(data, offset, crc(data, offset - 4, 4));
        offset += 4; // crc

        return data.buffer;
      };

      UNPNG.encode.compressPNG = function (out, filter, levelZero) {
        for (var i = 0; i < out.frames.length; i++) {
          var frm = out.frames[i],
              nw = frm.rect.width,
              nh = frm.rect.height;
          var fdata = new Uint8Array(nh * frm.bpl + nh);
          frm.cimg = UNPNG.encode._filterZero(frm.img, nh, frm.bpp, frm.bpl, fdata, filter, levelZero);
        }
      };

      UNPNG.encode.compress = function (bufs, w, h, ps, prms) // prms:  onlyBlend, minBits, forbidPlte
      {
        //var time = Date.now();
        var onlyBlend = prms[0],
            evenCrd = prms[1],
            forbidPrev = prms[2],
            minBits = prms[3],
            forbidPlte = prms[4],
            dither = prms[5];
        var ctype = 6,
            depth = 8,
            alphaAnd = 255;

        for (var j = 0; j < bufs.length; j++) {
          // when not quantized, other frames can contain colors, that are not in an initial frame
          var img = new Uint8Array(bufs[j]),
              ilen = img.length;

          for (var i = 0; i < ilen; i += 4) alphaAnd &= img[i + 3];
        }

        var gotAlpha = alphaAnd != 255; //console.log("alpha check", Date.now()-time);  time = Date.now();
        //var brute = gotAlpha && forGIF;		// brute : frames can only be copied, not "blended"

        var frms = UNPNG.encode.framize(bufs, w, h, onlyBlend, evenCrd, forbidPrev); //console.log("framize", Date.now()-time);  time = Date.now();

        var cmap = {},
            plte = [],
            inds = [];

        if (ps != 0) {
          var nbufs = [];

          for (var i = 0; i < frms.length; i++) nbufs.push(frms[i].img.buffer);

          var abuf = UNPNG.encode.concatRGBA(nbufs),
              qres = UNPNG.quantize(abuf, ps);

          for (var i = 0; i < qres.plte.length; i++) plte.push(qres.plte[i].est.rgba);

          var cof = 0;

          for (var i = 0; i < frms.length; i++) {
            var frm = frms[i],
                bln = frm.img.length,
                ind = new Uint8Array(qres.inds.buffer, cof >> 2, bln >> 2);
            inds.push(ind);
            var bb = new Uint8Array(qres.abuf, cof, bln); //console.log(frm.img, frm.width, frm.height);
            //var time = Date.now();

            if (dither) UNPNG.encode.dither(frm.img, frm.rect.width, frm.rect.height, plte, bb, ind); //console.log(Date.now()-time);

            frm.img.set(bb);
            cof += bln;
          } //console.log("quantize", Date.now()-time);  time = Date.now();

        } else {
          // what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used
          for (var j = 0; j < frms.length; j++) {
            // when not quantized, other frames can contain colors, that are not in an initial frame
            var frm = frms[j],
                img32 = new Uint32Array(frm.img.buffer),
                nw = frm.rect.width,
                ilen = img32.length;
            var ind = new Uint8Array(ilen);
            inds.push(ind);

            for (var i = 0; i < ilen; i++) {
              var c = img32[i];
              if (i != 0 && c == img32[i - 1]) ind[i] = ind[i - 1];else if (i > nw && c == img32[i - nw]) ind[i] = ind[i - nw];else {
                var cmc = cmap[c];

                if (cmc == null) {
                  cmap[c] = cmc = plte.length;
                  plte.push(c);
                  if (plte.length >= 300) break;
                }

                ind[i] = cmc;
              }
            }
          } //console.log("make palette", Date.now()-time);  time = Date.now();

        }

        var cc = plte.length; //console.log("colors:",cc);

        if (cc <= 256 && forbidPlte == false) {
          if (cc <= 2) depth = 1;else if (cc <= 4) depth = 2;else if (cc <= 16) depth = 4;else depth = 8;
          depth = Math.max(depth, minBits);
        }

        for (var j = 0; j < frms.length; j++) {
          var frm = frms[j],
              nx = frm.rect.x,
              ny = frm.rect.y,
              nw = frm.rect.width,
              nh = frm.rect.height;
          var cimg = frm.img,
              cimg32 = new Uint32Array(cimg.buffer);
          var bpl = 4 * nw,
              bpp = 4;

          if (cc <= 256 && forbidPlte == false) {
            bpl = Math.ceil(depth * nw / 8);
            var nimg = new Uint8Array(bpl * nh);
            var inj = inds[j];

            for (var y = 0; y < nh; y++) {
              var i = y * bpl,
                  ii = y * nw;
              if (depth == 8) for (var x = 0; x < nw; x++) nimg[i + x] = inj[ii + x];else if (depth == 4) for (var x = 0; x < nw; x++) nimg[i + (x >> 1)] |= inj[ii + x] << 4 - (x & 1) * 4;else if (depth == 2) for (var x = 0; x < nw; x++) nimg[i + (x >> 2)] |= inj[ii + x] << 6 - (x & 3) * 2;else if (depth == 1) for (var x = 0; x < nw; x++) nimg[i + (x >> 3)] |= inj[ii + x] << 7 - (x & 7) * 1;
            }

            cimg = nimg;
            ctype = 3;
            bpp = 1;
          } else if (gotAlpha == false && frms.length == 1) {
            // some next "reduced" frames may contain alpha for blending
            var nimg = new Uint8Array(nw * nh * 3),
                area = nw * nh;

            for (var i = 0; i < area; i++) {
              var ti = i * 3,
                  qi = i * 4;
              nimg[ti] = cimg[qi];
              nimg[ti + 1] = cimg[qi + 1];
              nimg[ti + 2] = cimg[qi + 2];
            }

            cimg = nimg;
            ctype = 2;
            bpp = 3;
            bpl = 3 * nw;
          }

          frm.img = cimg;
          frm.bpl = bpl;
          frm.bpp = bpp;
        } //console.log("colors => palette indices", Date.now()-time);  time = Date.now();


        return {
          ctype: ctype,
          depth: depth,
          plte: plte,
          frames: frms
        };
      };

      UNPNG.encode.framize = function (bufs, w, h, alwaysBlend, evenCrd, forbidPrev) {
        /*  DISPOSE
            - 0 : no change
        	- 1 : clear to transparent
        	- 2 : retstore to content before rendering (previous frame disposed)
        	BLEND
        	- 0 : replace
        	- 1 : blend
        */
        var frms = [];

        for (var j = 0; j < bufs.length; j++) {
          var cimg = new Uint8Array(bufs[j]),
              cimg32 = new Uint32Array(cimg.buffer);
          var nimg;
          var nx = 0,
              ny = 0,
              nw = w,
              nh = h,
              blend = alwaysBlend ? 1 : 0;

          if (j != 0) {
            var tlim = forbidPrev || alwaysBlend || j == 1 || frms[j - 2].dispose != 0 ? 1 : 2,
                tstp = 0,
                tarea = 1e9;

            for (var it = 0; it < tlim; it++) {
              var pimg = new Uint8Array(bufs[j - 1 - it]),
                  p32 = new Uint32Array(bufs[j - 1 - it]);
              var mix = w,
                  miy = h,
                  max = -1,
                  may = -1;

              for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {
                var i = y * w + x;

                if (cimg32[i] != p32[i]) {
                  if (x < mix) mix = x;
                  if (x > max) max = x;
                  if (y < miy) miy = y;
                  if (y > may) may = y;
                }
              }

              if (max == -1) mix = miy = max = may = 0;

              if (evenCrd) {
                if ((mix & 1) == 1) mix--;
                if ((miy & 1) == 1) miy--;
              }

              var sarea = (max - mix + 1) * (may - miy + 1);

              if (sarea < tarea) {
                tarea = sarea;
                tstp = it;
                nx = mix;
                ny = miy;
                nw = max - mix + 1;
                nh = may - miy + 1;
              }
            } // alwaysBlend: pokud zjistím, že blendit nelze, nastavím předchozímu snímku dispose=1. Zajistím, aby obsahoval můj obdélník.


            var pimg = new Uint8Array(bufs[j - 1 - tstp]);
            if (tstp == 1) frms[j - 1].dispose = 2;
            nimg = new Uint8Array(nw * nh * 4);

            UNPNG._copyTile(pimg, w, h, nimg, nw, nh, -nx, -ny, 0);

            blend = UNPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 3) ? 1 : 0;
            if (blend == 1) UNPNG.encode._prepareDiff(cimg, w, h, nimg, {
              x: nx,
              y: ny,
              width: nw,
              height: nh
            });else UNPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 0); //UNPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, blend==1?2:0);
          } else nimg = cimg.slice(0); // img may be rewritten further ... don't rewrite input


          frms.push({
            rect: {
              x: nx,
              y: ny,
              width: nw,
              height: nh
            },
            img: nimg,
            blend: blend,
            dispose: 0
          });
        }

        if (alwaysBlend) for (var j = 0; j < frms.length; j++) {
          var frm = frms[j];
          if (frm.blend == 1) continue;
          var r0 = frm.rect,
              r1 = frms[j - 1].rect;
          var miX = Math.min(r0.x, r1.x),
              miY = Math.min(r0.y, r1.y);
          var maX = Math.max(r0.x + r0.width, r1.x + r1.width),
              maY = Math.max(r0.y + r0.height, r1.y + r1.height);
          var r = {
            x: miX,
            y: miY,
            width: maX - miX,
            height: maY - miY
          };
          frms[j - 1].dispose = 1;
          if (j - 1 != 0) UNPNG.encode._updateFrame(bufs, w, h, frms, j - 1, r, evenCrd);

          UNPNG.encode._updateFrame(bufs, w, h, frms, j, r, evenCrd);
        }
        var area = 0;
        if (bufs.length != 1) for (var i = 0; i < frms.length; i++) {
          var frm = frms[i];
          area += frm.rect.width * frm.rect.height; //if(i==0 || frm.blend!=1) continue;
          //var ob = new Uint8Array(
          //console.log(frm.blend, frm.dispose, frm.rect);
        } //if(area!=0) console.log(area);

        return frms;
      };

      UNPNG.encode._updateFrame = function (bufs, w, h, frms, i, r, evenCrd) {
        var U8 = Uint8Array,
            U32 = Uint32Array;
        var pimg = new U8(bufs[i - 1]),
            pimg32 = new U32(bufs[i - 1]),
            nimg = i + 1 < bufs.length ? new U8(bufs[i + 1]) : null;
        var cimg = new U8(bufs[i]),
            cimg32 = new U32(cimg.buffer);
        var mix = w,
            miy = h,
            max = -1,
            may = -1;

        for (var y = 0; y < r.height; y++) for (var x = 0; x < r.width; x++) {
          var cx = r.x + x,
              cy = r.y + y;
          var j = cy * w + cx,
              cc = cimg32[j]; // no need to draw transparency, or to dispose it. Or, if writing the same color and the next one does not need transparency.

          if (cc == 0 || frms[i - 1].dispose == 0 && pimg32[j] == cc && (nimg == null || nimg[j * 4 + 3] != 0)
          /**/
          ) ;else {
            if (cx < mix) mix = cx;
            if (cx > max) max = cx;
            if (cy < miy) miy = cy;
            if (cy > may) may = cy;
          }
        }

        if (max == -1) mix = miy = max = may = 0;

        if (evenCrd) {
          if ((mix & 1) == 1) mix--;
          if ((miy & 1) == 1) miy--;
        }

        r = {
          x: mix,
          y: miy,
          width: max - mix + 1,
          height: may - miy + 1
        };
        var fr = frms[i];
        fr.rect = r;
        fr.blend = 1;
        fr.img = new Uint8Array(r.width * r.height * 4);

        if (frms[i - 1].dispose == 0) {
          UNPNG._copyTile(pimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);

          UNPNG.encode._prepareDiff(cimg, w, h, fr.img, r); //UNPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 2);

        } else UNPNG._copyTile(cimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);
      };

      UNPNG.encode._prepareDiff = function (cimg, w, h, nimg, rec) {
        UNPNG._copyTile(cimg, w, h, nimg, rec.width, rec.height, -rec.x, -rec.y, 2);
        /*
        var n32 = new Uint32Array(nimg.buffer);
        var og = new Uint8Array(rec.width*rec.height*4), o32 = new Uint32Array(og.buffer);
        UNPNG._copyTile(cimg,w,h, og,rec.width,rec.height, -rec.x,-rec.y, 0);
        for(var i=4; i<nimg.length; i+=4) {
        	if(nimg[i-1]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)-1]) {
        		n32[i>>>2]=o32[i>>>2];
        		//var j = i, c=p32[(i>>>2)-1];
        		//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }
        	}
        }
        for(var i=nimg.length-8; i>0; i-=4) {
        	if(nimg[i+7]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)+1]) {
        		n32[i>>>2]=o32[i>>>2];
        		//var j = i, c=p32[(i>>>2)-1];
        		//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }
        	}
        }*/

      };

      UNPNG.encode._filterZero = function (img, h, bpp, bpl, data, filter, levelZero) {
        var fls = [],
            ftry = [0, 1, 2, 3, 4];
        if (filter != -1) ftry = [filter];else if (h * bpl > 500000 || bpp == 1) ftry = [0];
        var opts;
        if (levelZero) opts = {
          level: 0
        };
        var CMPR = UZIP;

        for (var i = 0; i < ftry.length; i++) {
          for (var y = 0; y < h; y++) UNPNG.encode._filterLine(data, img, y, bpl, bpp, ftry[i]); //var nimg = new Uint8Array(data.length);
          //var sz = UZIP.F.deflate(data, nimg);  fls.push(nimg.slice(0,sz));
          //var dfl = pako["deflate"](data), dl=dfl.length-4;
          //var crc = (dfl[dl+3]<<24)|(dfl[dl+2]<<16)|(dfl[dl+1]<<8)|(dfl[dl+0]<<0);
          //console.log(crc, UZIP.adler(data,2,data.length-6));


          fls.push(CMPR["deflate"](data, opts));
        }

        var ti,
            tsize = 1e9;

        for (var i = 0; i < fls.length; i++) if (fls[i].length < tsize) {
          ti = i;
          tsize = fls[i].length;
        }

        return fls[ti];
      };

      UNPNG.encode._filterLine = function (data, img, y, bpl, bpp, type) {
        var i = y * bpl,
            di = i + y,
            paeth = UNPNG.decode._paeth;
        data[di] = type;
        di++;

        if (type == 0) {
          if (bpl < 500) for (var x = 0; x < bpl; x++) data[di + x] = img[i + x];else data.set(new Uint8Array(img.buffer, i, bpl), di);
        } else if (type == 1) {
          for (var x = 0; x < bpp; x++) data[di + x] = img[i + x];

          for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - img[i + x - bpp] + 256 & 255;
        } else if (y == 0) {
          for (var x = 0; x < bpp; x++) data[di + x] = img[i + x];

          if (type == 2) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x];
          if (type == 3) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - (img[i + x - bpp] >> 1) + 256 & 255;
          if (type == 4) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - paeth(img[i + x - bpp], 0, 0) + 256 & 255;
        } else {
          if (type == 2) {
            for (var x = 0; x < bpl; x++) data[di + x] = img[i + x] + 256 - img[i + x - bpl] & 255;
          }

          if (type == 3) {
            for (var x = 0; x < bpp; x++) data[di + x] = img[i + x] + 256 - (img[i + x - bpl] >> 1) & 255;

            for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] + 256 - (img[i + x - bpl] + img[i + x - bpp] >> 1) & 255;
          }

          if (type == 4) {
            for (var x = 0; x < bpp; x++) data[di + x] = img[i + x] + 256 - paeth(0, img[i + x - bpl], 0) & 255;

            for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] + 256 - paeth(img[i + x - bpp], img[i + x - bpl], img[i + x - bpp - bpl]) & 255;
          }
        }
      };

      UNPNG.crc = {
        table: function () {
          var tab = new Uint32Array(256);

          for (var n = 0; n < 256; n++) {
            var c = n;

            for (var k = 0; k < 8; k++) {
              if (c & 1) c = 0xedb88320 ^ c >>> 1;else c = c >>> 1;
            }

            tab[n] = c;
          }

          return tab;
        }(),
        update: function (c, buf, off, len) {
          for (var i = 0; i < len; i++) c = UNPNG.crc.table[(c ^ buf[off + i]) & 0xff] ^ c >>> 8;

          return c;
        },
        crc: function (b, o, l) {
          return UNPNG.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;
        }
      };

      UNPNG.quantize = function (abuf, ps) {
        var sb = new Uint8Array(abuf),
            tb = sb.slice(0),
            tb32 = new Uint32Array(tb.buffer);
        var KD = UNPNG.quantize.getKDtree(tb, ps);
        var root = KD[0],
            leafs = KD[1];
        var planeDst = UNPNG.quantize.planeDst;
        var len = sb.length;
        var inds = new Uint8Array(len >> 2),
            nd;
        if (sb.length < 20e6) // precise, but slow :(
          for (var i = 0; i < len; i += 4) {
            var r = sb[i] * (1 / 255),
                g = sb[i + 1] * (1 / 255),
                b = sb[i + 2] * (1 / 255),
                a = sb[i + 3] * (1 / 255);
            nd = UNPNG.quantize.getNearest(root, r, g, b, a);
            inds[i >> 2] = nd.ind;
            tb32[i >> 2] = nd.est.rgba;
          } else for (var i = 0; i < len; i += 4) {
          var r = sb[i] * (1 / 255),
              g = sb[i + 1] * (1 / 255),
              b = sb[i + 2] * (1 / 255),
              a = sb[i + 3] * (1 / 255);
          nd = root;

          while (nd.left) nd = planeDst(nd.est, r, g, b, a) <= 0 ? nd.left : nd.right;

          inds[i >> 2] = nd.ind;
          tb32[i >> 2] = nd.est.rgba;
        }
        return {
          abuf: tb.buffer,
          inds: inds,
          plte: leafs
        };
      };

      UNPNG.quantize.getKDtree = function (nimg, ps, err) {
        if (err == null) err = 0.0001;
        var nimg32 = new Uint32Array(nimg.buffer);
        var root = {
          i0: 0,
          i1: nimg.length,
          bst: null,
          est: null,
          tdst: 0,
          left: null,
          right: null
        }; // basic statistic, extra statistic

        root.bst = UNPNG.quantize.stats(nimg, root.i0, root.i1);
        root.est = UNPNG.quantize.estats(root.bst);
        var leafs = [root];

        while (leafs.length < ps) {
          var maxL = 0,
              mi = 0;

          for (var i = 0; i < leafs.length; i++) if (leafs[i].est.L > maxL) {
            maxL = leafs[i].est.L;
            mi = i;
          }

          if (maxL < err) break;
          var node = leafs[mi];
          var s0 = UNPNG.quantize.splitPixels(nimg, nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);
          var s0wrong = node.i0 >= s0 || node.i1 <= s0; //console.log(maxL, leafs.length, mi);

          if (s0wrong) {
            node.est.L = 0;
            continue;
          }

          var ln = {
            i0: node.i0,
            i1: s0,
            bst: null,
            est: null,
            tdst: 0,
            left: null,
            right: null
          };
          ln.bst = UNPNG.quantize.stats(nimg, ln.i0, ln.i1);
          ln.est = UNPNG.quantize.estats(ln.bst);
          var rn = {
            i0: s0,
            i1: node.i1,
            bst: null,
            est: null,
            tdst: 0,
            left: null,
            right: null
          };
          rn.bst = {
            R: [],
            m: [],
            N: node.bst.N - ln.bst.N
          };

          for (var i = 0; i < 16; i++) rn.bst.R[i] = node.bst.R[i] - ln.bst.R[i];

          for (var i = 0; i < 4; i++) rn.bst.m[i] = node.bst.m[i] - ln.bst.m[i];

          rn.est = UNPNG.quantize.estats(rn.bst);
          node.left = ln;
          node.right = rn;
          leafs[mi] = ln;
          leafs.push(rn);
        }

        leafs.sort(function (a, b) {
          return b.bst.N - a.bst.N;
        });

        for (var i = 0; i < leafs.length; i++) leafs[i].ind = i;

        return [root, leafs];
      };

      UNPNG.quantize.getNearest = function (nd, r, g, b, a) {
        if (nd.left == null) {
          nd.tdst = UNPNG.quantize.dist(nd.est.q, r, g, b, a);
          return nd;
        }

        var planeDst = UNPNG.quantize.planeDst(nd.est, r, g, b, a);
        var node0 = nd.left,
            node1 = nd.right;

        if (planeDst > 0) {
          node0 = nd.right;
          node1 = nd.left;
        }

        var ln = UNPNG.quantize.getNearest(node0, r, g, b, a);
        if (ln.tdst <= planeDst * planeDst) return ln;
        var rn = UNPNG.quantize.getNearest(node1, r, g, b, a);
        return rn.tdst < ln.tdst ? rn : ln;
      };

      UNPNG.quantize.planeDst = function (est, r, g, b, a) {
        var e = est.e;
        return e[0] * r + e[1] * g + e[2] * b + e[3] * a - est.eMq;
      };

      UNPNG.quantize.dist = function (q, r, g, b, a) {
        var d0 = r - q[0],
            d1 = g - q[1],
            d2 = b - q[2],
            d3 = a - q[3];
        return d0 * d0 + d1 * d1 + d2 * d2 + d3 * d3;
      };

      UNPNG.quantize.splitPixels = function (nimg, nimg32, i0, i1, e, eMq) {
        var vecDot = UNPNG.quantize.vecDot;
        i1 -= 4;

        while (i0 < i1) {
          while (vecDot(nimg, i0, e) <= eMq) i0 += 4;

          while (vecDot(nimg, i1, e) > eMq) i1 -= 4;

          if (i0 >= i1) break;
          var t = nimg32[i0 >> 2];
          nimg32[i0 >> 2] = nimg32[i1 >> 2];
          nimg32[i1 >> 2] = t;
          i0 += 4;
          i1 -= 4;
        }

        while (vecDot(nimg, i0, e) > eMq) i0 -= 4;

        return i0 + 4;
      };

      UNPNG.quantize.vecDot = function (nimg, i, e) {
        return nimg[i] * e[0] + nimg[i + 1] * e[1] + nimg[i + 2] * e[2] + nimg[i + 3] * e[3];
      };

      UNPNG.quantize.stats = function (nimg, i0, i1) {
        var R = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var m = [0, 0, 0, 0];
        var N = i1 - i0 >> 2;

        for (var i = i0; i < i1; i += 4) {
          var r = nimg[i] * (1 / 255),
              g = nimg[i + 1] * (1 / 255),
              b = nimg[i + 2] * (1 / 255),
              a = nimg[i + 3] * (1 / 255); //var r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];

          m[0] += r;
          m[1] += g;
          m[2] += b;
          m[3] += a;
          R[0] += r * r;
          R[1] += r * g;
          R[2] += r * b;
          R[3] += r * a;
          R[5] += g * g;
          R[6] += g * b;
          R[7] += g * a;
          R[10] += b * b;
          R[11] += b * a;
          R[15] += a * a;
        }

        R[4] = R[1];
        R[8] = R[2];
        R[9] = R[6];
        R[12] = R[3];
        R[13] = R[7];
        R[14] = R[11];
        return {
          R: R,
          m: m,
          N: N
        };
      };

      UNPNG.quantize.estats = function (stats) {
        var R = stats.R,
            m = stats.m,
            N = stats.N; // when all samples are equal, but N is large (millions), the Rj can be non-zero ( 0.0003.... - precission error)

        var m0 = m[0],
            m1 = m[1],
            m2 = m[2],
            m3 = m[3],
            iN = N == 0 ? 0 : 1 / N;
        var Rj = [R[0] - m0 * m0 * iN, R[1] - m0 * m1 * iN, R[2] - m0 * m2 * iN, R[3] - m0 * m3 * iN, R[4] - m1 * m0 * iN, R[5] - m1 * m1 * iN, R[6] - m1 * m2 * iN, R[7] - m1 * m3 * iN, R[8] - m2 * m0 * iN, R[9] - m2 * m1 * iN, R[10] - m2 * m2 * iN, R[11] - m2 * m3 * iN, R[12] - m3 * m0 * iN, R[13] - m3 * m1 * iN, R[14] - m3 * m2 * iN, R[15] - m3 * m3 * iN];
        var A = Rj,
            M = UNPNG.M4;
        var b = [Math.random(), Math.random(), Math.random(), Math.random()],
            mi = 0,
            tmi = 0;
        if (N != 0) for (var i = 0; i < 16; i++) {
          b = M.multVec(A, b);
          tmi = Math.sqrt(M.dot(b, b));
          b = M.sml(1 / tmi, b);
          if (i != 0 && Math.abs(tmi - mi) < 1e-9) break;
          mi = tmi;
        } //b = [0,0,1,0];  mi=N;

        var q = [m0 * iN, m1 * iN, m2 * iN, m3 * iN];
        var eMq255 = M.dot(M.sml(255, q), b);
        return {
          Cov: Rj,
          q: q,
          e: b,
          L: mi,
          eMq255: eMq255,
          eMq: M.dot(b, q),
          rgba: (Math.round(255 * q[3]) << 24 | Math.round(255 * q[2]) << 16 | Math.round(255 * q[1]) << 8 | Math.round(255 * q[0]) << 0) >>> 0
        };
      };

      UNPNG.M4 = {
        multVec: function (m, v) {
          return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3], m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3], m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3], m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]];
        },
        dot: function (x, y) {
          return x[0] * y[0] + x[1] * y[1] + x[2] * y[2] + x[3] * y[3];
        },
        sml: function (a, y) {
          return [a * y[0], a * y[1], a * y[2], a * y[3]];
        }
      };

      UNPNG.encode.concatRGBA = function (bufs) {
        var tlen = 0;

        for (var i = 0; i < bufs.length; i++) tlen += bufs[i].byteLength;

        var nimg = new Uint8Array(tlen),
            noff = 0;

        for (var i = 0; i < bufs.length; i++) {
          var img = new Uint8Array(bufs[i]),
              il = img.length;

          for (var j = 0; j < il; j += 4) {
            var r = img[j],
                g = img[j + 1],
                b = img[j + 2],
                a = img[j + 3];
            if (a == 0) r = g = b = 0;
            nimg[noff + j] = r;
            nimg[noff + j + 1] = g;
            nimg[noff + j + 2] = b;
            nimg[noff + j + 3] = a;
          }

          noff += il;
        }

        return nimg.buffer;
      };

      UNPNG.encode.dither = function (sb, w, h, plte, tb, oind) {
        function addErr(er, tg, ti, f) {
          tg[ti] += er[0] * f >> 4;
          tg[ti + 1] += er[1] * f >> 4;
          tg[ti + 2] += er[2] * f >> 4;
          tg[ti + 3] += er[3] * f >> 4;
        }

        function N(x) {
          return Math.max(0, Math.min(255, x));
        }

        function D(a, b) {
          var dr = a[0] - b[0],
              dg = a[1] - b[1],
              db = a[2] - b[2],
              da = a[3] - b[3];
          return dr * dr + dg * dg + db * db + da * da;
        }

        var pc = plte.length,
            nplt = [],
            rads = [];

        for (var i = 0; i < pc; i++) {
          var c = plte[i];
          nplt.push([c >>> 0 & 255, c >>> 8 & 255, c >>> 16 & 255, c >>> 24 & 255]);
        }

        for (var i = 0; i < pc; i++) {
          var ne = 0xffffffff,
              ni = 0;

          for (var j = 0; j < pc; j++) {
            var ce = D(nplt[i], nplt[j]);

            if (j != i && ce < ne) {
              ne = ce;
              ni = j;
            }
          }

          var hd = Math.sqrt(ne) / 2;
          rads[i] = ~~(hd * hd);
        }

        var tb32 = new Uint32Array(tb.buffer);
        var err = new Int16Array(w * h * 4);

        for (var y = 0; y < h; y++) {
          for (var x = 0; x < w; x++) {
            var i = (y * w + x) * 4;
            var cc = [N(sb[i] + err[i]), N(sb[i + 1] + err[i + 1]), N(sb[i + 2] + err[i + 2]), N(sb[i + 3] + err[i + 3])];
            var ni = 0,
                nd = 0xffffff;

            for (var j = 0; j < pc; j++) {
              var cd = D(cc, nplt[j]);

              if (cd < nd) {
                nd = cd;
                ni = j;
              }
            } //ni = oind[i>>2];


            var nc = nplt[ni];
            var er = [cc[0] - nc[0], cc[1] - nc[1], cc[2] - nc[2], cc[3] - nc[3]]; //addErr(er, err, i+4, 16);
            //*

            if (x != w - 1) addErr(er, err, i + 4, 7);

            if (y != h - 1) {
              if (x != 0) addErr(er, err, i + 4 * w - 4, 3);
              addErr(er, err, i + 4 * w, 5);
              if (x != w - 1) addErr(er, err, i + 4 * w + 4, 1); //*/
            }

            oind[i >> 2] = ni;
            tb32[i >> 2] = plte[ni];
          }
        }
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './globalNetwork.ts', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, Node, Toggle, EditBox, _decorator, Component, NodePool, instantiate, sys, apiObject, globalNetwork, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      Node = module.Node;
      Toggle = module.Toggle;
      EditBox = module.EditBox;
      _decorator = module._decorator;
      Component = module.Component;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      sys = module.sys;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f0679PqTwdL3ppie1JhQX4J", "EventList", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameEvents = exports('GameEvents', (_dec = ccclass('GameEvents'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Toggle
      }), _dec5 = property({
        type: EditBox
      }), _dec(_class = (_class2 = class GameEvents extends Component {
        constructor(...args) {
          super(...args);
          this.listEvent = [];

          _initializerDefineProperty(this, "eventPrefab", _descriptor, this);

          _initializerDefineProperty(this, "eventHolder", _descriptor2, this);

          _initializerDefineProperty(this, "filterSlot", _descriptor3, this);

          _initializerDefineProperty(this, "filterTag", _descriptor4, this);

          this.eventPool = null;
        }

        onLoad() {
          this.eventPool = new NodePool();
        }

        getEvent() {
          let event = this.eventPool.get();

          if (!event) {
            event = instantiate(this.eventPrefab);
          }

          return event;
        }

        removeAllEvents() {
          while (this.eventHolder.children.length > 0) {
            this.eventPool.put(this.eventHolder.children[0]);
          }
        }

        onEnable() {
          this.removeAllEvents();
          this.loadEvents();
        }

        onDisable() {
          this.listEvent = null;
          sys.garbageCollect();
        }

        loadEvents() {
          const {
            API_URL
          } = loadConfigAsync.getConfig();
          const eventUrl = API_URL + 'event-config/event-available-by-user';
          const headers = {
            'Authorization': globalNetwork.getToken()
          };
          apiObject.getWithHeader({
            url: eventUrl,
            callback: this.onEventsLoaded.bind(this),
            headers: headers
          });
        }

        onEventsLoaded(res) {
          this.listEvent = res.data || [];
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        }

        onToggleFilter() {
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        }

        filterEvent(key) {
          this.removeAllEvents();

          for (let i = 0; i < this.listEvent.length; i++) {
            const {
              eventInfo
            } = this.listEvent[i];

            if (eventInfo) {
              const eventName = eventInfo.name.toLocaleLowerCase();
              const updatedTitle = key.toLocaleLowerCase();

              if (eventName.includes(updatedTitle)) {
                let event = this.getEvent();
                event.setParent(this.eventHolder);
                event.getComponent('GameEvent').init(this.listEvent[i]);
              }
            }
          }
        }

        onLoadError(error) {// console.log(error);
        }

        onDestroy() {
          this.eventPool.clear();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "filterSlot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filterTag", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventListenerManager.ts", ['cc'], function (exports) {
  var cclegacy, Component, warn, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      warn = module.warn;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3c085XLolNK4pPd/oLUMOG1", "EventListenerManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let EventListenerManager = exports('EventListenerManager', (_dec = ccclass('EventListenerManager'), _dec(_class = class EventListenerManager extends Component {
        constructor(...args) {
          super(...args);
          this.handlers = {};
        }

        on(eventName, handler, target) {
          const objHandler = {
            handler: handler,
            target: target
          };
          let handlerList = this.handlers[eventName];

          if (!handlerList) {
            handlerList = [];
            this.handlers[eventName] = handlerList;
          }

          for (var i = 0; i < handlerList.length; i++) {
            let existObjHandler = handlerList[i];

            if (!existObjHandler) {
              handlerList[i] = objHandler;
              return i;
            } else {
              if (existObjHandler.handler === handler && existObjHandler.target === target) {
                warn(`[EventListenerManager] Existing target: ${target} and its handler: ${handler.name} were already registered to an event: ${eventName}`);
                return i;
              }
            }
          }

          handlerList.push(objHandler);
          return handlerList.length;
        }

        off(eventName, handler, target) {
          const handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (let i = 0; i < handlerList.length; i++) {
            const oldObj = handlerList[i];

            if (oldObj.handler === handler && target === oldObj.target) {
              handlerList.splice(i--, 1);
            }
          }
        }

        targetOff(target) {
          for (const eventName in this.handlers) {
            const handlerList = this.handlers[eventName];

            if (handlerList) {
              for (let i = 0; i < handlerList.length; i++) {
                if (handlerList[i].target === target) {
                  handlerList.splice(i--, 1);
                }
              }
            }
          }
        }

        emit(eventName, ...args) {
          const handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (let i = 0; i < handlerList.length; i++) {
            const objHandler = handlerList[i];

            if (objHandler && objHandler.handler && objHandler.target) {
              objHandler.handler.apply(objHandler.target, args);
            }
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventsCode1975.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, mergeTwoObject, gfBaseEvents;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f2f62bSyHBBy6w5p+IGDWgk", "EventsCode1975", undefined);

      let EventsCode1975 = {
        COMMON: {
          HANDLE_SHOW_WAITING: "HANDLE_SHOW_WAITING",
          SHOW_ANIMATION_LOBBY: "SHOW_ANIMATION_LOBBY"
        },
        GAME_LAYER: {
          CATCH_FISH_BY_PLASMA: "CATCH_FISH_BY_PLASMA",
          CATCH_FISH_BY_LIGHTING: "CATCH_FISH_BY_LIGHTING",
          DROP_ITEM: "GAME_DROP_ITEM",
          UPDATE_WALLET_OTHER_USER: "UPDATE_WALLET_OTHER_USER"
        },
        LOGIN: {
          LOGIN_SUCCESS: "LOGIN_SUCCESS"
        },
        LOBBY_LAYER: {
          ON_SHOW_LOBBY_LAYER: "ON_SHOW_LOBBY_LAYER"
        },
        SOUND: {
          GET_ITEM: "GET_ITEM",
          MINIBOSS_MOVE: "MINIBOSS_MOVE",
          PAUSE_OR_RESUME_SOUND_WIN: "PAUSE_OR_RESUME_SOUND_WIN",
          STOP_COUNT_COIN: "STOP_COUNT_COIN",
          COUNT_COIN: "COUNT_COIN",
          COIN_DROP: "COIN_DROP",
          COIN_EARN: "COIN_EARN",
          PLAY_SOUND_TRANSITION: "PLAY_SOUND_TRANSITION",
          MINI_BOSS_IDLE_1: "MINI_BOSS_IDLE_1",
          STOP_MINI_BOSS_IDLE_1: "STOP_MINI_BOSS_IDLE_1",
          MINI_BOSS_IDLE_2: "MINI_BOSS_IDLE_2",
          MINI_BOSS_DROP_ITEM: "MINI_BOSS_DROP_ITEM",
          LASER_GUN_TRANSFORM: "LASER_GUN_TRANSFORM",
          ORCHI_APPEAR: "ORCHI_APPEAR",
          ORCHI_BLACK_HOLD: "ORCHI_BLACK_HOLD",
          STOP_ORCHI_BLACK_HOLD: "STOP_ORCHI_BLACK_HOLD",
          SOUND_COIN_EARN: "SOUND_COIN_EARN",
          SOUND_TRAINSION_LOBBY: "SOUND_TRAINSION_LOBBY",
          SOUND_FISH_LEVEL_UP: "SOUND_FISH_LEVEL_UP",
          SOUND_SOUND_TURTLE_REEL: "SOUND_SOUND_TURTLE_REEL",
          SOUND_SOUND_TURTLE_REEL_STOP: "SOUND_SOUND_TURTLE_REEL_STOP",
          SOUND_SKILL_WARNING: "SOUND_SKILL_WARNING",
          SOUND_BOM_SKILL: "SOUND_BOM_SKILL",
          SOUND_VORTEX_SKILL: "SOUND_VORTEX_SKILL",
          SOUND_DRILL_TRANS_FORM: "SOUND_DRILL_TRANS_FORM",
          SOUND_DRILL_FLY: "SOUND_DRILL_FLY",
          SOUND_STOP_DRILL_FLY: "SOUND_STOP_DRILL_FLY",
          SOUND_DRILL_IMPACT: "SOUND_DRILL_IMPACT",
          SOUND_DRILL_SKILL: "SOUND_DRILL_SKILL",
          SOUND_TURTLE_GOLD: "SOUND_TURTLE_GOLD",
          SOUND_BOSS_DROP_ITEM: "SOUND_BOSS_DROP_ITEM",
          SOUND_BOSS_DIE: "SOUND_BOSS_DIE",
          SOUND_BOSS_WARNING: "SOUND_BOSS_WARNING",
          SOUND_BOSS_JACKPOT: "SOUND_BOSS_JACKPOT",
          SOUND_STOP_BOSS_JACKPOT: "SOUND_STOP_BOSS_JACKPOT",
          SOUND_BOSS_JACKPOT_END: "SOUND_BOSS_JACKPOT_END",
          SOUND_BOSS_JACKPOT_DIE: "SOUND_BOSS_JACKPOT_DIE",
          SOUND_FISH_LANTERN: "SOUND_FISH_LANTERN",
          SOUND_LOADING_INTRO: "SOUND_LOADING_INTRO",
          SOUND_ONCOMPLETE_INTRO_LOADING: "SOUND_ONCOMPLETE_INTRO_LOADING",
          SOUND_CHECK_PLAY_BGM_LOBBY: "SOUND_CHECK_PLAY_BGM_LOBBY",
          SOUND_FISH_DIE_EXPLOSION: "SOUND_FISH_DIE_EXPLOSION"
        },
        POPUP: {
          HISTORY_BLOCK_TOUCH: 'SHOW_BLOCK_TOUCH_HISTORY'
        },
        NOTIFY: {
          SHOW_SIDE_NOTIFY_JACKPOT: "SHOW_SIDE_NOTIFY_JACKPOT",
          HIDE_SIDE_NOTIFY_JACKPOT: "HIDE_SIDE_NOTIFY_JACKPOT"
        },
        FISH_LAYER: {
          CATCH_LION_FISH: 'CATCH_LION_FISH'
        },
        PORTAL_LAYER: {
          SHOW_PORTAL: "OPEN_PORTAL",
          HIDE_PORTAL: "HIDE_PORTAL"
        },
        EFFECT_LAYER: {
          HIDE_WAVE_TRANSITION: "HIDE_WAVE_TRANSITION",
          PLAY_WARNING_SKILL: "PLAY_WARNING_SKILL"
        },
        LEVIATHAN: {
          WARNING: "LEVIATHAN.WARNING",
          ON_REWARD: "LEVIATHAN.ON_REWARD",
          ESCAPE: "LEVIATHAN.ESCAPE",
          DROP_BONUS_ITEM: "LEVIATHAN.DROP_BONUS_ITEM",
          DROP_ARMOR_ITEM: "LEVIATHAN.DROP_ARMOR_ITEM",
          EXPLOSION: "LEVIATHAN.EXPLOSION",
          CATCH_JP: "LEVIATHAN.CATCH_JP"
        },
        LEADER_FISH: {
          CATCH_FISH_BY_LIGHTNING_CHAIN: "CATCH_FISH_BY_LIGHTNING_CHAIN",
          CREATE_EXPLODE_LEADER_FISH: "CREATE_EXPLODE_LEADER_FISH"
        }
      };
      EventsCode1975 = mergeTwoObject(gfBaseEvents, EventsCode1975);
      var EventsCode1975$1 = exports('default', EventsCode1975);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishGroupHelper1975.ts", ['cc', './gfFishGroupHelper.ts', './FishManager1975.ts', './gfUtilities.ts', './Config1975.ts', './gfGameScheduler.ts'], function (exports) {
  var cclegacy, Tween, tween, log, _decorator, FishGroupHelper, FishManager1975, SetZIndex, Config1975, gfGameScheduler;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
      log = module.log;
      _decorator = module._decorator;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      FishManager1975 = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "57b13tDHr5DKbbcPrc5QKqX", "FishGroupHelper1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let FishGroupHelper1975 = exports('default', (_dec = ccclass('FishGroupHelper1975'), _dec(_class = class FishGroupHelper1975 extends FishGroupHelper {
        static handleFishZIndex(data, timeToUpdateZIndex) {
          const fish = FishManager1975.instance.getFishById(data.FishID);
          Tween.stopAllByTarget(fish);
          tween(fish).call(() => {
            fish.setInPortal(true);
            SetZIndex(fish.node, Config1975.instance.BOTTOM_Z_INDEX.PORTAL - 10);
            log("decrease zindex", fish._FishKind, timeToUpdateZIndex);
          }).delay(timeToUpdateZIndex).call(() => {
            SetZIndex(fish.node, fish.zIndex);
            log("increase zindex", fish._FishKind, timeToUpdateZIndex);
            fish.setInPortal(false);
          }).start();
        }

        static createFishWithDelay(data, timeToUpdateZIndex) {
          const delay = this.getDelayTime();

          if (!data.isResume) {
            gfGameScheduler.scheduleOnce(() => {
              this.createAndRunFish(data, delay);

              if (timeToUpdateZIndex) {
                this.handleFishZIndex(data, delay + timeToUpdateZIndex);
              }
            }, delay);
          } else {
            this.createAndRunFish(data);

            if (timeToUpdateZIndex) {
              this.handleFishZIndex(data, timeToUpdateZIndex);
            }
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishGroupMgr1975.ts", ['cc', './gfFishGroupHelper.ts', './gfFishGroupMgr.ts', './LfishGroup22.ts', './LfishGroup09.ts', './LfishGroup18.ts', './newFishGroup.ts'], function (exports) {
  var cclegacy, error, _decorator, FishGroupHelper, gfFishGroupMgr, LfishGroup22, LfishGroup09, LfishGroup18, newFishGroup;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      _decorator = module._decorator;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroupMgr = module.default;
    }, function (module) {
      LfishGroup22 = module.default;
    }, function (module) {
      LfishGroup09 = module.default;
    }, function (module) {
      LfishGroup18 = module.default;
    }, function (module) {
      newFishGroup = module.newFishGroup;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "830e9lSjn1NO63/hw7u6OxY", "FishGroupMgr1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let FishGroupMgr1975 = exports('FishGroupMgr1975', (_dec = ccclass('FishGroupMgr1975'), _dec(_class = class FishGroupMgr1975 extends gfFishGroupMgr {
        createFishGroup(data) {
          FishGroupHelper.initFishGroupData(data);

          switch (data.ParadeKind) {
            case 1:
              this.createFishGroup1();
              break;

            case 2:
              this.createFishGroup2();
              break;

            case 3:
              this.createFishGroup3();
              break;

            case 4:
              this.createFishGroup4();
              break;

            default:
              error(`WRONG PARADE KIND: ${data.ParadeKind}`);
          }
        }

        createFishGroup1() {
          newFishGroup.create();
        }

        createFishGroup2() {
          LfishGroup18.create();
        }

        createFishGroup3() {
          LfishGroup09.create();
        }

        createFishGroup4() {
          //  Two group make a cross.
          LfishGroup22.create();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishManager1975.ts", ['cc', './gfFishManager.ts', './PoolManager1975.ts', './utils.ts'], function (exports) {
  var cclegacy, _decorator, gfFishManager, PoolManager1975, getRandomInt;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      PoolManager1975 = module.default;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5e8a68BiWNKsaAXhwtvN3mi", "FishManager1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      ccclass('FishManager1975');

      class FishManager1975 extends gfFishManager {
        constructor() {
          super();
          FishManager1975.instance = this;
        }

        catchFish(data) {
          if (data.Level) {
            const fish = this.getFishById(data.FishID);

            if (fish) {
              fish.levelUp(data);
            }
          }

          super.catchFish(data);
        }

        processFishesKilledBySkill(listFish) {
          for (const fishInfo of listFish) {
            const fishID = fishInfo.FishID;
            let fish = this.getFishById(fishID);

            if (!fish) {
              const fakeData = this.createFakeData(fishInfo);
              const fishData = fakeData ? fakeData : fishInfo;
              fish = this.createFakeFish(fishData);
            }

            if (fish) {
              fish.setDie(true);
              fish.decreaseFishSpeed(0.5);
            }
          }
        }

        createFakeData(data) {
          if (data.Position && data.Position.length > 0) {
            return null;
          }

          const CONFIG_POS_CREATE_FISH_FAKE = {
            LEFT: -220,
            RIGHT: 1680,
            TOP: 840,
            BOT: -120
          };
          data.InitCount = 3;
          const randomTBLR = getRandomInt(0, 1);
          const randomHV = getRandomInt(0, 1);
          const Pos1 = {
            PosX: randomHV ? getRandomInt(0, 1280) : randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.RIGHT : CONFIG_POS_CREATE_FISH_FAKE.LEFT,
            PosY: randomHV ? randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.TOP : CONFIG_POS_CREATE_FISH_FAKE.BOT : getRandomInt(0, 720)
          };
          const Pos2 = {
            PosX: getRandomInt(426, 853),
            PosY: getRandomInt(240, 480)
          };
          const Pos3 = {
            PosX: randomHV ? getRandomInt(0, 1280) : randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.LEFT : CONFIG_POS_CREATE_FISH_FAKE.RIGHT,
            PosY: randomHV ? randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.BOT : CONFIG_POS_CREATE_FISH_FAKE.TOP : getRandomInt(0, 720)
          };
          data.Position = [Pos1, Pos2, Pos3];
          return data;
        }

        createFakeFish(data) {
          const fish = PoolManager1975.instance.getFishWithData(data);

          if (fish) {
            this.listFish.push(fish);
          }

          return fish;
        }

      }

      exports('default', FishManager1975);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FloatUtils.ts", ['cc', './Big.mjs_cjs=&original=2.js', './Big2.js'], function (exports) {
  var cclegacy, warn, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c1a3cShvMtEeLOQ/mxSKg9F", "FloatUtils", undefined);

      class FloatUtils {
        _verifyNumbers(...args) {
          args.forEach((num, index) => {
            if (typeof num === "object" || num === void 0 || isNaN(+num)) {
              warn("invalid number: " + index, num);
            }
          });
        }

        plus(a, b) {
          this._verifyNumbers(a, b);

          return _cjsExports(a || 0).plus(b || 0).toNumber();
        }

        minus(a, b) {
          this._verifyNumbers(a, b);

          return _cjsExports(a || 0).minus(b || 0).toNumber();
        }

        mul(a, b) {
          this._verifyNumbers(a, b);

          return _cjsExports(a || 0).times(b || 0).toNumber();
        }

        div(a, b) {
          this._verifyNumbers(a, b);

          return _cjsExports(a || 0).div(b || 1).toNumber();
        }

        sum(...numbers) {
          this._verifyNumbers(...numbers);

          let result = _cjsExports(0);

          numbers.forEach(num => {
            result = result.plus(num);
          });
          return result.toNumber();
        }

        product(...numbers) {
          this._verifyNumbers(...numbers);

          let result = _cjsExports(1);

          numbers.forEach(num => {
            result = result.times(num);
          });
          return result.toNumber();
        }

        isEqual(a, b) {
          this._verifyNumbers(a, b);

          return Math.abs(a - b) < 1e-12;
        }

      }

      const floatUtils = exports('default', new FloatUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fpsGraph.ts", ['cc', './eGraph.ts'], function (exports) {
  var cclegacy, UITransform, _decorator, eGraph;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      eGraph = module.eGraph;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "695feViExVFqpy+q/snJEy5", "fpsGraph", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let FpsGraph = exports('default', ccclass(_class = class FpsGraph extends eGraph {
        constructor(...args) {
          super(...args);
          this.time = 0;
          this.counter = 0;
        }

        onLoad() {
          this._x = this.lineGraph.node.getComponent(UITransform).width;
          this._y = this.lineGraph.node.getComponent(UITransform).height * 0.85;
          this._limit = 60;
          this._points = 14;
        }

        update(dt) {
          this.counter += 1;
          this.time += dt;

          if (this.time >= 1) {
            this.updateData(this.counter);
            this.time -= 1;
            this.nameLabel.string = "FPS: " + this.counter;
            this.counter = 0;
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fpsRecorder.ts", ['cc', './monitorDataStore.ts'], function (exports) {
  var cclegacy, Component, _decorator, MonitorDataStore;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "99ab93gW2JP37Wy1zMiAW4P", "fpsRecorder", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const MINUTE = 60000;
      let FPSRecorder = exports('default', ccclass(_class = class FPSRecorder extends Component {
        constructor(...args) {
          super(...args);
          this.totalFPSPerSecond = 0;
          this.totalSecondTimes = 0;
          this.counterFPSPerSecond = 0;
          this.isRecording = false;
          this.timeCounting = 0;
          this.intervalCollectFPS = void 0;
        }

        get recordConfig() {
          return MonitorDataStore.instance.recordData.recordConfig;
        }

        get recordData() {
          return MonitorDataStore.instance.recordData;
        }

        startRecord() {
          this.resetRecord();
          this.isRecording = true;
          this.startIntervalCollectAverageFPS();
        }

        stopRecord() {
          this.isRecording = false;
          clearInterval(this.intervalCollectFPS);
          this.collectAverageFPS();
        }

        resetRecord() {
          this.totalFPSPerSecond = 0;
          this.totalSecondTimes = 0;
          this.counterFPSPerSecond = 0;
          this.timeCounting = 0;
        }

        update(dt) {
          if (this.isRecording) {
            this.calculateFPS(dt);
          }
        }

        calculateFPS(dt) {
          this.counterFPSPerSecond += 1;
          this.timeCounting += dt;

          if (this.timeCounting >= 1) {
            this.collectLowFPS(this.counterFPSPerSecond);
            this.totalFPSPerSecond += this.counterFPSPerSecond;
            this.totalSecondTimes++;
            this.timeCounting -= 1;
            this.counterFPSPerSecond = 0;
          }
        }

        startIntervalCollectAverageFPS() {
          this.intervalCollectFPS = setInterval(() => {
            this.collectAverageFPS();
          }, this.recordConfig.chartTime * MINUTE);
        }

        collectAverageFPS() {
          var averageFPS = this.totalFPSPerSecond / this.totalSecondTimes || 0;
          this.recordData.arrayChart.push(averageFPS);
        }

        collectLowFPS(currentFPS) {
          if (!this.recordData.minFPS || this.recordData.minFPS > currentFPS) {
            this.recordData.minFPS = currentFPS;
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/game-network.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        function a0_0x126a() {
          var _0x34464c = ['pingTimeout', 'decoder', 'MessageManager\x20-\x20_initSocket\x20-\x20exist\x20socket.', 'maxSize', '_ackPacket', 'ondisconnect', 'POPUP_DISCONNECTED_EVENT', '__initialize', 'https', 'JSONP\x20disabled', 'buffer', 'No\x20transports\x20available', 'area', 'toLowerCase', 'size', 'once', 'Connect\x20without\x20login\x20due\x20to\x20missing\x20serviceRest', 'msec', 'warn', 'headers', '_intervalExtendToken', 'enable', 'accept-charset', '_sendPacket', 'setUserType', 'userAgent', 'NEW_MESSAGE_EVENT', 'enqueue', 'unregisterEvent', 'removeBlobs', 'MessageManager\x20-\x20_handleSocketEvent.', 'connect_timeout', 'hasOwnProperty', '\x20is\x20not\x20a\x20scalar\x20value', 'send-message-success', 'flushing\x20%d\x20packets\x20in\x20socket', 'nsps', 'name', 'floor', 'socket.io-client', 'Possible\x20EventEmitter\x20memory\x20leak\x20detected.\x20', 'setPing', '#33CC99', 'ontimeout', 'setToken', 'isSocketAvailable', 'MozWebSocket', 'isAbleSendingData', 'days', 'transport\x20not\x20open\x20-\x20deferring\x20close', 'object', 'reconnect', 'SocketManager\x20-\x20force-disconnect\x20>>>\x20close\x20connect!', 'connect', 'jitter', 'takeBinaryData', 'customEventMapping', 'listener', 'storage', 'MessageManager\x20-\x20_initSocket.', 'invalid\x20payload', 'onPacket', 'defaultOption', 'engine.io-client:socket', 'hostname', 'index', 'numberRetrySendingMessage', 'table', 'source', 'save', 'socket\x20receive:\x20type\x20\x22%s\x22,\x20data\x20\x22%s\x22', 'method', 'EventManager\x20-\x20newEvent:\x20data\x20is\x20null.', 'shouldWaitForACK', 'COMMAND_FAILED_CONC_OVER_LIMIT', 'Socket', 'performing\x20disconnect\x20(%s)', 'availableAmount', 'hasListeners', 'userInfo', 'rememberUpgrade', 'buildSocketUrlQueryParam', 'device', '_duplicateEventId', 'network', 'Updated\x20url\x20must\x20not\x20empty.', 'message-pushed', 'onPong', 'token', 'addEventListeners', 'undefined', 'COMMAND_FAILED_RETRY', 'TransportError', 'upgradeError', '#9933FF', 'reconnecting', 'https://', 'sid', 'ack', 'upgrading', 'handshake', 'onOpen', 'pVer', 'reconstructPacket', 'connect_error', 'pingInterval', 'CommandManager\x20%s\x20-\x20clean\x20up', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_RETRY:\x20messageId=%s,\x20numberResend=%s', '_encrypt_5_2', 'createElement', 'walletVersion', 'addListener', 'onHandshake', 'isView', 'minutes', 'encodePayloadAsBlob', '_initNewConnection', 'newListener', 'flags', 'Invalid\x20UTF-8\x20detected', '_duplicateMessageId', 'PONG', 'logFn', '0000', 'SOCKET_REQUEST_EVENT_V3', '10468955MOzMxJ', 'writing\x20close\x20packet', 'slice', '8705990fDRybK', 'websocket', '2.1.2', 'exports', 'numberResend', 'directory', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_CONC_OVER_LIMIT.\x20current\x20:\x20%s,\x20maximum:\x20%s', 'EventManager\x20-\x20newEvent:\x20duplicate\x20eventId\x20%s', 'Deferred', 'unshift', 'apply', 'host', 'polling', 'then', 'WebSocket', 'prev', 'getMaxListeners', 'Authen\x20token\x20success:\x20%j', 'create', 'startsWith', '#CC00FF', 'sId', '_resolve', 'parentNode', 'agent', 'mismatch-command', '_eventManager', 'warned', 'requestTimeout', 'defaultMaxListeners', 'decoded\x20%s\x20as\x20%j', 'player-can-not-connect', 'poor-connection', 'MessageManager\x20-\x20_handleSocketStatus.', '&ssid=', '_ids', 'resendCount', 'connected-connection', 'parser', '14403132LSZCoW', 'firebug', '#CC0000', 'SOCKET_RESPONSE_EVENT', 'ignoring\x20poll\x20-\x20transport\x20state\x20\x22%s\x22', '_callbacks', 'socket.io-parser', '2466669cxcdeR', 'submit', 'Logger', 'eventId', '_handleSocketEvent', 'hash', 'Content-type', 'error-pushed', '#99CC00', 'strict', 'onAck', 'SocketManager\x20-\x20chat-event:\x20%j', 'setWalletInfos', 'Invalid\x20byte\x20index', 'formatArgs', 'Lone\x20surrogate\x20U+', 'packets', 'relative', 'max', 'doPoll', 'starting\x20upgrade\x20probes', 'requestsCount', 'can-not-connect', '\x20ms', 'readyState', 'writable', 'xhr\x20poll\x20error', '#FF3300', '#0033CC', '_randomizationFactor', 'json', '___eio', 'textarea', 'replace', '%c\x20', 'main', 'SocketManager', 'message', 'encodePayload', 'eid', 'decoded', 'byteLength', 'onNetworkWarning', 'will\x20wait\x20%dms\x20before\x20reconnect\x20attempt', 'file', 'onopen', 'load', 'killed', 'attempts', 'unknown\x20packet\x20type\x20', 'getDisplayName', 'wallet-service-id', '#FF00CC', 'jsonp\x20poll\x20error', '_serverSocketVersion', 'code', 'clearRemainingCommand', 'decode', 'sendChatMessage:\x20_socketManager\x20was\x20not\x20setup.', 'includes', '_initSocket', '443', 'parser\x20error', 'wrapFn', 'skips', 'PlayerInfoStateManager', '#FF9900', '#CC3399', 'MessageManager\x20-\x20updateToken:\x20%j', 'probe\x20error:\x20', 'SOCKET_REQUEST_EVENT_V5_1', 'paused', 'color:\x20inherit', 'finishedReconstruction', 'Queue\x20is\x20empty', 'enablesXDR', 'svt', 'heartbeat', 'iterator', 'ackPacket', 'doWrite', 'CONNECTED_EVENT', 'packet\x20received\x20with\x20socket\x20readyState\x20\x22%s\x22', 'createTransport', '&games=', 'fired', 'substr', 'Queue', 'MessageManager\x20-\x20_handleSocketStatus\x20with\x20null\x20_socketManager', 'callback', 'open', 'flush', '#CC3366', 'Decoder', 'server\x20disconnect\x20(%s)', '_close', 'getPromise', 'updateLogger', 'EventManager\x20-\x20waitForEvent\x20was\x20timeout.\x20%s', 'setJitter', 'push', 'The\x20\x22emitter\x22\x20argument\x20must\x20be\x20of\x20type\x20EventEmitter.\x20Received\x20type\x20', 'onCannotSendMessage', 'ceil', 'opts', 'form', '#99CC33', 'isArray', 'iframeId', 'removeSendingMessage', 'setDisplayName', 'SocketManager\x20-\x20Init\x20new\x20connection!!!', 'readyState\x20%s', 'wss', '#00CCCC', 'cleanup', 'Queue\x20underflow', 'log', 'setAvatar', 'pAvaiAmt', 'hashMap', 'UPDATE_TOKEN', '[object\x20BlobConstructor]', 'src', '_messageIdServiceIdMap', 'map', 'toString', 'logFnWarn', 'setUserId', 'MessageManager\x20-\x20sendMessage:\x20%s\x20-\x20%j', '_config', 'Microsoft.XMLHTTP', 'deconstructPacket', 'CAN_NOT_SEND_MESSAGE_EVENT', '#CC33CC', 'forceNode', '#0066FF', '921f6ca5-1f32-494c-8a6f-cbf1211ce37f', 'SOCKET_REQUEST_EVENT_V4', 'connecting', 'local', 'copy', 'response', 'async', '#3333FF', 'onClose', 'clear', 'maxConcurrentCommand', 'isFull', 'keys', 'ondecoded', 'Haven\x27t\x20init\x20socket\x20connection.\x20Please\x20update\x20config.', 'addCommandManager', 'removeWaiting', 'walletType', 'href', '_reconnectionAttempts', 'randomizationFactor', 'Illegal\x20attachments', 'pop', 'after\x20called\x20too\x20many\x20times', 'commandPayload', '#0000FF', 'backoff', 'uuid', 'CAN_NOT_CONNECT', 'Unknown\x20type:\x20', 'prevBufferLen', 'split', 'Login\x20error.\x20Clean\x20up.', 'close\x20(%s)', '\x20listeners\x20added.\x20Use\x20emitter.setMaxListeners()\x20to\x20increase\x20limit', 'setTransport', 'currentLatencyIdx', 'addEventListener', '-1000px', '\x20times.\x20', 'debug', 'SockerManager\x20-\x20reconnect_error\x20in\x20', 'generateId', 'eventNames', 'toJSON', 'getAvatar', 'getResponseHeader', 'SEND_MESSAGE_SUCCESS_EVENT', 'null', 'walletInfos', 'compress', '#CC33FF', 'presence', 'event', 'ping', 'maxRetry', 'splice', 'SocketManagerNewMessage:\x20CANNOT\x20parse\x20message:\x20%s,\x20keyAB:\x20%j', '_startIntervalExtendToken', '#33CC33', 'waitForEvent', 'onShowPopupDisconnected', 'isSuccess', 'xscheme', 'removeChild', 'connect\x20attempt\x20will\x20timeout\x20after\x20%d', 'SocketManager\x20-\x20Pause\x20interval\x20sending\x20message!', 'opening\x20%s', 'setDisableHeaderCheck', 'receiveBuffer', 'secure', '_pendingSubscribeChannelList', 'pause', '_keyAB', 'script', 'pong', '#FF00FF', '#3300CC', 'password', 'we\x20are\x20currently\x20writing\x20-\x20waiting\x20to\x20pause', 'codePointAt', 'setMaxListeners', 'isAnonymousUser', 'priorWebsocketSuccess', 'dequeue', 'appendChild', '_commandIdFieldName', 'Active', 'updateKeyAB', '_events', 'getInstance', '#6600CC', 'formatters', 'eio_iframe_', 'onNetworkStatus', '#3333CC', '_isSkipMapNewEvent', '#9900CC', 'EIO', '[object\x20FileConstructor]', 'substring', 'STATUS_KILLED', 'clearAll', 'readAsArrayBuffer', 'EXPECTED_EVENT_TIMEOUT', 'year', 'parse\x20%s', 'ERROR', '#00CCFF', 'usingBrowserWebSocket', '#FF0066', '#66CC33', '?v=2', 'WebkitAppearance', 'timestampParam', '#0033FF', 'socket.io-client:url', 'second', 'playerStateInfo', 'SocketManager\x20-\x20DISCONNECTED.', '_handleConnectionStatus', 'set', 'abort', 'xhr', 'Request', 'port', 'off', '_registerSystemState', 'mins', 'regexp', 'listeners', 'io\x20client\x20disconnect', 'round', 'passphrase', 'test', '_placeholder', 'serviceId', '_handleReponseMessage', 'encoding\x20packet\x20%j', 'isEmpty', 'setWalletBalance', 'write', 'TextEncoder', 'Object', 'decodeBase64Packet', 'xhr\x20data\x20%s', 'STATUS_ALIVE', 'forceBase64', 'timeout', 'onping', 'pre-pause\x20writing\x20complete', 'reconstructor', 'defineProperty', 'extraHeaders', 'yrs', 'encodePacket', 'removeWaitingQueue', '_unSubscribe', '_data', 'subEvents', 'onCannotConnect', 'application/octet-stream', 'engine.io-client:websocket', 'delete', 'lib', 'onclose', 'onmessage', 'getSSID', 'reconPack', 'pollXhr', 'pausing', '#FF3399', 'disconnect', 'resolve', 'onevent', '#00CC33', 'CommandManager\x20%s\x20-\x20ack:\x20messageId=%s', 'uid', 'toUpperCase', 'MaxListenersExceededWarning', 'pWallet', 'humanize', 'update-token', 'socketUrl', 'onerror', 'callbackErr', 'emitting\x20event\x20%j', 'application/octet-stream;\x20charset=UTF-8', 'policyPort', 'exTkn', 'promotion', 'Updated\x20token\x20must\x20not\x20empty.', 'queueContents', 'sendBuffer', 'my\x20wallet\x20CANNOT\x20update\x20promotion\x20wallet.\x20current\x20version\x20[%s],\x20new\x20version\x20[%s],\x20wallet:\x20%j', 'isDebugging', 'promise', 'number', 'CAN_NOT_CONNECT_EVENT', 'b64', 'error', 'getWallets', '#FF33FF', 'urlVerifyToken', 'ssid', 'onHeartbeat', 'client-join-game-result', 'text/plain;charset=UTF-8', 'description', 'closing', 'Unhandled\x20error.', 'duration', 'CONNECTED_CONNECTION', 'transportOptions', 'unSubscribe', '_socketManager', 'pausing\x20current\x20transport\x20\x22%s\x22', 'BINARY_ACK', 'popup-disconnected-event', '[UnexpectedJSONParseError]:\x20', 'socket', 'Encoder', 'color', 'all', 'getAllWallet', 'getSubscribedChannel', 'serviceRest', 'probe', 'window', '#0000CC', '#00CC00', 'onpong', 'payload', 'canBeDuplicated', 'charAt', 'socket.io-client:socket', 'removeAllListeners', 'url', 'removeAllEventListeners', '?token=', 'body', 'registerOnce', 'skipReconnect', '_reconnect_attempt', 'amount', 'displayName', 'init', 'reconnect_error', 'millisecond', 'timestampRequests', 'pingIntervalTimer', 'secs', 'type', '.*?', 'onConnected', 'isBinary', 'http', 'enabled', '#CC3333', '_cachedMessage', 'wud', 'request', 'isBuffer', 'doLogin', 'packet', 'opening', 'doClose', 'games', 'close', 'position', 'cleanUp', 'COMMAND_FAILED_DUPLICATE', 'engine.io-client:polling-xhr', 'ANONYMOUS', 'forced\x20close', 'writing\x20ping\x20packet\x20-\x20expecting\x20pong\x20within\x20%sms', 'userType', 'DEBUG', 'error-pushed\x20%j', 'SocketManager\x20-\x20send\x20message:\x20counter=%s,\x20messageId=%s', 'socket\x20open', 'insert', 'RoutingEvent', 'success', 'colors', 'closeAndCleanUp', 'server\x20error', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_DUPLICATE.\x20Executing\x20type:\x20%j', 'isReactNative', 'Ignore\x20due\x20to\x20config\x20is\x20exist.', 'probing\x20transport\x20\x22%s\x22', 'function', 'setWalletBalanceV22', 'lastPing', 'onEvent', '9602NfzVRU', 'POOR_CONNECTION', 'closed', '#3399CC', '#CC9900', 'can-not-send-message', 'chat-event', '#3366CC', 'query', 'alive', 'long', 'reconnectionAttempts', 'shift', 'onload', 'MessageManager\x20-\x20Authen\x20token:\x20%s', '#FFCC00', 'onpacket', 'supportsBinary', '#FF0000', 'registerEventOnce', 'parser\x20error:\x20', 'socketio', 'binary', 'removeListener', '#6600FF', 'Content-Type', 'creating\x20transport\x20\x22%s\x22', '&env=', 'reconnection', 'rejectUnauthorized', 'removeEvent', '_emitter', 'top', 'socket-info', 'options', '#CC0066', 'getToken', '_routingEventHandler', '_opt', 'anchor', 'key', '_subscribe', 'got\x20binary\x20data\x20when\x20not\x20reconstructing\x20a\x20packet', 'day', 'path', 'sendPacket', 'managers', 'pong\x20-\x20latency:\x20%s,\x20avarage\x20latency:\x20%s', 'length', 'count', 'prototype', 'socket\x20close\x20with\x20reason:\x20\x22%s\x22', 'minute', 'CommandManager\x20%s\x20-\x20cannotSendMessage:\x20messageId=%s', 'encoded\x20%j\x20as\x20%s', 'decodePayload', '#CCCC00', 'queue', 'transport\x20closed', 'namespace', 'subs', 'env', 'getPrototypeOf', 'result', 'socket\x20error\x20%j', '#FF0033', 'CommandManager', 'arraybuffer', 'data', 'getOwnPropertySymbols', 'protocol', 'avatar', 'PacketManager', 'reset', 'head', 'registerEvent', 'setCurrency', 'state-updated', 'transport\x20close', 'The\x20value\x20of\x20\x22defaultMaxListeners\x22\x20is\x20out\x20of\x20range.\x20It\x20must\x20be\x20a\x20non-negative\x20number.\x20Received\x20', 'getUserId', 'client-state-request', 'Accept', '__importDefault', 'hasPacket', 'emitBuffered', 'authority', 'attachments', 'https:', 'wallet-updated', 'cert', '#FF3333', 'renderer', 'removeEventListener', 'SOCKET_RESPONSE_EVENT_V5_1', 'counter', 'filterUpgrades', 'acks', 'milliseconds', '_countPingOverTime', 'ipv6uri', 'value', '_encrypt', 'my\x20wallet\x20update:\x20%j', 'CommandManager\x20%s\x20-\x20resendMessage:\x20messageId=%s,\x20resendMessageId=%s,\x20numberResend=%s,\x20resendCount=%s', 'encodeQueryData', 'destroy', 'Invalid\x20continuation\x20byte', 'responseType', 'executeCommand', 'readAsDataURL', 'pAmt', '_sId', 'autoConnect', 'bind', 'pfx', '_commandHandlerMap', 'SocketManager\x20-\x20sendChatMessage:\x20%j', '\x22%s\x22\x20works\x20-\x20aborting\x20\x22%s\x22', 'responseText', 'listenerCount', 'EventManager\x20-\x20newEvent:\x20%j', 'doOpen', 'remove', 'num', 'factor', 'sendChatMessage', 'apiUrl', 'nsp', '6115990xjqqCu', 'DISCONNECT', '#FF6633', 'hrs', 'encodePayloadAsArrayBuffer', 'onLoad', 'setting\x20transport\x20%s', '\x20%c', 'server', 'writeBuffer', 'XMLHttpServiceRest', 'product', 'reconnect\x20success', 'processPacketQueue', 'jsonp', '_latency', '_eventsCount', '#0099FF', 'changing\x20transport\x20and\x20sending\x20upgrade\x20packet', 'state-pushed', 'isFullfill', 'chat-message', 'jsonp\x20polling\x20iframe\x20removal\x20error', 'threshold', '#3399FF', '_hmuid_', 'upgrade', 'requests', 'status', 'decodePayloadAsBinary', 'TextDecoder', 'STATUS_INIT', 'force-disconnect', '__esModule', '_packetManager', 'reduce', '_waitForEventTimeOutId', 'bad\x20ack\x20%s', 'console', 'call', 'indexOf', 'pow', '6jIYhNC', 'append', 'setMax', '#66CC00', 'diff', 'names', '_reject', 'Duplicate', 'random', 'SocketManager\x20-\x20send-message-success:\x20%s', 'CONNECT', '8NNVVWm', 'years', 'style', '://', 'pollComplete', 'concat', 'onconnect', 'instance', 'Transport', '#6633CC', 'filter', 'SockerManager\x20-\x20emit\x20event\x20can-not-connect!', 'attaching\x20ack\x20callback\x20to\x20event', 'Queue\x20overflow', 'EventManager', 'coerce', 'q51', '*/*', '_status', 'supports', 'transports', '__spreadArray', 'types', 'emit', 'ondata', 'POST', 'wallet', 'className', 'protocols', '_timeout', 'onreadystatechange', 'Connection\x20error', 'reject', 'fromCodePoint', 'encodeBase64Packet', 'prependOnceListener', 'getBlob', '#FF6600', 'onunload', 'userId', 'onack', 'localStorage', 'writing\x20packet\x20%j', 'send', 'encode', '_executingCommandType', 'hours', 'drain', 'ServiceRest', 'string', '_buildPacket', 'seconds', 'withCredentials', 'color:\x20', '#9933CC', 'mismatch-version', 'socket\x20closing\x20-\x20telling\x20transport\x20to\x20close', 'messageId', 'probe\x20transport\x20\x22%s\x22\x20failed', 'exception', 'DISCONNECTED_CONNECTION', 'updateToken', 'base64', '_socket', 'attachEvent', 'encoder', 'initSocket', 'pathNames', 'instances', '#33CCFF', 'pagehide', 'check', '11BqLwFd', 'updateAllCounter', '\x22encode\x20error\x22', '_subscribeChannelList', 'get', 'user-logged-out', 'reconnectionDelay', 'binaryType', 'transport', 'parse', '_reconnectionDelayMax', 'exists', 'ownKeys', '#3300FF', 'player-can-not-authen', 'utf-8', 'ids', 'fromCharCode', 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx', 'connected', 'forEach', 'reconnect_failed', 'upgrades', 'stringify', 'listLastLatency', 'has', 'useColors', 'EVENT', 'hasXDR', 'hasPromotionWalletType', 'currency', 'expected-event-timeout', 'version', 'Authen\x20token\x20fail:\x20%j', 'ACK', '_reconnection', 'min', 'hour', 'pingTimeoutTimer', 'CONNECTED', 'transport\x20error', 'boolean', '_maxListeners', 'SocketManager\x20-\x20emit\x20event\x20can-not-connect!', 'disconnected', 'ciphers', '#00CC66', '_validateDublicateCommandType', 'logFnError', '#CC3300', 'MessageManager', 'multiplex', 'ignoring\x20socket\x20cache\x20for\x20%s', 'join', 'match', 'perMessageDeflate', 'default', 'buffers', 'forceJSONP', 'probe\x20transport\x20\x22%s\x22\x20failed\x20because\x20of\x20error:\x20%s', 'The\x20\x22listener\x22\x20argument\x20must\x20be\x20of\x20type\x20Function.\x20Received\x20type\x20', 'iteratePacket', 'CHAT_MESSAGE_EVENT', 'sendMessage', 'COMMAND_SEND_SUCCESSFULLY', '_messageIdInfosMap', 'EventManager\x20-\x20cannotConnect.', 'transport\x20is\x20open\x20-\x20connecting', 'onreconnect', 'getOwnPropertyNames', '_stopIntervalExtendToken', 'prependListener', 'left', 'reconnectionDelayMax', '6785088xIvQrI', 'SOCKET_RESPONSE_EVENT_V5_2', 'onData', 'onlyBinaryUpgrades', 'documentElement', 'option', 'iframe', 'uri', 'engine', 'process', 'xhr\x20poll', 'setRequestHeader', '_eventHandlerMap', 'exec', 'action', 'setMin', 'target', '#CC0033', 'disconnected-connection', 'javascript:0', 'removeItem', 'MessageManager\x20-\x20closeAndCleanUp.', 'updateCounter', 'byteOffset', 'EventManager\x20-\x20clean\x20up.', 'registerGame', 'calling\x20ack\x20%s\x20with\x20%j', 'localAddress', 'ping\x20timeout', 'ping-event', 'unregisterGame', 'SocketManager\x20status\x20KILLED,\x20not\x20init\x20new\x20connection!', 'poll', 'socket.io-client:manager', 'user-logged-out:\x20%j', 'sendXhr', '#CCCC33', 'SocketManagerNewMessage:\x20%s', 'packetBuffer', 'abs', 'blob', 'pingTimeoutWarning', 'forceNew', 'onError', 'decodePacket', 'reconnect\x20failed', 'emitAll', 'MessageManager\x20-\x20sendChatMessage:\x20%j', 'maybeReconnectOnOpen', '/engine.io', 'subscribe', 'add', 'BINARY_EVENT', 'onCannotAuthen', '#FF33CC', 'PONG_EVENT', 'MISMATCH_COMMAND_ID', 'sending\x20connect\x20packet\x20with\x20query\x20%s', 'averageLatency', 'packetCreate', 'SOCKET_REQUEST_EVENT_V5_2', 'Login\x20success.\x20Connecting', 'encoding', 'onDrain', 'charCodeAt'];

          a0_0x126a = function () {
            return _0x34464c;
          };

          return a0_0x126a();
        }

        function a0_0x107f(_0x3ddd85, _0x32d048) {
          var _0x126a9b = a0_0x126a();

          return a0_0x107f = function (_0x107fca, _0x396224) {
            _0x107fca = _0x107fca - 0xed;
            var _0x2a4f44 = _0x126a9b[_0x107fca];
            return _0x2a4f44;
          }, a0_0x107f(_0x3ddd85, _0x32d048);
        }

        (function (_0x2681e0, _0x4d2720) {
          var _0x4e0f88 = a0_0x107f,
              _0x3f33e3 = _0x2681e0();

          while (!![]) {
            try {
              var _0x4fe21b = parseInt(_0x4e0f88(0x27f)) / 0x1 * (parseInt(_0x4e0f88(0x181)) / 0x2) + -parseInt(_0x4e0f88(0x3b8)) / 0x3 + -parseInt(_0x4e0f88(0x2c9)) / 0x4 + -parseInt(_0x4e0f88(0x202)) / 0x5 * (-parseInt(_0x4e0f88(0x22c)) / 0x6) + parseInt(_0x4e0f88(0x387)) / 0x7 + -parseInt(_0x4e0f88(0x237)) / 0x8 * (-parseInt(_0x4e0f88(0x3b1)) / 0x9) + -parseInt(_0x4e0f88(0x38a)) / 0xa;

              if (_0x4fe21b === _0x4d2720) break;else _0x3f33e3['push'](_0x3f33e3['shift']());
            } catch (_0x51fa2a) {
              _0x3f33e3['push'](_0x3f33e3['shift']());
            }
          }
        })(a0_0x126a, 0xeff2c), !function () {
          var _0x172cd5 = a0_0x107f,
              _0x1cc45a = {
            0x1542: function (_0x5c015a, _0x12369a, _0x44b637) {
              var _0x179f9f = a0_0x107f;

              var _0xeb8e57 = this && this[_0x179f9f(0x1d4)] || function (_0x113ade) {
                return _0x113ade && _0x113ade['__esModule'] ? _0x113ade : {
                  'default': _0x113ade
                };
              };

              Object[_0x179f9f(0xf2)](_0x12369a, _0x179f9f(0x223), {
                'value': !0x0
              }), _0x12369a['Duplicate'] = void 0x0;

              var _0x1d2343 = _0x44b637(0x13dc),
                  _0x347957 = _0xeb8e57(_0x44b637(0x28a)),
                  _0x494f86 = function () {
                var _0x378484 = _0x179f9f;

                function _0x42122b(_0x1aaa2e) {
                  var _0x53e763 = a0_0x107f;
                  void 0x0 === _0x1aaa2e && (_0x1aaa2e = 0x3e8), this['maxSize'] = 0x3e8, this[_0x53e763(0x30d)] = _0x1aaa2e, this[_0x53e763(0x1ba)] = new _0x1d2343[_0x53e763(0x40f)](_0x1aaa2e), this[_0x53e763(0x430)] = new _0x347957[_0x53e763(0x2b7)]();
                }

                return _0x42122b[_0x378484(0x1b3)]['insert'] = function (_0x222758) {
                  var _0x2b51aa = _0x378484;
                  this[_0x2b51aa(0x1ba)]['size']() >= this['maxSize'] && this[_0x2b51aa(0x430)][_0x2b51aa(0xfd)](this[_0x2b51aa(0x1ba)][_0x2b51aa(0x495)]()), this['queue'][_0x2b51aa(0x325)](_0x222758), this['hashMap'][_0x2b51aa(0x4ba)](_0x222758, !0x0);
                }, _0x42122b[_0x378484(0x1b3)][_0x378484(0x28a)] = function (_0x3a50ca) {
                  var _0x4d8fe1 = _0x378484;
                  return this['hashMap'][_0x4d8fe1(0x298)](_0x3a50ca);
                }, _0x42122b[_0x378484(0x1b3)][_0x378484(0x4a7)] = function () {
                  var _0x806bcf = _0x378484;
                  this[_0x806bcf(0x1ba)]['clear'](), this[_0x806bcf(0x430)][_0x806bcf(0x44a)]();
                }, _0x42122b;
              }();

              _0x12369a[_0x179f9f(0x233)] = _0x494f86;
            },
            0x13dc: function (_0x2852c4, _0x159f3d) {
              var _0x14a935 = a0_0x107f;
              Object[_0x14a935(0xf2)](_0x159f3d, _0x14a935(0x223), {
                'value': !0x0
              }), _0x159f3d[_0x14a935(0x40f)] = void 0x0;

              var _0x453c42 = function () {
                var _0xf14113 = _0x14a935;

                function _0x15fef0(_0x1e0d17) {
                  var _0x26b0d6 = a0_0x107f;
                  this['maxSize'] = _0x1e0d17 > 0x0 ? _0x1e0d17 : 0xa, this[_0x26b0d6(0x1b1)] = 0x0, this[_0x26b0d6(0x1ba)] = new Array(this[_0x26b0d6(0x30d)]);
                }

                return _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x4cc)] = function () {
                  var _0x4d351e = _0xf14113;
                  return 0x0 === this[_0x4d351e(0x1b1)];
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x44c)] = function () {
                  var _0x323e25 = _0xf14113;
                  return this[_0x323e25(0x1b1)] === this[_0x323e25(0x30d)];
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x325)] = function (_0x202ae9) {
                  var _0x11ce23 = _0xf14113;
                  if (this[_0x11ce23(0x44c)]()) throw new Error(_0x11ce23(0x244));
                  this[_0x11ce23(0x1ba)][this[_0x11ce23(0x1b1)]++] = _0x202ae9;
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x495)] = function () {
                  var _0xad38df = _0xf14113;
                  if (this['isEmpty']()) throw new Error(_0xad38df(0x42c));

                  for (var _0x1bff7a = this[_0xad38df(0x1ba)][0x0], _0x4c4716 = 0x0; _0x4c4716 < this['length']; _0x4c4716++) this[_0xad38df(0x1ba)][_0x4c4716] = this[_0xad38df(0x1ba)][_0x4c4716 + 0x1];

                  return this[_0xad38df(0x1b1)]--, _0x1bff7a;
                }, _0x15fef0['prototype']['peek'] = function () {
                  var _0x28f62f = _0xf14113;
                  if (this['isEmpty']()) throw new Error(_0x28f62f(0x402));
                  return this[_0x28f62f(0x1ba)][0x0];
                }, _0x15fef0['prototype'][_0xf14113(0x44a)] = function () {
                  var _0x215139 = _0xf14113;
                  this[_0x215139(0x1b1)] = 0x0, this['queue'] = new Array(this[_0x215139(0x30d)]);
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x318)] = function () {
                  return this['length'];
                }, _0x15fef0['prototype'][_0xf14113(0x11a)] = function () {
                  for (var _0x38ddfc = 0x0; _0x38ddfc < this['length']; ++_0x38ddfc);
                }, _0x15fef0;
              }();

              _0x159f3d[_0x14a935(0x40f)] = _0x453c42;
            },
            0xb46: function (_0x3861e5, _0x3ff832) {
              var _0x394f3d = a0_0x107f;
              Object[_0x394f3d(0xf2)](_0x3ff832, _0x394f3d(0x223), {
                'value': !0x0
              }), _0x3ff832[_0x394f3d(0x392)] = void 0x0;

              var _0x8ead94 = function () {
                var _0x24a2a2 = _0x394f3d;

                function _0x20d1c7() {
                  var _0x5a6e59 = a0_0x107f,
                      _0x31cbe2 = this;

                  this[_0x5a6e59(0x3a0)] = function () {}, this[_0x5a6e59(0x232)] = function () {}, this[_0x5a6e59(0x216)] = !0x1, this[_0x5a6e59(0x11e)] = new Promise(function (_0x5d328a, _0x207349) {
                    var _0x9eb056 = _0x5a6e59;
                    _0x31cbe2[_0x9eb056(0x3a0)] = _0x5d328a, _0x31cbe2['_reject'] = _0x207349;
                  });
                }

                return _0x20d1c7[_0x24a2a2(0x1b3)]['resolve'] = function (_0x57d88c) {
                  var _0x189798 = _0x24a2a2;
                  this[_0x189798(0x3a0)](_0x57d88c), this['isFullfill'] = !0x0;
                }, _0x20d1c7['prototype']['reject'] = function (_0x31844e, _0x46bdf1) {
                  var _0x52686f = _0x24a2a2;
                  this[_0x52686f(0x232)](_0x31844e, _0x46bdf1), this[_0x52686f(0x216)] = !0x0;
                }, _0x20d1c7['prototype'][_0x24a2a2(0x418)] = function () {
                  return this['promise'];
                }, _0x20d1c7[_0x24a2a2(0x1b3)]['isPromiseFullfill'] = function () {
                  var _0x43942b = _0x24a2a2;
                  return this[_0x43942b(0x216)];
                }, _0x20d1c7;
              }();

              _0x3ff832[_0x394f3d(0x392)] = _0x8ead94;
            },
            0x370: function (_0x6d1686, _0x33789f, _0x9edefa) {
              var _0x306321 = a0_0x107f;

              var _0x4b4a6c = this && this[_0x306321(0x1d4)] || function (_0x39ea09) {
                var _0x5b86d8 = _0x306321;
                return _0x39ea09 && _0x39ea09[_0x5b86d8(0x223)] ? _0x39ea09 : {
                  'default': _0x39ea09
                };
              };

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x223), {
                'value': !0x0
              }), _0x33789f[_0x306321(0x267)] = _0x33789f[_0x306321(0x3dc)] = _0x33789f['EventManager'] = _0x33789f['CommandManager'] = _0x33789f[_0x306321(0x2b1)] = _0x33789f[_0x306321(0x3f9)] = _0x33789f[_0x306321(0x392)] = _0x33789f[_0x306321(0x35e)] = _0x33789f['lib'] = void 0x0;

              var _0x409f31 = _0x4b4a6c(_0x9edefa(0x28a)),
                  _0x48c66c = _0x9edefa(0x1a99),
                  _0x29221a = _0x9edefa(0x758),
                  _0xf3b88b = _0x4b4a6c(_0x9edefa(0x7e9)),
                  _0x54e9b5 = _0x9edefa(0xb46);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x392), {
                'enumerable': !0x0,
                'get': function () {
                  return _0x54e9b5['Deferred'];
                }
              });

              var _0x4d24b2 = _0x9edefa(0x1531);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x3f9), {
                'enumerable': !0x0,
                'get': function () {
                  var _0x25054c = _0x306321;
                  return _0x4d24b2[_0x25054c(0x3f9)];
                }
              });

              var _0x1cd305 = _0x9edefa(0x19be);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x2b1), {
                'enumerable': !0x0,
                'get': function () {
                  var _0x2767c4 = _0x306321;
                  return _0x1cd305[_0x2767c4(0x2b1)];
                }
              });

              var _0x4ed804 = _0x9edefa(0x4f0);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x1c3), {
                'enumerable': !0x0,
                'get': function () {
                  return _0x4ed804['CommandManager'];
                }
              });

              var _0x316af0 = _0x9edefa(0x6);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x245), {
                'enumerable': !0x0,
                'get': function () {
                  var _0x415fea = _0x306321;
                  return _0x316af0[_0x415fea(0x245)];
                }
              });

              var _0x51e5da = _0x9edefa(0x1d8f);

              Object['defineProperty'](_0x33789f, _0x306321(0x3dc), {
                'enumerable': !0x0,
                'get': function () {
                  return _0x51e5da['SocketManager'];
                }
              });

              var _0x1d32ca = _0x9edefa(0x1518);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x267), {
                'enumerable': !0x0,
                'get': function () {
                  var _0x913f05 = _0x306321;
                  return _0x1d32ca[_0x913f05(0x267)];
                }
              }), _0x33789f[_0x306321(0xfe)] = {
                'hashmap': _0x409f31[_0x306321(0x2b7)],
                'io': _0x48c66c,
                'logger': _0xf3b88b[_0x306321(0x2b7)],
                'uuid': _0x29221a[_0x306321(0x45c)]
              }, _0x33789f[_0x306321(0x35e)] = {
                'Deferred': _0x54e9b5[_0x306321(0x392)],
                'PlayerInfoStateManager': _0x4d24b2[_0x306321(0x3f9)],
                'MessageManager': _0x1cd305[_0x306321(0x2b1)],
                'CommandManager': _0x4ed804['CommandManager'],
                'EventManager': _0x316af0['EventManager'],
                'SocketManager': _0x51e5da[_0x306321(0x3dc)],
                'ServiceRest': _0x1d32ca['ServiceRest']
              };
            },
            0x4f0: function (_0x49a0f0, _0x438f75, _0x5aac2c) {
              var _0xa0dc0 = a0_0x107f;

              var _0x1547ba = this && this[_0xa0dc0(0x1d4)] || function (_0x256263) {
                var _0x6689f3 = _0xa0dc0;
                return _0x256263 && _0x256263[_0x6689f3(0x223)] ? _0x256263 : {
                  'default': _0x256263
                };
              };

              Object['defineProperty'](_0x438f75, _0xa0dc0(0x223), {
                'value': !0x0
              }), _0x438f75[_0xa0dc0(0x1c3)] = void 0x0;

              var _0x28fdc6 = _0x5aac2c(0x19be),
                  _0x317f79 = _0x5aac2c(0x758),
                  _0x3d1d58 = _0x1547ba(_0x5aac2c(0x7e9)),
                  _0x560ebd = _0x1547ba(_0x5aac2c(0x1c13)),
                  _0x14e192 = _0x1547ba(_0x5aac2c(0x28a)),
                  _0x3bad06 = function () {
                var _0x26a56d = _0xa0dc0;

                function _0x3e6f5a(_0x4a41a8, _0x1396ac, _0x2fa43c) {
                  var _0x44543c = a0_0x107f;
                  void 0x0 === _0x2fa43c && (_0x2fa43c = 'commandId'), this[_0x44543c(0x4c9)] = _0x4a41a8, this[_0x44543c(0x44b)] = _0x1396ac || 0x1, this[_0x44543c(0x497)] = _0x2fa43c, this[_0x44543c(0x1a0)] = new _0x560ebd[_0x44543c(0x2b7)](), this['_executingCommandType'] = new _0x14e192['default'](), this[_0x44543c(0x2c0)] = new _0x14e192[_0x44543c(0x2b7)]();
                }

                return _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x1cc)] = function (_0x5ae2aa, _0x40a28a) {
                  this['_emitter']['on'](_0x5ae2aa, _0x40a28a);
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x14b)] = function (_0x53380f, _0x13c19f) {
                  var _0x3ae798 = _0x26a56d;

                  this[_0x3ae798(0x1a0)][_0x3ae798(0x319)](_0x53380f, _0x13c19f);
                }, _0x3e6f5a['prototype'][_0x26a56d(0x2fb)] = function (_0x33a037) {
                  var _0x3b9524 = _0x26a56d;

                  _0x28fdc6[_0x3b9524(0x2b1)][_0x3b9524(0x49b)]()[_0x3b9524(0x2fb)](_0x33a037);
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['unSubscribe'] = function (_0x4abe08) {
                  var _0x4086b5 = _0x26a56d;

                  _0x28fdc6[_0x4086b5(0x2b1)]['getInstance']()[_0x4086b5(0x130)](_0x4abe08);
                }, _0x3e6f5a['prototype'][_0x26a56d(0x1ee)] = function (_0xcadc43, _0x2f7ace) {
                  var _0x55b6ef = _0x26a56d;

                  _0x3d1d58[_0x55b6ef(0x2b7)][_0x55b6ef(0x469)]('CommandManager\x20%s\x20-\x20executeCommand:\x20%j', this[_0x55b6ef(0x4c9)], [_0xcadc43, _0x2f7ace]);

                  var _0x167814 = this['_executingCommandType']['count']();

                  if (!this[_0x55b6ef(0x2ae)](_0xcadc43, _0x2f7ace)) return _0x3d1d58[_0x55b6ef(0x2b7)][_0x55b6ef(0x122)](_0x55b6ef(0x179), this[_0x55b6ef(0x4c9)], this[_0x55b6ef(0x264)][_0x55b6ef(0x44d)]()), _0x3e6f5a[_0x55b6ef(0x169)];
                  if (_0x167814 >= this['maxConcurrentCommand'] && !this[_0x55b6ef(0x264)][_0x55b6ef(0x298)](_0xcadc43['event'])) return _0x3d1d58['default']['error'](_0x55b6ef(0x390), this[_0x55b6ef(0x4c9)], _0x167814, this[_0x55b6ef(0x44b)]), _0x3e6f5a['COMMAND_FAILED_CONC_OVER_LIMIT'];

                  var _0x1a2a66 = (0, _0x317f79[_0x55b6ef(0x45c)])();

                  _0xcadc43[_0x55b6ef(0x1c5)][this['_commandIdFieldName']] = _0x1a2a66;

                  var _0x49d200 = _0x28fdc6['MessageManager']['getInstance']()[_0x55b6ef(0x2be)](this[_0x55b6ef(0x4c9)], _0xcadc43);

                  return _0x2f7ace[_0x55b6ef(0x353)] && (this['_executingCommandType']['set'](_0xcadc43[_0x55b6ef(0x476)], !0x0), this[_0x55b6ef(0x2c0)][_0x55b6ef(0x4ba)](_0x49d200, {
                    'commandId': _0x1a2a66,
                    'resendCount': _0x2f7ace[_0x55b6ef(0x3ae)],
                    'commandPayload': _0xcadc43,
                    'numberResend': 0x0
                  })), _0x3d1d58['default'][_0x55b6ef(0x469)]('CommandManager\x20%s\x20-\x20sendMessage\x20messageId=%s,\x20commandId=%s', this['serviceId'], _0x49d200, _0x1a2a66), _0x1a2a66;
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['clearRemainingCommand'] = function () {
                  var _0x27fbd9 = _0x26a56d;
                  this[_0x27fbd9(0x264)]['clear'](), _0x28fdc6[_0x27fbd9(0x2b1)][_0x27fbd9(0x49b)]()[_0x27fbd9(0x425)](this[_0x27fbd9(0x2c0)][_0x27fbd9(0x44d)]()), this[_0x27fbd9(0x2c0)][_0x27fbd9(0x44a)]();
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x148)] = function () {
                  var _0x2195c7 = _0x26a56d;

                  this[_0x2195c7(0x1a0)]['removeAllListeners']();
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['cleanUp'] = function () {
                  var _0x52a600 = _0x26a56d;
                  _0x3d1d58[_0x52a600(0x2b7)][_0x52a600(0x469)](_0x52a600(0x374), this['serviceId']), this[_0x52a600(0x1a0)][_0x52a600(0x146)](), this[_0x52a600(0x3f0)]();
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x3c2)] = function (_0x4a0cfa) {
                  var _0x6f3ac = _0x26a56d;

                  if (_0x3d1d58['default'][_0x6f3ac(0x469)](_0x6f3ac(0x10a), this[_0x6f3ac(0x4c9)], _0x4a0cfa), this['_messageIdInfosMap'][_0x6f3ac(0x298)](_0x4a0cfa)) {
                    var _0x411377 = this['_messageIdInfosMap'][_0x6f3ac(0x283)](_0x4a0cfa)[_0x6f3ac(0x459)];

                    this['_messageIdInfosMap'][_0x6f3ac(0xfd)](_0x4a0cfa), this[_0x6f3ac(0x264)][_0x6f3ac(0xfd)](_0x411377['event']), this[_0x6f3ac(0x1a0)][_0x6f3ac(0x24e)](_0x3e6f5a[_0x6f3ac(0x2bf)], _0x411377);
                  }
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x41e)] = function (_0x973889) {
                  var _0x13282e = _0x26a56d;

                  if (_0x3d1d58['default'][_0x13282e(0x469)](_0x13282e(0x1b6), this[_0x13282e(0x4c9)], _0x973889), this[_0x13282e(0x2c0)]['has'](_0x973889)) {
                    var _0x33ec44 = this[_0x13282e(0x2c0)][_0x13282e(0x283)](_0x973889),
                        _0x4a960f = _0x33ec44[_0x13282e(0x3ae)],
                        _0x23d949 = _0x33ec44['commandId'],
                        _0xb1cae0 = _0x33ec44['commandPayload'],
                        _0x179368 = _0x33ec44[_0x13282e(0x38e)];

                    if (this[_0x13282e(0x2c0)][_0x13282e(0xfd)](_0x973889), this['_executingCommandType'][_0x13282e(0xfd)](_0xb1cae0['event']), _0x179368 < _0x4a960f) {
                      _0x3d1d58[_0x13282e(0x2b7)][_0x13282e(0x469)]('CommandManager\x20%s\x20-\x20resendMessage:\x20%s', this['serviceId'], _0x973889);

                      var _0x2a8c0c = _0x28fdc6[_0x13282e(0x2b1)][_0x13282e(0x49b)]()[_0x13282e(0x2be)](this[_0x13282e(0x4c9)], _0xb1cae0, _0x973889);

                      _0x179368++, this[_0x13282e(0x2c0)][_0x13282e(0x4ba)](_0x2a8c0c, {
                        'resendCount': _0x4a960f,
                        'commandId': _0x23d949,
                        'commandPayload': _0xb1cae0,
                        'numberResend': _0x179368
                      }), _0x3d1d58['default']['debug'](_0x13282e(0x1e9), this[_0x13282e(0x4c9)], _0x973889, _0x2a8c0c, _0x179368, _0x4a960f);
                    } else _0x3d1d58[_0x13282e(0x2b7)][_0x13282e(0x469)](_0x13282e(0x375), this[_0x13282e(0x4c9)], _0x973889, _0x179368), this[_0x13282e(0x1a0)][_0x13282e(0x24e)](_0x3e6f5a['COMMAND_FAILED_RETRY'], _0x23d949);
                  }
                }, _0x3e6f5a['prototype'][_0x26a56d(0x2ae)] = function (_0x2755e1, _0x5ab482) {
                  var _0x2d6662 = _0x26a56d,
                      _0x1928cc = _0x2755e1[_0x2d6662(0x476)];

                  return !!_0x5ab482[_0x2d6662(0x143)] || !0x1 === this['_executingCommandType'][_0x2d6662(0x298)](_0x1928cc);
                }, _0x3e6f5a['COMMAND_FAILED_CONC_OVER_LIMIT'] = _0x26a56d(0x354), _0x3e6f5a[_0x26a56d(0x169)] = _0x26a56d(0x169), _0x3e6f5a[_0x26a56d(0x365)] = _0x26a56d(0x365), _0x3e6f5a[_0x26a56d(0x2bf)] = _0x26a56d(0x2bf), _0x3e6f5a;
              }();

              _0x438f75['CommandManager'] = _0x3bad06;
            },
            0x6: function (_0x453b8c, _0x3688bc, _0x490a7c) {
              var _0x5ebdb6 = a0_0x107f;

              var _0x153c37 = this && this['__importDefault'] || function (_0x1c4659) {
                var _0x38321c = a0_0x107f;
                return _0x1c4659 && _0x1c4659[_0x38321c(0x223)] ? _0x1c4659 : {
                  'default': _0x1c4659
                };
              };

              Object['defineProperty'](_0x3688bc, _0x5ebdb6(0x223), {
                'value': !0x0
              }), _0x3688bc[_0x5ebdb6(0x245)] = void 0x0;

              var _0x6b2cef = _0x153c37(_0x490a7c(0x1c13)),
                  _0xaec8d2 = _0x153c37(_0x490a7c(0x28a)),
                  _0x20b317 = _0x490a7c(0x1542),
                  _0x3f3746 = _0x153c37(_0x490a7c(0x7e9)),
                  _0x58f34c = {
                'jgr': _0x5ebdb6(0x128),
                'sud': _0x5ebdb6(0x1ce),
                'spu': _0x5ebdb6(0x215),
                'erp': _0x5ebdb6(0x3bf),
                'mep': _0x5ebdb6(0x360)
              },
                  _0x7b72e5 = function () {
                var _0x3e512c = _0x5ebdb6;

                function _0x45c846(_0x1900b7, _0x160919) {
                  var _0x1af255 = a0_0x107f;
                  void 0x0 === _0x1900b7 && (_0x1900b7 = !0x1), this[_0x1af255(0x1a0)] = new _0x6b2cef[_0x1af255(0x2b7)](), this['_duplicateEventId'] = new _0x20b317[_0x1af255(0x233)](0x3e8), this['_waitForEventTimeOutId'] = new _0xaec8d2[_0x1af255(0x2b7)](), this[_0x1af255(0x4a1)] = _0x1900b7, this[_0x1af255(0x342)] = _0x160919 || _0x58f34c;
                }

                return _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x492)] = function (_0x2ab4da) {
                  var _0x1818b7 = _0x3e512c;

                  this[_0x1818b7(0x1a0)][_0x1818b7(0x492)](_0x2ab4da);
                }, _0x45c846[_0x3e512c(0x1b3)]['registerEvent'] = function (_0x5b3e72, _0x5bcb3f) {
                  this['_emitter']['on'](_0x5b3e72, _0x5bcb3f);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x326)] = function (_0x5488a7, _0x40f333) {
                  var _0x458715 = _0x3e512c;

                  this[_0x458715(0x1a0)][_0x458715(0x198)](_0x5488a7, _0x40f333);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x14b)] = function (_0x311bfa, _0x135e9d) {
                  var _0x375427 = _0x3e512c;

                  this['_emitter'][_0x375427(0x319)](_0x311bfa, _0x135e9d);
                }, _0x45c846[_0x3e512c(0x1b3)]['removeAllEventListeners'] = function () {
                  var _0x188284 = _0x3e512c;

                  this['_emitter'][_0x188284(0x146)]();
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x47d)] = function (_0x77f53d, _0x4392af, _0x36d5ad) {
                  var _0x2fe937 = _0x3e512c,
                      _0x5ccf32 = setTimeout(function () {
                    var _0x101803 = a0_0x107f;
                    _0x3f3746[_0x101803(0x2b7)]['debug'](_0x101803(0x41a), _0x4392af), _0x36d5ad();
                  }, _0x77f53d);

                  return this[_0x2fe937(0x226)][_0x2fe937(0x4ba)](_0x5ccf32, _0x4392af), _0x5ccf32;
                }, _0x45c846['prototype']['removeWaitingQueue'] = function () {
                  var _0x382f98 = _0x3e512c;
                  this[_0x382f98(0x226)][_0x382f98(0x44d)]()[_0x382f98(0x293)](function (_0x44f271) {
                    clearTimeout(_0x44f271);
                  }), this['_waitForEventTimeOutId'][_0x382f98(0x44a)]();
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x451)] = function (_0x4d23d1) {
                  var _0x375947 = _0x3e512c;
                  clearTimeout(_0x4d23d1), this['_waitForEventTimeOutId'][_0x375947(0xfd)](_0x4d23d1);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x168)] = function () {
                  var _0x2abf6b = _0x3e512c;
                  _0x3f3746[_0x2abf6b(0x2b7)][_0x2abf6b(0x469)](_0x2abf6b(0x2e1)), this[_0x2abf6b(0x1a0)]['removeAllListeners'](), this[_0x2abf6b(0x35d)][_0x2abf6b(0x4a7)](), this[_0x2abf6b(0xf6)]();
                }, _0x45c846[_0x3e512c(0x1b3)]['onConnected'] = function () {
                  var _0x2f6b15 = _0x3e512c;
                  _0x3f3746[_0x2f6b15(0x2b7)][_0x2f6b15(0x469)]('EventManager\x20-\x20connected.'), this[_0x2f6b15(0x1a0)][_0x2f6b15(0x24e)](_0x45c846[_0x2f6b15(0x2a6)]);
                }, _0x45c846[_0x3e512c(0x1b3)]['onPong'] = function (_0x10b942) {
                  this['_emitter']['emit'](_0x45c846['PONG'], _0x10b942);
                }, _0x45c846['prototype'][_0x3e512c(0xfa)] = function () {
                  var _0x14ab1b = _0x3e512c;
                  _0x3f3746[_0x14ab1b(0x2b7)][_0x14ab1b(0x469)](_0x14ab1b(0x2c1)), this[_0x14ab1b(0x1a0)]['emit'](_0x45c846[_0x14ab1b(0x45d)]);
                }, _0x45c846['prototype'][_0x3e512c(0x180)] = function (_0x3ed62a) {
                  var _0x265776 = _0x3e512c,
                      _0x14e5e0 = this;

                  _0x3f3746[_0x265776(0x2b7)]['debug'](_0x265776(0x1fa), _0x3ed62a), _0x3ed62a && _0x3ed62a[_0x265776(0x476)] && (_0x3ed62a[_0x265776(0x476)] = !this[_0x265776(0x4a1)] && this[_0x265776(0x342)][_0x3ed62a['event']] ? this[_0x265776(0x342)][_0x3ed62a[_0x265776(0x476)]] : _0x3ed62a[_0x265776(0x476)]);

                  var _0x1392bd = _0x3ed62a[_0x265776(0x476)],
                      _0x4a974d = _0x3ed62a[_0x265776(0x1c5)],
                      _0x536b8a = _0x3ed62a[_0x265776(0x3bb)];

                  _0x4a974d ? this[_0x265776(0x35d)][_0x265776(0x28a)](_0x536b8a) ? _0x3f3746[_0x265776(0x2b7)][_0x265776(0x122)](_0x265776(0x391), _0x536b8a) : (this['_duplicateEventId'][_0x265776(0x173)](_0x536b8a), this['_waitForEventTimeOutId']['keys']()[_0x265776(0x293)](function (_0x5c4758) {
                    var _0x5c26ee = _0x265776;
                    _0x14e5e0['_waitForEventTimeOutId']['get'](_0x5c4758)(_0x3ed62a) && (clearTimeout(_0x5c4758), _0x14e5e0[_0x5c26ee(0x226)][_0x5c26ee(0xfd)](_0x5c4758));
                  }), _0x265776(0x3bf) === _0x1392bd && _0x3f3746[_0x265776(0x2b7)]['warn'](_0x265776(0x170), _0x3ed62a), this[_0x265776(0x1a0)]['emit'](_0x1392bd, _0x3ed62a)) : _0x3f3746[_0x265776(0x2b7)][_0x265776(0x122)](_0x265776(0x352));
                }, _0x45c846[_0x3e512c(0x2a6)] = _0x3e512c(0x292), _0x45c846[_0x3e512c(0x383)] = 'pong', _0x45c846[_0x3e512c(0x45d)] = _0x3e512c(0x3ce), _0x45c846[_0x3e512c(0x4a9)] = _0x3e512c(0x29e), _0x45c846[_0x3e512c(0x301)] = _0x3e512c(0x3a3), _0x45c846['MISMATCH_DATA_VERSION'] = _0x3e512c(0x26e), _0x45c846;
              }();

              _0x3688bc['EventManager'] = _0x7b72e5;
            },
            0x1531: function (_0x2a2c13, _0x547017, _0x5a8506) {
              var _0x576e90 = a0_0x107f;

              var _0x4d1412 = this && this[_0x576e90(0x1d4)] || function (_0x462328) {
                var _0x44343c = _0x576e90;
                return _0x462328 && _0x462328[_0x44343c(0x223)] ? _0x462328 : {
                  'default': _0x462328
                };
              };

              Object['defineProperty'](_0x547017, '__esModule', {
                'value': !0x0
              }), _0x547017[_0x576e90(0x3f9)] = void 0x0;

              var _0x1d06d4 = _0x4d1412(_0x5a8506(0x1c13)),
                  _0x4ca7ec = _0x5a8506(0x6),
                  _0x42182d = _0x4d1412(_0x5a8506(0x7e9)),
                  _0x5d483c = _0x5a8506(0x758),
                  _0x20fb09 = _0x576e90(0x3db),
                  _0x31b059 = 'promotion',
                  _0x9271ca = {
                0x0: _0x20fb09,
                0x1: _0x31b059
              },
                  _0x5bd598 = function () {
                var _0xa3689a = _0x576e90;

                function _0x23f8b5() {
                  var _0x1cfdf4 = a0_0x107f,
                      _0x5aa1d8 = this;

                  this[_0x1cfdf4(0x362)] = null, this[_0x1cfdf4(0x25e)] = null, this['displayName'] = null, this[_0x1cfdf4(0x1c8)] = '', this[_0x1cfdf4(0x29d)] = '', this['userType'] = '', this[_0x1cfdf4(0x3a4)] = new _0x4ca7ec[_0x1cfdf4(0x245)](), this[_0x1cfdf4(0x1a0)] = new _0x1d06d4['default'](), this['_eventManager'][_0x1cfdf4(0x1cc)]('wallet-updated', function (_0x54b44c) {
                    var _0x14e010 = _0x1cfdf4;

                    _0x5aa1d8[_0x14e010(0x4cd)](_0x54b44c);
                  }), this['_eventManager'][_0x1cfdf4(0x1cc)]('wud-pAmt', function (_0x19f812) {
                    var _0x34a001 = _0x1cfdf4;

                    _0x5aa1d8[_0x34a001(0x4cd)](_0x19f812);
                  }), this['_eventManager'][_0x1cfdf4(0x1cc)](_0x1cfdf4(0x15e), function (_0x27b3b1) {
                    var _0x2bf7fa = _0x1cfdf4;

                    _0x5aa1d8[_0x2bf7fa(0x17e)](_0x27b3b1);
                  }), this['_eventManager']['registerEvent'](_0x1cfdf4(0x284), function (_0x4f8873) {
                    var _0x36f2ba = _0x1cfdf4;
                    _0x42182d[_0x36f2ba(0x2b7)][_0x36f2ba(0x469)](_0x36f2ba(0x2eb), _0x4f8873), _0x5aa1d8[_0x36f2ba(0x1a0)][_0x36f2ba(0x24e)](_0x4f8873[_0x36f2ba(0x476)], _0x4f8873['data']);
                  }), this[_0x1cfdf4(0x3a4)][_0x1cfdf4(0x1cc)](_0x1cfdf4(0x215), function (_0x150084) {
                    var _0x200fe9 = _0x1cfdf4;
                    'wallet-service-id' === _0x150084[_0x200fe9(0x4c9)] && _0x5aa1d8['setWalletBalance'](_0x150084);
                  }), this[_0x1cfdf4(0x126)] = (0, _0x5d483c[_0x1cfdf4(0x45c)])(), this['walletInfos'] = {}, this[_0x1cfdf4(0x29f)] = 0x0;
                }

                return _0x23f8b5[_0xa3689a(0x49b)] = function () {
                  var _0xe0a518 = _0xa3689a;
                  return _0x23f8b5['instance'] || (_0x23f8b5[_0xe0a518(0x23e)] = new _0x23f8b5()), _0x23f8b5['instance'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x4c0)] = function (_0x3864de) {
                  var _0x16947 = _0xa3689a,
                      _0x3ad528 = this;

                  _0x3864de[_0x16947(0x2e2)](_0x16947(0x3eb), {
                    'onAck': function () {},
                    'onCannotSendMessage': function () {}
                  }, {
                    'onConnected': function () {
                      var _0x3c0ad4 = _0x16947;
                      _0x3ad528[_0x3c0ad4(0x1d1)]() && _0x3864de['sendMessage'](_0x3c0ad4(0x3eb), {
                        'event': _0x3c0ad4(0x1d2),
                        'data': {
                          'serviceId': _0x3c0ad4(0x3eb),
                          'objectId': _0x3ad528[_0x3c0ad4(0x1d1)](),
                          'stateType': 'wallet-type',
                          'token': _0x3ad528[_0x3c0ad4(0x1a5)](),
                          'commandId': (0, _0x5d483c['uuid'])()
                        }
                      });
                    },
                    'onCannotConnect': function () {
                      var _0x546f20 = _0x16947;
                      _0x3ad528[_0x546f20(0x362)] = null, _0x3ad528[_0x546f20(0x25e)] = null, _0x3ad528[_0x546f20(0x14f)] = null, _0x3ad528[_0x546f20(0x472)] = {}, _0x3ad528[_0x546f20(0x29f)] = 0x0;
                    },
                    'onCannotAuthen': function () {},
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)][_0x16947(0x1f3)](this[_0x16947(0x3a4)])
                  }), _0x3864de['registerGame'](_0x16947(0x385), {}, {
                    'onConnected': function () {},
                    'onCannotConnect': function () {
                      var _0x3dfd11 = _0x16947;

                      _0x3ad528['_emitter'][_0x3dfd11(0x24e)](_0x3dfd11(0x3a9));
                    },
                    'onCannotAuthen': function () {
                      var _0x859fd1 = _0x16947;

                      _0x3ad528[_0x859fd1(0x1a0)][_0x859fd1(0x24e)](_0x859fd1(0x28d));
                    },
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)][_0x16947(0x1f3)](this['_eventManager'])
                  }), _0x3864de['registerGame'](_0x16947(0x139), {}, {
                    'onConnected': function () {},
                    'onCannotConnect': function () {},
                    'onCannotAuthen': function () {},
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)]['bind'](this['_eventManager'])
                  });
                }, _0x23f8b5['prototype'][_0xa3689a(0x194)] = function (_0x504ca0, _0xfd72f2) {
                  var _0xa8e987 = _0xa3689a;

                  this[_0xa8e987(0x1a0)][_0xa8e987(0x319)](_0x504ca0, _0xfd72f2);
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x1cc)] = function (_0x586fa9, _0x5b1fa2) {
                  var _0x4fcc00 = _0xa3689a;

                  this[_0x4fcc00(0x1a0)]['on'](_0x586fa9, _0x5b1fa2);
                }, _0x23f8b5[_0xa3689a(0x1b3)]['removeEvent'] = function (_0x126c12, _0x5ca740) {
                  var _0x4020b1 = _0xa3689a;

                  this[_0x4020b1(0x1a0)][_0x4020b1(0x198)](_0x126c12, _0x5ca740);
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x4cd)] = function (_0x1b44e) {
                  var _0x17c8fc = _0xa3689a,
                      _0x5d9b6e = _0x1b44e[_0x17c8fc(0x1c5)],
                      _0x5f4000 = !0x1;

                  isNaN(_0x5d9b6e['version']) || isNaN(_0x5d9b6e[_0x17c8fc(0x14e)]) || !this[_0x17c8fc(0x472)][_0x17c8fc(0x3db)] || (!this[_0x17c8fc(0x29f)] || this[_0x17c8fc(0x29f)] <= _0x5d9b6e[_0x17c8fc(0x29f)] ? (this[_0x17c8fc(0x472)][_0x17c8fc(0x3db)][_0x17c8fc(0x14e)] = _0x5d9b6e[_0x17c8fc(0x14e)] || 0x0, this['walletInfos'][_0x17c8fc(0x3db)]['availableAmount'] = _0x5d9b6e[_0x17c8fc(0x357)] || 0x0, this[_0x17c8fc(0x29f)] = _0x5d9b6e['version'], _0x5f4000 = !0x0) : _0x42182d['default'][_0x17c8fc(0x469)]('my\x20wallet\x20CANNOT\x20update\x20main\x20wallet.\x20current\x20version\x20[%s],\x20new\x20version\x20[%s],\x20wallet:\x20%j', this[_0x17c8fc(0x29f)], _0x5d9b6e[_0x17c8fc(0x29f)], this[_0x17c8fc(0x472)])), isNaN(_0x5d9b6e[_0x17c8fc(0x370)]) || isNaN(_0x5d9b6e[_0x17c8fc(0x1f0)]) || !this[_0x17c8fc(0x472)]['promotion'] || (!this[_0x17c8fc(0x29f)] || this['version'] <= _0x5d9b6e[_0x17c8fc(0x370)] ? (this[_0x17c8fc(0x472)][_0x17c8fc(0x118)]['amount'] = _0x5d9b6e[_0x17c8fc(0x1f0)] || 0x0, this[_0x17c8fc(0x472)][_0x17c8fc(0x118)][_0x17c8fc(0x357)] = _0x5d9b6e[_0x17c8fc(0x42f)] || 0x0, this['version'] = _0x5d9b6e[_0x17c8fc(0x370)], _0x5f4000 = !0x0) : _0x42182d['default'][_0x17c8fc(0x469)](_0x17c8fc(0x11c), this[_0x17c8fc(0x29f)], _0x5d9b6e[_0x17c8fc(0x370)], this[_0x17c8fc(0x472)])), _0x5f4000 && (_0x42182d['default'][_0x17c8fc(0x469)](_0x17c8fc(0x1e8), this[_0x17c8fc(0x472)]), this[_0x17c8fc(0x1a0)][_0x17c8fc(0x24e)](_0x17c8fc(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x17e)] = function (_0x36a35d) {
                  var _0x204e20 = _0xa3689a,
                      _0x292b30 = this,
                      _0x33113b = _0x36a35d[_0x204e20(0x1c5)],
                      _0x3ed457 = !0x1;

                  !isNaN(_0x33113b['v']) && _0x33113b['wl'] && _0x33113b['wl'][_0x204e20(0x1b1)] > 0x0 && (this[_0x204e20(0x29f)] = _0x33113b['v'], _0x3ed457 = !0x0, _0x33113b['wl']['forEach'](function (_0x4bb126) {
                    var _0x59379e = _0x204e20;
                    _0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]] && (_0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]][_0x59379e(0x14e)] = _0x4bb126['a'], _0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]][_0x59379e(0x357)] = _0x4bb126['av']);
                  })), _0x3ed457 && (_0x42182d[_0x204e20(0x2b7)][_0x204e20(0x469)](_0x204e20(0x1e8), this['walletInfos']), this[_0x204e20(0x1a0)][_0x204e20(0x24e)](_0x204e20(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x3c4)] = function (_0x497420) {
                  var _0x1463fb = _0xa3689a,
                      _0x11dc78 = this;

                  _0x497420 && (_0x497420[_0x1463fb(0x293)](function (_0x3b06ea) {
                    var _0x5de35b = _0x1463fb;
                    _0x11dc78['walletInfos'][_0x3b06ea[_0x5de35b(0x156)]] && (_0x11dc78['walletInfos'][_0x3b06ea['type']][_0x5de35b(0x14e)] = _0x3b06ea[_0x5de35b(0x14e)], _0x11dc78[_0x5de35b(0x472)][_0x3b06ea[_0x5de35b(0x156)]]['availableAmount'] = _0x3b06ea[_0x5de35b(0x14e)]);
                  }), _0x42182d[_0x1463fb(0x2b7)]['debug'](_0x1463fb(0x1e8), this[_0x1463fb(0x472)]), this[_0x1463fb(0x1a0)][_0x1463fb(0x24e)](_0x1463fb(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletBalance'] = function () {
                  var _0x4d22b8 = _0xa3689a;
                  return this[_0x4d22b8(0x472)]['main'] ? this[_0x4d22b8(0x472)][_0x4d22b8(0x3db)][_0x4d22b8(0x14e)] : 0x0;
                }, _0x23f8b5['prototype'][_0xa3689a(0x123)] = function () {
                  var _0x361808 = _0xa3689a;
                  return {
                    'amount': this[_0x361808(0x472)][_0x361808(0x3db)] ? this['walletInfos']['main'][_0x361808(0x14e)] : 0x0,
                    'pAmount': this['walletInfos'][_0x361808(0x118)] ? this[_0x361808(0x472)][_0x361808(0x118)][_0x361808(0x14e)] : 0x0
                  };
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x13a)] = function () {
                  var _0x293a2f = _0xa3689a;
                  return JSON[_0x293a2f(0x288)](JSON[_0x293a2f(0x296)](this[_0x293a2f(0x472)]));
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletByType'] = function (_0x18086a) {
                  var _0x33be2b = _0xa3689a;
                  return this['walletInfos'][_0x18086a] ? JSON[_0x33be2b(0x288)](JSON[_0x33be2b(0x296)](this['walletInfos'][_0x18086a])) : {
                    'amount': 0x0,
                    'availableAmount': 0x0
                  };
                }, _0x23f8b5['prototype']['hasMainWalletType'] = function () {
                  var _0x1e0190 = _0xa3689a;
                  return !!this[_0x1e0190(0x472)]['main'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x29c)] = function () {
                  var _0x3fda99 = _0xa3689a;
                  return !!this[_0x3fda99(0x472)]['promotion'];
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletTypes'] = function () {
                  var _0xe83285 = _0xa3689a;
                  return Object[_0xe83285(0x44d)](this[_0xe83285(0x472)]);
                }, _0x23f8b5[_0xa3689a(0x1b3)]['setWalletTypes'] = function (_0x1e531d) {
                  var _0x914d7e = _0xa3689a,
                      _0x1400ca = this;

                  _0x1e531d && _0x1e531d[_0x914d7e(0x293)](function (_0x51f42d) {
                    var _0xfcf2a8 = _0x914d7e;
                    _0x1400ca[_0xfcf2a8(0x472)][_0x51f42d] || (_0x1400ca['walletInfos'][_0x51f42d] = {
                      'amount': 0x0,
                      'availableAmount': 0x0
                    });
                  });
                }, _0x23f8b5['prototype'][_0xa3689a(0x438)] = function (_0x1d1c3c) {
                  this['userId'] = _0x1d1c3c;
                }, _0x23f8b5['prototype'][_0xa3689a(0x1d1)] = function () {
                  var _0x2f06e8 = _0xa3689a;
                  return this[_0x2f06e8(0x25e)] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x336)] = function (_0x2589e1) {
                  this['token'] = _0x2589e1;
                }, _0x23f8b5['prototype'][_0xa3689a(0x1a5)] = function () {
                  return this['token'] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)]['setDisplayName'] = function (_0x3f0d50) {
                  var _0x33e41c = _0xa3689a;
                  this[_0x33e41c(0x14f)] = _0x3f0d50;
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x3ea)] = function () {
                  var _0x3f7f19 = _0xa3689a;
                  return this[_0x3f7f19(0x14f)] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x42e)] = function (_0x5c5431) {
                  var _0x4dd097 = _0xa3689a;
                  this[_0x4dd097(0x1c8)] = _0x5c5431;
                }, _0x23f8b5['prototype'][_0xa3689a(0x46e)] = function () {
                  var _0x224ed4 = _0xa3689a;
                  return this[_0x224ed4(0x1c8)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x1cd)] = function (_0x5308df) {
                  var _0xb82028 = _0xa3689a;
                  this[_0xb82028(0x29d)] = _0x5308df;
                }, _0x23f8b5['prototype']['getCurrency'] = function () {
                  return this['currency'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x322)] = function (_0x54ce99) {
                  var _0x1173ad = _0xa3689a;
                  this[_0x1173ad(0x16e)] = _0x54ce99;
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getUserType'] = function () {
                  return this['userType'];
                }, _0x23f8b5[_0xa3689a(0x1b3)]['isRealUser'] = function () {
                  var _0x577ab2 = _0xa3689a;
                  return !!this['userType'] && _0x577ab2(0x16b) !== this[_0x577ab2(0x16e)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x493)] = function () {
                  var _0x1e08f1 = _0xa3689a;
                  return !!this[_0x1e08f1(0x16e)] && _0x1e08f1(0x16b) === this[_0x1e08f1(0x16e)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x101)] = function () {
                  return this['ssid'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x168)] = function () {
                  var _0x5b7bf1 = _0xa3689a;

                  this[_0x5b7bf1(0x1a0)][_0x5b7bf1(0x146)]();
                }, _0x23f8b5;
              }();

              _0x547017[_0x576e90(0x3f9)] = _0x5bd598;
            },
            0x19be: function (_0x5f118d, _0x11dd7d, _0x42ff92) {
              var _0x5ed68b = a0_0x107f;

              var _0x2a3f20 = this && this[_0x5ed68b(0x1d4)] || function (_0x42607e) {
                var _0x4f4d52 = _0x5ed68b;
                return _0x42607e && _0x42607e[_0x4f4d52(0x223)] ? _0x42607e : {
                  'default': _0x42607e
                };
              };

              Object[_0x5ed68b(0xf2)](_0x11dd7d, '__esModule', {
                'value': !0x0
              }), _0x11dd7d[_0x5ed68b(0x2b1)] = void 0x0;

              var _0x2a3be1 = _0x2a3f20(_0x42ff92(0x28a)),
                  _0xb4f606 = _0x2a3f20(_0x42ff92(0x1c13)),
                  _0x3ba48b = _0x42ff92(0x1542),
                  _0x37d4fd = _0x42ff92(0x758),
                  _0x5c675f = _0x42ff92(0x233a),
                  _0x4d731f = _0x42ff92(0x1d8f),
                  _0x3aaeac = _0x42ff92(0x1531),
                  _0x24e47b = _0x42ff92(0xb46),
                  _0x3761d6 = _0x2a3f20(_0x42ff92(0x7e9)),
                  _0xb1089c = function () {
                var _0x4ee1f1 = _0x5ed68b;

                function _0x249e9b() {
                  var _0x351e7b = a0_0x107f;
                  this[_0x351e7b(0x43a)] = {}, this['_cachedMessage'] = [], this['_socketManager'] = null, this[_0x351e7b(0x1a0)] = new _0xb4f606['default'](), this[_0x351e7b(0x1a6)] = new _0x5c675f[_0x351e7b(0x174)](), this[_0x351e7b(0x382)] = new _0x3ba48b['Duplicate'](0x3e8), this[_0x351e7b(0x434)] = new _0x2a3be1['default'](), this[_0x351e7b(0x4b7)] = _0x3aaeac[_0x351e7b(0x3f9)][_0x351e7b(0x49b)](), this[_0x351e7b(0x31e)] = null;
                }

                return _0x249e9b['getInstance'] = function () {
                  var _0x31fc49 = a0_0x107f;
                  return _0x249e9b['instance'] || (_0x249e9b[_0x31fc49(0x23e)] = new _0x249e9b()), _0x249e9b[_0x31fc49(0x23e)];
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x279)] = function (_0x39969c) {
                  var _0x4f3e5d = _0x4ee1f1,
                      _0x3b54b3 = this,
                      _0x5d5fdf = _0x39969c[_0x4f3e5d(0x111)],
                      _0xdb1100 = _0x39969c[_0x4f3e5d(0x362)],
                      _0x15d021 = _0x39969c[_0x4f3e5d(0x1be)],
                      _0x447e64 = _0x39969c[_0x4f3e5d(0x165)],
                      _0x3b48d9 = _0x39969c[_0x4f3e5d(0x13c)],
                      _0xf84fff = _0x39969c['device'],
                      _0x1eb86a = void 0x0 === _0xf84fff ? {} : _0xf84fff;

                  if (!_0x5d5fdf) return Promise[_0x4f3e5d(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x4f3e5d(0x35f)
                  });
                  if (!_0xdb1100) return Promise[_0x4f3e5d(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x4f3e5d(0x119)
                  });

                  if (this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x362)] === _0xdb1100) {
                    if (Array[_0x4f3e5d(0x423)](_0x5d5fdf)) {
                      if (_0x5d5fdf[_0x4f3e5d(0x3f3)](this['_config'][_0x4f3e5d(0x147)])) return Promise[_0x4f3e5d(0x107)]({
                        'isSuccess': !0x0,
                        'message': _0x4f3e5d(0x17b)
                      });
                    } else {
                      if (_0x5d5fdf === this['_config'][_0x4f3e5d(0x147)]) return Promise['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x4f3e5d(0x17b)
                      });
                    }
                  }

                  _0x3761d6[_0x4f3e5d(0x2b7)][_0x4f3e5d(0x469)]('MessageManager\x20-\x20Update\x20new\x20config:\x20%j', {
                    'socketUrl': _0x5d5fdf,
                    'token': _0xdb1100
                  }), this['closeAndCleanUp']();

                  var _0x3a6ea6;

                  if (_0x3a6ea6 = Array[_0x4f3e5d(0x423)](_0x5d5fdf) ? _0x5d5fdf[parseInt(0x2710 * Math[_0x4f3e5d(0x234)]()) % _0x5d5fdf[_0x4f3e5d(0x1b1)]] : _0x5d5fdf, this['_config'][_0x4f3e5d(0x147)] = _0x3a6ea6, this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x362)] = _0xdb1100, this['_config'][_0x4f3e5d(0x1be)] = _0x15d021, this['_config'][_0x4f3e5d(0x165)] = _0x447e64, this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x2ce)] = _0x39969c, this[_0x4f3e5d(0x4b7)][_0x4f3e5d(0x4c0)](this), this[_0x4f3e5d(0x4b7)]['setToken'](_0xdb1100), _0x3b48d9) {
                    _0x3761d6[_0x4f3e5d(0x2b7)][_0x4f3e5d(0x469)]('MessageManager\x20-\x20Authen\x20token:\x20%s', _0xdb1100), _0x1eb86a && (_0x1eb86a[_0x4f3e5d(0x126)] = this[_0x4f3e5d(0x4b7)][_0x4f3e5d(0x101)]());

                    var _0x5aef1d = this['doLogin'](_0x39969c);

                    return _0x5aef1d[_0x4f3e5d(0x397)](function (_0x52856c) {
                      var _0x5ed210 = _0x4f3e5d;
                      return _0x52856c[_0x5ed210(0x47f)] ? _0x3b54b3[_0x5ed210(0x3f4)]() : (_0x3b54b3[_0x5ed210(0x1a6)][_0x5ed210(0x2fe)](), _0x3b54b3['closeAndCleanUp']()), _0x52856c['isSuccess'];
                    }), _0x5aef1d;
                  }

                  return this[_0x4f3e5d(0x3f4)](), Promise[_0x4f3e5d(0x107)]({
                    'isSuccess': !0x0,
                    'message': _0x4f3e5d(0x31a)
                  });
                }, _0x249e9b['prototype'][_0x4ee1f1(0x274)] = function (_0x11b762) {
                  var _0x5e9bb4 = _0x4ee1f1,
                      _0x2fe793 = this,
                      _0x52da2a = _0x11b762[_0x5e9bb4(0x111)],
                      _0x10769e = _0x11b762['token'],
                      _0x4eb239 = _0x11b762[_0x5e9bb4(0x1be)],
                      _0x532cfb = _0x11b762['games'],
                      _0x2a44e1 = _0x11b762[_0x5e9bb4(0x13c)],
                      _0x3992ae = _0x11b762[_0x5e9bb4(0x35c)],
                      _0x14cbc0 = void 0x0 === _0x3992ae ? {} : _0x3992ae;

                  if (!_0x52da2a) return Promise[_0x5e9bb4(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x5e9bb4(0x35f)
                  });
                  if (!_0x10769e) return Promise[_0x5e9bb4(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x5e9bb4(0x119)
                  });

                  if (this[_0x5e9bb4(0x43a)]['token'] === _0x10769e) {
                    if (Array[_0x5e9bb4(0x423)](_0x52da2a)) {
                      if (_0x52da2a['includes'](this['_config'][_0x5e9bb4(0x147)])) return Promise[_0x5e9bb4(0x107)]({
                        'isSuccess': !0x0,
                        'message': _0x5e9bb4(0x17b)
                      });
                    } else {
                      if (_0x52da2a === this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x147)]) return Promise['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x5e9bb4(0x17b)
                      });
                    }
                  }

                  _0x3761d6[_0x5e9bb4(0x2b7)][_0x5e9bb4(0x469)](_0x5e9bb4(0x3fc), {
                    'token': _0x10769e
                  });

                  var _0x97fb43 = [];
                  this[_0x5e9bb4(0x131)] && (_0x97fb43 = this[_0x5e9bb4(0x131)][_0x5e9bb4(0x13b)](), this[_0x5e9bb4(0x131)]['close'](), this['_socketManager'] = null);

                  var _0x447709;

                  if (_0x447709 = Array[_0x5e9bb4(0x423)](_0x52da2a) ? _0x52da2a[parseInt(0x2710 * Math[_0x5e9bb4(0x234)]()) % _0x52da2a[_0x5e9bb4(0x1b1)]] : _0x52da2a, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x147)] = _0x447709, this['_config'][_0x5e9bb4(0x362)] = _0x10769e, this['_config'][_0x5e9bb4(0x1be)] = _0x4eb239, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x165)] = _0x532cfb, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x2ce)] = _0x11b762, this['playerStateInfo']['setToken'](_0x10769e), _0x2a44e1) {
                    _0x3761d6['default'][_0x5e9bb4(0x469)](_0x5e9bb4(0x18f), _0x10769e), _0x14cbc0 && (_0x14cbc0[_0x5e9bb4(0x126)] = this[_0x5e9bb4(0x4b7)][_0x5e9bb4(0x101)]());

                    var _0x59ff27 = this[_0x5e9bb4(0x161)](_0x11b762);

                    return _0x59ff27[_0x5e9bb4(0x397)](function (_0x5a331d) {
                      var _0x4b18d4 = _0x5e9bb4;
                      return _0x5a331d[_0x4b18d4(0x47f)] ? (_0x2fe793[_0x4b18d4(0x3f4)](), _0x97fb43['forEach'](function (_0x1618b1) {
                        var _0x21b193 = _0x4b18d4;

                        _0x2fe793[_0x21b193(0x131)][_0x21b193(0x2fb)](_0x1618b1);
                      })) : (_0x2fe793[_0x4b18d4(0x1a6)][_0x4b18d4(0x2fe)](), _0x2fe793[_0x4b18d4(0x177)]()), _0x5a331d[_0x4b18d4(0x47f)];
                    }), _0x59ff27;
                  }

                  return this[_0x5e9bb4(0x3f4)](), Promise['resolve']({
                    'isSuccess': !0x0,
                    'message': _0x5e9bb4(0x31a)
                  });
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2fb)] = function (_0x4a27b1) {
                  var _0x1270d6 = _0x4ee1f1;
                  if (!this[_0x1270d6(0x131)]) throw new Error(_0x1270d6(0x44f));

                  this[_0x1270d6(0x131)]['subscribe'](_0x4a27b1);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x130)] = function (_0x42fc91) {
                  var _0x591c5a = _0x4ee1f1;
                  this[_0x591c5a(0x131)] && this[_0x591c5a(0x131)]['unSubscribe'](_0x42fc91);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2be)] = function (_0x38af0c, _0x35f270, _0x29abc0) {
                  var _0x6ef7f3 = _0x4ee1f1;
                  return void 0x0 === _0x38af0c && (_0x38af0c = ''), void 0x0 === _0x35f270 && (_0x35f270 = {}), void 0x0 === _0x29abc0 && (_0x29abc0 = ''), _0x29abc0 = _0x29abc0 || (0, _0x37d4fd[_0x6ef7f3(0x45c)])(), this[_0x6ef7f3(0x434)][_0x6ef7f3(0x4ba)](_0x29abc0, _0x38af0c), this['_socketManager'] ? this[_0x6ef7f3(0x131)]['isSocketAvailable']() ? this[_0x6ef7f3(0x131)][_0x6ef7f3(0x339)]() ? (_0x3761d6[_0x6ef7f3(0x2b7)][_0x6ef7f3(0x469)](_0x6ef7f3(0x439), _0x38af0c, _0x35f270), this[_0x6ef7f3(0x131)][_0x6ef7f3(0x2be)]({
                    'messageId': _0x29abc0,
                    'data': _0x35f270
                  })) : this[_0x6ef7f3(0x15d)][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }) : (this[_0x6ef7f3(0x15d)][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }), this[_0x6ef7f3(0x3f4)]()) : this['_cachedMessage'][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }), _0x29abc0;
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x1ff)] = function (_0x1b3bf1) {
                  var _0x563650 = _0x4ee1f1;

                  if (void 0x0 === _0x1b3bf1 && (_0x1b3bf1 = {}), this[_0x563650(0x131)]) {
                    var _0x13e2b8 = {
                      'messageId': (0, _0x37d4fd[_0x563650(0x45c)])(),
                      'data': _0x1b3bf1
                    };
                    _0x3761d6[_0x563650(0x2b7)][_0x563650(0x469)](_0x563650(0x2f8), _0x13e2b8), this[_0x563650(0x131)]['sendChatMessage'](_0x13e2b8);
                  } else _0x3761d6['default'][_0x563650(0x122)](_0x563650(0x3f2));
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x425)] = function (_0x4a497e) {
                  var _0x373bd5 = _0x4ee1f1;
                  this[_0x373bd5(0x131)] && this['_socketManager']['removeSendingMessage'](_0x4a497e), this[_0x373bd5(0x15d)] && (this[_0x373bd5(0x15d)] = this[_0x373bd5(0x15d)][_0x373bd5(0x241)](function (_0x2f2535) {
                    var _0x4f44e9 = _0x373bd5;
                    return !_0x4a497e[_0x4f44e9(0x3f3)](_0x2f2535['messageId']);
                  }));
                }, _0x249e9b['prototype'][_0x4ee1f1(0x2e2)] = function (_0x3f42ec, _0x53afea, _0x338d1a) {
                  var _0xbef917 = _0x4ee1f1;
                  void 0x0 === _0x3f42ec && (_0x3f42ec = ''), this[_0xbef917(0x1a6)][_0xbef917(0x2e2)](_0x3f42ec, _0x53afea, _0x338d1a);
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['addCommandManager'] = function (_0x203d78, _0x5dd49b) {
                  var _0x16933 = _0x4ee1f1;
                  void 0x0 === _0x203d78 && (_0x203d78 = ''), this[_0x16933(0x1a6)][_0x16933(0x450)](_0x203d78, _0x5dd49b);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2e7)] = function (_0x37d0fc) {
                  var _0x490d66 = _0x4ee1f1;
                  void 0x0 === _0x37d0fc && (_0x37d0fc = ''), this[_0x490d66(0x1a6)][_0x490d66(0x2e7)](_0x37d0fc);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x1cc)] = function (_0x7a63c, _0x47e6fb) {
                  var _0x2306ed = _0x4ee1f1;

                  this[_0x2306ed(0x1a0)]['on'](_0x7a63c, _0x47e6fb);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x19f)] = function (_0x567b7a, _0x41df2f) {
                  var _0x4c7d8e = _0x4ee1f1;

                  this['_emitter'][_0x4c7d8e(0x198)](_0x567b7a, _0x41df2f);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x177)] = function () {
                  var _0x26f248 = _0x4ee1f1;
                  _0x3761d6[_0x26f248(0x2b7)][_0x26f248(0x469)](_0x26f248(0x2de)), this[_0x26f248(0x1a6)][_0x26f248(0xfa)](), this[_0x26f248(0x1a6)][_0x26f248(0x168)](), this[_0x26f248(0x43a)] = {}, this['_duplicateMessageId']['clearAll'](), this[_0x26f248(0x434)]['clear'](), this['_cachedMessage'] = [], this[_0x26f248(0x131)] && (this['_socketManager'][_0x26f248(0x166)](), this[_0x26f248(0x131)] = null), this[_0x26f248(0x4b7)][_0x26f248(0x168)](), this[_0x26f248(0x2c5)]();
                }, _0x249e9b['prototype']['doLogin'] = function (_0x15f1b7) {
                  var _0xeb650c = _0x4ee1f1,
                      _0xc43b4b = this,
                      _0x193aa7 = _0x15f1b7[_0xeb650c(0x200)],
                      _0x525ad6 = _0x15f1b7[_0xeb650c(0x125)],
                      _0x116f62 = _0x15f1b7['token'],
                      _0x3ec1fc = _0x15f1b7[_0xeb650c(0x13c)],
                      _0x93fb0b = _0x15f1b7[_0xeb650c(0x35c)],
                      _0xeb718d = void 0x0 === _0x93fb0b ? {} : _0x93fb0b,
                      _0x1bb02a = new _0x24e47b[_0xeb650c(0x392)]();

                  return _0x3ec1fc['post']({
                    'apiUrl': _0x193aa7,
                    'url': _0x525ad6 + _0xeb650c(0x4b1),
                    'params': {},
                    'data': {
                      'token': _0x116f62,
                      'device': JSON[_0xeb650c(0x296)](_0xeb718d)
                    },
                    'callback': function (_0x1e3f30) {
                      var _0x10387a = _0xeb650c,
                          _0x504202 = _0x1e3f30[_0x10387a(0x1c5)];

                      _0x504202['data'] && _0x504202[_0x10387a(0x1c5)][_0x10387a(0x25e)] ? (_0x3761d6[_0x10387a(0x2b7)][_0x10387a(0x469)](_0x10387a(0x39b), _0x504202), '2' == (_0x504202 = _0x504202[_0x10387a(0x1c5)])['v'] ? _0xc43b4b['playerStateInfo'][_0x10387a(0x438)](function (_0x3b8a9c) {
                        var _0x43afde = _0x10387a;

                        if (_0x3b8a9c) {
                          for (var _0x1eb632 = [], _0x1eb9f8 = 0x0; _0x1eb9f8 < _0x3b8a9c[_0x43afde(0x1b1)]; _0x1eb9f8++) _0x1eb632[_0x43afde(0x41c)](_0x3b8a9c[_0x43afde(0x309)](_0x1eb9f8) ^ _0x1ddd44[_0x43afde(0x309)](_0x1eb9f8 % _0x1ddd44[_0x43afde(0x1b1)]));

                          return String[_0x43afde(0x290)]['apply'](String, _0x1eb632);
                        }

                        return _0x3b8a9c;
                      }(_0x504202[_0x10387a(0x25e)])) : _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x438)](_0x504202['userId']), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x336)](_0x504202['token']), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x426)](_0x504202[_0x10387a(0x14f)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x1cd)](_0x504202['currency']), _0xc43b4b[_0x10387a(0x4b7)]['setWalletTypes'](_0x504202[_0x10387a(0x452)] || [_0x10387a(0x3db)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x4cd)]({
                        'data': {
                          'amount': parseFloat(_0x504202[_0x10387a(0x251)]),
                          'availableAmount': parseFloat(_0x504202['wallet']),
                          'version': parseInt(_0x504202[_0x10387a(0x378)]),
                          'pAmt': parseFloat(_0x504202[_0x10387a(0x10e)]),
                          'pAvaiAmt': parseFloat(_0x504202[_0x10387a(0x10e)]),
                          'pVer': parseInt(_0x504202['walletVersion'])
                        }
                      }), _0x504202[_0x10387a(0x472)] && _0xc43b4b[_0x10387a(0x4b7)]['setWalletInfos'](_0x504202[_0x10387a(0x472)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x322)](_0x504202[_0x10387a(0x156)]), _0x1bb02a['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x10387a(0x306)
                      })) : (_0x3761d6[_0x10387a(0x2b7)][_0x10387a(0x469)](_0x10387a(0x2a0), _0x504202), _0x1bb02a[_0x10387a(0x107)]({
                        'isSuccess': !0x1,
                        'message': 'Login\x20fail.\x20Clean\x20up.'
                      }));
                    },
                    'callbackErr': function () {
                      var _0x4f93c3 = _0xeb650c;
                      _0x3761d6['default'][_0x4f93c3(0x469)]('Authen\x20token\x20error'), _0x1bb02a[_0x4f93c3(0x107)]({
                        'isSuccess': !0x1,
                        'message': _0x4f93c3(0x461)
                      });
                    }
                  }), _0x1bb02a[_0xeb650c(0x418)]();
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x47b)] = function () {
                  var _0x5f3f40 = _0x4ee1f1,
                      _0x3828c6 = this;

                  this[_0x5f3f40(0x2c5)](), this[_0x5f3f40(0x31e)] = setInterval(function () {
                    var _0xf8dfc3 = _0x5f3f40;

                    _0x3828c6[_0xf8dfc3(0x2be)](_0xf8dfc3(0x385), {
                      'event': _0xf8dfc3(0x117),
                      'data': {
                        'tkn': _0x3828c6[_0xf8dfc3(0x4b7)][_0xf8dfc3(0x1a5)](),
                        'cId': (0, _0x37d4fd['uuid'])(),
                        'sId': _0xf8dfc3(0x385)
                      }
                    });
                  }, 0x493e0);
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['_stopIntervalExtendToken'] = function () {
                  var _0x447114 = _0x4ee1f1;
                  clearInterval(this[_0x447114(0x31e)]), this['_intervalExtendToken'] = null;
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x3f4)] = function () {
                  var _0x20da22 = _0x4ee1f1;
                  _0x3761d6[_0x20da22(0x2b7)][_0x20da22(0x469)](_0x20da22(0x345)), this['_socketManager'] && this['_socketManager'][_0x20da22(0x339)]() ? _0x3761d6[_0x20da22(0x2b7)][_0x20da22(0x469)](_0x20da22(0x30c)) : (_0x3761d6[_0x20da22(0x2b7)]['debug']('MessageManager\x20-\x20_initSocket\x20-\x20new\x20socket.'), this[_0x20da22(0x131)] = new _0x4d731f[_0x20da22(0x3dc)]({
                    'url': this[_0x20da22(0x43a)][_0x20da22(0x147)],
                    'token': this['_config']['token'],
                    'env': this[_0x20da22(0x43a)][_0x20da22(0x1be)],
                    'games': this['_config']['games'],
                    'reconnectionAttempts': 0xf423f,
                    'reconnectionDelay': 0x1f4,
                    'nextTickIn': 0x96,
                    'numberRetrySendingMessage': 0xa,
                    'ssid': this[_0x20da22(0x4b7)][_0x20da22(0x101)]()
                  }), this[_0x20da22(0x3bc)](), this['_handleSocketStatus']());
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x3bc)] = function () {
                  var _0x16d6fa = _0x4ee1f1,
                      _0x5f4a5a = this;

                  _0x3761d6[_0x16d6fa(0x2b7)][_0x16d6fa(0x469)](_0x16d6fa(0x328)), this['_socketManager'] ? (this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f['SocketManager'][_0x16d6fa(0x324)], function (_0x4c851e) {
                    var _0x38ca98 = _0x16d6fa;
                    _0x5f4a5a[_0x38ca98(0x382)][_0x38ca98(0x28a)](_0x4c851e['messageId']) || (_0x5f4a5a[_0x38ca98(0x382)][_0x38ca98(0x173)](_0x4c851e[_0x38ca98(0x270)]), _0x5f4a5a[_0x38ca98(0x1a6)][_0x38ca98(0x180)](_0x4c851e['data']));
                  }), this[_0x16d6fa(0x131)]['registerEvent'](_0x4d731f[_0x16d6fa(0x3dc)][_0x16d6fa(0x470)], function (_0x2cd630) {
                    var _0x20a3f6 = _0x16d6fa,
                        _0x490749 = _0x5f4a5a[_0x20a3f6(0x434)][_0x20a3f6(0x283)](_0x2cd630);

                    _0x490749 && (_0x5f4a5a[_0x20a3f6(0x1a6)]['onAck'](_0x490749, _0x2cd630), _0x5f4a5a[_0x20a3f6(0x434)][_0x20a3f6(0xfd)](_0x2cd630));
                  }), this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f[_0x16d6fa(0x3dc)][_0x16d6fa(0x43d)], function (_0x46ac9e) {
                    var _0xfb716a = _0x16d6fa,
                        _0x50bafb = _0x5f4a5a['_messageIdServiceIdMap'][_0xfb716a(0x283)](_0x46ac9e);

                    _0x50bafb && (_0x5f4a5a[_0xfb716a(0x434)][_0xfb716a(0xfd)](_0x46ac9e), _0x5f4a5a[_0xfb716a(0x1a6)]['onCannotSendMessage'](_0x50bafb, _0x46ac9e));
                  }), this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f['SocketManager'][_0x16d6fa(0x431)], function (_0x4358b5) {
                    var _0x22685a = _0x16d6fa,
                        _0x2f3fb5 = _0x4358b5[_0x22685a(0x362)];

                    _0x5f4a5a[_0x22685a(0x4b7)]['setToken'](_0x2f3fb5);
                  })) : _0x3761d6['default']['error']('MessageManager\x20-\x20_handleSocketEvent\x20with\x20null\x20_socketManager');
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['_handleSocketStatus'] = function () {
                  var _0x5fc32f = _0x4ee1f1,
                      _0x319164 = this;

                  _0x3761d6['default'][_0x5fc32f(0x469)](_0x5fc32f(0x3ab)), this[_0x5fc32f(0x131)] ? (this[_0x5fc32f(0x131)]['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x120)], function () {
                    var _0x50250a = _0x5fc32f;
                    _0x319164[_0x50250a(0x1a6)][_0x50250a(0xfa)](), _0x319164['closeAndCleanUp']();
                  }), this['_socketManager']['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x409)], function () {
                    var _0x1fdd80 = _0x5fc32f;
                    _0x319164[_0x1fdd80(0x1a0)][_0x1fdd80(0x24e)](_0x249e9b['CONNECTED_CONNECTION']), _0x319164[_0x1fdd80(0x15d)]['forEach'](function (_0x37e144) {
                      var _0x5ed0f8 = _0x1fdd80,
                          _0xdc76b0 = _0x37e144[_0x5ed0f8(0x4c9)],
                          _0x576fbf = void 0x0 === _0xdc76b0 ? '' : _0xdc76b0,
                          _0x268fa1 = _0x37e144[_0x5ed0f8(0x142)],
                          _0x125ec2 = void 0x0 === _0x268fa1 ? {} : _0x268fa1,
                          _0x277aa5 = _0x37e144[_0x5ed0f8(0x270)],
                          _0x2b23bf = void 0x0 === _0x277aa5 ? '' : _0x277aa5;

                      _0x319164[_0x5ed0f8(0x2be)](_0x576fbf, _0x125ec2, _0x2b23bf);
                    }), _0x319164[_0x1fdd80(0x15d)] = [], _0x319164['_routingEventHandler'][_0x1fdd80(0x158)]();
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x182)], function () {
                    var _0x1a3f89 = _0x5fc32f;

                    _0x319164[_0x1a3f89(0x1a6)][_0x1a3f89(0x49f)](_0x4d731f[_0x1a3f89(0x3dc)][_0x1a3f89(0x182)]);
                  }), this[_0x5fc32f(0x131)]['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x273)], function () {
                    var _0xa0cd68 = _0x5fc32f;
                    _0x319164[_0xa0cd68(0x1a0)]['emit'](_0x249e9b[_0xa0cd68(0x273)]), _0x319164['_routingEventHandler'][_0xa0cd68(0x3e2)](_0x4d731f[_0xa0cd68(0x3dc)]['DISCONNECTED_CONNECTION']);
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f['SocketManager'][_0x5fc32f(0x310)], function () {
                    var _0x3b5979 = _0x5fc32f;

                    _0x319164[_0x3b5979(0x1a6)][_0x3b5979(0x47e)](_0x4d731f[_0x3b5979(0x3dc)]['POPUP_DISCONNECTED_EVENT']);
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x300)], function (_0x5b15c0) {
                    var _0x26ea1c = _0x5fc32f;

                    _0x319164[_0x26ea1c(0x1a6)][_0x26ea1c(0x361)](_0x5b15c0);
                  })) : _0x3761d6[_0x5fc32f(0x2b7)][_0x5fc32f(0x122)](_0x5fc32f(0x410));
                }, _0x249e9b[_0x4ee1f1(0x12e)] = _0x4ee1f1(0x3af), _0x249e9b[_0x4ee1f1(0x273)] = _0x4ee1f1(0x2db), _0x249e9b;
              }();

              _0x11dd7d[_0x5ed68b(0x2b1)] = _0xb1089c;

              var _0x1ddd44 = _0x5ed68b(0x441);
            },
            0x233a: function (_0x38d62f, _0x1a13ee, _0x296da2) {
              var _0x469e4a = a0_0x107f;

              var _0x2c8fbb = this && this['__importDefault'] || function (_0x5380bf) {
                var _0x1fc0ed = a0_0x107f;
                return _0x5380bf && _0x5380bf[_0x1fc0ed(0x223)] ? _0x5380bf : {
                  'default': _0x5380bf
                };
              };

              Object['defineProperty'](_0x1a13ee, '__esModule', {
                'value': !0x0
              }), _0x1a13ee[_0x469e4a(0x174)] = void 0x0;

              var _0x531498 = _0x2c8fbb(_0x296da2(0x28a)),
                  _0x2ecf60 = function () {
                var _0x25a499 = _0x469e4a;

                function _0x3effc7() {
                  var _0x2ebf0f = a0_0x107f;
                  this[_0x2ebf0f(0x1f5)] = new _0x531498[_0x2ebf0f(0x2b7)](), this[_0x2ebf0f(0x2d5)] = new _0x531498['default']();
                }

                return _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2e2)] = function (_0x1b7c5, _0x4c5629, _0x103e3f) {
                  var _0x3021a0 = _0x25a499;
                  void 0x0 === _0x1b7c5 && (_0x1b7c5 = ''), Array[_0x3021a0(0x423)](_0x4c5629) ? this[_0x3021a0(0x1f5)][_0x3021a0(0x4ba)](_0x1b7c5, _0x4c5629) : this[_0x3021a0(0x1f5)][_0x3021a0(0x4ba)](_0x1b7c5, [_0x4c5629]), Array[_0x3021a0(0x423)](_0x103e3f) ? this[_0x3021a0(0x2d5)][_0x3021a0(0x4ba)](_0x1b7c5, _0x103e3f) : this[_0x3021a0(0x2d5)][_0x3021a0(0x4ba)](_0x1b7c5, [_0x103e3f]);
                }, _0x3effc7[_0x25a499(0x1b3)]['addCommandManager'] = function (_0x5f9ad7, _0x168902) {
                  var _0x5b0bc9 = _0x25a499;
                  void 0x0 === _0x5f9ad7 && (_0x5f9ad7 = '');

                  var _0x41648c = this[_0x5b0bc9(0x1f5)][_0x5b0bc9(0x283)](_0x5f9ad7);

                  _0x41648c && (_0x41648c[_0x5b0bc9(0x3f3)](_0x168902) || _0x41648c['push'](_0x168902));
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2e7)] = function (_0x52a74e) {
                  var _0x3ce77c = _0x25a499;
                  void 0x0 === _0x52a74e && (_0x52a74e = ''), this[_0x3ce77c(0x1f5)][_0x3ce77c(0xfd)](_0x52a74e), this[_0x3ce77c(0x2d5)]['delete'](_0x52a74e);
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x3c2)] = function (_0xff5433, _0x5e96df) {
                  var _0x42b894 = _0x25a499;
                  void 0x0 === _0xff5433 && (_0xff5433 = ''), void 0x0 === _0x5e96df && (_0x5e96df = '');

                  var _0x51c1c8 = this[_0x42b894(0x1f5)]['get'](_0xff5433);

                  _0x51c1c8 && _0x51c1c8[_0x42b894(0x293)](function (_0x5b516a) {
                    var _0x597c4 = _0x42b894;

                    _0x5b516a[_0x597c4(0x3c2)](_0x5e96df);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onCannotSendMessage'] = function (_0x5ddd69, _0x1fc6c9) {
                  var _0x305ee9 = _0x25a499;
                  void 0x0 === _0x5ddd69 && (_0x5ddd69 = ''), void 0x0 === _0x1fc6c9 && (_0x1fc6c9 = '');

                  var _0x583911 = this[_0x305ee9(0x1f5)][_0x305ee9(0x283)](_0x5ddd69);

                  _0x583911 && _0x583911[_0x305ee9(0x293)](function (_0x5def01) {
                    var _0x476dec = _0x305ee9;

                    _0x5def01[_0x476dec(0x41e)](_0x1fc6c9);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0xfa)] = function () {
                  var _0x3a4be3 = _0x25a499,
                      _0xccc8ed = this;

                  this[_0x3a4be3(0x2d5)][_0x3a4be3(0x44d)]()[_0x3a4be3(0x293)](function (_0x38bf79) {
                    var _0xcd3ed = _0x3a4be3;
                    void 0x0 === _0x38bf79 && (_0x38bf79 = '');

                    var _0x346ac6 = _0xccc8ed['_eventHandlerMap'][_0xcd3ed(0x283)](_0x38bf79);

                    _0x346ac6 && _0x346ac6[_0xcd3ed(0x293)](function (_0x399475) {
                      var _0x2b6469 = _0xcd3ed;

                      _0x399475[_0x2b6469(0xfa)]();
                    });
                  });
                }, _0x3effc7['prototype'][_0x25a499(0x49f)] = function (_0x36a093) {
                  var _0xc23627 = _0x25a499,
                      _0x409fda = this;

                  this[_0xc23627(0x2d5)][_0xc23627(0x44d)]()[_0xc23627(0x293)](function (_0x7dee52) {
                    var _0x1c3894 = _0xc23627;
                    void 0x0 === _0x7dee52 && (_0x7dee52 = '');

                    var _0x358896 = _0x409fda['_eventHandlerMap'][_0x1c3894(0x283)](_0x7dee52);

                    _0x358896 && _0x358896[_0x1c3894(0x293)](function (_0xa98f83) {
                      var _0x194cdc = _0x1c3894;
                      _0xa98f83 && _0xa98f83[_0x194cdc(0x49f)] && _0xa98f83[_0x194cdc(0x49f)](_0x36a093);
                    });
                  });
                }, _0x3effc7['prototype']['onNetworkWarning'] = function (_0x47bef2) {
                  var _0x1fb905 = _0x25a499,
                      _0x527a99 = this;

                  this['_eventHandlerMap'][_0x1fb905(0x44d)]()[_0x1fb905(0x293)](function (_0x52fdf4) {
                    var _0x8a4b1b = _0x1fb905;
                    void 0x0 === _0x52fdf4 && (_0x52fdf4 = '');

                    var _0x465a3c = _0x527a99[_0x8a4b1b(0x2d5)][_0x8a4b1b(0x283)](_0x52fdf4);

                    _0x465a3c && _0x465a3c['forEach'](function (_0x29b31d) {
                      var _0x3d4d78 = _0x8a4b1b;
                      _0x29b31d && _0x29b31d['onNetworkWarning'] && _0x29b31d[_0x3d4d78(0x3e2)](_0x47bef2);
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x47e)] = function (_0x4fe993) {
                  var _0x157a02 = _0x25a499,
                      _0x4bd45d = this;

                  this[_0x157a02(0x2d5)][_0x157a02(0x44d)]()[_0x157a02(0x293)](function (_0xdb4c20) {
                    var _0x546af8 = _0x157a02;
                    void 0x0 === _0xdb4c20 && (_0xdb4c20 = '');

                    var _0x2ee075 = _0x4bd45d[_0x546af8(0x2d5)]['get'](_0xdb4c20);

                    _0x2ee075 && _0x2ee075[_0x546af8(0x293)](function (_0x41fb93) {
                      var _0x421821 = _0x546af8;
                      _0x41fb93 && _0x41fb93[_0x421821(0x47e)] && _0x41fb93[_0x421821(0x47e)]();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2fe)] = function () {
                  var _0x4a2fab = _0x25a499,
                      _0x4b639f = this;

                  this[_0x4a2fab(0x2d5)][_0x4a2fab(0x44d)]()[_0x4a2fab(0x293)](function (_0xc581d7) {
                    var _0x3b309a = _0x4a2fab;
                    void 0x0 === _0xc581d7 && (_0xc581d7 = '');

                    var _0x3059eb = _0x4b639f[_0x3b309a(0x2d5)]['get'](_0xc581d7);

                    _0x3059eb && _0x3059eb[_0x3b309a(0x293)](function (_0x42302b) {
                      var _0x4bcaae = _0x3b309a;
                      _0x42302b && _0x42302b[_0x4bcaae(0x2fe)] && _0x42302b[_0x4bcaae(0x2fe)]();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onConnected'] = function () {
                  var _0x286dc3 = _0x25a499,
                      _0x549d3e = this;

                  this[_0x286dc3(0x2d5)][_0x286dc3(0x44d)]()[_0x286dc3(0x293)](function (_0x2dea2b) {
                    var _0x14d730 = _0x286dc3;
                    void 0x0 === _0x2dea2b && (_0x2dea2b = '');

                    var _0x5114fe = _0x549d3e[_0x14d730(0x2d5)][_0x14d730(0x283)](_0x2dea2b);

                    _0x5114fe && _0x5114fe[_0x14d730(0x293)](function (_0x293c6e) {
                      var _0x39c491 = _0x14d730;
                      _0x293c6e && _0x293c6e[_0x39c491(0x158)] && _0x293c6e['onConnected']();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onPong'] = function (_0x48a6ae) {
                  var _0x13d5a3 = _0x25a499,
                      _0x3c52d3 = this;

                  this[_0x13d5a3(0x2d5)]['keys']()[_0x13d5a3(0x293)](function (_0x43a021) {
                    var _0xd103ab = _0x13d5a3;
                    void 0x0 === _0x43a021 && (_0x43a021 = '');

                    var _0x2fe873 = _0x3c52d3[_0xd103ab(0x2d5)][_0xd103ab(0x283)](_0x43a021);

                    _0x2fe873 && _0x2fe873[_0xd103ab(0x293)](function (_0x10a589) {
                      var _0x5abec0 = _0xd103ab;
                      _0x10a589 && _0x10a589[_0x5abec0(0x361)] && _0x10a589[_0x5abec0(0x361)](_0x48a6ae);
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x180)] = function (_0x35232b) {
                  var _0x1238a7 = _0x25a499,
                      _0x1d5b84 = this[_0x1238a7(0x2d5)][_0x1238a7(0x283)](_0x35232b[_0x1238a7(0x4c9)]);

                  _0x1d5b84 && _0x1d5b84[_0x1238a7(0x293)](function (_0x1506b2) {
                    _0x1506b2['onEvent'](_0x35232b);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x168)] = function () {
                  var _0x598dca = _0x25a499;
                  this[_0x598dca(0x1f5)]['clear'](), this[_0x598dca(0x2d5)][_0x598dca(0x44a)]();
                }, _0x3effc7;
              }();

              _0x1a13ee[_0x469e4a(0x174)] = _0x2ecf60;
            },
            0xa79: function (_0x17641d, _0x4af313) {
              var _0x19cad9 = a0_0x107f;
              Object['defineProperty'](_0x4af313, '__esModule', {
                'value': !0x0
              }), _0x4af313[_0x19cad9(0x1c9)] = void 0x0;

              var _0x4e1c4c = function () {
                var _0x7876cb = _0x19cad9;

                function _0x427411(_0x335c9a) {
                  var _0x84272c = a0_0x107f;
                  void 0x0 === _0x335c9a && (_0x335c9a = 0x3), this[_0x84272c(0x30e)] = {}, this[_0x84272c(0x3ad)] = 0x0, this['maxRetry'] = _0x335c9a;
                }

                return _0x427411['prototype']['hasPacket'] = function () {
                  var _0x4699b2 = a0_0x107f;
                  return Object[_0x4699b2(0x44d)](this['_ackPacket'])[_0x4699b2(0x1b1)] > 0x0;
                }, _0x427411[_0x7876cb(0x1b3)]['addNew'] = function (_0x28501) {
                  var _0x19dc9a = _0x7876cb,
                      _0x5c9aef = this[_0x19dc9a(0x3ad)]++;

                  return this[_0x19dc9a(0x30e)][_0x5c9aef] = {
                    'counter': 0x0,
                    'message': _0x28501
                  }, _0x5c9aef;
                }, _0x427411[_0x7876cb(0x1b3)][_0x7876cb(0x425)] = function (_0x10013d) {
                  var _0x68db68 = _0x7876cb,
                      _0x2813de = this;

                  Object[_0x68db68(0x44d)](this[_0x68db68(0x30e)])[_0x68db68(0x293)](function (_0x39cf4c) {
                    var _0x566227 = _0x68db68,
                        _0xe82fd3 = _0x2813de[_0x566227(0x30e)][_0x39cf4c][_0x566227(0x3dd)];

                    _0x10013d(_0xe82fd3) && delete _0x2813de[_0x566227(0x30e)][_0x39cf4c];
                  });
                }, _0x427411['prototype'][_0x7876cb(0x2bc)] = function (_0x25d9a5, _0x9fc85c) {
                  var _0x14ec50 = _0x7876cb,
                      _0x1f7dc6,
                      _0x3485f1 = this;

                  Object[_0x14ec50(0x44d)](this[_0x14ec50(0x30e)])[_0x14ec50(0x293)](function (_0x100031) {
                    var _0x120358 = _0x14ec50;
                    0x0 === (_0x1f7dc6 = _0x3485f1[_0x120358(0x30e)][_0x100031])[_0x120358(0x1e0)] ? _0x1f7dc6[_0x120358(0x1e0)]++ : _0x1f7dc6[_0x120358(0x1e0)] < _0x3485f1[_0x120358(0x478)] ? (_0x25d9a5(_0x100031, _0x1f7dc6[_0x120358(0x3dd)], _0x1f7dc6[_0x120358(0x1e0)]), _0x1f7dc6[_0x120358(0x1e0)]++) : (delete _0x3485f1[_0x120358(0x30e)][_0x100031], _0x9fc85c(_0x1f7dc6[_0x120358(0x3dd)]));
                  });
                }, _0x427411[_0x7876cb(0x1b3)]['ackPacket'] = function (_0x1aa007) {
                  var _0x199c52 = this['_ackPacket'][_0x1aa007];
                  return delete this['_ackPacket'][_0x1aa007], _0x199c52 ? _0x199c52['message'] : null;
                }, _0x427411[_0x7876cb(0x1b3)][_0x7876cb(0x280)] = function (_0x52c2f5) {
                  var _0xf417cf = _0x7876cb,
                      _0x1fa912 = this;

                  Object['keys'](this['_ackPacket'])[_0xf417cf(0x293)](function (_0x3620d6) {
                    var _0x391e89 = _0xf417cf;
                    _0x1fa912[_0x391e89(0x30e)][_0x3620d6][_0x391e89(0x1e0)] = _0x52c2f5;
                  });
                }, _0x427411['prototype'][_0x7876cb(0x2df)] = function (_0x45e2b5, _0x2d89d3) {
                  var _0x1231d8 = _0x7876cb;
                  this['_ackPacket'][_0x45e2b5][_0x1231d8(0x1e0)] = _0x2d89d3;
                }, _0x427411['prototype']['clearAll'] = function () {
                  var _0x44bf5c = _0x7876cb;
                  this[_0x44bf5c(0x30e)] = {};
                }, _0x427411;
              }();

              _0x4af313[_0x19cad9(0x1c9)] = _0x4e1c4c;
            },
            0x1d8f: function (_0x4d7f0a, _0x37ca5f, _0x3d33d5) {
              var _0x4bf96f = a0_0x107f;

              var _0x2af7b8 = this && this[_0x4bf96f(0x24c)] || function (_0x3097c1, _0x505c23, _0x465f2c) {
                var _0x1a5901 = _0x4bf96f;

                if (_0x465f2c || 0x2 === arguments[_0x1a5901(0x1b1)]) {
                  for (var _0x39b771, _0x5d3dfc = 0x0, _0x45dec1 = _0x505c23[_0x1a5901(0x1b1)]; _0x5d3dfc < _0x45dec1; _0x5d3dfc++) !_0x39b771 && _0x5d3dfc in _0x505c23 || (_0x39b771 || (_0x39b771 = Array[_0x1a5901(0x1b3)][_0x1a5901(0x389)]['call'](_0x505c23, 0x0, _0x5d3dfc)), _0x39b771[_0x5d3dfc] = _0x505c23[_0x5d3dfc]);
                }

                return _0x3097c1['concat'](_0x39b771 || Array['prototype'][_0x1a5901(0x389)]['call'](_0x505c23));
              },
                  _0x496045 = this && this['__importDefault'] || function (_0x11540b) {
                var _0x58734c = _0x4bf96f;
                return _0x11540b && _0x11540b[_0x58734c(0x223)] ? _0x11540b : {
                  'default': _0x11540b
                };
              };

              Object[_0x4bf96f(0xf2)](_0x37ca5f, _0x4bf96f(0x223), {
                'value': !0x0
              }), _0x37ca5f[_0x4bf96f(0x3dc)] = void 0x0;

              var _0x26303f = _0x3d33d5(0xa79),
                  _0x5ba825 = _0x496045(_0x3d33d5(0x7e9)),
                  _0x412b2c = _0x496045(_0x3d33d5(0x1c13)),
                  _0x3dc4e4 = _0x3d33d5(0x1a99),
                  _0x1957f4 = _0x496045(_0x3d33d5(0x2501)),
                  _0x524566 = _0x3d33d5(0x11f2),
                  _0xf8a57f = 'v5',
                  _0x26b9ef = 'v4',
                  _0x3ea7a3 = 'v5',
                  _0x46a01f = function () {
                var _0x1a7887 = _0x4bf96f;

                function _0x31b704(_0x657bd) {
                  var _0x43247b = a0_0x107f;
                  this[_0x43247b(0x282)] = [], this['_pendingSubscribeChannelList'] = [], this[_0x43247b(0x1e4)] = 0x0, this[_0x43247b(0x3ee)] = _0xf8a57f, this[_0x43247b(0x211)] = {
                    'listLastLatency': [],
                    'maxLastLatency': 0x5,
                    'currentLatencyIdx': -0x1,
                    'averageLatency': 0x96
                  }, this[_0x43247b(0x14d)] = 0x0, this[_0x43247b(0x276)] = null, this['_sId'] = '', this[_0x43247b(0x48a)] = null, this['_opt'] = this['defaultOption'](_0x657bd), this[_0x43247b(0x1a0)] = new _0x412b2c[_0x43247b(0x2b7)](), this[_0x43247b(0x224)] = new _0x26303f[_0x43247b(0x1c9)](this[_0x43247b(0x1a7)][_0x43247b(0x34c)]), this[_0x43247b(0x249)] = _0x31b704[_0x43247b(0x221)], this['_initNewConnection']();
                }

                return _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x35b)] = function () {
                  var _0x4b0a0c = _0x1a7887;
                  return 'token='['concat'](this[_0x4b0a0c(0x1a7)][_0x4b0a0c(0x362)], '&sv=')[_0x4b0a0c(0x23c)](_0xf8a57f, _0x4b0a0c(0x19c))[_0x4b0a0c(0x23c)](this[_0x4b0a0c(0x1a7)]['env'], _0x4b0a0c(0x40c))[_0x4b0a0c(0x23c)](this[_0x4b0a0c(0x1a7)][_0x4b0a0c(0x165)], _0x4b0a0c(0x3ac))['concat'](this[_0x4b0a0c(0x1a7)]['ssid']);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x37e)] = function () {
                  var _0x29d0ab = _0x1a7887,
                      _0x2c66fa = this;

                  Object['keys'](_0x3dc4e4['managers'])[_0x29d0ab(0x293)](function (_0x4e3e95) {
                    var _0x5e18a4 = _0x29d0ab;
                    delete _0x3dc4e4[_0x5e18a4(0x1af)][_0x4e3e95];
                  }), this[_0x29d0ab(0x249)] !== _0x31b704['STATUS_KILLED'] ? (this[_0x29d0ab(0x276)] = _0x3dc4e4(''[_0x29d0ab(0x23c)](this[_0x29d0ab(0x1a7)][_0x29d0ab(0x147)], '/?')[_0x29d0ab(0x23c)](this['buildSocketUrlQueryParam']()), {
                    'transports': this[_0x29d0ab(0x1a7)][_0x29d0ab(0x24b)],
                    'reconnection': !0x0,
                    'forceNew': this['_opt']['forceNew'],
                    'reconnectionAttempts': this['_opt']['reconnectionAttempts'] || 0xa,
                    'reconnectionDelay': this['_opt'][_0x29d0ab(0x285)] || 0x1f4,
                    'randomizationFactor': 0x0,
                    'rememberUpgrade': !0x0,
                    'timestampRequests': !0x0,
                    'parser': _0x1957f4['default']
                  }), this['_reconnect_attempt'] = 0x0, this[_0x29d0ab(0x4ca)](this[_0x29d0ab(0x276)]), this['_handleConnectionStatus'](this['_socket']), this[_0x29d0ab(0x282)][_0x29d0ab(0x293)](function (_0x36a0a0) {
                    var _0x15ea9a = _0x29d0ab;

                    _0x2c66fa[_0x15ea9a(0x1aa)](_0x36a0a0);
                  }), _0x5ba825[_0x29d0ab(0x2b7)]['debug'](_0x29d0ab(0x427))) : _0x5ba825['default'][_0x29d0ab(0x469)](_0x29d0ab(0x2e8));
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x348)] = function (_0x49f1fc) {
                  var _0x21edb3 = _0x1a7887;
                  return {
                    'url': _0x49f1fc[_0x21edb3(0x147)] || '',
                    'token': _0x49f1fc[_0x21edb3(0x362)] || '',
                    'numberRetrySendingMessage': _0x49f1fc[_0x21edb3(0x34c)] || 0x2,
                    'forceNew': _0x49f1fc[_0x21edb3(0x2f3)] || !0x1,
                    'transports': _0x49f1fc[_0x21edb3(0x24b)] || ['websocket'],
                    'reconnectionDelay': _0x49f1fc[_0x21edb3(0x285)] || 0x3e8,
                    'reconnectionDelayMax': _0x49f1fc[_0x21edb3(0x2c8)] || 0xbb8,
                    'reconnectionAttempts': _0x49f1fc[_0x21edb3(0x18c)] || 0x3,
                    'nextTickIn': _0x49f1fc['nextTickIn'] || 0xc8,
                    'pingTimeoutWarning': 0x258,
                    'env': _0x49f1fc['env'] || 'portal',
                    'games': _0x49f1fc[_0x21edb3(0x165)] || 'all',
                    'ssid': _0x49f1fc[_0x21edb3(0x126)] || _0x49f1fc[_0x21edb3(0x362)] || ''
                  };
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x4ca)] = function (_0x119b87) {
                  var _0x18dce7 = _0x1a7887,
                      _0x185934 = this;

                  _0x119b87['on'](_0x31b704[_0x18dce7(0x3b4)], function (_0x32fb47, _0x377e0e) {
                    var _0x1b274e = _0x18dce7;
                    _0x377e0e && _0x377e0e(), _0x32fb47 && (_0x32fb47['v'] === _0x26b9ef && (_0x32fb47 = {
                      'messageId': _0x32fb47['id'],
                      'data': {
                        'event': _0x32fb47['da']['ev'],
                        'svt': _0x32fb47['da']['svt'],
                        'serviceId': _0x32fb47['da'][_0x1b274e(0x36b)],
                        'eventId': _0x32fb47['da'][_0x1b274e(0x3df)],
                        'data': _0x32fb47['da']['da'],
                        'channelType': _0x32fb47['da']['ch']
                      },
                      'version': _0x32fb47['v']
                    }), _0x185934[_0x1b274e(0x1a0)][_0x1b274e(0x24e)](_0x31b704['NEW_MESSAGE_EVENT'], _0x32fb47));
                  }), _0x119b87['on'](_0x31b704[_0x18dce7(0x1df)], function (_0xb86496, _0x234de3) {
                    var _0x30f045 = _0x18dce7;

                    if (_0x234de3 && _0x234de3(), _0xb86496) {
                      for (var _0x34c0cb = new Uint8Array(_0xb86496), _0x5ef4c7 = 0x0; _0x5ef4c7 < _0x34c0cb['length']; _0x5ef4c7++) _0x34c0cb[_0x5ef4c7]--;

                      _0xb86496 = _0x524566[_0x30f045(0x220)]['decode'](_0x34c0cb), _0x5ba825['default']['debug']('SocketManagerNewMessage:\x20%s', _0xb86496), _0xb86496 = {
                        'messageId': (_0xb86496 = JSON[_0x30f045(0x288)](_0xb86496))['id'],
                        'data': {
                          'event': _0xb86496['da']['ev'],
                          'svt': _0xb86496['da'][_0x30f045(0x404)],
                          'serviceId': _0xb86496['da'][_0x30f045(0x36b)],
                          'eventId': _0xb86496['da'][_0x30f045(0x3df)],
                          'data': _0xb86496['da']['da'],
                          'channelType': _0xb86496['da']['ch']
                        },
                        'version': _0xb86496['v']
                      }, _0x185934[_0x30f045(0x1a0)][_0x30f045(0x24e)](_0x31b704[_0x30f045(0x324)], _0xb86496);
                    }
                  }), _0x119b87['on'](_0x31b704[_0x18dce7(0x2ca)], function (_0xb3ca98, _0x474a13) {
                    var _0x18597b = _0x18dce7;

                    if (_0x474a13 && _0x474a13(), _0xb3ca98 && _0x185934[_0x18597b(0x48a)]) {
                      for (var _0x100950 = new Uint8Array(_0xb3ca98), _0x4b5a0f = 0x0; _0x4b5a0f < _0x100950[_0x18597b(0x1b1)]; _0x4b5a0f++) _0x100950[_0x4b5a0f] = _0x100950[_0x4b5a0f] ^ _0x185934[_0x18597b(0x48a)][_0x4b5a0f % _0x185934[_0x18597b(0x48a)]['length']];

                      _0xb3ca98 = _0x524566[_0x18597b(0x220)]['decode'](_0x100950), _0x5ba825[_0x18597b(0x2b7)]['debug'](_0x18597b(0x2ee), _0xb3ca98), _0xb3ca98 = {
                        'messageId': (_0xb3ca98 = JSON[_0x18597b(0x288)](_0xb3ca98))['id'],
                        'data': {
                          'event': _0xb3ca98['da']['ev'],
                          'svt': _0xb3ca98['da']['svt'],
                          'serviceId': _0xb3ca98['da'][_0x18597b(0x36b)],
                          'eventId': _0xb3ca98['da']['eid'],
                          'data': _0xb3ca98['da']['da'],
                          'channelType': _0xb3ca98['da']['ch']
                        },
                        'version': _0xb3ca98['v']
                      }, _0x185934[_0x18597b(0x1a0)][_0x18597b(0x24e)](_0x31b704[_0x18597b(0x324)], _0xb3ca98);
                    } else _0x5ba825['default'][_0x18597b(0x31c)](_0x18597b(0x47a), _0xb3ca98, _0x185934[_0x18597b(0x48a)]);
                  }), _0x119b87['on'](_0x18dce7(0x187), function (_0xb20ee0) {
                    var _0x12a7de = _0x18dce7;
                    _0xb20ee0 && (_0x5ba825[_0x12a7de(0x2b7)][_0x12a7de(0x469)](_0x12a7de(0x3c3), _0xb20ee0), _0x185934[_0x12a7de(0x1a0)][_0x12a7de(0x24e)](_0x31b704[_0x12a7de(0x324)], {
                      'messageId': _0xb20ee0['messageId'],
                      'data': {
                        'event': 'chat-event',
                        'eventId': _0xb20ee0['messageId'],
                        'serviceId': _0xb20ee0[_0x12a7de(0x1c5)][_0x12a7de(0x4c9)],
                        'channelType': 'presence',
                        'data': _0xb20ee0['data']
                      }
                    }));
                  }), _0x119b87['on'](_0x18dce7(0x110), function (_0x5c5fd1) {
                    var _0x163799 = _0x18dce7,
                        _0x12c39c = _0x5c5fd1['token'];
                    _0x185934[_0x163799(0x1a0)][_0x163799(0x24e)](_0x31b704[_0x163799(0x431)], {
                      'token': _0x12c39c
                    }), _0x185934['updateToken'](_0x12c39c);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x4b9)] = function (_0xc845fc) {
                  var _0x5b92aa = _0x1a7887,
                      _0x377701,
                      _0x11616c,
                      _0x4ee011,
                      _0xb1579e = this,
                      _0x12f88c = function () {
                    var _0x455233 = a0_0x107f,
                        _0x142732 = !0x1,
                        _0x59cf4a = [];

                    if (_0xb1579e['_packetManager'][_0x455233(0x2bc)](function (_0x1ca9ee, _0x238ac2, _0x475e45) {
                      var _0x254f91 = _0x455233;

                      _0xb1579e[_0x254f91(0x224)]['updateCounter'](_0x1ca9ee, _0x475e45 + 0x1);
                    }, function (_0x541644) {
                      var _0x4d49f4 = _0x455233;
                      _0x59cf4a['push'](_0x541644[_0x4d49f4(0x270)]), _0x142732 = !0x0;
                    }), _0x142732 && _0x59cf4a[_0x455233(0x293)](function (_0x5e80b3) {
                      var _0x5170a9 = _0x455233;
                      _0x5ba825[_0x5170a9(0x2b7)][_0x5170a9(0x469)]('SocketManager\x20-\x20CAN_NOT_SEND_MESSAGE_EVENT\x20:\x20%s.', _0x5e80b3), _0xb1579e['_emitter'][_0x5170a9(0x24e)](_0x31b704[_0x5170a9(0x43d)], _0x5e80b3);
                    }), _0xb1579e[_0x455233(0x224)][_0x455233(0x1d5)]()) {
                      var _0xc1c9f2 = _0xb1579e[_0x455233(0x211)][_0x455233(0x303)];

                      _0x377701 = setTimeout(function () {
                        _0x12f88c();
                      }, _0xc1c9f2);
                    } else _0x377701 = setTimeout(function () {
                      _0x12f88c();
                    }, 0x96);
                  },
                      _0x199e9e = function () {
                    var _0x5d414b = a0_0x107f;
                    _0x5ba825['default'][_0x5d414b(0x469)]('SocketManager\x20-\x20Clear\x20interval\x20sending\x20message!'), clearTimeout(_0x377701), clearTimeout(_0x11616c), clearTimeout(_0x4ee011), _0xb1579e[_0x5d414b(0x224)][_0x5d414b(0x4a7)]();
                  };

                  _0xc845fc['on'](_0x5b92aa(0x33f), function () {
                    var _0xa27bb7 = _0x5b92aa;
                    _0xb1579e[_0xa27bb7(0x249)] = _0x31b704[_0xa27bb7(0x4d3)], _0xb1579e[_0xa27bb7(0x1e4)] = 0x0, _0xb1579e[_0xa27bb7(0x488)]['length'] > 0x0 && _0xb1579e[_0xa27bb7(0x488)][_0xa27bb7(0x293)](function (_0x59f924) {
                      var _0x3c1aaf = _0xa27bb7;

                      _0xb1579e[_0x3c1aaf(0x2fb)](_0x59f924);
                    }), _0xb1579e[_0xa27bb7(0x488)] = [], clearTimeout(_0x11616c), clearTimeout(_0x4ee011), _0x5ba825[_0xa27bb7(0x2b7)][_0xa27bb7(0x469)]('SockerManager\x20-\x20health-check\x20CONNECTED!');
                  }), _0xc845fc['on'](_0x5b92aa(0x106), function () {
                    var _0x194708 = _0x5b92aa;
                    _0x5ba825[_0x194708(0x2b7)][_0x194708(0x469)](_0x194708(0x4b8)), _0x5ba825[_0x194708(0x2b7)][_0x194708(0x469)](_0x194708(0x483)), clearTimeout(_0x377701), _0xb1579e['_keyAB'] = null, _0x11616c = setTimeout(function () {
                      var _0x2848a3 = _0x194708;

                      _0xb1579e[_0x2848a3(0x1a0)][_0x2848a3(0x24e)](_0x31b704[_0x2848a3(0x273)]);
                    }, 0x2710), _0x4ee011 = setTimeout(function () {
                      var _0x2c6357 = _0x194708;

                      _0xb1579e['_emitter']['emit'](_0x31b704[_0x2c6357(0x310)]);
                    }, 0x3a98);
                  }), _0xc845fc['on'](_0x5b92aa(0x369), function (_0x353cab) {
                    _0xb1579e['_reconnect_attempt'] = _0x353cab;
                  }), _0xc845fc['on'](_0x5b92aa(0x151), function (_0x1b035e) {
                    var _0x1cf75a = _0x5b92aa;
                    _0x5ba825[_0x1cf75a(0x2b7)]['debug'](_0x1cf75a(0x46a)[_0x1cf75a(0x23c)](_0xb1579e[_0x1cf75a(0x14d)], _0x1cf75a(0x468))['concat'](_0xb1579e[_0x1cf75a(0x1a7)]['reconnectionAttempts'])), _0xb1579e[_0x1cf75a(0x14d)] >= _0xb1579e[_0x1cf75a(0x1a7)][_0x1cf75a(0x18c)] ? (_0xb1579e[_0x1cf75a(0x417)](), _0xb1579e[_0x1cf75a(0x249)] = _0x31b704[_0x1cf75a(0x4a6)], _0x199e9e(), _0x5ba825['default'][_0x1cf75a(0x469)](_0x1cf75a(0x242)), _0xb1579e[_0x1cf75a(0x1a0)][_0x1cf75a(0x24e)](_0x31b704[_0x1cf75a(0x120)])) : _0xb1579e[_0x1cf75a(0x1a0)][_0x1cf75a(0x24e)](_0x31b704['POOR_CONNECTION']);
                  }), _0xc845fc['on'](_0x5b92aa(0x222), function (_0x37b2f5) {
                    var _0x3225bc = _0x5b92aa;
                    _0x5ba825['default']['debug'](_0x3225bc(0x33e)), _0xb1579e[_0x3225bc(0x417)](), _0xb1579e[_0x3225bc(0x249)] = _0x31b704['STATUS_KILLED'], _0x199e9e(), _0x5ba825[_0x3225bc(0x2b7)]['debug'](_0x3225bc(0x2aa)), _0xb1579e['_emitter'][_0x3225bc(0x24e)](_0x31b704[_0x3225bc(0x120)]);
                  }), _0xc845fc['on'](_0x5b92aa(0x477), function () {
                    var _0x2d92f1 = _0x5b92aa;

                    _0x5ba825[_0x2d92f1(0x2b7)][_0x2d92f1(0x469)](_0x2d92f1(0x477));
                  }), _0xc845fc['on']('pong', function (_0x2212b5) {
                    var _0xa1733d = _0x5b92aa;
                    _0x2212b5 > _0xb1579e[_0xa1733d(0x1a7)][_0xa1733d(0x2f2)] ? _0xb1579e[_0xa1733d(0x1e4)]++ : _0xb1579e[_0xa1733d(0x1e4)] = 0x0, _0xb1579e['_countPingOverTime'] >= 0x5 && (_0xb1579e[_0xa1733d(0x1a0)][_0xa1733d(0x24e)](_0x31b704[_0xa1733d(0x182)]), _0xb1579e[_0xa1733d(0x1e4)] = 0x0), _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)] = ++_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)] % _0xb1579e[_0xa1733d(0x211)]['maxLastLatency'], _0xb1579e['_latency'][_0xa1733d(0x297)][_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)]] = _0x2212b5, _0xb1579e['_latency']['averageLatency'] = _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x297)]['reduce'](function (_0x2c6a81, _0x4dd222) {
                      return _0x2c6a81 + _0x4dd222;
                    }, 0x0) / _0xb1579e['_latency'][_0xa1733d(0x297)]['length'], _0xb1579e['_latency'][_0xa1733d(0x303)] < 0x96 && (_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x303)] = 0x96), _0x5ba825[_0xa1733d(0x2b7)]['debug'](_0xa1733d(0x1b0), _0x2212b5, _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x303)]), _0xb1579e[_0xa1733d(0x1a0)]['emit'](_0x31b704[_0xa1733d(0x300)], {
                      'latency': _0x2212b5,
                      'averageLatency': _0xb1579e['_latency'][_0xa1733d(0x303)]
                    });
                  }), _0xc845fc['on'](_0x5b92aa(0x1a2), function (_0x3836c3) {
                    var _0xe38246 = _0x5b92aa;
                    _0x3836c3[_0xe38246(0x20a)];

                    var _0x112476 = _0x3836c3[_0xe38246(0x39f)];

                    _0xb1579e[_0xe38246(0x3ee)] = _0xf8a57f, _0xb1579e[_0xe38246(0x1f1)] = _0x112476, _0xb1579e['updateKeyAB'](_0x112476), _0xb1579e[_0xe38246(0x1a0)][_0xe38246(0x24e)](_0x31b704['CONNECTED_EVENT']), _0x12f88c();
                  });
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x321)] = function (_0x2e97c5, _0x43954d, _0x4780e6) {
                  var _0x5ae2ea = _0x1a7887,
                      _0x4fe18f = this;

                  if (this['_socket'] && this[_0x5ae2ea(0x276)][_0x5ae2ea(0x292)]) {
                    var _0x1bcbfa = _0x43954d;
                    this[_0x5ae2ea(0x3ee)] !== _0x26b9ef && this[_0x5ae2ea(0x3ee)] !== _0x3ea7a3 || (_0x1bcbfa = {
                      'id': _0x43954d[_0x5ae2ea(0x270)],
                      'da': {
                        'ev': _0x43954d['data'][_0x5ae2ea(0x476)],
                        'da': _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x1c5)],
                        'v': _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x29f)] ? _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x29f)] : 0x1
                      }
                    });

                    var _0x23c5c4 = this[_0x5ae2ea(0x269)](_0x2e97c5, _0x1bcbfa);

                    this['_socket'][_0x5ae2ea(0x1e2)][_0x2e97c5] = function () {
                      var _0x569049 = _0x5ae2ea,
                          _0x5e4365 = _0x4fe18f['_packetManager'][_0x569049(0x407)](_0x2e97c5);

                      _0x5e4365 && (_0x5ba825['default'][_0x569049(0x469)](_0x569049(0x235), _0x5e4365['messageId']), _0x4fe18f[_0x569049(0x1a0)][_0x569049(0x24e)](_0x31b704['SEND_MESSAGE_SUCCESS_EVENT'], _0x5e4365[_0x569049(0x270)]));
                    }, _0x5ba825[_0x5ae2ea(0x2b7)][_0x5ae2ea(0x469)](_0x5ae2ea(0x171), _0x4780e6, _0x43954d[_0x5ae2ea(0x270)]), this[_0x5ae2ea(0x276)][_0x5ae2ea(0x162)](_0x23c5c4);
                  } else this[_0x5ae2ea(0x224)][_0x5ae2ea(0x2df)](_0x2e97c5, _0x4780e6 + 0x1);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x269)] = function (_0x3930de, _0x54b60a) {
                  return {
                    'type': this['_getPacketType'](),
                    'options': {
                      'compress': !0x0
                    },
                    'id': _0x3930de,
                    'data': this['_encrypt'](_0x54b60a)
                  };
                }, _0x31b704[_0x1a7887(0x1b3)]['_getPacketType'] = function () {
                  var _0x513889 = _0x1a7887;
                  return this[_0x513889(0x3ee)] === _0x3ea7a3 ? 0x5 : 0x2;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x1e7)] = function (_0x12a547) {
                  var _0x39d5c9 = _0x1a7887,
                      _0x427c6c = _0x31b704[_0x39d5c9(0x386)];

                  return this[_0x39d5c9(0x3ee)] === _0x26b9ef ? _0x427c6c = _0x31b704[_0x39d5c9(0x442)] : this['_serverSocketVersion'] === _0x3ea7a3 && (_0x12a547 = JSON[_0x39d5c9(0x296)](_0x12a547), _0x427c6c = _0x31b704[_0x39d5c9(0x305)], _0x12a547 = this[_0x39d5c9(0x376)](_0x12a547)), [_0x427c6c, _0x12a547];
                }, _0x31b704[_0x1a7887(0x1b3)]['_encrypt_5_1'] = function (_0x237eb3) {
                  var _0x2806bc = _0x1a7887;

                  for (var _0x235203 = _0x524566[_0x2806bc(0x4cf)][_0x2806bc(0x263)](_0x237eb3), _0xf1cf4c = 0x0; _0xf1cf4c < _0x235203[_0x2806bc(0x1b1)]; _0xf1cf4c++) _0x235203[_0xf1cf4c]++;

                  return _0x235203[_0x2806bc(0x314)];
                }, _0x31b704['prototype'][_0x1a7887(0x376)] = function (_0x5522b6) {
                  var _0x87575f = _0x1a7887;

                  if (this[_0x87575f(0x48a)]) {
                    for (var _0x46610e = _0x524566[_0x87575f(0x4cf)][_0x87575f(0x263)](_0x5522b6), _0x44b763 = 0x0; _0x44b763 < _0x46610e[_0x87575f(0x1b1)]; _0x44b763++) _0x46610e[_0x44b763] = _0x46610e[_0x44b763] ^ this[_0x87575f(0x48a)][_0x44b763 % this[_0x87575f(0x48a)][_0x87575f(0x1b1)]];

                    return _0x46610e[_0x87575f(0x314)];
                  }

                  return _0x5ba825[_0x87575f(0x2b7)]['error']('_encrypt_5_2\x20CANNOT\x20encrypt:\x20%s', _0x5522b6), null;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x274)] = function (_0x42f98c) {
                  var _0x29817a = _0x1a7887;
                  this['_socket'] && (this['_opt']['token'] = _0x42f98c, this['_socket']['io'][_0x29817a(0x420)][_0x29817a(0x189)] = this[_0x29817a(0x35b)](), this[_0x29817a(0x276)]['io']['uri'] = ''[_0x29817a(0x23c)](this[_0x29817a(0x1a7)]['url'], '/?')[_0x29817a(0x23c)](this[_0x29817a(0x35b)]())), this[_0x29817a(0x1a7)]['token'] = _0x42f98c;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x2be)] = function (_0x53cc00) {
                  var _0x1f312e = _0x1a7887;

                  _0x5ba825[_0x1f312e(0x2b7)][_0x1f312e(0x469)]('SocketManager\x20-\x20Add\x20message\x20to\x20queue:\x20%j', _0x53cc00);

                  var _0x30ad2c = this[_0x1f312e(0x224)]['addNew'](_0x53cc00);

                  this[_0x1f312e(0x321)](_0x30ad2c, _0x53cc00, 0x0);
                }, _0x31b704['prototype'][_0x1a7887(0x425)] = function (_0x20a8e8) {
                  var _0x1c037b = _0x1a7887;
                  _0x20a8e8 = _0x20a8e8 || [], this[_0x1c037b(0x224)][_0x1c037b(0x425)](function (_0x1f8e4a) {
                    return _0x20a8e8['includes'](_0x1f8e4a['messageId']);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)]['sendChatMessage'] = function (_0x5aaae2) {
                  var _0x22a624 = _0x1a7887;
                  _0x5ba825[_0x22a624(0x2b7)][_0x22a624(0x469)](_0x22a624(0x1f6), _0x5aaae2), this['_socket']['emit']('chat-emit', _0x5aaae2);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x1cc)] = function (_0x5098a3, _0x4c4abd) {
                  var _0x1b1858 = _0x1a7887;

                  this[_0x1b1858(0x1a0)]['on'](_0x5098a3, _0x4c4abd);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x19f)] = function (_0x59a61a, _0x5b4aff) {
                  var _0x221f52 = _0x1a7887;

                  this[_0x221f52(0x1a0)][_0x221f52(0x198)](_0x59a61a, _0x5b4aff);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x2fb)] = function (_0x2f092f) {
                  var _0x4ef30b = _0x1a7887;
                  _0x2f092f && (_0x2f092f = _0x2f092f[_0x4ef30b(0x3d9)](_0x4ef30b(0x475), 'p'), this[_0x4ef30b(0x282)][_0x4ef30b(0x3f3)](_0x2f092f) || (this[_0x4ef30b(0x276)][_0x4ef30b(0x292)] ? (this[_0x4ef30b(0x282)][_0x4ef30b(0x41c)](_0x2f092f), this[_0x4ef30b(0x1aa)](_0x2f092f)) : this['_pendingSubscribeChannelList']['push'](_0x2f092f)));
                }, _0x31b704[_0x1a7887(0x1b3)]['_subscribe'] = function (_0x4695d2) {
                  var _0x27b6a4 = _0x1a7887,
                      _0x39ac9f = _0x3dc4e4(''[_0x27b6a4(0x23c)](this['_opt'][_0x27b6a4(0x147)], '/')[_0x27b6a4(0x23c)](_0x4695d2, _0x27b6a4(0x149))[_0x27b6a4(0x23c)](this[_0x27b6a4(0x1a7)][_0x27b6a4(0x362)], '&sv=')[_0x27b6a4(0x23c)](_0xf8a57f));

                  this[_0x27b6a4(0x4ca)](_0x39ac9f);
                }, _0x31b704[_0x1a7887(0x1b3)]['unSubscribe'] = function (_0xb924cd) {
                  var _0x3807ad = _0x1a7887;
                  _0xb924cd && (_0xb924cd = _0xb924cd['replace'](_0x3807ad(0x475), 'p'), this[_0x3807ad(0x282)][_0x3807ad(0x3f3)](_0xb924cd) && (this[_0x3807ad(0x282)][_0x3807ad(0x479)](this[_0x3807ad(0x282)][_0x3807ad(0x22a)](_0xb924cd), 0x1), this[_0x3807ad(0xf7)](_0xb924cd)), this[_0x3807ad(0x488)][_0x3807ad(0x3f3)](_0xb924cd) && this[_0x3807ad(0x488)][_0x3807ad(0x479)](this[_0x3807ad(0x488)]['indexOf'](_0xb924cd), 0x1));
                }, _0x31b704['prototype']['_unSubscribe'] = function (_0x4d8e50) {
                  var _0x32959b = _0x1a7887,
                      _0x37341d = this[_0x32959b(0x276)]['io'][_0x32959b(0x32e)]['/'[_0x32959b(0x23c)](_0x4d8e50)];

                  _0x37341d && (_0x37341d[_0x32959b(0x166)](), _0x37341d['removeAllListeners'](), delete this[_0x32959b(0x276)]['io'][_0x32959b(0x32e)]['/'[_0x32959b(0x23c)](_0x4d8e50)]);
                }, _0x31b704['prototype'][_0x1a7887(0x417)] = function () {
                  var _0x25eaf3 = _0x1a7887,
                      _0x3ba89c = this;

                  Object[_0x25eaf3(0x44d)](this[_0x25eaf3(0x276)]['io']['nsps'])['forEach'](function (_0x411f2a) {
                    var _0x28e586 = _0x25eaf3,
                        _0x24f9f9 = _0x3ba89c[_0x28e586(0x276)]['io'][_0x28e586(0x32e)][_0x411f2a];

                    _0x24f9f9 && (_0x24f9f9['close'](), _0x24f9f9[_0x28e586(0x146)](), delete _0x3ba89c['_socket']['io'][_0x28e586(0x32e)][_0x411f2a]);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)]['close'] = function () {
                  var _0x229f07 = _0x1a7887;
                  this[_0x229f07(0x417)](), this[_0x229f07(0x249)] = _0x31b704['STATUS_KILLED'], this['_emitter'][_0x229f07(0x146)](), this[_0x229f07(0x224)][_0x229f07(0x4a7)]();
                }, _0x31b704[_0x1a7887(0x1b3)]['_reconnect'] = function () {
                  var _0x338ed7 = _0x1a7887;
                  this[_0x338ed7(0x417)](), this[_0x338ed7(0x37e)]();
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x337)] = function () {
                  var _0x55bb1c = _0x1a7887;
                  return this[_0x55bb1c(0x249)] !== _0x31b704[_0x55bb1c(0x4a6)];
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x339)] = function () {
                  var _0x4d5ae6 = _0x1a7887;
                  return !!this[_0x4d5ae6(0x48a)];
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x499)] = function (_0x58ce2c) {
                  var _0x57c767 = _0x1a7887,
                      _0x22eb03 = 'abcd';
                  _0x58ce2c && (_0x22eb03 = _0x58ce2c[_0x57c767(0x4a5)](0x9, 0xd));

                  for (var _0x1bfcbe = new ArrayBuffer(0x4), _0x43e6e1 = new Uint8Array(_0x1bfcbe), _0x30588a = 0x0; _0x30588a < _0x22eb03['length']; _0x30588a++) _0x43e6e1[_0x30588a] = _0x22eb03[_0x57c767(0x309)](_0x30588a) % 0x80;

                  this[_0x57c767(0x48a)] = _0x43e6e1;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x13b)] = function () {
                  var _0xb4aa1d = _0x1a7887;
                  return _0x2af7b8(_0x2af7b8([], this[_0xb4aa1d(0x282)], !0x0), this[_0xb4aa1d(0x488)], !0x0);
                }, _0x31b704['SOCKET_REQUEST_EVENT'] = 'q', _0x31b704[_0x1a7887(0x3b4)] = 'p', _0x31b704[_0x1a7887(0x1df)] = '1', _0x31b704[_0x1a7887(0x2ca)] = '2', _0x31b704[_0x1a7887(0x386)] = 'q', _0x31b704[_0x1a7887(0x442)] = 'q4', _0x31b704[_0x1a7887(0x3fe)] = _0x1a7887(0x247), _0x31b704[_0x1a7887(0x305)] = 'q52', _0x31b704[_0x1a7887(0x409)] = _0x1a7887(0x292), _0x31b704['CAN_NOT_CONNECT_EVENT'] = 'can-not-connect', _0x31b704['CAN_NOT_SEND_MESSAGE_EVENT'] = _0x1a7887(0x186), _0x31b704[_0x1a7887(0x470)] = _0x1a7887(0x32c), _0x31b704[_0x1a7887(0x324)] = 'new-message', _0x31b704[_0x1a7887(0x2bd)] = _0x1a7887(0x217), _0x31b704[_0x1a7887(0x300)] = _0x1a7887(0x2e6), _0x31b704[_0x1a7887(0x431)] = _0x1a7887(0x110), _0x31b704['POOR_CONNECTION'] = _0x1a7887(0x3aa), _0x31b704[_0x1a7887(0x310)] = _0x1a7887(0x134), _0x31b704[_0x1a7887(0x273)] = _0x1a7887(0x2db), _0x31b704[_0x1a7887(0x221)] = _0x1a7887(0x150), _0x31b704[_0x1a7887(0x4d3)] = _0x1a7887(0x18a), _0x31b704[_0x1a7887(0x4a6)] = _0x1a7887(0x3e7), _0x31b704;
              }();

              _0x37ca5f[_0x4bf96f(0x3dc)] = _0x46a01f;
            },
            0x35: function (_0x34ee72, _0x278386, _0x18f530) {
              var _0x406381 = a0_0x107f;

              var _0x28ef3f = _0x18f530(0x16c2),
                  _0x4a537b = _0x18f530(0x141a),
                  _0x195028 = Object[_0x406381(0x1b3)][_0x406381(0x436)],
                  _0x3b8773 = _0x406381(0x17d) == typeof Blob || _0x406381(0x364) != typeof Blob && _0x406381(0x432) === _0x195028[_0x406381(0x229)](Blob),
                  _0x10bb8d = _0x406381(0x17d) == typeof File || _0x406381(0x364) != typeof File && _0x406381(0x4a4) === _0x195028[_0x406381(0x229)](File);

              function _0x3ef584(_0x57fa85, _0x45d31a) {
                var _0x571e56 = _0x406381;
                if (!_0x57fa85) return _0x57fa85;

                if (_0x4a537b(_0x57fa85)) {
                  var _0x561ade = {
                    'p': 0x1,
                    'n': _0x45d31a[_0x571e56(0x1b1)]
                  };
                  return _0x45d31a[_0x571e56(0x41c)](_0x57fa85), _0x561ade;
                }

                if (_0x28ef3f(_0x57fa85)) {
                  for (var _0x15c604 = new Array(_0x57fa85[_0x571e56(0x1b1)]), _0x2ce4f1 = 0x0; _0x2ce4f1 < _0x57fa85[_0x571e56(0x1b1)]; _0x2ce4f1++) _0x15c604[_0x2ce4f1] = _0x3ef584(_0x57fa85[_0x2ce4f1], _0x45d31a);

                  return _0x15c604;
                }

                if ('object' == typeof _0x57fa85 && !(_0x57fa85 instanceof Date)) {
                  for (var _0x1d520a in _0x15c604 = {}, _0x57fa85) _0x15c604[_0x1d520a] = _0x3ef584(_0x57fa85[_0x1d520a], _0x45d31a);

                  return _0x15c604;
                }

                return _0x57fa85;
              }

              function _0x271ac9(_0x2c10be, _0x1d570f) {
                var _0x541046 = _0x406381;
                if (!_0x2c10be) return _0x2c10be;
                if (_0x2c10be && _0x2c10be[_0x541046(0x4c8)]) return _0x1d570f[_0x2c10be[_0x541046(0x1fd)]];
                if (_0x2c10be && _0x541046(0x268) == typeof _0x2c10be && _0x2c10be[_0x541046(0x39d)]('b')) return _0x1d570f[parseInt(_0x2c10be[_0x541046(0x4a5)](0x1))];

                if (_0x28ef3f(_0x2c10be)) {
                  for (var _0xf70f85 = 0x0; _0xf70f85 < _0x2c10be[_0x541046(0x1b1)]; _0xf70f85++) _0x2c10be[_0xf70f85] = _0x271ac9(_0x2c10be[_0xf70f85], _0x1d570f);
                } else {
                  if (_0x541046(0x33c) == typeof _0x2c10be) {
                    for (var _0xf4fe03 in _0x2c10be) _0x2c10be[_0xf4fe03] = _0x271ac9(_0x2c10be[_0xf4fe03], _0x1d570f);
                  }
                }

                return _0x2c10be;
              }

              _0x278386[_0x406381(0x43c)] = function (_0x423b29) {
                var _0x39d14a = _0x406381,
                    _0x33cc42 = [],
                    _0x24a126 = _0x423b29[_0x39d14a(0x1c5)],
                    _0x3617a5 = _0x423b29;

                return _0x3617a5[_0x39d14a(0x1c5)] = _0x3ef584(_0x24a126, _0x33cc42), _0x3617a5['attachments'] = _0x33cc42['length'], {
                  'packet': _0x3617a5,
                  'buffers': _0x33cc42
                };
              }, _0x278386[_0x406381(0x371)] = function (_0xe5dbeb, _0x1333b2) {
                var _0x489e8d = _0x406381;
                return _0xe5dbeb[_0x489e8d(0x1c5)] = _0x271ac9(_0xe5dbeb[_0x489e8d(0x1c5)], _0x1333b2), _0xe5dbeb['attachments'] = void 0x0, _0xe5dbeb;
              }, _0x278386['removeBlobs'] = function (_0x3d73b6, _0x311e6e) {
                var _0x1ca2b9 = 0x0,
                    _0x118474 = _0x3d73b6;
                !function _0x2df206(_0x3e7542, _0x481675, _0x5bc9f1) {
                  var _0x3afa79 = a0_0x107f;
                  if (!_0x3e7542) return _0x3e7542;

                  if (_0x3b8773 && _0x3e7542 instanceof Blob || _0x10bb8d && _0x3e7542 instanceof File) {
                    _0x1ca2b9++;

                    var _0x27c41d = new FileReader();

                    _0x27c41d['onload'] = function () {
                      var _0x165e63 = a0_0x107f;
                      _0x5bc9f1 ? _0x5bc9f1[_0x481675] = this['result'] : _0x118474 = this[_0x165e63(0x1c0)], --_0x1ca2b9 || _0x311e6e(_0x118474);
                    }, _0x27c41d[_0x3afa79(0x4a8)](_0x3e7542);
                  } else {
                    if (_0x28ef3f(_0x3e7542)) {
                      for (var _0x55996b = 0x0; _0x55996b < _0x3e7542[_0x3afa79(0x1b1)]; _0x55996b++) _0x2df206(_0x3e7542[_0x55996b], _0x55996b, _0x3e7542);
                    } else {
                      if ('object' == typeof _0x3e7542 && !_0x4a537b(_0x3e7542)) {
                        for (var _0x35f13a in _0x3e7542) _0x2df206(_0x3e7542[_0x35f13a], _0x35f13a, _0x3e7542);
                      }
                    }
                  }
                }(_0x118474), _0x1ca2b9 || _0x311e6e(_0x118474);
              };
            },
            0x2501: function (_0xff5376, _0x3aff2c, _0x38b887) {
              var _0x4f94d6 = a0_0x107f;

              var _0xfa2f66 = _0x38b887(0x4cb)(_0x4f94d6(0x3b7)),
                  _0x3d49c2 = _0x38b887(0x223f),
                  _0x15b188 = _0x38b887(0x35),
                  _0x2d2029 = _0x38b887(0x16c2),
                  _0x489f48 = _0x38b887(0x141a);

              function _0x517c8a() {}

              _0x3aff2c['protocol'] = 0x4, _0x3aff2c[_0x4f94d6(0x24d)] = [_0x4f94d6(0x236), _0x4f94d6(0x203), 'EVENT', _0x4f94d6(0x2a1), 'ERROR', _0x4f94d6(0x2fd), 'BINARY_ACK'], _0x3aff2c[_0x4f94d6(0x236)] = 0x0, _0x3aff2c[_0x4f94d6(0x203)] = 0x1, _0x3aff2c['EVENT'] = 0x2, _0x3aff2c[_0x4f94d6(0x2a1)] = 0x3, _0x3aff2c[_0x4f94d6(0x4ac)] = 0x4, _0x3aff2c[_0x4f94d6(0x2fd)] = 0x5, _0x3aff2c[_0x4f94d6(0x133)] = 0x6, _0x3aff2c[_0x4f94d6(0x137)] = _0x517c8a, _0x3aff2c['Decoder'] = _0x229ac9;

              var _0x466e67 = _0x3aff2c[_0x4f94d6(0x4ac)] + _0x4f94d6(0x281);

              function _0x23862e(_0x152a28) {
                var _0x1ad9d8 = _0x4f94d6,
                    _0xca254 = '' + _0x152a28['type'];

                if (_0x3aff2c[_0x1ad9d8(0x2fd)] !== _0x152a28[_0x1ad9d8(0x156)] && _0x3aff2c['BINARY_ACK'] !== _0x152a28[_0x1ad9d8(0x156)] || (_0xca254 += _0x152a28[_0x1ad9d8(0x1d8)] + '-'), _0x152a28[_0x1ad9d8(0x201)] && '/' !== _0x152a28['nsp'] && (_0xca254 += _0x152a28[_0x1ad9d8(0x201)] + ','), null != _0x152a28['id'] && (_0xca254 += _0x152a28['id']), null != _0x152a28[_0x1ad9d8(0x1c5)]) {
                  var _0x397068 = function (_0x3280cf) {
                    var _0x266060 = _0x1ad9d8;

                    try {
                      return JSON[_0x266060(0x296)](_0x3280cf);
                    } catch (_0x2de2a6) {
                      return !0x1;
                    }
                  }(_0x152a28[_0x1ad9d8(0x1c5)]);

                  if (!0x1 === _0x397068) return _0x466e67;
                  _0xca254 += _0x397068;
                }

                return _0xfa2f66(_0x1ad9d8(0x1b7), _0x152a28, _0xca254), _0xca254;
              }

              function _0x229ac9() {
                var _0x597b64 = _0x4f94d6;
                this[_0x597b64(0xf1)] = null;
              }

              function _0x4888ec(_0x5ec5ab) {
                var _0xcad97a = _0x4f94d6;
                this[_0xcad97a(0x102)] = _0x5ec5ab, this[_0xcad97a(0x2b8)] = [];
              }

              function _0x4aa26c(_0x2ab754) {
                var _0x331f56 = _0x4f94d6;
                return {
                  'type': _0x3aff2c[_0x331f56(0x4ac)],
                  'data': _0x331f56(0x195) + _0x2ab754
                };
              }

              _0x517c8a[_0x4f94d6(0x1b3)][_0x4f94d6(0x263)] = function (_0x4d70a1, _0x1a174e) {
                var _0x3e9aa4 = _0x4f94d6;
                _0xfa2f66(_0x3e9aa4(0x4cb), _0x4d70a1), _0x3aff2c[_0x3e9aa4(0x2fd)] === _0x4d70a1[_0x3e9aa4(0x156)] || _0x3aff2c[_0x3e9aa4(0x133)] === _0x4d70a1['type'] ? function (_0x304ff8, _0x5fba7) {
                  _0x15b188['removeBlobs'](_0x304ff8, function (_0x4f51d8) {
                    var _0x4a6cf0 = a0_0x107f,
                        _0x2bd7ef = _0x15b188['deconstructPacket'](_0x4f51d8),
                        _0x12b897 = _0x23862e(_0x2bd7ef['packet']),
                        _0x4a4de1 = _0x2bd7ef[_0x4a6cf0(0x2b8)];

                    _0x4a4de1[_0x4a6cf0(0x393)](_0x12b897), _0x5fba7(_0x4a4de1);
                  });
                }(_0x4d70a1, _0x1a174e) : _0x1a174e([_0x23862e(_0x4d70a1)]);
              }, _0x3d49c2(_0x229ac9['prototype']), _0x229ac9[_0x4f94d6(0x1b3)][_0x4f94d6(0x2fc)] = function (_0x507c05) {
                var _0xea137b = _0x4f94d6,
                    _0x179043;

                if (_0xea137b(0x268) == typeof _0x507c05) _0x179043 = function (_0x40051d) {
                  var _0xc2fe59 = _0xea137b,
                      _0x3355d8 = 0x0,
                      _0x786482 = {
                    'type': Number(_0x40051d[_0xc2fe59(0x144)](0x0))
                  };
                  if (null == _0x3aff2c['types'][_0x786482[_0xc2fe59(0x156)]]) return _0x4aa26c(_0xc2fe59(0x3e9) + _0x786482[_0xc2fe59(0x156)]);

                  if (_0x3aff2c[_0xc2fe59(0x2fd)] === _0x786482[_0xc2fe59(0x156)] || _0x3aff2c[_0xc2fe59(0x133)] === _0x786482[_0xc2fe59(0x156)]) {
                    for (var _0x57e1a2 = _0x3355d8 + 0x1; '-' !== _0x40051d[_0xc2fe59(0x144)](++_0x3355d8) && _0x3355d8 != _0x40051d['length'];);

                    var _0x34d032 = _0x40051d[_0xc2fe59(0x4a5)](_0x57e1a2, _0x3355d8);

                    if (_0x34d032 != Number(_0x34d032) || '-' !== _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) throw new Error(_0xc2fe59(0x456));
                    _0x786482[_0xc2fe59(0x1d8)] = Number(_0x34d032);
                  }

                  if ('/' === _0x40051d[_0xc2fe59(0x144)](_0x3355d8 + 0x1)) {
                    for (_0x57e1a2 = _0x3355d8 + 0x1; ++_0x3355d8 && ',' !== (_0x4b55d9 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) && _0x3355d8 !== _0x40051d[_0xc2fe59(0x1b1)];);

                    _0x786482[_0xc2fe59(0x201)] = _0x40051d[_0xc2fe59(0x4a5)](_0x57e1a2, _0x3355d8);
                  } else _0x786482['nsp'] = '/';

                  var _0x376820 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8 + 0x1);

                  if ('' !== _0x376820 && Number(_0x376820) == _0x376820) {
                    for (_0x57e1a2 = _0x3355d8 + 0x1; ++_0x3355d8;) {
                      var _0x4b55d9;

                      if (null == (_0x4b55d9 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) || Number(_0x4b55d9) != _0x4b55d9) {
                        --_0x3355d8;
                        break;
                      }

                      if (_0x3355d8 === _0x40051d['length']) break;
                    }

                    _0x786482['id'] = Number(_0x40051d['substring'](_0x57e1a2, _0x3355d8 + 0x1));
                  }

                  if (_0x40051d['charAt'](++_0x3355d8)) {
                    var _0x5e653d = function (_0x1776ba) {
                      try {
                        return JSON['parse'](_0x1776ba);
                      } catch (_0x490294) {
                        return !0x1;
                      }
                    }(_0x40051d['substr'](_0x3355d8));

                    if (!0x1 === _0x5e653d || _0x786482[_0xc2fe59(0x156)] !== _0x3aff2c[_0xc2fe59(0x4ac)] && !_0x2d2029(_0x5e653d)) return _0x4aa26c(_0xc2fe59(0x346));
                    _0x786482[_0xc2fe59(0x1c5)] = _0x5e653d;
                  }

                  return _0xfa2f66(_0xc2fe59(0x3a8), _0x40051d, _0x786482), _0x786482;
                }(_0x507c05), _0x3aff2c[_0xea137b(0x2fd)] === _0x179043['type'] || _0x3aff2c[_0xea137b(0x133)] === _0x179043[_0xea137b(0x156)] ? (this['reconstructor'] = new _0x4888ec(_0x179043), 0x0 === this[_0xea137b(0xf1)][_0xea137b(0x102)]['attachments'] && this['emit'](_0xea137b(0x3e0), _0x179043)) : this[_0xea137b(0x24e)](_0xea137b(0x3e0), _0x179043);else {
                  if (!_0x489f48(_0x507c05) && !_0x507c05[_0xea137b(0x275)]) throw new Error(_0xea137b(0x45e) + _0x507c05);
                  if (!this[_0xea137b(0xf1)]) throw new Error(_0xea137b(0x1ab));
                  (_0x179043 = this['reconstructor'][_0xea137b(0x341)](_0x507c05)) && (this['reconstructor'] = null, this[_0xea137b(0x24e)](_0xea137b(0x3e0), _0x179043));
                }
              }, _0x229ac9[_0x4f94d6(0x1b3)][_0x4f94d6(0x1eb)] = function () {
                var _0x12a57c = _0x4f94d6;
                this[_0x12a57c(0xf1)] && this[_0x12a57c(0xf1)][_0x12a57c(0x401)]();
              }, _0x4888ec[_0x4f94d6(0x1b3)][_0x4f94d6(0x341)] = function (_0x3ac75a) {
                var _0x378ae1 = _0x4f94d6;

                if (this['buffers'][_0x378ae1(0x41c)](_0x3ac75a), this[_0x378ae1(0x2b8)]['length'] === this[_0x378ae1(0x102)][_0x378ae1(0x1d8)]) {
                  var _0x4cdbe4 = _0x15b188['reconstructPacket'](this[_0x378ae1(0x102)], this['buffers']);

                  return this[_0x378ae1(0x401)](), _0x4cdbe4;
                }

                return null;
              }, _0x4888ec[_0x4f94d6(0x1b3)][_0x4f94d6(0x401)] = function () {
                var _0x2446db = _0x4f94d6;
                this[_0x2446db(0x102)] = null, this[_0x2446db(0x2b8)] = [];
              };
            },
            0x141a: function (_0x4e9052) {
              var _0x4bed14 = a0_0x107f;

              _0x4e9052[_0x4bed14(0x38d)] = function (_0x488cd2) {
                var _0x11e615 = _0x4bed14;
                return _0x5b6e08 && Buffer[_0x11e615(0x160)](_0x488cd2) || _0x2abffa && (_0x488cd2 instanceof ArrayBuffer || function (_0x56cf0f) {
                  var _0x379fd4 = _0x11e615;
                  return _0x379fd4(0x17d) == typeof ArrayBuffer['isView'] ? ArrayBuffer[_0x379fd4(0x37b)](_0x56cf0f) : _0x56cf0f[_0x379fd4(0x314)] instanceof ArrayBuffer;
                }(_0x488cd2));
              };

              var _0x5b6e08 = _0x4bed14(0x17d) == typeof Buffer && _0x4bed14(0x17d) == typeof Buffer['isBuffer'],
                  _0x2abffa = 'function' == typeof ArrayBuffer;
            },
            0x7e9: function (_0x10031b, _0x2397ba) {
              var _0x178068 = a0_0x107f;
              Object[_0x178068(0xf2)](_0x2397ba, _0x178068(0x223), {
                'value': !0x0
              }), _0x2397ba[_0x178068(0x3ba)] = void 0x0;

              var _0x56fc6b = console['log'],
                  _0x1ef1c5 = console[_0x178068(0x31c)],
                  _0x4138b4 = function () {
                var _0x43186c = _0x178068;

                function _0x276499(_0x3e0c2a, _0x76a9f1, _0x55df81) {
                  var _0x3c58e5 = a0_0x107f;
                  this[_0x3c58e5(0x11d)] = !!_0x3e0c2a, this[_0x3c58e5(0x384)] = _0x3e0c2a, this['logFnError'] = _0x76a9f1, this[_0x3c58e5(0x437)] = _0x55df81;
                }

                return _0x276499[_0x43186c(0x1b3)][_0x43186c(0x469)] = function (_0x524ad0) {
                  var _0x2448e1 = _0x43186c;

                  for (var _0x3c4ed6 = [], _0x22d4be = 0x1; _0x22d4be < arguments['length']; _0x22d4be++) _0x3c4ed6[_0x22d4be - 0x1] = arguments[_0x22d4be];

                  var _0x29498f = _0x524ad0;
                  this[_0x2448e1(0x11d)] && (_0x29498f += JSON['stringify'](_0x3c4ed6)), this[_0x2448e1(0x11d)] && this[_0x2448e1(0x384)](_0x29498f);
                }, _0x276499['prototype'][_0x43186c(0x31c)] = function (_0x264373) {
                  var _0x13def2 = _0x43186c;

                  for (var _0x596777 = [], _0x441d95 = 0x1; _0x441d95 < arguments[_0x13def2(0x1b1)]; _0x441d95++) _0x596777[_0x441d95 - 0x1] = arguments[_0x441d95];

                  var _0x2dfaf5 = _0x264373;
                  this[_0x13def2(0x11d)] && (_0x2dfaf5 += JSON[_0x13def2(0x296)](_0x596777)), this[_0x13def2(0x11d)] && this['logFnWarn'](_0x2dfaf5);
                }, _0x276499[_0x43186c(0x1b3)][_0x43186c(0x122)] = function (_0x1e3a7d) {
                  var _0x3850e3 = _0x43186c;

                  for (var _0x58477a = [], _0x1c6677 = 0x1; _0x1c6677 < arguments[_0x3850e3(0x1b1)]; _0x1c6677++) _0x58477a[_0x1c6677 - 0x1] = arguments[_0x1c6677];

                  var _0x472b16 = _0x1e3a7d;
                  this['isDebugging'] && (_0x472b16 += JSON['stringify'](_0x58477a)), this[_0x3850e3(0x11d)] && this['logFnError'](_0x472b16);
                }, _0x276499['prototype'][_0x43186c(0x419)] = function (_0x3486fa, _0x4a1c28, _0x564ef9) {
                  var _0x33dea3 = _0x43186c;
                  this[_0x33dea3(0x384)] = _0x3486fa, this[_0x33dea3(0x2af)] = _0x4a1c28, this['logFnWarn'] = _0x564ef9;
                }, _0x276499;
              }();

              _0x2397ba[_0x178068(0x3ba)] = _0x4138b4, _0x2397ba[_0x178068(0x2b7)] = new _0x4138b4(_0x56fc6b, _0x1ef1c5, _0x1ef1c5);
            },
            0x1518: function (_0x3c3f9a, _0x409fea) {
              var _0x59f793 = a0_0x107f;
              Object['defineProperty'](_0x409fea, _0x59f793(0x223), {
                'value': !0x0
              }), _0x409fea['XMLHttpServiceRest'] = _0x409fea[_0x59f793(0x267)] = void 0x0;

              var _0x493b7d = function () {
                var _0x2deaa4 = _0x59f793;

                function _0x5bcb47() {}

                return _0x5bcb47[_0x2deaa4(0x49b)] = function (_0x3bcf98) {
                  return new _0x296cbe();
                }, _0x5bcb47;
              }();

              _0x409fea['ServiceRest'] = _0x493b7d;

              var _0x296cbe = function () {
                var _0x2f9307 = _0x59f793;

                function _0x28085c() {}

                return _0x28085c['prototype']['encodeQueryData'] = function (_0x29a7ea) {
                  var _0x1b37f3 = a0_0x107f;
                  return Object['keys'](_0x29a7ea)[_0x1b37f3(0x435)](function (_0x239112) {
                    var _0x374fd9 = _0x1b37f3;
                    return [_0x239112, _0x29a7ea[_0x239112]][_0x374fd9(0x435)](encodeURIComponent)[_0x374fd9(0x2b4)]('=');
                  })[_0x1b37f3(0x2b4)]('&');
                }, _0x28085c[_0x2f9307(0x1b3)]['post'] = function (_0x18336b) {
                  var _0x5f3b2b = _0x2f9307,
                      _0x454b63 = _0x18336b[_0x5f3b2b(0x147)],
                      _0x2c372a = _0x18336b[_0x5f3b2b(0x1c5)],
                      _0x588c51 = _0x18336b[_0x5f3b2b(0x200)],
                      _0x38ed69 = _0x18336b[_0x5f3b2b(0x411)],
                      _0x43d864 = _0x18336b[_0x5f3b2b(0x113)],
                      _0x3b4081 = this[_0x5f3b2b(0x1ea)](_0x2c372a),
                      _0x2804f2 = _0x588c51 + _0x454b63,
                      _0x523ab8 = new XMLHttpRequest();

                  _0x523ab8[_0x5f3b2b(0x412)](_0x5f3b2b(0x250), _0x2804f2, !0x0), _0x523ab8[_0x5f3b2b(0xee)] = 0x3a98, _0x523ab8[_0x5f3b2b(0x2d4)]('Content-type', 'application/x-www-form-urlencoded'), _0x523ab8[_0x5f3b2b(0x255)] = function () {
                    var _0x3ba5aa = _0x5f3b2b;
                    0x4 == _0x523ab8[_0x3ba5aa(0x3d0)] ? _0x523ab8[_0x3ba5aa(0x1f8)] ? _0x38ed69({
                      'status': _0x523ab8[_0x3ba5aa(0x21e)],
                      'data': JSON[_0x3ba5aa(0x288)](_0x523ab8['responseText'])
                    }) : _0x43d864() : 0x0 === _0x523ab8[_0x3ba5aa(0x3d0)] && _0x43d864(), 0xc8 !== _0x523ab8['status'] && _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x335)] = function (_0x42a55f) {
                    _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x112)] = function (_0x41db42) {
                    _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x262)](_0x3b4081);
                }, _0x28085c;
              }();

              _0x409fea[_0x59f793(0x20c)] = _0x296cbe;
            },
            0x11f2: function (_0x1a4698, _0x4440fb) {
              var _0x2c4e5f = a0_0x107f;
              Object['defineProperty'](_0x4440fb, '__esModule', {
                'value': !0x0
              }), _0x4440fb['TextDecoder'] = _0x4440fb[_0x2c4e5f(0x4cf)] = void 0x0;

              var _0x2ab75b = function () {
                var _0x19402c = _0x2c4e5f;

                function _0x50a37c() {}

                return _0x50a37c[_0x19402c(0x263)] = function (_0x59b14d) {
                  var _0x27d475 = _0x19402c;

                  for (var _0x3dbb15 = [], _0x472536 = _0x59b14d['length'], _0x3eabc8 = 0x0; _0x3eabc8 < _0x472536;) {
                    var _0x2df1b6 = _0x59b14d[_0x27d475(0x491)](_0x3eabc8),
                        _0x46f2be = 0x0,
                        _0x422b35 = 0x0;

                    for (_0x2df1b6 <= 0x7f ? (_0x46f2be = 0x0, _0x422b35 = 0x0) : _0x2df1b6 <= 0x7ff ? (_0x46f2be = 0x6, _0x422b35 = 0xc0) : _0x2df1b6 <= 0xffff ? (_0x46f2be = 0xc, _0x422b35 = 0xe0) : _0x2df1b6 <= 0x1fffff && (_0x46f2be = 0x12, _0x422b35 = 0xf0), _0x3dbb15[_0x27d475(0x41c)](_0x422b35 | _0x2df1b6 >> _0x46f2be), _0x46f2be -= 0x6; _0x46f2be >= 0x0;) _0x3dbb15[_0x27d475(0x41c)](0x80 | _0x2df1b6 >> _0x46f2be & 0x3f), _0x46f2be -= 0x6;

                    _0x3eabc8 += _0x2df1b6 >= 0x10000 ? 0x2 : 0x1;
                  }

                  return new Uint8Array(_0x3dbb15);
                }, _0x50a37c;
              }();

              _0x4440fb[_0x2c4e5f(0x4cf)] = _0x2ab75b;

              var _0x570350 = function () {
                var _0x253a10 = _0x2c4e5f;

                function _0x34debf() {}

                return _0x34debf[_0x253a10(0x3f1)] = function (_0x5861ca) {
                  var _0x5867cf = _0x253a10;

                  for (var _0x25ee04 = Array['from'](_0x5861ca), _0x23ac36 = '', _0x4ca702 = 0x0; _0x4ca702 < _0x25ee04[_0x5867cf(0x1b1)];) {
                    var _0xde5183 = _0x25ee04[_0x4ca702],
                        _0x405e3b = 0x0,
                        _0x97702a = 0x0;

                    if (_0xde5183 <= 0x7f ? (_0x405e3b = 0x0, _0x97702a = 0xff & _0xde5183) : _0xde5183 <= 0xdf ? (_0x405e3b = 0x1, _0x97702a = 0x1f & _0xde5183) : _0xde5183 <= 0xef ? (_0x405e3b = 0x2, _0x97702a = 0xf & _0xde5183) : _0xde5183 <= 0xf4 && (_0x405e3b = 0x3, _0x97702a = 0x7 & _0xde5183), _0x25ee04[_0x5867cf(0x1b1)] - _0x4ca702 - _0x405e3b > 0x0) {
                      for (var _0x386fba = 0x0; _0x386fba < _0x405e3b;) _0x97702a = _0x97702a << 0x6 | 0x3f & (_0xde5183 = _0x25ee04[_0x4ca702 + _0x386fba + 0x1]), _0x386fba += 0x1;
                    } else _0x97702a = 0xfffd, _0x405e3b = _0x25ee04[_0x5867cf(0x1b1)] - _0x4ca702;

                    _0x23ac36 += String[_0x5867cf(0x258)](_0x97702a), _0x4ca702 += _0x405e3b + 0x1;
                  }

                  return _0x23ac36;
                }, _0x34debf;
              }();

              _0x4440fb[_0x2c4e5f(0x220)] = _0x570350;
            },
            0x758: function (_0x17541c, _0x4e9b9d) {
              var _0x2974fc = a0_0x107f;
              Object[_0x2974fc(0xf2)](_0x4e9b9d, _0x2974fc(0x223), {
                'value': !0x0
              }), _0x4e9b9d[_0x2974fc(0x45c)] = void 0x0, _0x4e9b9d[_0x2974fc(0x45c)] = function () {
                var _0xc3b79a = _0x2974fc;
                return _0xc3b79a(0x291)[_0xc3b79a(0x3d9)](/[xy]/g, function (_0x1457ef) {
                  var _0x5af270 = _0xc3b79a,
                      _0x8d288a = 0x10 * Math[_0x5af270(0x234)]() | 0x0;

                  return ('x' === _0x1457ef ? _0x8d288a : 0x3 & _0x8d288a | 0x8)[_0x5af270(0x436)](0x10);
                })[_0xc3b79a(0x3d9)](/-/gi, '');
              };
            },
            0x1afa: function (_0x551248) {
              function _0x531d7a() {}

              _0x551248['exports'] = function (_0x57afdb, _0x978bd, _0x5c44d2) {
                var _0x52ed22 = !0x1;

                return _0x5c44d2 = _0x5c44d2 || _0x531d7a, _0x1baba4['count'] = _0x57afdb, 0x0 === _0x57afdb ? _0x978bd() : _0x1baba4;

                function _0x1baba4(_0x27d8c3, _0x35f9c9) {
                  var _0x99d427 = a0_0x107f;
                  if (_0x1baba4[_0x99d427(0x1b2)] <= 0x0) throw new Error(_0x99d427(0x458));
                  --_0x1baba4['count'], _0x27d8c3 ? (_0x52ed22 = !0x0, _0x978bd(_0x27d8c3), _0x978bd = _0x5c44d2) : 0x0 !== _0x1baba4[_0x99d427(0x1b2)] || _0x52ed22 || _0x978bd(null, _0x35f9c9);
                }
              };
            },
            0x25f6: function (_0x50a53b) {
              var _0x3685ee = a0_0x107f;

              _0x50a53b[_0x3685ee(0x38d)] = function (_0x43920e, _0x288c0d, _0x330c75) {
                var _0x19aabf = _0x3685ee,
                    _0x2139f7 = _0x43920e['byteLength'];
                if (_0x288c0d = _0x288c0d || 0x0, _0x330c75 = _0x330c75 || _0x2139f7, _0x43920e['slice']) return _0x43920e[_0x19aabf(0x389)](_0x288c0d, _0x330c75);
                if (_0x288c0d < 0x0 && (_0x288c0d += _0x2139f7), _0x330c75 < 0x0 && (_0x330c75 += _0x2139f7), _0x330c75 > _0x2139f7 && (_0x330c75 = _0x2139f7), _0x288c0d >= _0x2139f7 || _0x288c0d >= _0x330c75 || 0x0 === _0x2139f7) return new ArrayBuffer(0x0);

                for (var _0x456f81 = new Uint8Array(_0x43920e), _0x159a8c = new Uint8Array(_0x330c75 - _0x288c0d), _0x1166a2 = _0x288c0d, _0x178010 = 0x0; _0x1166a2 < _0x330c75; _0x1166a2++, _0x178010++) _0x159a8c[_0x178010] = _0x456f81[_0x1166a2];

                return _0x159a8c['buffer'];
              };
            },
            0xbc2: function (_0x5b78bc) {
              var _0x43352a = a0_0x107f;

              function _0x29cee4(_0x261f69) {
                var _0x468889 = a0_0x107f;
                _0x261f69 = _0x261f69 || {}, this['ms'] = _0x261f69[_0x468889(0x2a3)] || 0x64, this[_0x468889(0x3ca)] = _0x261f69['max'] || 0x2710, this[_0x468889(0x1fe)] = _0x261f69[_0x468889(0x1fe)] || 0x2, this[_0x468889(0x340)] = _0x261f69[_0x468889(0x340)] > 0x0 && _0x261f69[_0x468889(0x340)] <= 0x1 ? _0x261f69[_0x468889(0x340)] : 0x0, this[_0x468889(0x3e8)] = 0x0;
              }

              _0x5b78bc[_0x43352a(0x38d)] = _0x29cee4, _0x29cee4[_0x43352a(0x1b3)]['duration'] = function () {
                var _0x499989 = _0x43352a,
                    _0x478752 = this['ms'] * Math[_0x499989(0x22b)](this['factor'], this[_0x499989(0x3e8)]++);

                if (this[_0x499989(0x340)]) {
                  var _0xfbfeb3 = Math[_0x499989(0x234)](),
                      _0x3edd9d = Math['floor'](_0xfbfeb3 * this['jitter'] * _0x478752);

                  _0x478752 = 0x0 == (0x1 & Math[_0x499989(0x330)](0xa * _0xfbfeb3)) ? _0x478752 - _0x3edd9d : _0x478752 + _0x3edd9d;
                }

                return 0x0 | Math[_0x499989(0x2a3)](_0x478752, this[_0x499989(0x3ca)]);
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x1ca)] = function () {
                var _0x5ccdcc = _0x43352a;
                this[_0x5ccdcc(0x3e8)] = 0x0;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x2d8)] = function (_0x1571f5) {
                this['ms'] = _0x1571f5;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x22e)] = function (_0x55fea9) {
                this['max'] = _0x55fea9;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x41b)] = function (_0x33deae) {
                this['jitter'] = _0x33deae;
              };
            },
            0xe78: function (_0x342b55, _0x15aef1) {
              !function (_0x5ca5d0) {
                var _0x4e53d8 = a0_0x107f;
                _0x15aef1['encode'] = function (_0x17bc2c) {
                  var _0x38597f = a0_0x107f,
                      _0x3697bc,
                      _0x27061e = new Uint8Array(_0x17bc2c),
                      _0x5c363c = _0x27061e[_0x38597f(0x1b1)],
                      _0x391fa0 = '';

                  for (_0x3697bc = 0x0; _0x3697bc < _0x5c363c; _0x3697bc += 0x3) _0x391fa0 += _0x5ca5d0[_0x27061e[_0x3697bc] >> 0x2], _0x391fa0 += _0x5ca5d0[(0x3 & _0x27061e[_0x3697bc]) << 0x4 | _0x27061e[_0x3697bc + 0x1] >> 0x4], _0x391fa0 += _0x5ca5d0[(0xf & _0x27061e[_0x3697bc + 0x1]) << 0x2 | _0x27061e[_0x3697bc + 0x2] >> 0x6], _0x391fa0 += _0x5ca5d0[0x3f & _0x27061e[_0x3697bc + 0x2]];

                  return _0x5c363c % 0x3 == 0x2 ? _0x391fa0 = _0x391fa0[_0x38597f(0x4a5)](0x0, _0x391fa0['length'] - 0x1) + '=' : _0x5c363c % 0x3 == 0x1 && (_0x391fa0 = _0x391fa0['substring'](0x0, _0x391fa0[_0x38597f(0x1b1)] - 0x2) + '=='), _0x391fa0;
                }, _0x15aef1[_0x4e53d8(0x3f1)] = function (_0xb226b8) {
                  var _0xb7099d = _0x4e53d8,
                      _0xb7ac92,
                      _0x1302bc,
                      _0x1bbd81,
                      _0x36b706,
                      _0x19b690,
                      _0x5d7f33 = 0.75 * _0xb226b8[_0xb7099d(0x1b1)],
                      _0x5a7049 = _0xb226b8[_0xb7099d(0x1b1)],
                      _0x14ec7c = 0x0;

                  '=' === _0xb226b8[_0xb226b8['length'] - 0x1] && (_0x5d7f33--, '=' === _0xb226b8[_0xb226b8[_0xb7099d(0x1b1)] - 0x2] && _0x5d7f33--);

                  var _0x4f2137 = new ArrayBuffer(_0x5d7f33),
                      _0x395387 = new Uint8Array(_0x4f2137);

                  for (_0xb7ac92 = 0x0; _0xb7ac92 < _0x5a7049; _0xb7ac92 += 0x4) _0x1302bc = _0x5ca5d0['indexOf'](_0xb226b8[_0xb7ac92]), _0x1bbd81 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x1]), _0x36b706 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x2]), _0x19b690 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x3]), _0x395387[_0x14ec7c++] = _0x1302bc << 0x2 | _0x1bbd81 >> 0x4, _0x395387[_0x14ec7c++] = (0xf & _0x1bbd81) << 0x4 | _0x36b706 >> 0x2, _0x395387[_0x14ec7c++] = (0x3 & _0x36b706) << 0x6 | 0x3f & _0x19b690;

                  return _0x4f2137;
                };
              }('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');
            },
            0x15ac: function (_0x4c14ff) {
              var _0x4848ef = a0_0x107f,
                  _0x5d5a96 = void 0x0 !== _0x5d5a96 ? _0x5d5a96 : 'undefined' != typeof WebKitBlobBuilder ? WebKitBlobBuilder : _0x4848ef(0x364) != typeof MSBlobBuilder ? MSBlobBuilder : _0x4848ef(0x364) != typeof MozBlobBuilder && MozBlobBuilder,
                  _0x335c22 = function () {
                var _0x57677d = _0x4848ef;

                try {
                  return 0x2 === new Blob(['hi'])[_0x57677d(0x318)];
                } catch (_0x4c6ce7) {
                  return !0x1;
                }
              }(),
                  _0x55a2c2 = _0x335c22 && function () {
                var _0x32c954 = _0x4848ef;

                try {
                  return 0x2 === new Blob([new Uint8Array([0x1, 0x2])])[_0x32c954(0x318)];
                } catch (_0x42c796) {
                  return !0x1;
                }
              }(),
                  _0x35de82 = _0x5d5a96 && _0x5d5a96[_0x4848ef(0x1b3)][_0x4848ef(0x22d)] && _0x5d5a96[_0x4848ef(0x1b3)][_0x4848ef(0x25b)];

              function _0x23ac3a(_0x4cf646) {
                var _0xde7d2b = _0x4848ef;
                return _0x4cf646[_0xde7d2b(0x435)](function (_0x38f16d) {
                  var _0x550b70 = _0xde7d2b;

                  if (_0x38f16d[_0x550b70(0x314)] instanceof ArrayBuffer) {
                    var _0x5aef95 = _0x38f16d['buffer'];

                    if (_0x38f16d[_0x550b70(0x3e1)] !== _0x5aef95[_0x550b70(0x3e1)]) {
                      var _0x5881db = new Uint8Array(_0x38f16d[_0x550b70(0x3e1)]);

                      _0x5881db['set'](new Uint8Array(_0x5aef95, _0x38f16d[_0x550b70(0x2e0)], _0x38f16d[_0x550b70(0x3e1)])), _0x5aef95 = _0x5881db[_0x550b70(0x314)];
                    }

                    return _0x5aef95;
                  }

                  return _0x38f16d;
                });
              }

              function _0x4ac2ab(_0x118149, _0x42476b) {
                var _0x606328 = _0x4848ef;
                _0x42476b = _0x42476b || {};

                var _0x2349b7 = new _0x5d5a96();

                return _0x23ac3a(_0x118149)[_0x606328(0x293)](function (_0x4bd571) {
                  var _0x270a97 = _0x606328;

                  _0x2349b7[_0x270a97(0x22d)](_0x4bd571);
                }), _0x42476b['type'] ? _0x2349b7[_0x606328(0x25b)](_0x42476b['type']) : _0x2349b7[_0x606328(0x25b)]();
              }

              function _0x542e9e(_0x11a239, _0x5bb24d) {
                return new Blob(_0x23ac3a(_0x11a239), _0x5bb24d || {});
              }

              _0x4848ef(0x364) != typeof Blob && (_0x4ac2ab['prototype'] = Blob[_0x4848ef(0x1b3)], _0x542e9e[_0x4848ef(0x1b3)] = Blob[_0x4848ef(0x1b3)]), _0x4c14ff[_0x4848ef(0x38d)] = _0x335c22 ? _0x55a2c2 ? Blob : _0x542e9e : _0x35de82 ? _0x4ac2ab : void 0x0;
            },
            0x17bd: function (_0x1fb229) {
              var _0xdaf75b = []['slice'];

              _0x1fb229['exports'] = function (_0x507317, _0x2698d9) {
                var _0x1e56eb = a0_0x107f;
                if (_0x1e56eb(0x268) == typeof _0x2698d9 && (_0x2698d9 = _0x507317[_0x2698d9]), _0x1e56eb(0x17d) != typeof _0x2698d9) throw new Error('bind()\x20requires\x20a\x20function');

                var _0x3eb2ef = _0xdaf75b[_0x1e56eb(0x229)](arguments, 0x2);

                return function () {
                  var _0x20ec92 = _0x1e56eb;
                  return _0x2698d9['apply'](_0x507317, _0x3eb2ef[_0x20ec92(0x23c)](_0xdaf75b[_0x20ec92(0x229)](arguments)));
                };
              };
            },
            0x223f: function (_0x363bb9) {
              var _0x1dd322 = a0_0x107f;

              function _0x104721(_0x52da09) {
                if (_0x52da09) return function (_0x45f160) {
                  var _0x1fdd4d = a0_0x107f;

                  for (var _0x497234 in _0x104721[_0x1fdd4d(0x1b3)]) _0x45f160[_0x497234] = _0x104721[_0x1fdd4d(0x1b3)][_0x497234];

                  return _0x45f160;
                }(_0x52da09);
              }

              _0x363bb9[_0x1dd322(0x38d)] = _0x104721, _0x104721[_0x1dd322(0x1b3)]['on'] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x466)] = function (_0x3e057f, _0x2532c6) {
                var _0x45d9bd = _0x1dd322;
                return this[_0x45d9bd(0x3b6)] = this[_0x45d9bd(0x3b6)] || {}, (this[_0x45d9bd(0x3b6)]['$' + _0x3e057f] = this[_0x45d9bd(0x3b6)]['$' + _0x3e057f] || [])['push'](_0x2532c6), this;
              }, _0x104721['prototype'][_0x1dd322(0x319)] = function (_0x5e2d12, _0x550fb0) {
                function _0x5b774f() {
                  var _0x72bfe7 = a0_0x107f;
                  this['off'](_0x5e2d12, _0x5b774f), _0x550fb0[_0x72bfe7(0x394)](this, arguments);
                }

                return _0x5b774f['fn'] = _0x550fb0, this['on'](_0x5e2d12, _0x5b774f), this;
              }, _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x4bf)] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x198)] = _0x104721['prototype'][_0x1dd322(0x146)] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x1de)] = function (_0x439a43, _0x484724) {
                var _0x464cd4 = _0x1dd322;
                if (this[_0x464cd4(0x3b6)] = this[_0x464cd4(0x3b6)] || {}, 0x0 == arguments[_0x464cd4(0x1b1)]) return this['_callbacks'] = {}, this;

                var _0x4cf28c,
                    _0x1e9395 = this['_callbacks']['$' + _0x439a43];

                if (!_0x1e9395) return this;
                if (0x1 == arguments[_0x464cd4(0x1b1)]) return delete this[_0x464cd4(0x3b6)]['$' + _0x439a43], this;

                for (var _0x52f1c9 = 0x0; _0x52f1c9 < _0x1e9395[_0x464cd4(0x1b1)]; _0x52f1c9++) if ((_0x4cf28c = _0x1e9395[_0x52f1c9]) === _0x484724 || _0x4cf28c['fn'] === _0x484724) {
                  _0x1e9395[_0x464cd4(0x479)](_0x52f1c9, 0x1);

                  break;
                }

                return 0x0 === _0x1e9395[_0x464cd4(0x1b1)] && delete this[_0x464cd4(0x3b6)]['$' + _0x439a43], this;
              }, _0x104721[_0x1dd322(0x1b3)]['emit'] = function (_0x22545f) {
                var _0x4b2e53 = _0x1dd322;
                this[_0x4b2e53(0x3b6)] = this[_0x4b2e53(0x3b6)] || {};

                for (var _0x90d38a = new Array(arguments[_0x4b2e53(0x1b1)] - 0x1), _0x1f0b57 = this[_0x4b2e53(0x3b6)]['$' + _0x22545f], _0x15f8db = 0x1; _0x15f8db < arguments['length']; _0x15f8db++) _0x90d38a[_0x15f8db - 0x1] = arguments[_0x15f8db];

                if (_0x1f0b57) {
                  _0x15f8db = 0x0;

                  for (var _0x36d6b3 = (_0x1f0b57 = _0x1f0b57['slice'](0x0))['length']; _0x15f8db < _0x36d6b3; ++_0x15f8db) _0x1f0b57[_0x15f8db][_0x4b2e53(0x394)](this, _0x90d38a);
                }

                return this;
              }, _0x104721['prototype'][_0x1dd322(0x4c3)] = function (_0x3b4a39) {
                var _0x14586d = _0x1dd322;
                return this['_callbacks'] = this['_callbacks'] || {}, this[_0x14586d(0x3b6)]['$' + _0x3b4a39] || [];
              }, _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x358)] = function (_0x4879f4) {
                var _0x284303 = _0x1dd322;
                return !!this[_0x284303(0x4c3)](_0x4879f4)[_0x284303(0x1b1)];
              };
            },
            0xf15: function (_0x218f40) {
              _0x218f40['exports'] = function (_0x394c07, _0xc0f761) {
                var _0x3f07a4 = a0_0x107f,
                    _0x3198bc = function () {};

                _0x3198bc['prototype'] = _0xc0f761[_0x3f07a4(0x1b3)], _0x394c07[_0x3f07a4(0x1b3)] = new _0x3198bc(), _0x394c07['prototype']['constructor'] = _0x394c07;
              };
            },
            0x4cb: function (_0x574543, _0xa1575a, _0x18c2f6) {
              var _0x17322c = a0_0x107f;

              function _0x2fe92a() {
                var _0x25a230 = a0_0x107f,
                    _0x8024cb;

                try {
                  _0x8024cb = _0xa1575a['storage'][_0x25a230(0x469)];
                } catch (_0x10c5fc) {}

                return !_0x8024cb && _0x25a230(0x364) != typeof process && 'env' in process && (_0x8024cb = process[_0x25a230(0x1be)][_0x25a230(0x16f)]), _0x8024cb;
              }

              (_0xa1575a = _0x574543['exports'] = _0x18c2f6(0x67a))[_0x17322c(0x42d)] = function () {
                var _0x557b4b = _0x17322c;
                return 'object' == typeof console && console['log'] && Function[_0x557b4b(0x1b3)][_0x557b4b(0x394)][_0x557b4b(0x229)](console[_0x557b4b(0x42d)], console, arguments);
              }, _0xa1575a[_0x17322c(0x3c6)] = function (_0xa78019) {
                var _0x344d05 = _0x17322c,
                    _0x378331 = this['useColors'];

                if (_0xa78019[0x0] = (_0x378331 ? '%c' : '') + this[_0x344d05(0x1bc)] + (_0x378331 ? _0x344d05(0x209) : '\x20') + _0xa78019[0x0] + (_0x378331 ? _0x344d05(0x3da) : '\x20') + '+' + _0xa1575a['humanize'](this[_0x344d05(0x230)]), _0x378331) {
                  var _0x1f60b1 = _0x344d05(0x26c) + this[_0x344d05(0x138)];

                  _0xa78019[_0x344d05(0x479)](0x1, 0x0, _0x1f60b1, _0x344d05(0x400));

                  var _0x347d7f = 0x0,
                      _0x57be41 = 0x0;
                  _0xa78019[0x0][_0x344d05(0x3d9)](/%[a-zA-Z%]/g, function (_0x24a5d5) {
                    '%%' !== _0x24a5d5 && (_0x347d7f++, '%c' === _0x24a5d5 && (_0x57be41 = _0x347d7f));
                  }), _0xa78019[_0x344d05(0x479)](_0x57be41, 0x0, _0x1f60b1);
                }
              }, _0xa1575a['save'] = function (_0x266aa6) {
                var _0x11a64f = _0x17322c;

                try {
                  null == _0x266aa6 ? _0xa1575a[_0x11a64f(0x344)][_0x11a64f(0x2dd)](_0x11a64f(0x469)) : _0xa1575a[_0x11a64f(0x344)][_0x11a64f(0x469)] = _0x266aa6;
                } catch (_0x222c45) {}
              }, _0xa1575a[_0x17322c(0x3e6)] = _0x2fe92a, _0xa1575a[_0x17322c(0x299)] = function () {
                var _0x42d0ea = _0x17322c;
                return !(_0x42d0ea(0x364) == typeof window || !window[_0x42d0ea(0x2d2)] || _0x42d0ea(0x1dd) !== window['process'][_0x42d0ea(0x156)]) || (_0x42d0ea(0x364) == typeof navigator || !navigator[_0x42d0ea(0x323)] || !navigator[_0x42d0ea(0x323)][_0x42d0ea(0x317)]()[_0x42d0ea(0x2b5)](/(edge|trident)\/(\d+)/)) && (_0x42d0ea(0x364) != typeof document && document[_0x42d0ea(0x2cd)] && document[_0x42d0ea(0x2cd)][_0x42d0ea(0x239)] && document[_0x42d0ea(0x2cd)][_0x42d0ea(0x239)][_0x42d0ea(0x4b2)] || _0x42d0ea(0x364) != typeof window && window[_0x42d0ea(0x228)] && (window[_0x42d0ea(0x228)][_0x42d0ea(0x3b2)] || window[_0x42d0ea(0x228)][_0x42d0ea(0x272)] && window[_0x42d0ea(0x228)][_0x42d0ea(0x34d)]) || _0x42d0ea(0x364) != typeof navigator && navigator['userAgent'] && navigator[_0x42d0ea(0x323)]['toLowerCase']()[_0x42d0ea(0x2b5)](/firefox\/(\d+)/) && parseInt(RegExp['$1'], 0xa) >= 0x1f || _0x42d0ea(0x364) != typeof navigator && navigator[_0x42d0ea(0x323)] && navigator[_0x42d0ea(0x323)]['toLowerCase']()[_0x42d0ea(0x2b5)](/applewebkit\/(\d+)/));
              }, _0xa1575a[_0x17322c(0x344)] = _0x17322c(0x364) != typeof chrome && void 0x0 !== chrome[_0x17322c(0x344)] ? chrome[_0x17322c(0x344)][_0x17322c(0x444)] : function () {
                var _0x35eefd = _0x17322c;

                try {
                  return window[_0x35eefd(0x260)];
                } catch (_0x4b4baa) {}
              }(), _0xa1575a[_0x17322c(0x176)] = [_0x17322c(0x13f), _0x17322c(0x45a), _0x17322c(0x3d4), _0x17322c(0x4b4), '#0066CC', _0x17322c(0x440), '#0099CC', _0x17322c(0x213), _0x17322c(0x140), _0x17322c(0x109), _0x17322c(0x2ad), '#00CC99', _0x17322c(0x42a), _0x17322c(0x4ad), _0x17322c(0x48e), _0x17322c(0x28c), _0x17322c(0x4a0), _0x17322c(0x448), _0x17322c(0x188), '#3366FF', _0x17322c(0x184), _0x17322c(0x21a), '#33CC00', _0x17322c(0x47c), '#33CC66', _0x17322c(0x334), '#33CCCC', _0x17322c(0x27c), _0x17322c(0x49c), _0x17322c(0x199), _0x17322c(0x240), '#6633FF', _0x17322c(0x22f), _0x17322c(0x4b0), _0x17322c(0x4a2), '#9900FF', _0x17322c(0x26d), _0x17322c(0x368), _0x17322c(0x3c0), _0x17322c(0x422), _0x17322c(0x3b3), _0x17322c(0x2da), _0x17322c(0x1a4), '#CC0099', '#CC00CC', _0x17322c(0x39e), _0x17322c(0x2b0), _0x17322c(0x15c), _0x17322c(0x414), _0x17322c(0x3fb), _0x17322c(0x43e), _0x17322c(0x474), '#CC6600', '#CC6633', _0x17322c(0x185), '#CC9933', _0x17322c(0x1b9), _0x17322c(0x2ed), _0x17322c(0x193), _0x17322c(0x1c2), _0x17322c(0x4af), '#FF0099', _0x17322c(0x3ec), _0x17322c(0x48d), _0x17322c(0x3d3), _0x17322c(0x1dc), '#FF3366', _0x17322c(0x105), _0x17322c(0x2ff), _0x17322c(0x124), _0x17322c(0x25c), _0x17322c(0x204), _0x17322c(0x3fa), '#FF9933', _0x17322c(0x190), '#FFCC33'], _0xa1575a[_0x17322c(0x49d)]['j'] = function (_0x5c2a23) {
                var _0x13d634 = _0x17322c;

                try {
                  return JSON[_0x13d634(0x296)](_0x5c2a23);
                } catch (_0x130e2a) {
                  return _0x13d634(0x135) + _0x130e2a[_0x13d634(0x3dd)];
                }
              }, _0xa1575a['enable'](_0x2fe92a());
            },
            0x67a: function (_0x51829d, _0x598d9e, _0x146891) {
              var _0x4083cd = a0_0x107f;

              function _0x673c19(_0x24a63f) {
                var _0x4f3575 = a0_0x107f,
                    _0x30415d;

                function _0x374dfe() {
                  var _0x270fa0 = a0_0x107f;

                  if (_0x374dfe[_0x270fa0(0x15b)]) {
                    var _0x478852 = _0x374dfe,
                        _0x3e4d6b = +new Date(),
                        _0xfd3195 = _0x3e4d6b - (_0x30415d || _0x3e4d6b);

                    _0x478852[_0x270fa0(0x230)] = _0xfd3195, _0x478852[_0x270fa0(0x399)] = _0x30415d, _0x478852['curr'] = _0x3e4d6b, _0x30415d = _0x3e4d6b;

                    for (var _0x23b577 = new Array(arguments[_0x270fa0(0x1b1)]), _0x55fb43 = 0x0; _0x55fb43 < _0x23b577[_0x270fa0(0x1b1)]; _0x55fb43++) _0x23b577[_0x55fb43] = arguments[_0x55fb43];

                    _0x23b577[0x0] = _0x598d9e[_0x270fa0(0x246)](_0x23b577[0x0]), _0x270fa0(0x268) != typeof _0x23b577[0x0] && _0x23b577['unshift']('%O');
                    var _0x2ffaed = 0x0;
                    _0x23b577[0x0] = _0x23b577[0x0][_0x270fa0(0x3d9)](/%([a-zA-Z%])/g, function (_0x1c66e0, _0x49d190) {
                      var _0x754202 = _0x270fa0;
                      if ('%%' === _0x1c66e0) return _0x1c66e0;
                      _0x2ffaed++;
                      var _0x36b16a = _0x598d9e['formatters'][_0x49d190];

                      if (_0x754202(0x17d) == typeof _0x36b16a) {
                        var _0x9dcb54 = _0x23b577[_0x2ffaed];
                        _0x1c66e0 = _0x36b16a['call'](_0x478852, _0x9dcb54), _0x23b577[_0x754202(0x479)](_0x2ffaed, 0x1), _0x2ffaed--;
                      }

                      return _0x1c66e0;
                    }), _0x598d9e[_0x270fa0(0x3c6)][_0x270fa0(0x229)](_0x478852, _0x23b577);

                    var _0x2ef4d4 = _0x374dfe[_0x270fa0(0x42d)] || _0x598d9e['log'] || console[_0x270fa0(0x42d)][_0x270fa0(0x1f3)](console);

                    _0x2ef4d4['apply'](_0x478852, _0x23b577);
                  }
                }

                return _0x374dfe[_0x4f3575(0x1bc)] = _0x24a63f, _0x374dfe[_0x4f3575(0x15b)] = _0x598d9e[_0x4f3575(0x15b)](_0x24a63f), _0x374dfe[_0x4f3575(0x299)] = _0x598d9e[_0x4f3575(0x299)](), _0x374dfe[_0x4f3575(0x138)] = function (_0x1c5311) {
                  var _0x18bd63 = _0x4f3575,
                      _0x5c72a6,
                      _0x45145b = 0x0;

                  for (_0x5c72a6 in _0x1c5311) _0x45145b = (_0x45145b << 0x5) - _0x45145b + _0x1c5311['charCodeAt'](_0x5c72a6), _0x45145b |= 0x0;

                  return _0x598d9e[_0x18bd63(0x176)][Math[_0x18bd63(0x2f0)](_0x45145b) % _0x598d9e['colors'][_0x18bd63(0x1b1)]];
                }(_0x24a63f), _0x374dfe[_0x4f3575(0x1eb)] = _0x42509c, _0x4f3575(0x17d) == typeof _0x598d9e[_0x4f3575(0x150)] && _0x598d9e[_0x4f3575(0x150)](_0x374dfe), _0x598d9e[_0x4f3575(0x27b)][_0x4f3575(0x41c)](_0x374dfe), _0x374dfe;
              }

              function _0x42509c() {
                var _0x226b97 = a0_0x107f,
                    _0x2d7fec = _0x598d9e[_0x226b97(0x27b)][_0x226b97(0x22a)](this);

                return -0x1 !== _0x2d7fec && (_0x598d9e[_0x226b97(0x27b)]['splice'](_0x2d7fec, 0x1), !0x0);
              }

              (_0x598d9e = _0x51829d[_0x4083cd(0x38d)] = _0x673c19['debug'] = _0x673c19['default'] = _0x673c19)[_0x4083cd(0x246)] = function (_0x156fa8) {
                var _0x409e8d = _0x4083cd;
                return _0x156fa8 instanceof Error ? _0x156fa8['stack'] || _0x156fa8[_0x409e8d(0x3dd)] : _0x156fa8;
              }, _0x598d9e['disable'] = function () {
                var _0x13d4ee = _0x4083cd;

                _0x598d9e[_0x13d4ee(0x31f)]('');
              }, _0x598d9e[_0x4083cd(0x31f)] = function (_0x3789dd) {
                var _0xba5c7d = _0x4083cd,
                    _0x54615f;

                _0x598d9e[_0xba5c7d(0x34f)](_0x3789dd), _0x598d9e[_0xba5c7d(0x231)] = [], _0x598d9e['skips'] = [];

                var _0x2d5086 = ('string' == typeof _0x3789dd ? _0x3789dd : '')[_0xba5c7d(0x460)](/[\s,]+/),
                    _0x1bd7e1 = _0x2d5086[_0xba5c7d(0x1b1)];

                for (_0x54615f = 0x0; _0x54615f < _0x1bd7e1; _0x54615f++) _0x2d5086[_0x54615f] && ('-' === (_0x3789dd = _0x2d5086[_0x54615f][_0xba5c7d(0x3d9)](/\*/g, _0xba5c7d(0x157)))[0x0] ? _0x598d9e['skips'][_0xba5c7d(0x41c)](new RegExp('^' + _0x3789dd['substr'](0x1) + '$')) : _0x598d9e[_0xba5c7d(0x231)][_0xba5c7d(0x41c)](new RegExp('^' + _0x3789dd + '$')));

                for (_0x54615f = 0x0; _0x54615f < _0x598d9e[_0xba5c7d(0x27b)]['length']; _0x54615f++) {
                  var _0x5012a5 = _0x598d9e[_0xba5c7d(0x27b)][_0x54615f];

                  _0x5012a5[_0xba5c7d(0x15b)] = _0x598d9e[_0xba5c7d(0x15b)](_0x5012a5[_0xba5c7d(0x1bc)]);
                }
              }, _0x598d9e['enabled'] = function (_0x293022) {
                var _0x9bc95d = _0x4083cd;
                if ('*' === _0x293022[_0x293022[_0x9bc95d(0x1b1)] - 0x1]) return !0x0;

                var _0x377011, _0x178ce5;

                for (_0x377011 = 0x0, _0x178ce5 = _0x598d9e['skips']['length']; _0x377011 < _0x178ce5; _0x377011++) if (_0x598d9e[_0x9bc95d(0x3f8)][_0x377011]['test'](_0x293022)) return !0x1;

                for (_0x377011 = 0x0, _0x178ce5 = _0x598d9e[_0x9bc95d(0x231)][_0x9bc95d(0x1b1)]; _0x377011 < _0x178ce5; _0x377011++) if (_0x598d9e[_0x9bc95d(0x231)][_0x377011][_0x9bc95d(0x4c7)](_0x293022)) return !0x0;

                return !0x1;
              }, _0x598d9e[_0x4083cd(0x10f)] = _0x146891(0x1e90), _0x598d9e[_0x4083cd(0x27b)] = [], _0x598d9e[_0x4083cd(0x231)] = [], _0x598d9e[_0x4083cd(0x3f8)] = [], _0x598d9e[_0x4083cd(0x49d)] = {};
            },
            0xddd: function (_0x3f7d19) {
              var _0x382911 = a0_0x107f;
              _0x3f7d19[_0x382911(0x38d)] = _0x382911(0x364) != typeof self ? self : _0x382911(0x364) != typeof window ? window : Function('return\x20this')();
            },
            0x175f: function (_0x5e13b4, _0x30d580, _0x2b77a8) {
              var _0x44c258 = a0_0x107f;
              _0x5e13b4[_0x44c258(0x38d)] = _0x2b77a8(0x890), _0x5e13b4[_0x44c258(0x38d)]['parser'] = _0x2b77a8(0x1167);
            },
            0x890: function (_0xcdce7b, _0x25c680, _0x4842d3) {
              var _0x2c78b1 = a0_0x107f,
                  _0x1ddcdd = _0x4842d3(0xd18),
                  _0x5ed50a = _0x4842d3(0x223f),
                  _0x4918c6 = _0x4842d3(0x4cb)(_0x2c78b1(0x349)),
                  _0x41f7c1 = _0x4842d3(0x1cbb),
                  _0x5a3c1f = _0x4842d3(0x1167),
                  _0xe249ce = _0x4842d3(0x105b),
                  _0x1d2803 = _0x4842d3(0x726);

              function _0x1129b2(_0x1910a1, _0x3f2b02) {
                var _0x299568 = _0x2c78b1;
                if (!(this instanceof _0x1129b2)) return new _0x1129b2(_0x1910a1, _0x3f2b02);
                _0x3f2b02 = _0x3f2b02 || {}, _0x1910a1 && _0x299568(0x33c) == typeof _0x1910a1 && (_0x3f2b02 = _0x1910a1, _0x1910a1 = null), _0x1910a1 ? (_0x1910a1 = _0xe249ce(_0x1910a1), _0x3f2b02[_0x299568(0x34a)] = _0x1910a1[_0x299568(0x395)], _0x3f2b02[_0x299568(0x487)] = _0x299568(0x312) === _0x1910a1[_0x299568(0x1c7)] || 'wss' === _0x1910a1[_0x299568(0x1c7)], _0x3f2b02['port'] = _0x1910a1[_0x299568(0x4be)], _0x1910a1[_0x299568(0x189)] && (_0x3f2b02['query'] = _0x1910a1['query'])) : _0x3f2b02[_0x299568(0x395)] && (_0x3f2b02['hostname'] = _0xe249ce(_0x3f2b02[_0x299568(0x395)])['host']), this['secure'] = null != _0x3f2b02[_0x299568(0x487)] ? _0x3f2b02['secure'] : _0x299568(0x364) != typeof location && _0x299568(0x1d9) === location['protocol'], _0x3f2b02[_0x299568(0x34a)] && !_0x3f2b02[_0x299568(0x4be)] && (_0x3f2b02[_0x299568(0x4be)] = this[_0x299568(0x487)] ? _0x299568(0x3f5) : '80'), this[_0x299568(0x3a2)] = _0x3f2b02['agent'] || !0x1, this[_0x299568(0x34a)] = _0x3f2b02[_0x299568(0x34a)] || (_0x299568(0x364) != typeof location ? location[_0x299568(0x34a)] : 'localhost'), this['port'] = _0x3f2b02[_0x299568(0x4be)] || (_0x299568(0x364) != typeof location && location[_0x299568(0x4be)] ? location['port'] : this[_0x299568(0x487)] ? 0x1bb : 0x50), this[_0x299568(0x189)] = _0x3f2b02[_0x299568(0x189)] || {}, 'string' == typeof this[_0x299568(0x189)] && (this[_0x299568(0x189)] = _0x1d2803[_0x299568(0x3f1)](this[_0x299568(0x189)])), this[_0x299568(0x21c)] = !0x1 !== _0x3f2b02[_0x299568(0x21c)], this[_0x299568(0x1ad)] = (_0x3f2b02[_0x299568(0x1ad)] || _0x299568(0x2fa))[_0x299568(0x3d9)](/\/$/, '') + '/', this[_0x299568(0x2b9)] = !!_0x3f2b02[_0x299568(0x2b9)], this[_0x299568(0x210)] = !0x1 !== _0x3f2b02[_0x299568(0x210)], this[_0x299568(0xed)] = !!_0x3f2b02[_0x299568(0xed)], this['enablesXDR'] = !!_0x3f2b02[_0x299568(0x403)], this[_0x299568(0x26b)] = !0x1 !== _0x3f2b02['withCredentials'], this[_0x299568(0x4b3)] = _0x3f2b02[_0x299568(0x4b3)] || 't', this['timestampRequests'] = _0x3f2b02[_0x299568(0x153)], this[_0x299568(0x24b)] = _0x3f2b02['transports'] || [_0x299568(0x396), _0x299568(0x38b)], this[_0x299568(0x12f)] = _0x3f2b02[_0x299568(0x12f)] || {}, this[_0x299568(0x3d0)] = '', this['writeBuffer'] = [], this[_0x299568(0x45f)] = 0x0, this[_0x299568(0x116)] = _0x3f2b02[_0x299568(0x116)] || 0x34b, this[_0x299568(0x35a)] = _0x3f2b02[_0x299568(0x35a)] || !0x1, this[_0x299568(0x286)] = null, this[_0x299568(0x2cc)] = _0x3f2b02['onlyBinaryUpgrades'], this[_0x299568(0x2b6)] = !0x1 !== _0x3f2b02[_0x299568(0x2b6)] && (_0x3f2b02['perMessageDeflate'] || {}), !0x0 === this[_0x299568(0x2b6)] && (this[_0x299568(0x2b6)] = {}), this['perMessageDeflate'] && null == this['perMessageDeflate'][_0x299568(0x219)] && (this[_0x299568(0x2b6)][_0x299568(0x219)] = 0x400), this[_0x299568(0x1f4)] = _0x3f2b02[_0x299568(0x1f4)] || void 0x0, this['key'] = _0x3f2b02[_0x299568(0x1a9)] || void 0x0, this[_0x299568(0x4c6)] = _0x3f2b02[_0x299568(0x4c6)] || void 0x0, this['cert'] = _0x3f2b02[_0x299568(0x1db)] || void 0x0, this['ca'] = _0x3f2b02['ca'] || void 0x0, this['ciphers'] = _0x3f2b02[_0x299568(0x2ac)] || void 0x0, this[_0x299568(0x19e)] = void 0x0 === _0x3f2b02[_0x299568(0x19e)] || _0x3f2b02[_0x299568(0x19e)], this['forceNode'] = !!_0x3f2b02['forceNode'], this[_0x299568(0x17a)] = 'undefined' != typeof navigator && 'string' == typeof navigator[_0x299568(0x20d)] && 'reactnative' === navigator[_0x299568(0x20d)][_0x299568(0x317)](), ('undefined' == typeof self || this[_0x299568(0x17a)]) && (_0x3f2b02[_0x299568(0xf3)] && Object[_0x299568(0x44d)](_0x3f2b02[_0x299568(0xf3)])[_0x299568(0x1b1)] > 0x0 && (this[_0x299568(0xf3)] = _0x3f2b02[_0x299568(0xf3)]), _0x3f2b02[_0x299568(0x2e4)] && (this[_0x299568(0x2e4)] = _0x3f2b02['localAddress'])), this['id'] = null, this[_0x299568(0x295)] = null, this[_0x299568(0x373)] = null, this[_0x299568(0x30a)] = null, this[_0x299568(0x154)] = null, this[_0x299568(0x2a5)] = null, this[_0x299568(0x412)]();
              }

              _0xcdce7b[_0x2c78b1(0x38d)] = _0x1129b2, _0x1129b2['priorWebsocketSuccess'] = !0x1, _0x5ed50a(_0x1129b2[_0x2c78b1(0x1b3)]), _0x1129b2[_0x2c78b1(0x1c7)] = _0x5a3c1f[_0x2c78b1(0x1c7)], _0x1129b2[_0x2c78b1(0x355)] = _0x1129b2, _0x1129b2[_0x2c78b1(0x23f)] = _0x4842d3(0x1960), _0x1129b2['transports'] = _0x4842d3(0xd18), _0x1129b2[_0x2c78b1(0x3b0)] = _0x4842d3(0x1167), _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x40b)] = function (_0x1fd5f6) {
                var _0x4fc8a7 = _0x2c78b1;

                _0x4918c6(_0x4fc8a7(0x19b), _0x1fd5f6);

                var _0x5bd8a1 = function (_0x1d6d6b) {
                  var _0x38714b = _0x4fc8a7,
                      _0x38a2f2 = {};

                  for (var _0x1f3d0b in _0x1d6d6b) _0x1d6d6b[_0x38714b(0x32a)](_0x1f3d0b) && (_0x38a2f2[_0x1f3d0b] = _0x1d6d6b[_0x1f3d0b]);

                  return _0x38a2f2;
                }(this[_0x4fc8a7(0x189)]);

                _0x5bd8a1[_0x4fc8a7(0x4a3)] = _0x5a3c1f[_0x4fc8a7(0x1c7)], _0x5bd8a1[_0x4fc8a7(0x287)] = _0x1fd5f6;

                var _0x382553 = this[_0x4fc8a7(0x12f)][_0x1fd5f6] || {};

                return this['id'] && (_0x5bd8a1[_0x4fc8a7(0x36b)] = this['id']), new _0x1ddcdd[_0x1fd5f6]({
                  'query': _0x5bd8a1,
                  'socket': this,
                  'agent': _0x382553[_0x4fc8a7(0x3a2)] || this[_0x4fc8a7(0x3a2)],
                  'hostname': _0x382553[_0x4fc8a7(0x34a)] || this['hostname'],
                  'port': _0x382553[_0x4fc8a7(0x4be)] || this[_0x4fc8a7(0x4be)],
                  'secure': _0x382553[_0x4fc8a7(0x487)] || this['secure'],
                  'path': _0x382553[_0x4fc8a7(0x1ad)] || this[_0x4fc8a7(0x1ad)],
                  'forceJSONP': _0x382553[_0x4fc8a7(0x2b9)] || this[_0x4fc8a7(0x2b9)],
                  'jsonp': _0x382553[_0x4fc8a7(0x210)] || this['jsonp'],
                  'forceBase64': _0x382553[_0x4fc8a7(0xed)] || this[_0x4fc8a7(0xed)],
                  'enablesXDR': _0x382553[_0x4fc8a7(0x403)] || this[_0x4fc8a7(0x403)],
                  'withCredentials': _0x382553[_0x4fc8a7(0x26b)] || this[_0x4fc8a7(0x26b)],
                  'timestampRequests': _0x382553[_0x4fc8a7(0x153)] || this[_0x4fc8a7(0x153)],
                  'timestampParam': _0x382553[_0x4fc8a7(0x4b3)] || this[_0x4fc8a7(0x4b3)],
                  'policyPort': _0x382553['policyPort'] || this[_0x4fc8a7(0x116)],
                  'pfx': _0x382553['pfx'] || this[_0x4fc8a7(0x1f4)],
                  'key': _0x382553[_0x4fc8a7(0x1a9)] || this[_0x4fc8a7(0x1a9)],
                  'passphrase': _0x382553[_0x4fc8a7(0x4c6)] || this[_0x4fc8a7(0x4c6)],
                  'cert': _0x382553[_0x4fc8a7(0x1db)] || this[_0x4fc8a7(0x1db)],
                  'ca': _0x382553['ca'] || this['ca'],
                  'ciphers': _0x382553['ciphers'] || this['ciphers'],
                  'rejectUnauthorized': _0x382553[_0x4fc8a7(0x19e)] || this[_0x4fc8a7(0x19e)],
                  'perMessageDeflate': _0x382553['perMessageDeflate'] || this['perMessageDeflate'],
                  'extraHeaders': _0x382553[_0x4fc8a7(0xf3)] || this[_0x4fc8a7(0xf3)],
                  'forceNode': _0x382553['forceNode'] || this[_0x4fc8a7(0x43f)],
                  'localAddress': _0x382553[_0x4fc8a7(0x2e4)] || this[_0x4fc8a7(0x2e4)],
                  'requestTimeout': _0x382553['requestTimeout'] || this['requestTimeout'],
                  'protocols': _0x382553[_0x4fc8a7(0x253)] || void 0x0,
                  'isReactNative': this['isReactNative']
                });
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x412)] = function () {
                var _0x11919f = _0x2c78b1,
                    _0x3eb5e3;

                if (this[_0x11919f(0x35a)] && _0x1129b2[_0x11919f(0x494)] && -0x1 !== this['transports']['indexOf'](_0x11919f(0x38b))) _0x3eb5e3 = _0x11919f(0x38b);else {
                  if (0x0 === this[_0x11919f(0x24b)]['length']) {
                    var _0x91f976 = this;

                    return void setTimeout(function () {
                      var _0x2a0057 = _0x11919f;

                      _0x91f976[_0x2a0057(0x24e)](_0x2a0057(0x122), _0x2a0057(0x315));
                    }, 0x0);
                  }

                  _0x3eb5e3 = this[_0x11919f(0x24b)][0x0];
                }
                this[_0x11919f(0x3d0)] = _0x11919f(0x163);

                try {
                  _0x3eb5e3 = this['createTransport'](_0x3eb5e3);
                } catch (_0xdb8f78) {
                  return this[_0x11919f(0x24b)][_0x11919f(0x18d)](), void this[_0x11919f(0x412)]();
                }

                _0x3eb5e3['open'](), this[_0x11919f(0x464)](_0x3eb5e3);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x464)] = function (_0x27a284) {
                var _0x53f4b3 = _0x2c78b1;

                _0x4918c6(_0x53f4b3(0x208), _0x27a284[_0x53f4b3(0x32f)]);

                var _0x305917 = this;

                this[_0x53f4b3(0x287)] && (_0x4918c6('clearing\x20existing\x20transport\x20%s', this[_0x53f4b3(0x287)][_0x53f4b3(0x32f)]), this[_0x53f4b3(0x287)][_0x53f4b3(0x146)]()), this[_0x53f4b3(0x287)] = _0x27a284, _0x27a284['on'](_0x53f4b3(0x266), function () {
                  _0x305917['onDrain']();
                })['on'](_0x53f4b3(0x162), function (_0x22d5e8) {
                  var _0x52b5d3 = _0x53f4b3;

                  _0x305917[_0x52b5d3(0x347)](_0x22d5e8);
                })['on'](_0x53f4b3(0x122), function (_0x36e42a) {
                  var _0x473450 = _0x53f4b3;

                  _0x305917[_0x473450(0x2f4)](_0x36e42a);
                })['on'](_0x53f4b3(0x166), function () {
                  var _0x230c08 = _0x53f4b3;

                  _0x305917[_0x230c08(0x449)](_0x230c08(0x1cf));
                });
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x13d)] = function (_0x3c4583) {
                var _0x3e7dfb = _0x2c78b1;

                _0x4918c6(_0x3e7dfb(0x17c), _0x3c4583);

                var _0x265b3b = this[_0x3e7dfb(0x40b)](_0x3c4583, {
                  'probe': 0x1
                }),
                    _0x236ca4 = !0x1,
                    _0x528962 = this;

                function _0x41cad1() {
                  var _0x97e4e = _0x3e7dfb;

                  if (_0x528962[_0x97e4e(0x2cc)]) {
                    var _0x39b833 = !this['supportsBinary'] && _0x528962[_0x97e4e(0x287)][_0x97e4e(0x192)];

                    _0x236ca4 = _0x236ca4 || _0x39b833;
                  }

                  _0x236ca4 || (_0x4918c6('probe\x20transport\x20\x22%s\x22\x20opened', _0x3c4583), _0x265b3b[_0x97e4e(0x262)]([{
                    'type': _0x97e4e(0x477),
                    'data': _0x97e4e(0x13d)
                  }]), _0x265b3b[_0x97e4e(0x319)](_0x97e4e(0x162), function (_0x55684a) {
                    var _0x589511 = _0x97e4e;

                    if (!_0x236ca4) {
                      if ('pong' === _0x55684a['type'] && 'probe' === _0x55684a[_0x589511(0x1c5)]) {
                        if (_0x4918c6('probe\x20transport\x20\x22%s\x22\x20pong', _0x3c4583), _0x528962[_0x589511(0x36d)] = !0x0, _0x528962[_0x589511(0x24e)](_0x589511(0x36d), _0x265b3b), !_0x265b3b) return;
                        _0x1129b2[_0x589511(0x494)] = _0x589511(0x38b) === _0x265b3b[_0x589511(0x32f)], _0x4918c6(_0x589511(0x132), _0x528962[_0x589511(0x287)]['name']), _0x528962[_0x589511(0x287)][_0x589511(0x489)](function () {
                          var _0x56a730 = _0x589511;
                          _0x236ca4 || _0x56a730(0x183) !== _0x528962['readyState'] && (_0x4918c6(_0x56a730(0x214)), _0x17b105(), _0x528962[_0x56a730(0x464)](_0x265b3b), _0x265b3b[_0x56a730(0x262)]([{
                            'type': _0x56a730(0x21c)
                          }]), _0x528962[_0x56a730(0x24e)](_0x56a730(0x21c), _0x265b3b), _0x265b3b = null, _0x528962[_0x56a730(0x36d)] = !0x1, _0x528962['flush']());
                        });
                      } else {
                        _0x4918c6(_0x589511(0x271), _0x3c4583);

                        var _0x430279 = new Error('probe\x20error');

                        _0x430279['transport'] = _0x265b3b[_0x589511(0x32f)], _0x528962[_0x589511(0x24e)](_0x589511(0x367), _0x430279);
                      }
                    }
                  }));
                }

                function _0x162d73() {
                  var _0xe8d46c = _0x3e7dfb;
                  _0x236ca4 || (_0x236ca4 = !0x0, _0x17b105(), _0x265b3b[_0xe8d46c(0x166)](), _0x265b3b = null);
                }

                function _0x3fb93b(_0x59783c) {
                  var _0x3ae945 = _0x3e7dfb,
                      _0x1ffcda = new Error(_0x3ae945(0x3fd) + _0x59783c);

                  _0x1ffcda[_0x3ae945(0x287)] = _0x265b3b[_0x3ae945(0x32f)], _0x162d73(), _0x4918c6(_0x3ae945(0x2ba), _0x3c4583, _0x59783c), _0x528962[_0x3ae945(0x24e)](_0x3ae945(0x367), _0x1ffcda);
                }

                function _0xb72f60() {
                  var _0x369994 = _0x3e7dfb;

                  _0x3fb93b(_0x369994(0x1bb));
                }

                function _0x224e47() {
                  _0x3fb93b('socket\x20closed');
                }

                function _0x2408e7(_0x5722ce) {
                  var _0x447ebc = _0x3e7dfb;
                  _0x265b3b && _0x5722ce[_0x447ebc(0x32f)] !== _0x265b3b[_0x447ebc(0x32f)] && (_0x4918c6(_0x447ebc(0x1f7), _0x5722ce['name'], _0x265b3b[_0x447ebc(0x32f)]), _0x162d73());
                }

                function _0x17b105() {
                  var _0x43664d = _0x3e7dfb;
                  _0x265b3b[_0x43664d(0x198)](_0x43664d(0x412), _0x41cad1), _0x265b3b[_0x43664d(0x198)](_0x43664d(0x122), _0x3fb93b), _0x265b3b[_0x43664d(0x198)](_0x43664d(0x166), _0xb72f60), _0x528962['removeListener']('close', _0x224e47), _0x528962['removeListener'](_0x43664d(0x36d), _0x2408e7);
                }

                _0x1129b2[_0x3e7dfb(0x494)] = !0x1, _0x265b3b[_0x3e7dfb(0x319)]('open', _0x41cad1), _0x265b3b[_0x3e7dfb(0x319)](_0x3e7dfb(0x122), _0x3fb93b), _0x265b3b[_0x3e7dfb(0x319)](_0x3e7dfb(0x166), _0xb72f60), this[_0x3e7dfb(0x319)](_0x3e7dfb(0x166), _0x224e47), this[_0x3e7dfb(0x319)](_0x3e7dfb(0x36d), _0x2408e7), _0x265b3b[_0x3e7dfb(0x412)]();
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x36f)] = function () {
                var _0x2ab906 = _0x2c78b1;

                if (_0x4918c6(_0x2ab906(0x172)), this['readyState'] = _0x2ab906(0x412), _0x1129b2[_0x2ab906(0x494)] = _0x2ab906(0x38b) === this[_0x2ab906(0x287)][_0x2ab906(0x32f)], this[_0x2ab906(0x24e)](_0x2ab906(0x412)), this[_0x2ab906(0x413)](), _0x2ab906(0x412) === this[_0x2ab906(0x3d0)] && this['upgrade'] && this[_0x2ab906(0x287)][_0x2ab906(0x489)]) {
                  _0x4918c6(_0x2ab906(0x3cc));

                  for (var _0x3f03d3 = 0x0, _0x3ab1e6 = this[_0x2ab906(0x295)]['length']; _0x3f03d3 < _0x3ab1e6; _0x3f03d3++) this[_0x2ab906(0x13d)](this[_0x2ab906(0x295)][_0x3f03d3]);
                }
              }, _0x1129b2[_0x2c78b1(0x1b3)]['onPacket'] = function (_0x212dca) {
                var _0x46f03d = _0x2c78b1;
                if (_0x46f03d(0x163) === this[_0x46f03d(0x3d0)] || _0x46f03d(0x412) === this[_0x46f03d(0x3d0)] || _0x46f03d(0x12b) === this[_0x46f03d(0x3d0)]) switch (_0x4918c6(_0x46f03d(0x350), _0x212dca[_0x46f03d(0x156)], _0x212dca[_0x46f03d(0x1c5)]), this[_0x46f03d(0x24e)](_0x46f03d(0x162), _0x212dca), this[_0x46f03d(0x24e)](_0x46f03d(0x405)), _0x212dca['type']) {
                  case 'open':
                    this[_0x46f03d(0x37a)](JSON[_0x46f03d(0x288)](_0x212dca[_0x46f03d(0x1c5)]));

                    break;

                  case _0x46f03d(0x48c):
                    this['setPing'](), this[_0x46f03d(0x24e)](_0x46f03d(0x48c));
                    break;

                  case _0x46f03d(0x122):
                    var _0xd3e829 = new Error(_0x46f03d(0x178));

                    _0xd3e829[_0x46f03d(0x3ef)] = _0x212dca['data'], this['onError'](_0xd3e829);
                    break;

                  case _0x46f03d(0x3dd):
                    this['emit'](_0x46f03d(0x1c5), _0x212dca[_0x46f03d(0x1c5)]), this[_0x46f03d(0x24e)](_0x46f03d(0x3dd), _0x212dca['data']);
                } else _0x4918c6(_0x46f03d(0x40a), this[_0x46f03d(0x3d0)]);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x37a)] = function (_0x4a0149) {
                var _0x47e2ac = _0x2c78b1;
                this[_0x47e2ac(0x24e)](_0x47e2ac(0x36e), _0x4a0149), this['id'] = _0x4a0149['sid'], this[_0x47e2ac(0x287)]['query'][_0x47e2ac(0x36b)] = _0x4a0149[_0x47e2ac(0x36b)], this[_0x47e2ac(0x295)] = this[_0x47e2ac(0x1e1)](_0x4a0149[_0x47e2ac(0x295)]), this[_0x47e2ac(0x373)] = _0x4a0149['pingInterval'], this[_0x47e2ac(0x30a)] = _0x4a0149[_0x47e2ac(0x30a)], this[_0x47e2ac(0x36f)](), _0x47e2ac(0x183) !== this[_0x47e2ac(0x3d0)] && (this[_0x47e2ac(0x333)](), this[_0x47e2ac(0x198)](_0x47e2ac(0x405), this[_0x47e2ac(0x127)]), this['on'](_0x47e2ac(0x405), this[_0x47e2ac(0x127)]));
              }, _0x1129b2[_0x2c78b1(0x1b3)]['onHeartbeat'] = function (_0x3d4965) {
                var _0x445627 = _0x2c78b1;
                clearTimeout(this[_0x445627(0x2a5)]);

                var _0x427030 = this;

                _0x427030[_0x445627(0x2a5)] = setTimeout(function () {
                  var _0x67a86 = _0x445627;
                  _0x67a86(0x183) !== _0x427030[_0x67a86(0x3d0)] && _0x427030[_0x67a86(0x449)](_0x67a86(0x2e5));
                }, _0x3d4965 || _0x427030[_0x445627(0x373)] + _0x427030[_0x445627(0x30a)]);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x333)] = function () {
                var _0x4e0f8d = _0x2c78b1,
                    _0x42d566 = this;

                clearTimeout(_0x42d566['pingIntervalTimer']), _0x42d566[_0x4e0f8d(0x154)] = setTimeout(function () {
                  var _0x346f7c = _0x4e0f8d;
                  _0x4918c6(_0x346f7c(0x16d), _0x42d566[_0x346f7c(0x30a)]), _0x42d566[_0x346f7c(0x477)](), _0x42d566[_0x346f7c(0x127)](_0x42d566[_0x346f7c(0x30a)]);
                }, _0x42d566[_0x4e0f8d(0x373)]);
              }, _0x1129b2['prototype'][_0x2c78b1(0x477)] = function () {
                var _0x195f3c = _0x2c78b1,
                    _0x58b342 = this;

                this['sendPacket'](_0x195f3c(0x477), function () {
                  var _0x2110e3 = _0x195f3c;

                  _0x58b342[_0x2110e3(0x24e)]('ping');
                });
              }, _0x1129b2['prototype'][_0x2c78b1(0x308)] = function () {
                var _0xe3148b = _0x2c78b1;
                this[_0xe3148b(0x20b)]['splice'](0x0, this[_0xe3148b(0x45f)]), this[_0xe3148b(0x45f)] = 0x0, 0x0 === this[_0xe3148b(0x20b)][_0xe3148b(0x1b1)] ? this[_0xe3148b(0x24e)](_0xe3148b(0x266)) : this[_0xe3148b(0x413)]();
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x413)] = function () {
                var _0x459f0f = _0x2c78b1;
                _0x459f0f(0x183) !== this[_0x459f0f(0x3d0)] && this[_0x459f0f(0x287)][_0x459f0f(0x3d1)] && !this['upgrading'] && this['writeBuffer'][_0x459f0f(0x1b1)] && (_0x4918c6(_0x459f0f(0x32d), this[_0x459f0f(0x20b)][_0x459f0f(0x1b1)]), this[_0x459f0f(0x287)][_0x459f0f(0x262)](this[_0x459f0f(0x20b)]), this[_0x459f0f(0x45f)] = this[_0x459f0f(0x20b)][_0x459f0f(0x1b1)], this[_0x459f0f(0x24e)]('flush'));
              }, _0x1129b2['prototype'][_0x2c78b1(0x4ce)] = _0x1129b2[_0x2c78b1(0x1b3)]['send'] = function (_0x1f6d6a, _0x2f5a68, _0x3ec016) {
                var _0x394863 = _0x2c78b1;
                return this[_0x394863(0x1ae)](_0x394863(0x3dd), _0x1f6d6a, _0x2f5a68, _0x3ec016), this;
              }, _0x1129b2['prototype']['sendPacket'] = function (_0x118511, _0x3892fa, _0x21ae6d, _0x48bf08) {
                var _0x5bd22b = _0x2c78b1;

                if (_0x5bd22b(0x17d) == typeof _0x3892fa && (_0x48bf08 = _0x3892fa, _0x3892fa = void 0x0), 'function' == typeof _0x21ae6d && (_0x48bf08 = _0x21ae6d, _0x21ae6d = null), _0x5bd22b(0x12b) !== this['readyState'] && _0x5bd22b(0x183) !== this[_0x5bd22b(0x3d0)]) {
                  (_0x21ae6d = _0x21ae6d || {})[_0x5bd22b(0x473)] = !0x1 !== _0x21ae6d[_0x5bd22b(0x473)];
                  var _0x3c8363 = {
                    'type': _0x118511,
                    'data': _0x3892fa,
                    'options': _0x21ae6d
                  };
                  this[_0x5bd22b(0x24e)](_0x5bd22b(0x304), _0x3c8363), this[_0x5bd22b(0x20b)][_0x5bd22b(0x41c)](_0x3c8363), _0x48bf08 && this['once'](_0x5bd22b(0x413), _0x48bf08), this['flush']();
                }
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x166)] = function () {
                var _0x3ab27b = _0x2c78b1;

                if (_0x3ab27b(0x163) === this[_0x3ab27b(0x3d0)] || _0x3ab27b(0x412) === this[_0x3ab27b(0x3d0)]) {
                  this[_0x3ab27b(0x3d0)] = _0x3ab27b(0x12b);

                  var _0x292f30 = this;

                  this[_0x3ab27b(0x20b)][_0x3ab27b(0x1b1)] ? this['once'](_0x3ab27b(0x266), function () {
                    var _0x4bdb67 = _0x3ab27b;
                    this[_0x4bdb67(0x36d)] ? _0x3abf03() : _0x58fcd7();
                  }) : this[_0x3ab27b(0x36d)] ? _0x3abf03() : _0x58fcd7();
                }

                function _0x58fcd7() {
                  var _0x1ba3c3 = _0x3ab27b;
                  _0x292f30[_0x1ba3c3(0x449)](_0x1ba3c3(0x16c)), _0x4918c6(_0x1ba3c3(0x26f)), _0x292f30[_0x1ba3c3(0x287)][_0x1ba3c3(0x166)]();
                }

                function _0x3bd710() {
                  var _0x36ec0e = _0x3ab27b;
                  _0x292f30[_0x36ec0e(0x198)](_0x36ec0e(0x21c), _0x3bd710), _0x292f30[_0x36ec0e(0x198)](_0x36ec0e(0x367), _0x3bd710), _0x58fcd7();
                }

                function _0x3abf03() {
                  var _0x18dc06 = _0x3ab27b;
                  _0x292f30['once'](_0x18dc06(0x21c), _0x3bd710), _0x292f30[_0x18dc06(0x319)](_0x18dc06(0x367), _0x3bd710);
                }

                return this;
              }, _0x1129b2['prototype'][_0x2c78b1(0x2f4)] = function (_0x246b32) {
                var _0x500391 = _0x2c78b1;
                _0x4918c6(_0x500391(0x1c1), _0x246b32), _0x1129b2[_0x500391(0x494)] = !0x1, this['emit'](_0x500391(0x122), _0x246b32), this[_0x500391(0x449)](_0x500391(0x2a7), _0x246b32);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x449)] = function (_0x11423e, _0x3122e7) {
                var _0x43e3f2 = _0x2c78b1;
                _0x43e3f2(0x163) !== this['readyState'] && _0x43e3f2(0x412) !== this['readyState'] && _0x43e3f2(0x12b) !== this[_0x43e3f2(0x3d0)] || (_0x4918c6(_0x43e3f2(0x1b4), _0x11423e), clearTimeout(this[_0x43e3f2(0x154)]), clearTimeout(this[_0x43e3f2(0x2a5)]), this['transport'][_0x43e3f2(0x146)](_0x43e3f2(0x166)), this['transport'][_0x43e3f2(0x166)](), this[_0x43e3f2(0x287)][_0x43e3f2(0x146)](), this[_0x43e3f2(0x3d0)] = _0x43e3f2(0x183), this['id'] = null, this[_0x43e3f2(0x24e)](_0x43e3f2(0x166), _0x11423e, _0x3122e7), this[_0x43e3f2(0x20b)] = [], this[_0x43e3f2(0x45f)] = 0x0);
              }, _0x1129b2['prototype'][_0x2c78b1(0x1e1)] = function (_0x29d718) {
                var _0x5f2fe0 = _0x2c78b1;

                for (var _0x3d8363 = [], _0x698e59 = 0x0, _0x295a7c = _0x29d718[_0x5f2fe0(0x1b1)]; _0x698e59 < _0x295a7c; _0x698e59++) ~_0x41f7c1(this[_0x5f2fe0(0x24b)], _0x29d718[_0x698e59]) && _0x3d8363[_0x5f2fe0(0x41c)](_0x29d718[_0x698e59]);

                return _0x3d8363;
              };
            },
            0x1960: function (_0x7ec485, _0x48cc2b, _0x3fca7f) {
              var _0x10a561 = a0_0x107f,
                  _0x2367ec = _0x3fca7f(0x1167),
                  _0x476e0f = _0x3fca7f(0x223f);

              function _0x26873e(_0xc4e71c) {
                var _0x306e7a = a0_0x107f;
                this['path'] = _0xc4e71c['path'], this[_0x306e7a(0x34a)] = _0xc4e71c[_0x306e7a(0x34a)], this[_0x306e7a(0x4be)] = _0xc4e71c[_0x306e7a(0x4be)], this[_0x306e7a(0x487)] = _0xc4e71c['secure'], this[_0x306e7a(0x189)] = _0xc4e71c['query'], this[_0x306e7a(0x4b3)] = _0xc4e71c[_0x306e7a(0x4b3)], this[_0x306e7a(0x153)] = _0xc4e71c[_0x306e7a(0x153)], this[_0x306e7a(0x3d0)] = '', this[_0x306e7a(0x3a2)] = _0xc4e71c[_0x306e7a(0x3a2)] || !0x1, this[_0x306e7a(0x136)] = _0xc4e71c['socket'], this[_0x306e7a(0x403)] = _0xc4e71c['enablesXDR'], this[_0x306e7a(0x26b)] = _0xc4e71c[_0x306e7a(0x26b)], this[_0x306e7a(0x1f4)] = _0xc4e71c[_0x306e7a(0x1f4)], this[_0x306e7a(0x1a9)] = _0xc4e71c[_0x306e7a(0x1a9)], this[_0x306e7a(0x4c6)] = _0xc4e71c[_0x306e7a(0x4c6)], this[_0x306e7a(0x1db)] = _0xc4e71c[_0x306e7a(0x1db)], this['ca'] = _0xc4e71c['ca'], this[_0x306e7a(0x2ac)] = _0xc4e71c[_0x306e7a(0x2ac)], this[_0x306e7a(0x19e)] = _0xc4e71c[_0x306e7a(0x19e)], this[_0x306e7a(0x43f)] = _0xc4e71c[_0x306e7a(0x43f)], this[_0x306e7a(0x17a)] = _0xc4e71c[_0x306e7a(0x17a)], this[_0x306e7a(0xf3)] = _0xc4e71c[_0x306e7a(0xf3)], this['localAddress'] = _0xc4e71c[_0x306e7a(0x2e4)];
              }

              _0x7ec485[_0x10a561(0x38d)] = _0x26873e, _0x476e0f(_0x26873e[_0x10a561(0x1b3)]), _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x2f4)] = function (_0x498c07, _0x3450ca) {
                var _0x41dcd0 = _0x10a561,
                    _0x1ca704 = new Error(_0x498c07);

                return _0x1ca704['type'] = _0x41dcd0(0x366), _0x1ca704[_0x41dcd0(0x12a)] = _0x3450ca, this['emit'](_0x41dcd0(0x122), _0x1ca704), this;
              }, _0x26873e[_0x10a561(0x1b3)]['open'] = function () {
                var _0x27d7b0 = _0x10a561;
                return _0x27d7b0(0x183) !== this[_0x27d7b0(0x3d0)] && '' !== this[_0x27d7b0(0x3d0)] || (this[_0x27d7b0(0x3d0)] = _0x27d7b0(0x163), this[_0x27d7b0(0x1fb)]()), this;
              }, _0x26873e['prototype']['close'] = function () {
                var _0x4874cd = _0x10a561;
                return _0x4874cd(0x163) !== this[_0x4874cd(0x3d0)] && _0x4874cd(0x412) !== this[_0x4874cd(0x3d0)] || (this[_0x4874cd(0x164)](), this[_0x4874cd(0x449)]()), this;
              }, _0x26873e[_0x10a561(0x1b3)]['send'] = function (_0x338bcd) {
                var _0x21b4d9 = _0x10a561;
                if (_0x21b4d9(0x412) !== this[_0x21b4d9(0x3d0)]) throw new Error('Transport\x20not\x20open');

                this[_0x21b4d9(0x4ce)](_0x338bcd);
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x36f)] = function () {
                var _0x38832d = _0x10a561;
                this['readyState'] = _0x38832d(0x412), this['writable'] = !0x0, this[_0x38832d(0x24e)]('open');
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x2cb)] = function (_0x2a14c7) {
                var _0x614944 = _0x10a561,
                    _0x5bc6b7 = _0x2367ec[_0x614944(0x2f5)](_0x2a14c7, this['socket'][_0x614944(0x286)]);

                this[_0x614944(0x347)](_0x5bc6b7);
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x347)] = function (_0x464f55) {
                var _0x14f378 = _0x10a561;

                this[_0x14f378(0x24e)](_0x14f378(0x162), _0x464f55);
              }, _0x26873e['prototype'][_0x10a561(0x449)] = function () {
                var _0x47a013 = _0x10a561;
                this[_0x47a013(0x3d0)] = _0x47a013(0x183), this[_0x47a013(0x24e)]('close');
              };
            },
            0xd18: function (_0x25d91e, _0x15f290, _0x58c514) {
              var _0x34d75a = a0_0x107f,
                  _0x5b407c = _0x58c514(0xad9),
                  _0x42ed7f = _0x58c514(0xd58),
                  _0x2ee597 = _0x58c514(0x2639),
                  _0x3f22c9 = _0x58c514(0x115a);

              _0x15f290[_0x34d75a(0x396)] = function (_0x5931dd) {
                var _0x350990 = _0x34d75a,
                    _0x94b154 = !0x1,
                    _0x22296b = !0x1,
                    _0x5e6c1b = !0x1 !== _0x5931dd[_0x350990(0x210)];

                if ('undefined' != typeof location) {
                  var _0x3bf4ff = _0x350990(0x1d9) === location[_0x350990(0x1c7)],
                      _0x23b128 = location[_0x350990(0x4be)];

                  _0x23b128 || (_0x23b128 = _0x3bf4ff ? 0x1bb : 0x50), _0x94b154 = _0x5931dd['hostname'] !== location[_0x350990(0x34a)] || _0x23b128 !== _0x5931dd['port'], _0x22296b = _0x5931dd['secure'] !== _0x3bf4ff;
                }

                if (_0x5931dd['xdomain'] = _0x94b154, _0x5931dd['xscheme'] = _0x22296b, _0x350990(0x412) in new _0x5b407c(_0x5931dd) && !_0x5931dd[_0x350990(0x2b9)]) return new _0x42ed7f(_0x5931dd);
                if (!_0x5e6c1b) throw new Error(_0x350990(0x313));
                return new _0x2ee597(_0x5931dd);
              }, _0x15f290[_0x34d75a(0x38b)] = _0x3f22c9;
            },
            0x2639: function (_0x38e97b, _0x63ad42, _0x5767e6) {
              var _0xa95b7b = a0_0x107f,
                  _0x1f649f = _0x5767e6(0x2337),
                  _0x212d0b = _0x5767e6(0xf15),
                  _0x1b443e = _0x5767e6(0xddd);

              _0x38e97b[_0xa95b7b(0x38d)] = _0x17ec58;

              var _0x3f6120,
                  _0x2fc919 = /\n/g,
                  _0x57605e = /\\n/g;

              function _0x25475a() {}

              function _0x17ec58(_0x5abcce) {
                var _0x569f18 = _0xa95b7b;
                _0x1f649f[_0x569f18(0x229)](this, _0x5abcce), this[_0x569f18(0x189)] = this['query'] || {}, _0x3f6120 || (_0x3f6120 = _0x1b443e[_0x569f18(0x3d7)] = _0x1b443e[_0x569f18(0x3d7)] || []), this['index'] = _0x3f6120[_0x569f18(0x1b1)];

                var _0x15f2e9 = this;

                _0x3f6120[_0x569f18(0x41c)](function (_0x2849ff) {
                  var _0x22de17 = _0x569f18;

                  _0x15f2e9[_0x22de17(0x2cb)](_0x2849ff);
                }), this['query']['j'] = this['index'], _0x569f18(0x17d) == typeof addEventListener && addEventListener('beforeunload', function () {
                  var _0x9e245 = _0x569f18;
                  _0x15f2e9[_0x9e245(0x48b)] && (_0x15f2e9['script'][_0x9e245(0x112)] = _0x25475a);
                }, !0x1);
              }

              _0x212d0b(_0x17ec58, _0x1f649f), _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x192)] = !0x1, _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x164)] = function () {
                var _0x4c85df = _0xa95b7b;
                this[_0x4c85df(0x48b)] && (this[_0x4c85df(0x48b)][_0x4c85df(0x3a1)][_0x4c85df(0x481)](this[_0x4c85df(0x48b)]), this[_0x4c85df(0x48b)] = null), this[_0x4c85df(0x421)] && (this['form'][_0x4c85df(0x3a1)][_0x4c85df(0x481)](this['form']), this[_0x4c85df(0x421)] = null, this[_0x4c85df(0x2cf)] = null), _0x1f649f['prototype'][_0x4c85df(0x164)][_0x4c85df(0x229)](this);
              }, _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x3cb)] = function () {
                var _0x897b7e = _0xa95b7b,
                    _0x3bec9c = this,
                    _0x2ee7a9 = document['createElement']('script');

                this[_0x897b7e(0x48b)] && (this['script'][_0x897b7e(0x3a1)][_0x897b7e(0x481)](this[_0x897b7e(0x48b)]), this[_0x897b7e(0x48b)] = null), _0x2ee7a9[_0x897b7e(0x447)] = !0x0, _0x2ee7a9[_0x897b7e(0x433)] = this['uri'](), _0x2ee7a9[_0x897b7e(0x112)] = function (_0x3eb41f) {
                  var _0x41b57b = _0x897b7e;

                  _0x3bec9c[_0x41b57b(0x2f4)](_0x41b57b(0x3ed), _0x3eb41f);
                };
                var _0x20b053 = document['getElementsByTagName'](_0x897b7e(0x48b))[0x0];
                _0x20b053 ? _0x20b053[_0x897b7e(0x3a1)]['insertBefore'](_0x2ee7a9, _0x20b053) : (document[_0x897b7e(0x1cb)] || document[_0x897b7e(0x14a)])[_0x897b7e(0x496)](_0x2ee7a9), this['script'] = _0x2ee7a9, _0x897b7e(0x364) != typeof navigator && /gecko/i[_0x897b7e(0x4c7)](navigator['userAgent']) && setTimeout(function () {
                  var _0xd60930 = _0x897b7e,
                      _0x147e8a = document[_0xd60930(0x377)]('iframe');

                  document['body'][_0xd60930(0x496)](_0x147e8a), document[_0xd60930(0x14a)]['removeChild'](_0x147e8a);
                }, 0x64);
              }, _0x17ec58[_0xa95b7b(0x1b3)]['doWrite'] = function (_0xa1487e, _0x4e6d37) {
                var _0x1e77fd = _0xa95b7b,
                    _0x519595 = this;

                if (!this[_0x1e77fd(0x421)]) {
                  var _0x1a1453,
                      _0x583a65 = document['createElement'](_0x1e77fd(0x421)),
                      _0x2a76f1 = document[_0x1e77fd(0x377)](_0x1e77fd(0x3d8)),
                      _0x395f56 = this[_0x1e77fd(0x424)] = _0x1e77fd(0x49e) + this[_0x1e77fd(0x34b)];

                  _0x583a65[_0x1e77fd(0x252)] = _0x1e77fd(0x196), _0x583a65['style'][_0x1e77fd(0x167)] = 'absolute', _0x583a65['style'][_0x1e77fd(0x1a1)] = _0x1e77fd(0x467), _0x583a65['style'][_0x1e77fd(0x2c7)] = _0x1e77fd(0x467), _0x583a65[_0x1e77fd(0x2d9)] = _0x395f56, _0x583a65[_0x1e77fd(0x351)] = 'POST', _0x583a65['setAttribute'](_0x1e77fd(0x320), _0x1e77fd(0x28e)), _0x2a76f1[_0x1e77fd(0x32f)] = 'd', _0x583a65['appendChild'](_0x2a76f1), document[_0x1e77fd(0x14a)][_0x1e77fd(0x496)](_0x583a65), this[_0x1e77fd(0x421)] = _0x583a65, this[_0x1e77fd(0x316)] = _0x2a76f1;
                }

                function _0x498353() {
                  _0x38db0c(), _0x4e6d37();
                }

                function _0x38db0c() {
                  var _0xd16021 = _0x1e77fd;
                  if (_0x519595[_0xd16021(0x2cf)]) try {
                    _0x519595[_0xd16021(0x421)]['removeChild'](_0x519595[_0xd16021(0x2cf)]);
                  } catch (_0x17649a) {
                    _0x519595[_0xd16021(0x2f4)](_0xd16021(0x218), _0x17649a);
                  }

                  try {
                    var _0x4c0831 = '<iframe\x20src=\x22javascript:0\x22\x20name=\x22' + _0x519595[_0xd16021(0x424)] + '\x22>';

                    _0x1a1453 = document[_0xd16021(0x377)](_0x4c0831);
                  } catch (_0x2834a9) {
                    (_0x1a1453 = document[_0xd16021(0x377)](_0xd16021(0x2cf)))['name'] = _0x519595['iframeId'], _0x1a1453[_0xd16021(0x433)] = _0xd16021(0x2dc);
                  }

                  _0x1a1453['id'] = _0x519595[_0xd16021(0x424)], _0x519595[_0xd16021(0x421)][_0xd16021(0x496)](_0x1a1453), _0x519595['iframe'] = _0x1a1453;
                }

                this[_0x1e77fd(0x421)][_0x1e77fd(0x2d7)] = this['uri'](), _0x38db0c(), _0xa1487e = _0xa1487e[_0x1e77fd(0x3d9)](_0x57605e, '\x5c\x0a'), this[_0x1e77fd(0x316)][_0x1e77fd(0x1e6)] = _0xa1487e[_0x1e77fd(0x3d9)](_0x2fc919, '\x5cn');

                try {
                  this[_0x1e77fd(0x421)][_0x1e77fd(0x3b9)]();
                } catch (_0x39229d) {}

                this['iframe'][_0x1e77fd(0x277)] ? this[_0x1e77fd(0x2cf)][_0x1e77fd(0x255)] = function () {
                  var _0x44f98d = _0x1e77fd;
                  'complete' === _0x519595['iframe'][_0x44f98d(0x3d0)] && _0x498353();
                } : this[_0x1e77fd(0x2cf)]['onload'] = _0x498353;
              };
            },
            0xd58: function (_0x119a3e, _0x51d4b8, _0x258200) {
              var _0x53cff6 = a0_0x107f,
                  _0x5289ae = _0x258200(0xad9),
                  _0x34a529 = _0x258200(0x2337),
                  _0x57d205 = _0x258200(0x223f),
                  _0x203338 = _0x258200(0xf15),
                  _0xc655c2 = _0x258200(0x4cb)(_0x53cff6(0x16a)),
                  _0x35b5c2 = _0x258200(0xddd);

              function _0x12aa46() {}

              function _0x500d20(_0x54b790) {
                var _0x15b7bf = _0x53cff6;

                if (_0x34a529[_0x15b7bf(0x229)](this, _0x54b790), this[_0x15b7bf(0x3a6)] = _0x54b790[_0x15b7bf(0x3a6)], this[_0x15b7bf(0xf3)] = _0x54b790[_0x15b7bf(0xf3)], _0x15b7bf(0x364) != typeof location) {
                  var _0x5d6a11 = _0x15b7bf(0x1d9) === location[_0x15b7bf(0x1c7)],
                      _0x58ff2f = location['port'];

                  _0x58ff2f || (_0x58ff2f = _0x5d6a11 ? 0x1bb : 0x50), this['xd'] = _0x15b7bf(0x364) != typeof location && _0x54b790[_0x15b7bf(0x34a)] !== location['hostname'] || _0x58ff2f !== _0x54b790[_0x15b7bf(0x4be)], this['xs'] = _0x54b790[_0x15b7bf(0x487)] !== _0x5d6a11;
                }
              }

              function _0x201b9e(_0x5f1272) {
                var _0x81696e = _0x53cff6;
                this[_0x81696e(0x351)] = _0x5f1272[_0x81696e(0x351)] || 'GET', this['uri'] = _0x5f1272[_0x81696e(0x2d0)], this['xd'] = !!_0x5f1272['xd'], this['xs'] = !!_0x5f1272['xs'], this[_0x81696e(0x447)] = !0x1 !== _0x5f1272[_0x81696e(0x447)], this[_0x81696e(0x1c5)] = void 0x0 !== _0x5f1272['data'] ? _0x5f1272[_0x81696e(0x1c5)] : null, this['agent'] = _0x5f1272[_0x81696e(0x3a2)], this[_0x81696e(0x159)] = _0x5f1272[_0x81696e(0x159)], this[_0x81696e(0x192)] = _0x5f1272[_0x81696e(0x192)], this[_0x81696e(0x403)] = _0x5f1272[_0x81696e(0x403)], this[_0x81696e(0x26b)] = _0x5f1272['withCredentials'], this[_0x81696e(0x3a6)] = _0x5f1272['requestTimeout'], this[_0x81696e(0x1f4)] = _0x5f1272[_0x81696e(0x1f4)], this[_0x81696e(0x1a9)] = _0x5f1272['key'], this['passphrase'] = _0x5f1272['passphrase'], this['cert'] = _0x5f1272[_0x81696e(0x1db)], this['ca'] = _0x5f1272['ca'], this[_0x81696e(0x2ac)] = _0x5f1272[_0x81696e(0x2ac)], this[_0x81696e(0x19e)] = _0x5f1272[_0x81696e(0x19e)], this[_0x81696e(0xf3)] = _0x5f1272[_0x81696e(0xf3)], this['create']();
              }

              function _0x3d3f06() {
                var _0x573f46 = _0x53cff6;

                for (var _0x3aa409 in _0x201b9e[_0x573f46(0x21d)]) _0x201b9e['requests'][_0x573f46(0x32a)](_0x3aa409) && _0x201b9e[_0x573f46(0x21d)][_0x3aa409][_0x573f46(0x4bb)]();
              }

              _0x119a3e[_0x53cff6(0x38d)] = _0x500d20, _0x119a3e[_0x53cff6(0x38d)][_0x53cff6(0x4bd)] = _0x201b9e, _0x203338(_0x500d20, _0x34a529), _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x192)] = !0x0, _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x15f)] = function (_0x3ef4ba) {
                var _0x330e99 = _0x53cff6;
                return (_0x3ef4ba = _0x3ef4ba || {})['uri'] = this[_0x330e99(0x2d0)](), _0x3ef4ba['xd'] = this['xd'], _0x3ef4ba['xs'] = this['xs'], _0x3ef4ba[_0x330e99(0x3a2)] = this[_0x330e99(0x3a2)] || !0x1, _0x3ef4ba['supportsBinary'] = this[_0x330e99(0x192)], _0x3ef4ba[_0x330e99(0x403)] = this['enablesXDR'], _0x3ef4ba[_0x330e99(0x26b)] = this[_0x330e99(0x26b)], _0x3ef4ba[_0x330e99(0x1f4)] = this[_0x330e99(0x1f4)], _0x3ef4ba[_0x330e99(0x1a9)] = this[_0x330e99(0x1a9)], _0x3ef4ba['passphrase'] = this[_0x330e99(0x4c6)], _0x3ef4ba[_0x330e99(0x1db)] = this[_0x330e99(0x1db)], _0x3ef4ba['ca'] = this['ca'], _0x3ef4ba[_0x330e99(0x2ac)] = this['ciphers'], _0x3ef4ba[_0x330e99(0x19e)] = this['rejectUnauthorized'], _0x3ef4ba[_0x330e99(0x3a6)] = this['requestTimeout'], _0x3ef4ba['extraHeaders'] = this[_0x330e99(0xf3)], new _0x201b9e(_0x3ef4ba);
              }, _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x408)] = function (_0x4e2efe, _0x2c2a8f) {
                var _0x8f0175 = _0x53cff6,
                    _0x4f6d56 = 'string' != typeof _0x4e2efe && void 0x0 !== _0x4e2efe,
                    _0xfafe14 = this[_0x8f0175(0x15f)]({
                  'method': 'POST',
                  'data': _0x4e2efe,
                  'isBinary': _0x4f6d56
                }),
                    _0x160cb4 = this;

                _0xfafe14['on'](_0x8f0175(0x175), _0x2c2a8f), _0xfafe14['on'](_0x8f0175(0x122), function (_0x1a1ebd) {
                  _0x160cb4['onError']('xhr\x20post\x20error', _0x1a1ebd);
                }), this[_0x8f0175(0x2ec)] = _0xfafe14;
              }, _0x500d20[_0x53cff6(0x1b3)]['doPoll'] = function () {
                var _0xa594f4 = _0x53cff6;

                _0xc655c2(_0xa594f4(0x2d3));

                var _0x2b05d4 = this[_0xa594f4(0x15f)](),
                    _0x18e979 = this;

                _0x2b05d4['on'](_0xa594f4(0x1c5), function (_0x462f20) {
                  _0x18e979['onData'](_0x462f20);
                }), _0x2b05d4['on']('error', function (_0x3f01aa) {
                  var _0x3bbd99 = _0xa594f4;

                  _0x18e979['onError'](_0x3bbd99(0x3d2), _0x3f01aa);
                }), this[_0xa594f4(0x103)] = _0x2b05d4;
              }, _0x57d205(_0x201b9e[_0x53cff6(0x1b3)]), _0x201b9e['prototype'][_0x53cff6(0x39c)] = function () {
                var _0x11587e = _0x53cff6,
                    _0x58e3b0 = {
                  'agent': this['agent'],
                  'xdomain': this['xd'],
                  'xscheme': this['xs'],
                  'enablesXDR': this[_0x11587e(0x403)]
                };
                _0x58e3b0[_0x11587e(0x1f4)] = this['pfx'], _0x58e3b0[_0x11587e(0x1a9)] = this[_0x11587e(0x1a9)], _0x58e3b0['passphrase'] = this[_0x11587e(0x4c6)], _0x58e3b0[_0x11587e(0x1db)] = this[_0x11587e(0x1db)], _0x58e3b0['ca'] = this['ca'], _0x58e3b0[_0x11587e(0x2ac)] = this[_0x11587e(0x2ac)], _0x58e3b0[_0x11587e(0x19e)] = this['rejectUnauthorized'];

                var _0x3074f7 = this['xhr'] = new _0x5289ae(_0x58e3b0),
                    _0x5f50ae = this;

                try {
                  _0xc655c2('xhr\x20open\x20%s:\x20%s', this[_0x11587e(0x351)], this[_0x11587e(0x2d0)]), _0x3074f7[_0x11587e(0x412)](this[_0x11587e(0x351)], this['uri'], this[_0x11587e(0x447)]);

                  try {
                    if (this[_0x11587e(0xf3)]) {
                      for (var _0x546eec in _0x3074f7['setDisableHeaderCheck'] && _0x3074f7[_0x11587e(0x485)](!0x0), this['extraHeaders']) this[_0x11587e(0xf3)][_0x11587e(0x32a)](_0x546eec) && _0x3074f7['setRequestHeader'](_0x546eec, this[_0x11587e(0xf3)][_0x546eec]);
                    }
                  } catch (_0x449f97) {}

                  if ('POST' === this[_0x11587e(0x351)]) try {
                    this[_0x11587e(0x159)] ? _0x3074f7['setRequestHeader'](_0x11587e(0x3be), _0x11587e(0xfb)) : _0x3074f7[_0x11587e(0x2d4)]('Content-type', _0x11587e(0x129));
                  } catch (_0x10de65) {}

                  try {
                    _0x3074f7[_0x11587e(0x2d4)](_0x11587e(0x1d3), _0x11587e(0x248));
                  } catch (_0x4f8612) {}

                  _0x11587e(0x26b) in _0x3074f7 && (_0x3074f7[_0x11587e(0x26b)] = this['withCredentials']), this['requestTimeout'] && (_0x3074f7[_0x11587e(0xee)] = this[_0x11587e(0x3a6)]), this['hasXDR']() ? (_0x3074f7['onload'] = function () {
                    var _0x1cf70b = _0x11587e;

                    _0x5f50ae[_0x1cf70b(0x207)]();
                  }, _0x3074f7['onerror'] = function () {
                    var _0x5ead8b = _0x11587e;

                    _0x5f50ae[_0x5ead8b(0x2f4)](_0x3074f7['responseText']);
                  }) : _0x3074f7[_0x11587e(0x255)] = function () {
                    var _0x3c5b94 = _0x11587e;
                    if (0x2 === _0x3074f7[_0x3c5b94(0x3d0)]) try {
                      var _0x573faa = _0x3074f7[_0x3c5b94(0x46f)](_0x3c5b94(0x19a));

                      (_0x5f50ae[_0x3c5b94(0x192)] && 'application/octet-stream' === _0x573faa || _0x3c5b94(0x115) === _0x573faa) && (_0x3074f7[_0x3c5b94(0x1ed)] = _0x3c5b94(0x1c4));
                    } catch (_0x5345af) {}
                    0x4 === _0x3074f7['readyState'] && (0xc8 === _0x3074f7[_0x3c5b94(0x21e)] || 0x4c7 === _0x3074f7[_0x3c5b94(0x21e)] ? _0x5f50ae[_0x3c5b94(0x207)]() : setTimeout(function () {
                      var _0xa3f4f8 = _0x3c5b94;

                      _0x5f50ae[_0xa3f4f8(0x2f4)](_0xa3f4f8(0x11f) == typeof _0x3074f7[_0xa3f4f8(0x21e)] ? _0x3074f7[_0xa3f4f8(0x21e)] : 0x0);
                    }, 0x0));
                  }, _0xc655c2(_0x11587e(0x4d2), this[_0x11587e(0x1c5)]), _0x3074f7['send'](this[_0x11587e(0x1c5)]);
                } catch (_0xcaa82e) {
                  return void setTimeout(function () {
                    var _0x252a81 = _0x11587e;

                    _0x5f50ae[_0x252a81(0x2f4)](_0xcaa82e);
                  }, 0x0);
                }

                _0x11587e(0x364) != typeof document && (this[_0x11587e(0x34b)] = _0x201b9e['requestsCount']++, _0x201b9e[_0x11587e(0x21d)][this[_0x11587e(0x34b)]] = this);
              }, _0x201b9e['prototype']['onSuccess'] = function () {
                var _0xbf6ef5 = _0x53cff6;
                this[_0xbf6ef5(0x24e)](_0xbf6ef5(0x175)), this['cleanup']();
              }, _0x201b9e[_0x53cff6(0x1b3)]['onData'] = function (_0x2e9e4c) {
                var _0x3c1033 = _0x53cff6;
                this['emit'](_0x3c1033(0x1c5), _0x2e9e4c), this['onSuccess']();
              }, _0x201b9e[_0x53cff6(0x1b3)]['onError'] = function (_0x1d2cf4) {
                var _0x8661db = _0x53cff6;
                this[_0x8661db(0x24e)]('error', _0x1d2cf4), this[_0x8661db(0x42b)](!0x0);
              }, _0x201b9e[_0x53cff6(0x1b3)][_0x53cff6(0x42b)] = function (_0x4c18b8) {
                var _0x421bc7 = _0x53cff6;

                if (void 0x0 !== this[_0x421bc7(0x4bc)] && null !== this[_0x421bc7(0x4bc)]) {
                  if (this[_0x421bc7(0x29b)]() ? this[_0x421bc7(0x4bc)][_0x421bc7(0x18e)] = this[_0x421bc7(0x4bc)]['onerror'] = _0x12aa46 : this[_0x421bc7(0x4bc)][_0x421bc7(0x255)] = _0x12aa46, _0x4c18b8) try {
                    this[_0x421bc7(0x4bc)]['abort']();
                  } catch (_0x1c9a05) {}
                  _0x421bc7(0x364) != typeof document && delete _0x201b9e[_0x421bc7(0x21d)][this[_0x421bc7(0x34b)]], this['xhr'] = null;
                }
              }, _0x201b9e[_0x53cff6(0x1b3)][_0x53cff6(0x207)] = function () {
                var _0x54e580 = _0x53cff6,
                    _0x5047d4;

                try {
                  var _0x1c2055;

                  try {
                    _0x1c2055 = this[_0x54e580(0x4bc)]['getResponseHeader']('Content-Type');
                  } catch (_0x4b1f3c) {}

                  _0x5047d4 = ('application/octet-stream' === _0x1c2055 || _0x54e580(0x115) === _0x1c2055) && this[_0x54e580(0x4bc)][_0x54e580(0x446)] || this[_0x54e580(0x4bc)][_0x54e580(0x1f8)];
                } catch (_0x11f6ca) {
                  this[_0x54e580(0x2f4)](_0x11f6ca);
                }

                null != _0x5047d4 && this[_0x54e580(0x2cb)](_0x5047d4);
              }, _0x201b9e['prototype']['hasXDR'] = function () {
                var _0x2fe46f = _0x53cff6;
                return _0x2fe46f(0x364) != typeof XDomainRequest && !this['xs'] && this[_0x2fe46f(0x403)];
              }, _0x201b9e['prototype'][_0x53cff6(0x4bb)] = function () {
                this['cleanup']();
              }, _0x201b9e[_0x53cff6(0x3cd)] = 0x0, _0x201b9e[_0x53cff6(0x21d)] = {}, _0x53cff6(0x364) != typeof document && ('function' == typeof attachEvent ? attachEvent(_0x53cff6(0x25d), _0x3d3f06) : _0x53cff6(0x17d) == typeof addEventListener && addEventListener('onpagehide' in _0x35b5c2 ? _0x53cff6(0x27d) : 'unload', _0x3d3f06, !0x1));
            },
            0x2337: function (_0x3dadd7, _0x4dedb0, _0x570a6d) {
              var _0x218ae2 = a0_0x107f,
                  _0x1fc880 = _0x570a6d(0x1960),
                  _0x3bc183 = _0x570a6d(0x726),
                  _0x3dcf8e = _0x570a6d(0x1167),
                  _0x16b1d0 = _0x570a6d(0xf15),
                  _0x4b01c0 = _0x570a6d(0x8e9),
                  _0x445853 = _0x570a6d(0x4cb)('engine.io-client:polling');

              _0x3dadd7['exports'] = _0x4a9717;

              var _0x1f45a9 = null != new (_0x570a6d(0xad9))({
                'xdomain': !0x1
              })[_0x218ae2(0x1ed)];

              function _0x4a9717(_0x4e47de) {
                var _0x4e7ac7 = _0x218ae2,
                    _0x396701 = _0x4e47de && _0x4e47de[_0x4e7ac7(0xed)];

                _0x1f45a9 && !_0x396701 || (this[_0x4e7ac7(0x192)] = !0x1), _0x1fc880['call'](this, _0x4e47de);
              }

              _0x16b1d0(_0x4a9717, _0x1fc880), _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x32f)] = 'polling', _0x4a9717[_0x218ae2(0x1b3)]['doOpen'] = function () {
                var _0x51ae04 = _0x218ae2;

                this[_0x51ae04(0x2e9)]();
              }, _0x4a9717[_0x218ae2(0x1b3)]['pause'] = function (_0x5181b6) {
                var _0x2545f6 = _0x218ae2,
                    _0x5651a0 = this;

                function _0x4e08e3() {
                  var _0x490365 = a0_0x107f;
                  _0x445853(_0x490365(0x3ff)), _0x5651a0['readyState'] = _0x490365(0x3ff), _0x5181b6();
                }

                if (this['readyState'] = _0x2545f6(0x104), this[_0x2545f6(0x396)] || !this['writable']) {
                  var _0x5237ca = 0x0;
                  this['polling'] && (_0x445853('we\x20are\x20currently\x20polling\x20-\x20waiting\x20to\x20pause'), _0x5237ca++, this[_0x2545f6(0x319)](_0x2545f6(0x23b), function () {
                    _0x445853('pre-pause\x20polling\x20complete'), --_0x5237ca || _0x4e08e3();
                  })), this[_0x2545f6(0x3d1)] || (_0x445853(_0x2545f6(0x490)), _0x5237ca++, this[_0x2545f6(0x319)](_0x2545f6(0x266), function () {
                    var _0x4f982b = _0x2545f6;
                    _0x445853(_0x4f982b(0xf0)), --_0x5237ca || _0x4e08e3();
                  }));
                } else _0x4e08e3();
              }, _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x2e9)] = function () {
                var _0x123ea3 = _0x218ae2;
                _0x445853(_0x123ea3(0x396)), this[_0x123ea3(0x396)] = !0x0, this['doPoll'](), this[_0x123ea3(0x24e)](_0x123ea3(0x2e9));
              }, _0x4a9717[_0x218ae2(0x1b3)]['onData'] = function (_0x10f191) {
                var _0x5e69ba = _0x218ae2,
                    _0x86f705 = this;

                _0x445853('polling\x20got\x20data\x20%s', _0x10f191), _0x3dcf8e['decodePayload'](_0x10f191, this[_0x5e69ba(0x136)][_0x5e69ba(0x286)], function (_0x310549, _0x4b4287, _0xdaa125) {
                  var _0x471a24 = _0x5e69ba;
                  if (_0x471a24(0x163) === _0x86f705[_0x471a24(0x3d0)] && _0x471a24(0x412) === _0x310549['type'] && _0x86f705[_0x471a24(0x36f)](), _0x471a24(0x166) === _0x310549[_0x471a24(0x156)]) return _0x86f705[_0x471a24(0x449)](), !0x1;

                  _0x86f705['onPacket'](_0x310549);
                }), _0x5e69ba(0x183) !== this['readyState'] && (this['polling'] = !0x1, this[_0x5e69ba(0x24e)](_0x5e69ba(0x23b)), _0x5e69ba(0x412) === this[_0x5e69ba(0x3d0)] ? this['poll']() : _0x445853(_0x5e69ba(0x3b5), this[_0x5e69ba(0x3d0)]));
              }, _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x164)] = function () {
                var _0x125e3d = _0x218ae2,
                    _0xef21e1 = this;

                function _0x4cb8fb() {
                  var _0x557ff6 = a0_0x107f;
                  _0x445853(_0x557ff6(0x388)), _0xef21e1[_0x557ff6(0x4ce)]([{
                    'type': _0x557ff6(0x166)
                  }]);
                }

                _0x125e3d(0x412) === this[_0x125e3d(0x3d0)] ? (_0x445853('transport\x20open\x20-\x20closing'), _0x4cb8fb()) : (_0x445853(_0x125e3d(0x33b)), this['once']('open', _0x4cb8fb));
              }, _0x4a9717[_0x218ae2(0x1b3)]['write'] = function (_0x40efdf) {
                var _0x56e493 = _0x218ae2,
                    _0x144732 = this;

                this[_0x56e493(0x3d1)] = !0x1;

                var _0x58f35a = function () {
                  var _0x3ceb14 = _0x56e493;
                  _0x144732[_0x3ceb14(0x3d1)] = !0x0, _0x144732['emit'](_0x3ceb14(0x266));
                };

                _0x3dcf8e[_0x56e493(0x3de)](_0x40efdf, this[_0x56e493(0x192)], function (_0x54a003) {
                  var _0x226eb5 = _0x56e493;

                  _0x144732[_0x226eb5(0x408)](_0x54a003, _0x58f35a);
                });
              }, _0x4a9717['prototype'][_0x218ae2(0x2d0)] = function () {
                var _0x30f538 = _0x218ae2,
                    _0x3e856d = this[_0x30f538(0x189)] || {},
                    _0x4bbf83 = this[_0x30f538(0x487)] ? _0x30f538(0x312) : 'http',
                    _0x54d15b = '';

                return !0x1 !== this[_0x30f538(0x153)] && (_0x3e856d[this[_0x30f538(0x4b3)]] = _0x4b01c0()), this['supportsBinary'] || _0x3e856d[_0x30f538(0x36b)] || (_0x3e856d[_0x30f538(0x121)] = 0x1), _0x3e856d = _0x3bc183[_0x30f538(0x263)](_0x3e856d), this[_0x30f538(0x4be)] && (_0x30f538(0x312) === _0x4bbf83 && 0x1bb !== Number(this[_0x30f538(0x4be)]) || _0x30f538(0x15a) === _0x4bbf83 && 0x50 !== Number(this['port'])) && (_0x54d15b = ':' + this['port']), _0x3e856d['length'] && (_0x3e856d = '?' + _0x3e856d), _0x4bbf83 + _0x30f538(0x23a) + (-0x1 !== this[_0x30f538(0x34a)]['indexOf'](':') ? '[' + this[_0x30f538(0x34a)] + ']' : this['hostname']) + _0x54d15b + this[_0x30f538(0x1ad)] + _0x3e856d;
              };
            },
            0x115a: function (_0x51187c, _0x446418, _0x50d45c) {
              var _0x2e7fb8 = a0_0x107f,
                  _0x3e390c,
                  _0x23ec37,
                  _0x195c3c = _0x50d45c(0x1960),
                  _0x4a7f8f = _0x50d45c(0x1167),
                  _0x4f2576 = _0x50d45c(0x726),
                  _0xc01301 = _0x50d45c(0xf15),
                  _0x5f4bb9 = _0x50d45c(0x8e9),
                  _0x51e332 = _0x50d45c(0x4cb)(_0x2e7fb8(0xfc));

              if (_0x2e7fb8(0x364) != typeof WebSocket ? _0x3e390c = WebSocket : _0x2e7fb8(0x364) != typeof self && (_0x3e390c = self[_0x2e7fb8(0x398)] || self[_0x2e7fb8(0x338)]), _0x2e7fb8(0x364) == typeof window) try {
                _0x23ec37 = _0x50d45c(0x1b6c);
              } catch (_0x1fd111) {}

              var _0x650b34 = _0x3e390c || _0x23ec37;

              function _0x556e8d(_0x5eed98) {
                var _0x5892c9 = _0x2e7fb8;
                _0x5eed98 && _0x5eed98[_0x5892c9(0xed)] && (this[_0x5892c9(0x192)] = !0x1), this['perMessageDeflate'] = _0x5eed98[_0x5892c9(0x2b6)], this[_0x5892c9(0x4ae)] = _0x3e390c && !_0x5eed98['forceNode'], this['protocols'] = _0x5eed98['protocols'], this[_0x5892c9(0x4ae)] || (_0x650b34 = _0x23ec37), _0x195c3c[_0x5892c9(0x229)](this, _0x5eed98);
              }

              _0x51187c[_0x2e7fb8(0x38d)] = _0x556e8d, _0xc01301(_0x556e8d, _0x195c3c), _0x556e8d['prototype']['name'] = 'websocket', _0x556e8d['prototype'][_0x2e7fb8(0x192)] = !0x0, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x1fb)] = function () {
                var _0x141407 = _0x2e7fb8;

                if (this[_0x141407(0x27e)]()) {
                  var _0x1c4899 = this[_0x141407(0x2d0)](),
                      _0x3c86ee = this[_0x141407(0x253)],
                      _0x58824e = {};

                  this[_0x141407(0x17a)] || (_0x58824e[_0x141407(0x3a2)] = this['agent'], _0x58824e[_0x141407(0x2b6)] = this[_0x141407(0x2b6)], _0x58824e['pfx'] = this['pfx'], _0x58824e[_0x141407(0x1a9)] = this[_0x141407(0x1a9)], _0x58824e['passphrase'] = this['passphrase'], _0x58824e[_0x141407(0x1db)] = this[_0x141407(0x1db)], _0x58824e['ca'] = this['ca'], _0x58824e[_0x141407(0x2ac)] = this['ciphers'], _0x58824e[_0x141407(0x19e)] = this[_0x141407(0x19e)]), this[_0x141407(0xf3)] && (_0x58824e[_0x141407(0x31d)] = this[_0x141407(0xf3)]), this[_0x141407(0x2e4)] && (_0x58824e[_0x141407(0x2e4)] = this[_0x141407(0x2e4)]);

                  try {
                    this['ws'] = this['usingBrowserWebSocket'] && !this['isReactNative'] ? _0x3c86ee ? new _0x650b34(_0x1c4899, _0x3c86ee) : new _0x650b34(_0x1c4899) : new _0x650b34(_0x1c4899, _0x3c86ee, _0x58824e);
                  } catch (_0x21b481) {
                    return this[_0x141407(0x24e)]('error', _0x21b481);
                  }

                  void 0x0 === this['ws'][_0x141407(0x286)] && (this[_0x141407(0x192)] = !0x1), this['ws'][_0x141407(0x24a)] && this['ws']['supports'][_0x141407(0x197)] ? (this[_0x141407(0x192)] = !0x0, this['ws']['binaryType'] = 'nodebuffer') : this['ws'][_0x141407(0x286)] = _0x141407(0x1c4), this[_0x141407(0x363)]();
                }
              }, _0x556e8d['prototype']['addEventListeners'] = function () {
                var _0x22c2da = _0x2e7fb8,
                    _0x221ce6 = this;

                this['ws'][_0x22c2da(0x3e5)] = function () {
                  _0x221ce6['onOpen']();
                }, this['ws'][_0x22c2da(0xff)] = function () {
                  var _0x18679f = _0x22c2da;

                  _0x221ce6[_0x18679f(0x449)]();
                }, this['ws'][_0x22c2da(0x100)] = function (_0x11596d) {
                  var _0xa47557 = _0x22c2da;

                  _0x221ce6[_0xa47557(0x2cb)](_0x11596d[_0xa47557(0x1c5)]);
                }, this['ws'][_0x22c2da(0x112)] = function (_0x40259e) {
                  _0x221ce6['onError']('websocket\x20error', _0x40259e);
                };
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x4ce)] = function (_0x20ad5e) {
                var _0x4b9c1b = _0x2e7fb8,
                    _0x368166 = this;

                this['writable'] = !0x1;

                for (var _0x374fb4 = _0x20ad5e[_0x4b9c1b(0x1b1)], _0x182b28 = 0x0, _0xa2b6fb = _0x374fb4; _0x182b28 < _0xa2b6fb; _0x182b28++) !function (_0x13df2b) {
                  var _0x2b6bb6 = _0x4b9c1b;

                  _0x4a7f8f[_0x2b6bb6(0xf5)](_0x13df2b, _0x368166[_0x2b6bb6(0x192)], function (_0x485bd2) {
                    var _0x63bacc = _0x2b6bb6;

                    if (!_0x368166[_0x63bacc(0x4ae)]) {
                      var _0x527b96 = {};
                      _0x13df2b[_0x63bacc(0x1a3)] && (_0x527b96[_0x63bacc(0x473)] = _0x13df2b[_0x63bacc(0x1a3)]['compress']), _0x368166[_0x63bacc(0x2b6)] && ('string' == typeof _0x485bd2 ? Buffer[_0x63bacc(0x3e1)](_0x485bd2) : _0x485bd2[_0x63bacc(0x1b1)]) < _0x368166[_0x63bacc(0x2b6)][_0x63bacc(0x219)] && (_0x527b96[_0x63bacc(0x473)] = !0x1);
                    }

                    try {
                      _0x368166[_0x63bacc(0x4ae)] ? _0x368166['ws'][_0x63bacc(0x262)](_0x485bd2) : _0x368166['ws'][_0x63bacc(0x262)](_0x485bd2, _0x527b96);
                    } catch (_0x8d944a) {
                      _0x51e332('websocket\x20closed\x20before\x20onclose\x20event');
                    }

                    --_0x374fb4 || (_0x368166[_0x63bacc(0x24e)](_0x63bacc(0x413)), setTimeout(function () {
                      var _0x5e1f3b = _0x63bacc;
                      _0x368166[_0x5e1f3b(0x3d1)] = !0x0, _0x368166['emit'](_0x5e1f3b(0x266));
                    }, 0x0));
                  });
                }(_0x20ad5e[_0x182b28]);
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x449)] = function () {
                var _0x3b0dec = _0x2e7fb8;

                _0x195c3c[_0x3b0dec(0x1b3)][_0x3b0dec(0x449)][_0x3b0dec(0x229)](this);
              }, _0x556e8d[_0x2e7fb8(0x1b3)]['doClose'] = function () {
                var _0x3a5f69 = _0x2e7fb8;
                void 0x0 !== this['ws'] && this['ws'][_0x3a5f69(0x166)]();
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x2d0)] = function () {
                var _0x22ba13 = _0x2e7fb8,
                    _0x5ae1c7 = this['query'] || {},
                    _0x4d337d = this[_0x22ba13(0x487)] ? 'wss' : 'ws',
                    _0x6f9c10 = '';

                return this[_0x22ba13(0x4be)] && (_0x22ba13(0x429) === _0x4d337d && 0x1bb !== Number(this[_0x22ba13(0x4be)]) || 'ws' === _0x4d337d && 0x50 !== Number(this[_0x22ba13(0x4be)])) && (_0x6f9c10 = ':' + this[_0x22ba13(0x4be)]), this['timestampRequests'] && (_0x5ae1c7[this[_0x22ba13(0x4b3)]] = _0x5f4bb9()), this[_0x22ba13(0x192)] || (_0x5ae1c7[_0x22ba13(0x121)] = 0x1), (_0x5ae1c7 = _0x4f2576['encode'](_0x5ae1c7))[_0x22ba13(0x1b1)] && (_0x5ae1c7 = '?' + _0x5ae1c7), _0x4d337d + _0x22ba13(0x23a) + (-0x1 !== this['hostname'][_0x22ba13(0x22a)](':') ? '[' + this[_0x22ba13(0x34a)] + ']' : this[_0x22ba13(0x34a)]) + _0x6f9c10 + this[_0x22ba13(0x1ad)] + _0x5ae1c7;
              }, _0x556e8d['prototype'][_0x2e7fb8(0x27e)] = function () {
                var _0xc19bb6 = _0x2e7fb8;
                return !(!_0x650b34 || _0xc19bb6(0x311) in _0x650b34 && this[_0xc19bb6(0x32f)] === _0x556e8d[_0xc19bb6(0x1b3)]['name']);
              };
            },
            0xad9: function (_0x4c4ef8, _0x5ed5d3, _0x42b152) {
              var _0x58553a = a0_0x107f,
                  _0x4ded18 = _0x42b152(0x1f7a),
                  _0x29741d = _0x42b152(0xddd);

              _0x4c4ef8[_0x58553a(0x38d)] = function (_0x127856) {
                var _0x322a11 = _0x58553a,
                    _0x1058b6 = _0x127856['xdomain'],
                    _0x88800e = _0x127856[_0x322a11(0x480)],
                    _0x55f3b6 = _0x127856[_0x322a11(0x403)];

                try {
                  if (_0x322a11(0x364) != typeof XMLHttpRequest && (!_0x1058b6 || _0x4ded18)) return new XMLHttpRequest();
                } catch (_0x80dc1d) {}

                try {
                  if ('undefined' != typeof XDomainRequest && !_0x88800e && _0x55f3b6) return new XDomainRequest();
                } catch (_0x2c3f4d) {}

                if (!_0x1058b6) try {
                  return new _0x29741d[[_0x322a11(0x498)][_0x322a11(0x23c)](_0x322a11(0x4d0))[_0x322a11(0x2b4)]('X')](_0x322a11(0x43b));
                } catch (_0x4d92b1) {}
              };
            },
            0x1167: function (_0x5c08b2, _0x1820cf, _0x50d8e2) {
              var _0x5df7ec = a0_0x107f,
                  _0x49ce19,
                  _0x15d63a = _0x50d8e2(0x1f36),
                  _0x224b8d = _0x50d8e2(0xd8a),
                  _0x675352 = _0x50d8e2(0x25f6),
                  _0x1aa41d = _0x50d8e2(0x1afa),
                  _0x8b404a = _0x50d8e2(0xd56);

              _0x5df7ec(0x364) != typeof ArrayBuffer && (_0x49ce19 = _0x50d8e2(0xe78));

              var _0x863378 = 'undefined' != typeof navigator && /Android/i['test'](navigator[_0x5df7ec(0x323)]),
                  _0x49d27b = _0x5df7ec(0x364) != typeof navigator && /PhantomJS/i[_0x5df7ec(0x4c7)](navigator[_0x5df7ec(0x323)]),
                  _0x256d71 = _0x863378 || _0x49d27b;

              _0x1820cf[_0x5df7ec(0x1c7)] = 0x3;

              var _0x2c148e = _0x1820cf['packets'] = {
                'open': 0x0,
                'close': 0x1,
                'ping': 0x2,
                'pong': 0x3,
                'message': 0x4,
                'upgrade': 0x5,
                'noop': 0x6
              },
                  _0xa94474 = _0x15d63a(_0x2c148e),
                  _0x561b5e = {
                'type': _0x5df7ec(0x122),
                'data': _0x5df7ec(0x3f6)
              },
                  _0xa50d65 = _0x50d8e2(0x15ac);

              function _0x25f64f(_0x241f89, _0x1a3dcc, _0x4a5f58) {
                var _0xccbea1 = _0x5df7ec;

                for (var _0x2a3972 = new Array(_0x241f89[_0xccbea1(0x1b1)]), _0x1ee483 = _0x1aa41d(_0x241f89[_0xccbea1(0x1b1)], _0x4a5f58), _0x54917a = function (_0x2c7fa3, _0x5f53cf, _0x36390b) {
                  _0x1a3dcc(_0x5f53cf, function (_0x206eba, _0x1def01) {
                    _0x2a3972[_0x2c7fa3] = _0x1def01, _0x36390b(_0x206eba, _0x2a3972);
                  });
                }, _0x8304a6 = 0x0; _0x8304a6 < _0x241f89[_0xccbea1(0x1b1)]; _0x8304a6++) _0x54917a(_0x8304a6, _0x241f89[_0x8304a6], _0x1ee483);
              }

              _0x1820cf[_0x5df7ec(0xf5)] = function (_0xe1a0c2, _0x170a2b, _0x830791, _0x447cd9) {
                var _0x1601e7 = _0x5df7ec;
                _0x1601e7(0x17d) == typeof _0x170a2b && (_0x447cd9 = _0x170a2b, _0x170a2b = !0x1), _0x1601e7(0x17d) == typeof _0x830791 && (_0x447cd9 = _0x830791, _0x830791 = null);

                var _0x4cca95 = void 0x0 === _0xe1a0c2[_0x1601e7(0x1c5)] ? void 0x0 : _0xe1a0c2[_0x1601e7(0x1c5)][_0x1601e7(0x314)] || _0xe1a0c2[_0x1601e7(0x1c5)];

                if (_0x1601e7(0x364) != typeof ArrayBuffer && _0x4cca95 instanceof ArrayBuffer) return function (_0x217052, _0x579cd0, _0x12e1db) {
                  var _0x3d7d8f = _0x1601e7;
                  if (!_0x579cd0) return _0x1820cf[_0x3d7d8f(0x259)](_0x217052, _0x12e1db);

                  var _0x1b940c = _0x217052[_0x3d7d8f(0x1c5)],
                      _0x44ec35 = new Uint8Array(_0x1b940c),
                      _0x41181a = new Uint8Array(0x1 + _0x1b940c[_0x3d7d8f(0x3e1)]);

                  _0x41181a[0x0] = _0x2c148e[_0x217052[_0x3d7d8f(0x156)]];

                  for (var _0x20e234 = 0x0; _0x20e234 < _0x44ec35[_0x3d7d8f(0x1b1)]; _0x20e234++) _0x41181a[_0x20e234 + 0x1] = _0x44ec35[_0x20e234];

                  return _0x12e1db(_0x41181a[_0x3d7d8f(0x314)]);
                }(_0xe1a0c2, _0x170a2b, _0x447cd9);
                if (void 0x0 !== _0xa50d65 && _0x4cca95 instanceof _0xa50d65) return function (_0x4d0f8c, _0x25ec67, _0x20c768) {
                  var _0x2aebbb = _0x1601e7;
                  if (!_0x25ec67) return _0x1820cf[_0x2aebbb(0x259)](_0x4d0f8c, _0x20c768);
                  if (_0x256d71) return function (_0x101601, _0x1dbade, _0x541878) {
                    var _0x4cab58 = _0x2aebbb;
                    if (!_0x1dbade) return _0x1820cf[_0x4cab58(0x259)](_0x101601, _0x541878);

                    var _0x56d751 = new FileReader();

                    return _0x56d751[_0x4cab58(0x18e)] = function () {
                      var _0x45b6f1 = _0x4cab58;

                      _0x1820cf[_0x45b6f1(0xf5)]({
                        'type': _0x101601[_0x45b6f1(0x156)],
                        'data': _0x56d751[_0x45b6f1(0x1c0)]
                      }, _0x1dbade, !0x0, _0x541878);
                    }, _0x56d751[_0x4cab58(0x4a8)](_0x101601[_0x4cab58(0x1c5)]);
                  }(_0x4d0f8c, _0x25ec67, _0x20c768);

                  var _0x46f225 = new Uint8Array(0x1);

                  return _0x46f225[0x0] = _0x2c148e[_0x4d0f8c[_0x2aebbb(0x156)]], _0x20c768(new _0xa50d65([_0x46f225[_0x2aebbb(0x314)], _0x4d0f8c[_0x2aebbb(0x1c5)]]));
                }(_0xe1a0c2, _0x170a2b, _0x447cd9);
                if (_0x4cca95 && _0x4cca95[_0x1601e7(0x275)]) return function (_0x4511c0, _0x48025c) {
                  var _0x25f69a = _0x1601e7;
                  return _0x48025c('b' + _0x1820cf[_0x25f69a(0x3c8)][_0x4511c0[_0x25f69a(0x156)]] + _0x4511c0[_0x25f69a(0x1c5)][_0x25f69a(0x1c5)]);
                }(_0xe1a0c2, _0x447cd9);
                var _0x159d93 = _0x2c148e[_0xe1a0c2['type']];
                return void 0x0 !== _0xe1a0c2[_0x1601e7(0x1c5)] && (_0x159d93 += _0x830791 ? _0x8b404a['encode'](String(_0xe1a0c2[_0x1601e7(0x1c5)]), {
                  'strict': !0x1
                }) : String(_0xe1a0c2['data'])), _0x447cd9('' + _0x159d93);
              }, _0x1820cf[_0x5df7ec(0x259)] = function (_0x56dd20, _0x5a2835) {
                var _0x48abd4 = _0x5df7ec,
                    _0xe45070,
                    _0x388aae = 'b' + _0x1820cf[_0x48abd4(0x3c8)][_0x56dd20[_0x48abd4(0x156)]];

                if (void 0x0 !== _0xa50d65 && _0x56dd20['data'] instanceof _0xa50d65) {
                  var _0x5e20b4 = new FileReader();

                  return _0x5e20b4[_0x48abd4(0x18e)] = function () {
                    var _0x9a6f0 = _0x48abd4,
                        _0xf83e11 = _0x5e20b4[_0x9a6f0(0x1c0)][_0x9a6f0(0x460)](',')[0x1];

                    _0x5a2835(_0x388aae + _0xf83e11);
                  }, _0x5e20b4[_0x48abd4(0x1ef)](_0x56dd20[_0x48abd4(0x1c5)]);
                }

                try {
                  _0xe45070 = String[_0x48abd4(0x290)]['apply'](null, new Uint8Array(_0x56dd20[_0x48abd4(0x1c5)]));
                } catch (_0x685384) {
                  for (var _0x2f4150 = new Uint8Array(_0x56dd20[_0x48abd4(0x1c5)]), _0x13bccd = new Array(_0x2f4150[_0x48abd4(0x1b1)]), _0x44c095 = 0x0; _0x44c095 < _0x2f4150[_0x48abd4(0x1b1)]; _0x44c095++) _0x13bccd[_0x44c095] = _0x2f4150[_0x44c095];

                  _0xe45070 = String[_0x48abd4(0x290)]['apply'](null, _0x13bccd);
                }

                return _0x388aae += btoa(_0xe45070), _0x5a2835(_0x388aae);
              }, _0x1820cf[_0x5df7ec(0x2f5)] = function (_0x266531, _0x21b646, _0x50559e) {
                var _0xc9d663 = _0x5df7ec;
                if (void 0x0 === _0x266531) return _0x561b5e;

                if ('string' == typeof _0x266531) {
                  if ('b' === _0x266531[_0xc9d663(0x144)](0x0)) return _0x1820cf[_0xc9d663(0x4d1)](_0x266531[_0xc9d663(0x40e)](0x1), _0x21b646);
                  if (_0x50559e && !0x1 === (_0x266531 = function (_0x425d68) {
                    var _0x1c09ab = _0xc9d663;

                    try {
                      _0x425d68 = _0x8b404a[_0x1c09ab(0x3f1)](_0x425d68, {
                        'strict': !0x1
                      });
                    } catch (_0xd0fc68) {
                      return !0x1;
                    }

                    return _0x425d68;
                  }(_0x266531))) return _0x561b5e;

                  var _0x565681 = _0x266531[_0xc9d663(0x144)](0x0);

                  return Number(_0x565681) == _0x565681 && _0xa94474[_0x565681] ? _0x266531[_0xc9d663(0x1b1)] > 0x1 ? {
                    'type': _0xa94474[_0x565681],
                    'data': _0x266531[_0xc9d663(0x4a5)](0x1)
                  } : {
                    'type': _0xa94474[_0x565681]
                  } : _0x561b5e;
                }

                _0x565681 = new Uint8Array(_0x266531)[0x0];

                var _0x13b18d = _0x675352(_0x266531, 0x1);

                return _0xa50d65 && _0xc9d663(0x2f1) === _0x21b646 && (_0x13b18d = new _0xa50d65([_0x13b18d])), {
                  'type': _0xa94474[_0x565681],
                  'data': _0x13b18d
                };
              }, _0x1820cf[_0x5df7ec(0x4d1)] = function (_0x24a552, _0x4458cc) {
                var _0x3746e3 = _0x5df7ec,
                    _0x297e60 = _0xa94474[_0x24a552[_0x3746e3(0x144)](0x0)];

                if (!_0x49ce19) return {
                  'type': _0x297e60,
                  'data': {
                    'base64': !0x0,
                    'data': _0x24a552[_0x3746e3(0x40e)](0x1)
                  }
                };

                var _0x12347c = _0x49ce19['decode'](_0x24a552['substr'](0x1));

                return _0x3746e3(0x2f1) === _0x4458cc && _0xa50d65 && (_0x12347c = new _0xa50d65([_0x12347c])), {
                  'type': _0x297e60,
                  'data': _0x12347c
                };
              }, _0x1820cf[_0x5df7ec(0x3de)] = function (_0x3e50f6, _0x441068, _0x4e87a6) {
                var _0x1eb818 = _0x5df7ec;
                _0x1eb818(0x17d) == typeof _0x441068 && (_0x4e87a6 = _0x441068, _0x441068 = null);

                var _0x4eb078 = _0x224b8d(_0x3e50f6);

                return _0x441068 && _0x4eb078 ? _0xa50d65 && !_0x256d71 ? _0x1820cf['encodePayloadAsBlob'](_0x3e50f6, _0x4e87a6) : _0x1820cf[_0x1eb818(0x206)](_0x3e50f6, _0x4e87a6) : _0x3e50f6[_0x1eb818(0x1b1)] ? void _0x25f64f(_0x3e50f6, function (_0x585a7e, _0x2645bf) {
                  var _0x2bd108 = _0x1eb818;

                  _0x1820cf[_0x2bd108(0xf5)](_0x585a7e, !!_0x4eb078 && _0x441068, !0x1, function (_0x3f72f7) {
                    _0x2645bf(null, function (_0x1a362a) {
                      var _0x32cb12 = a0_0x107f;
                      return _0x1a362a[_0x32cb12(0x1b1)] + ':' + _0x1a362a;
                    }(_0x3f72f7));
                  });
                }, function (_0x89a6, _0x3914cb) {
                  return _0x4e87a6(_0x3914cb['join'](''));
                }) : _0x4e87a6('0:');
              }, _0x1820cf[_0x5df7ec(0x1b8)] = function (_0x5da84a, _0x4e1d44, _0x153e54) {
                var _0x2b885c = _0x5df7ec;
                if (_0x2b885c(0x268) != typeof _0x5da84a) return _0x1820cf['decodePayloadAsBinary'](_0x5da84a, _0x4e1d44, _0x153e54);

                var _0x1e06d1;

                if (_0x2b885c(0x17d) == typeof _0x4e1d44 && (_0x153e54 = _0x4e1d44, _0x4e1d44 = null), '' === _0x5da84a) return _0x153e54(_0x561b5e, 0x0, 0x1);

                for (var _0x59f047, _0x1d5b70, _0x337f85 = '', _0x1f6582 = 0x0, _0x489efb = _0x5da84a[_0x2b885c(0x1b1)]; _0x1f6582 < _0x489efb; _0x1f6582++) {
                  var _0x26174e = _0x5da84a[_0x2b885c(0x144)](_0x1f6582);

                  if (':' === _0x26174e) {
                    if ('' === _0x337f85 || _0x337f85 != (_0x59f047 = Number(_0x337f85))) return _0x153e54(_0x561b5e, 0x0, 0x1);
                    if (_0x337f85 != (_0x1d5b70 = _0x5da84a[_0x2b885c(0x40e)](_0x1f6582 + 0x1, _0x59f047))[_0x2b885c(0x1b1)]) return _0x153e54(_0x561b5e, 0x0, 0x1);

                    if (_0x1d5b70[_0x2b885c(0x1b1)]) {
                      if (_0x1e06d1 = _0x1820cf[_0x2b885c(0x2f5)](_0x1d5b70, _0x4e1d44, !0x1), _0x561b5e[_0x2b885c(0x156)] === _0x1e06d1['type'] && _0x561b5e[_0x2b885c(0x1c5)] === _0x1e06d1['data']) return _0x153e54(_0x561b5e, 0x0, 0x1);
                      if (!0x1 === _0x153e54(_0x1e06d1, _0x1f6582 + _0x59f047, _0x489efb)) return;
                    }

                    _0x1f6582 += _0x59f047, _0x337f85 = '';
                  } else _0x337f85 += _0x26174e;
                }

                return '' !== _0x337f85 ? _0x153e54(_0x561b5e, 0x0, 0x1) : void 0x0;
              }, _0x1820cf[_0x5df7ec(0x206)] = function (_0x4d857d, _0x570a88) {
                if (!_0x4d857d['length']) return _0x570a88(new ArrayBuffer(0x0));

                _0x25f64f(_0x4d857d, function (_0xbe5fa5, _0x458922) {
                  _0x1820cf['encodePacket'](_0xbe5fa5, !0x0, !0x0, function (_0x13efac) {
                    return _0x458922(null, _0x13efac);
                  });
                }, function (_0x522675, _0x51e3e3) {
                  var _0x4fd578 = a0_0x107f,
                      _0x3e3a31 = _0x51e3e3[_0x4fd578(0x225)](function (_0x121bca, _0x2b9681) {
                    var _0x54351e = _0x4fd578,
                        _0x1c5fd9;

                    return _0x121bca + (_0x1c5fd9 = _0x54351e(0x268) == typeof _0x2b9681 ? _0x2b9681[_0x54351e(0x1b1)] : _0x2b9681[_0x54351e(0x3e1)])[_0x54351e(0x436)]()[_0x54351e(0x1b1)] + _0x1c5fd9 + 0x2;
                  }, 0x0),
                      _0x4d845c = new Uint8Array(_0x3e3a31),
                      _0x370174 = 0x0;

                  return _0x51e3e3[_0x4fd578(0x293)](function (_0x9cf7f0) {
                    var _0x4cf6c9 = _0x4fd578,
                        _0x122a9e = _0x4cf6c9(0x268) == typeof _0x9cf7f0,
                        _0x45f24b = _0x9cf7f0;

                    if (_0x122a9e) {
                      for (var _0x43a2b1 = new Uint8Array(_0x9cf7f0['length']), _0x2a660f = 0x0; _0x2a660f < _0x9cf7f0['length']; _0x2a660f++) _0x43a2b1[_0x2a660f] = _0x9cf7f0[_0x4cf6c9(0x309)](_0x2a660f);

                      _0x45f24b = _0x43a2b1['buffer'];
                    }

                    _0x4d845c[_0x370174++] = _0x122a9e ? 0x0 : 0x1;

                    var _0x400f60 = _0x45f24b['byteLength'][_0x4cf6c9(0x436)]();

                    for (_0x2a660f = 0x0; _0x2a660f < _0x400f60['length']; _0x2a660f++) _0x4d845c[_0x370174++] = parseInt(_0x400f60[_0x2a660f]);

                    for (_0x4d845c[_0x370174++] = 0xff, _0x43a2b1 = new Uint8Array(_0x45f24b), _0x2a660f = 0x0; _0x2a660f < _0x43a2b1[_0x4cf6c9(0x1b1)]; _0x2a660f++) _0x4d845c[_0x370174++] = _0x43a2b1[_0x2a660f];
                  }), _0x570a88(_0x4d845c[_0x4fd578(0x314)]);
                });
              }, _0x1820cf[_0x5df7ec(0x37d)] = function (_0x14a0ef, _0x5abad6) {
                _0x25f64f(_0x14a0ef, function (_0x4a7c5c, _0x2deaf4) {
                  var _0x1efe0d = a0_0x107f;

                  _0x1820cf[_0x1efe0d(0xf5)](_0x4a7c5c, !0x0, !0x0, function (_0x5ba61a) {
                    var _0x448caf = _0x1efe0d,
                        _0x4b98ff = new Uint8Array(0x1);

                    if (_0x4b98ff[0x0] = 0x1, _0x448caf(0x268) == typeof _0x5ba61a) {
                      for (var _0x8461e0 = new Uint8Array(_0x5ba61a['length']), _0x3bd430 = 0x0; _0x3bd430 < _0x5ba61a[_0x448caf(0x1b1)]; _0x3bd430++) _0x8461e0[_0x3bd430] = _0x5ba61a['charCodeAt'](_0x3bd430);

                      _0x5ba61a = _0x8461e0[_0x448caf(0x314)], _0x4b98ff[0x0] = 0x0;
                    }

                    var _0x121e44 = (_0x5ba61a instanceof ArrayBuffer ? _0x5ba61a[_0x448caf(0x3e1)] : _0x5ba61a[_0x448caf(0x318)])['toString'](),
                        _0x52074c = new Uint8Array(_0x121e44['length'] + 0x1);

                    for (_0x3bd430 = 0x0; _0x3bd430 < _0x121e44[_0x448caf(0x1b1)]; _0x3bd430++) _0x52074c[_0x3bd430] = parseInt(_0x121e44[_0x3bd430]);

                    if (_0x52074c[_0x121e44['length']] = 0xff, _0xa50d65) {
                      var _0x4f7375 = new _0xa50d65([_0x4b98ff['buffer'], _0x52074c[_0x448caf(0x314)], _0x5ba61a]);

                      _0x2deaf4(null, _0x4f7375);
                    }
                  });
                }, function (_0x4593e3, _0x26bad7) {
                  return _0x5abad6(new _0xa50d65(_0x26bad7));
                });
              }, _0x1820cf[_0x5df7ec(0x21f)] = function (_0x15bf3c, _0x27c128, _0x4b34c4) {
                var _0x3b85b2 = _0x5df7ec;
                _0x3b85b2(0x17d) == typeof _0x27c128 && (_0x4b34c4 = _0x27c128, _0x27c128 = null);

                for (var _0x395f8e = _0x15bf3c, _0x324498 = []; _0x395f8e[_0x3b85b2(0x3e1)] > 0x0;) {
                  for (var _0xcb57e9 = new Uint8Array(_0x395f8e), _0x344a55 = 0x0 === _0xcb57e9[0x0], _0x47a847 = '', _0x26ffd9 = 0x1; 0xff !== _0xcb57e9[_0x26ffd9]; _0x26ffd9++) {
                    if (_0x47a847[_0x3b85b2(0x1b1)] > 0x136) return _0x4b34c4(_0x561b5e, 0x0, 0x1);
                    _0x47a847 += _0xcb57e9[_0x26ffd9];
                  }

                  _0x395f8e = _0x675352(_0x395f8e, 0x2 + _0x47a847['length']), _0x47a847 = parseInt(_0x47a847);

                  var _0x18e5b0 = _0x675352(_0x395f8e, 0x0, _0x47a847);

                  if (_0x344a55) try {
                    _0x18e5b0 = String[_0x3b85b2(0x290)]['apply'](null, new Uint8Array(_0x18e5b0));
                  } catch (_0x4adfff) {
                    var _0x2a5172 = new Uint8Array(_0x18e5b0);

                    for (_0x18e5b0 = '', _0x26ffd9 = 0x0; _0x26ffd9 < _0x2a5172[_0x3b85b2(0x1b1)]; _0x26ffd9++) _0x18e5b0 += String[_0x3b85b2(0x290)](_0x2a5172[_0x26ffd9]);
                  }
                  _0x324498[_0x3b85b2(0x41c)](_0x18e5b0), _0x395f8e = _0x675352(_0x395f8e, _0x47a847);
                }

                var _0x591fc9 = _0x324498['length'];

                _0x324498[_0x3b85b2(0x293)](function (_0x31614c, _0x4702e0) {
                  var _0x49a292 = _0x3b85b2;

                  _0x4b34c4(_0x1820cf[_0x49a292(0x2f5)](_0x31614c, _0x27c128, !0x0), _0x4702e0, _0x591fc9);
                });
              };
            },
            0x1f36: function (_0xee388b) {
              var _0x53f5f6 = a0_0x107f;

              _0xee388b[_0x53f5f6(0x38d)] = Object[_0x53f5f6(0x44d)] || function (_0x398c78) {
                var _0x1c189d = _0x53f5f6,
                    _0x27b5f1 = [],
                    _0x3afd47 = Object[_0x1c189d(0x1b3)][_0x1c189d(0x32a)];

                for (var _0xfc246 in _0x398c78) _0x3afd47[_0x1c189d(0x229)](_0x398c78, _0xfc246) && _0x27b5f1[_0x1c189d(0x41c)](_0xfc246);

                return _0x27b5f1;
              };
            },
            0xd56: function (_0x1ac269) {
              var _0x565c6a = a0_0x107f,
                  _0x164e52,
                  _0x2e49ae,
                  _0x233d88,
                  _0xa1fb00 = String[_0x565c6a(0x290)];

              function _0x54c980(_0x325ac3) {
                var _0x5d5d91 = _0x565c6a;

                for (var _0x262d3d, _0xf85ba4, _0xf757e7 = [], _0x78d04a = 0x0, _0x2e398f = _0x325ac3[_0x5d5d91(0x1b1)]; _0x78d04a < _0x2e398f;) (_0x262d3d = _0x325ac3['charCodeAt'](_0x78d04a++)) >= 0xd800 && _0x262d3d <= 0xdbff && _0x78d04a < _0x2e398f ? 0xdc00 == (0xfc00 & (_0xf85ba4 = _0x325ac3['charCodeAt'](_0x78d04a++))) ? _0xf757e7[_0x5d5d91(0x41c)](((0x3ff & _0x262d3d) << 0xa) + (0x3ff & _0xf85ba4) + 0x10000) : (_0xf757e7[_0x5d5d91(0x41c)](_0x262d3d), _0x78d04a--) : _0xf757e7[_0x5d5d91(0x41c)](_0x262d3d);

                return _0xf757e7;
              }

              function _0x4b7e5e(_0x18d514, _0x6563da) {
                var _0x12a7e3 = _0x565c6a;

                if (_0x18d514 >= 0xd800 && _0x18d514 <= 0xdfff) {
                  if (_0x6563da) throw Error(_0x12a7e3(0x3c7) + _0x18d514[_0x12a7e3(0x436)](0x10)[_0x12a7e3(0x10c)]() + _0x12a7e3(0x32b));
                  return !0x1;
                }

                return !0x0;
              }

              function _0x5e9427(_0x11bec4, _0x4d3f7f) {
                return _0xa1fb00(_0x11bec4 >> _0x4d3f7f & 0x3f | 0x80);
              }

              function _0x26d0e8(_0x34f1b8, _0x30988f) {
                if (0x0 == (0xffffff80 & _0x34f1b8)) return _0xa1fb00(_0x34f1b8);
                var _0x15bea2 = '';
                return 0x0 == (0xfffff800 & _0x34f1b8) ? _0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0x6 & 0x1f | 0xc0) : 0x0 == (0xffff0000 & _0x34f1b8) ? (_0x4b7e5e(_0x34f1b8, _0x30988f) || (_0x34f1b8 = 0xfffd), _0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0xc & 0xf | 0xe0), _0x15bea2 += _0x5e9427(_0x34f1b8, 0x6)) : 0x0 == (0xffe00000 & _0x34f1b8) && (_0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0x12 & 0x7 | 0xf0), _0x15bea2 += _0x5e9427(_0x34f1b8, 0xc), _0x15bea2 += _0x5e9427(_0x34f1b8, 0x6)), _0x15bea2 + _0xa1fb00(0x3f & _0x34f1b8 | 0x80);
              }

              function _0x25944f() {
                var _0x3631ab = _0x565c6a;
                if (_0x233d88 >= _0x2e49ae) throw Error(_0x3631ab(0x3c5));

                var _0x9bffc6 = 0xff & _0x164e52[_0x233d88];

                if (_0x233d88++, 0x80 == (0xc0 & _0x9bffc6)) return 0x3f & _0x9bffc6;
                throw Error(_0x3631ab(0x1ec));
              }

              function _0xfcd7aa(_0x369730) {
                var _0x5bdb47 = _0x565c6a,
                    _0x39dbb2,
                    _0x16cc2e;

                if (_0x233d88 > _0x2e49ae) throw Error(_0x5bdb47(0x3c5));
                if (_0x233d88 == _0x2e49ae) return !0x1;
                if (_0x39dbb2 = 0xff & _0x164e52[_0x233d88], _0x233d88++, 0x0 == (0x80 & _0x39dbb2)) return _0x39dbb2;

                if (0xc0 == (0xe0 & _0x39dbb2)) {
                  if ((_0x16cc2e = (0x1f & _0x39dbb2) << 0x6 | _0x25944f()) >= 0x80) return _0x16cc2e;
                  throw Error(_0x5bdb47(0x1ec));
                }

                if (0xe0 == (0xf0 & _0x39dbb2)) {
                  if ((_0x16cc2e = (0xf & _0x39dbb2) << 0xc | _0x25944f() << 0x6 | _0x25944f()) >= 0x800) return _0x4b7e5e(_0x16cc2e, _0x369730) ? _0x16cc2e : 0xfffd;
                  throw Error(_0x5bdb47(0x1ec));
                }

                if (0xf0 == (0xf8 & _0x39dbb2) && (_0x16cc2e = (0x7 & _0x39dbb2) << 0x12 | _0x25944f() << 0xc | _0x25944f() << 0x6 | _0x25944f()) >= 0x10000 && _0x16cc2e <= 0x10ffff) return _0x16cc2e;
                throw Error(_0x5bdb47(0x381));
              }

              _0x1ac269['exports'] = {
                'version': _0x565c6a(0x38c),
                'encode': function (_0x47c10b, _0x552ec3) {
                  var _0x306862 = _0x565c6a;

                  for (var _0x2ec935 = !0x1 !== (_0x552ec3 = _0x552ec3 || {})[_0x306862(0x3c1)], _0x53e8b1 = _0x54c980(_0x47c10b), _0xece1d7 = _0x53e8b1[_0x306862(0x1b1)], _0x2ff167 = -0x1, _0x518aa2 = ''; ++_0x2ff167 < _0xece1d7;) _0x518aa2 += _0x26d0e8(_0x53e8b1[_0x2ff167], _0x2ec935);

                  return _0x518aa2;
                },
                'decode': function (_0x3252e4, _0x291ac6) {
                  var _0x91153d = _0x565c6a,
                      _0x13a79a = !0x1 !== (_0x291ac6 = _0x291ac6 || {})[_0x91153d(0x3c1)];

                  _0x164e52 = _0x54c980(_0x3252e4), _0x2e49ae = _0x164e52[_0x91153d(0x1b1)], _0x233d88 = 0x0;

                  for (var _0x228652, _0x4486af = []; !0x1 !== (_0x228652 = _0xfcd7aa(_0x13a79a));) _0x4486af[_0x91153d(0x41c)](_0x228652);

                  return function (_0x59ebd8) {
                    var _0xd9deda = _0x91153d;

                    for (var _0x23c0e0, _0x20e88a = _0x59ebd8[_0xd9deda(0x1b1)], _0x4efa4a = -0x1, _0x2a1258 = ''; ++_0x4efa4a < _0x20e88a;) (_0x23c0e0 = _0x59ebd8[_0x4efa4a]) > 0xffff && (_0x2a1258 += _0xa1fb00((_0x23c0e0 -= 0x10000) >>> 0xa & 0x3ff | 0xd800), _0x23c0e0 = 0xdc00 | 0x3ff & _0x23c0e0), _0x2a1258 += _0xa1fb00(_0x23c0e0);

                    return _0x2a1258;
                  }(_0x4486af);
                }
              };
            },
            0x1c13: function (_0xe85f6) {
              var _0x17388d = a0_0x107f;

              var _0x49ca49,
                  _0x3ffb9d = _0x17388d(0x33c) == typeof Reflect ? Reflect : null,
                  _0xaaa83d = _0x3ffb9d && _0x17388d(0x17d) == typeof _0x3ffb9d[_0x17388d(0x394)] ? _0x3ffb9d[_0x17388d(0x394)] : function (_0x10c1ca, _0x27fd13, _0x45e90a) {
                var _0x7dec58 = _0x17388d;
                return Function[_0x7dec58(0x1b3)]['apply'][_0x7dec58(0x229)](_0x10c1ca, _0x27fd13, _0x45e90a);
              };

              _0x49ca49 = _0x3ffb9d && _0x17388d(0x17d) == typeof _0x3ffb9d[_0x17388d(0x28b)] ? _0x3ffb9d[_0x17388d(0x28b)] : Object[_0x17388d(0x1c6)] ? function (_0x5ed035) {
                var _0x4da747 = _0x17388d;
                return Object[_0x4da747(0x2c4)](_0x5ed035)[_0x4da747(0x23c)](Object[_0x4da747(0x1c6)](_0x5ed035));
              } : function (_0x440c92) {
                var _0x5226a7 = _0x17388d;
                return Object[_0x5226a7(0x2c4)](_0x440c92);
              };

              var _0x4430d4 = Number['isNaN'] || function (_0x4cb7af) {
                return _0x4cb7af != _0x4cb7af;
              };

              function _0x5d8fb5() {
                var _0x2ffa76 = _0x17388d;

                _0x5d8fb5[_0x2ffa76(0x150)][_0x2ffa76(0x229)](this);
              }

              _0xe85f6[_0x17388d(0x38d)] = _0x5d8fb5, _0xe85f6[_0x17388d(0x38d)][_0x17388d(0x319)] = function (_0x4e74a5, _0x237563) {
                return new Promise(function (_0x1b168c, _0x3798e5) {
                  var _0x46bcbe = a0_0x107f;

                  function _0x38f743(_0x509edf) {
                    var _0x5a101 = a0_0x107f;
                    _0x4e74a5[_0x5a101(0x198)](_0x237563, _0x4ef860), _0x3798e5(_0x509edf);
                  }

                  function _0x4ef860() {
                    var _0x105df9 = a0_0x107f;
                    _0x105df9(0x17d) == typeof _0x4e74a5[_0x105df9(0x198)] && _0x4e74a5[_0x105df9(0x198)]('error', _0x38f743), _0x1b168c([][_0x105df9(0x389)]['call'](arguments));
                  }

                  _0x546ef1(_0x4e74a5, _0x237563, _0x4ef860, {
                    'once': !0x0
                  }), _0x46bcbe(0x122) !== _0x237563 && function (_0x1276ee, _0x34b523, _0x55458f) {
                    var _0x1c4b0e = _0x46bcbe;
                    _0x1c4b0e(0x17d) == typeof _0x1276ee['on'] && _0x546ef1(_0x1276ee, _0x1c4b0e(0x122), _0x34b523, {
                      'once': !0x0
                    });
                  }(_0x4e74a5, _0x38f743);
                });
              }, _0x5d8fb5['EventEmitter'] = _0x5d8fb5, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x49a)] = void 0x0, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x212)] = 0x0, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x2a9)] = void 0x0;
              var _0x4a1cc6 = 0xa;

              function _0x1ae696(_0x31b21c) {
                var _0x881391 = _0x17388d;
                if (_0x881391(0x17d) != typeof _0x31b21c) throw new TypeError(_0x881391(0x2bb) + typeof _0x31b21c);
              }

              function _0x314d7f(_0x1272d6) {
                var _0x30b93a = _0x17388d;
                return void 0x0 === _0x1272d6['_maxListeners'] ? _0x5d8fb5[_0x30b93a(0x3a7)] : _0x1272d6[_0x30b93a(0x2a9)];
              }

              function _0x544cd7(_0x1618f3, _0x59b6f6, _0x3b92f5, _0x130705) {
                var _0x251b2d = _0x17388d,
                    _0x540281,
                    _0x4100f3,
                    _0x39d651,
                    _0x2b5629;

                if (_0x1ae696(_0x3b92f5), void 0x0 === (_0x4100f3 = _0x1618f3[_0x251b2d(0x49a)]) ? (_0x4100f3 = _0x1618f3[_0x251b2d(0x49a)] = Object[_0x251b2d(0x39c)](null), _0x1618f3[_0x251b2d(0x212)] = 0x0) : (void 0x0 !== _0x4100f3['newListener'] && (_0x1618f3[_0x251b2d(0x24e)](_0x251b2d(0x37f), _0x59b6f6, _0x3b92f5['listener'] ? _0x3b92f5[_0x251b2d(0x343)] : _0x3b92f5), _0x4100f3 = _0x1618f3[_0x251b2d(0x49a)]), _0x39d651 = _0x4100f3[_0x59b6f6]), void 0x0 === _0x39d651) _0x39d651 = _0x4100f3[_0x59b6f6] = _0x3b92f5, ++_0x1618f3[_0x251b2d(0x212)];else {
                  if (_0x251b2d(0x17d) == typeof _0x39d651 ? _0x39d651 = _0x4100f3[_0x59b6f6] = _0x130705 ? [_0x3b92f5, _0x39d651] : [_0x39d651, _0x3b92f5] : _0x130705 ? _0x39d651['unshift'](_0x3b92f5) : _0x39d651['push'](_0x3b92f5), (_0x540281 = _0x314d7f(_0x1618f3)) > 0x0 && _0x39d651[_0x251b2d(0x1b1)] > _0x540281 && !_0x39d651['warned']) {
                    _0x39d651[_0x251b2d(0x3a5)] = !0x0;

                    var _0xe1fb81 = new Error(_0x251b2d(0x332) + _0x39d651['length'] + '\x20' + String(_0x59b6f6) + _0x251b2d(0x463));

                    _0xe1fb81[_0x251b2d(0x32f)] = _0x251b2d(0x10d), _0xe1fb81['emitter'] = _0x1618f3, _0xe1fb81[_0x251b2d(0x156)] = _0x59b6f6, _0xe1fb81[_0x251b2d(0x1b2)] = _0x39d651['length'], _0x2b5629 = _0xe1fb81, console && console['warn'] && console[_0x251b2d(0x31c)](_0x2b5629);
                  }
                }
                return _0x1618f3;
              }

              function _0x3f2cf9() {
                var _0x3ed4d3 = _0x17388d;
                if (!this[_0x3ed4d3(0x40d)]) return this[_0x3ed4d3(0x2d9)][_0x3ed4d3(0x198)](this[_0x3ed4d3(0x156)], this[_0x3ed4d3(0x3f7)]), this[_0x3ed4d3(0x40d)] = !0x0, 0x0 === arguments[_0x3ed4d3(0x1b1)] ? this[_0x3ed4d3(0x343)][_0x3ed4d3(0x229)](this[_0x3ed4d3(0x2d9)]) : this[_0x3ed4d3(0x343)]['apply'](this[_0x3ed4d3(0x2d9)], arguments);
              }

              function _0x978843(_0x5ec9d6, _0x5e4849, _0x47d162) {
                var _0x38ebd9 = _0x17388d,
                    _0x57f977 = {
                  'fired': !0x1,
                  'wrapFn': void 0x0,
                  'target': _0x5ec9d6,
                  'type': _0x5e4849,
                  'listener': _0x47d162
                },
                    _0x48b45e = _0x3f2cf9['bind'](_0x57f977);

                return _0x48b45e[_0x38ebd9(0x343)] = _0x47d162, _0x57f977[_0x38ebd9(0x3f7)] = _0x48b45e, _0x48b45e;
              }

              function _0xfe9f9c(_0x3a6712, _0x272895, _0x128a02) {
                var _0x52547b = _0x17388d,
                    _0x536aab = _0x3a6712['_events'];
                if (void 0x0 === _0x536aab) return [];
                var _0x1acf5b = _0x536aab[_0x272895];
                return void 0x0 === _0x1acf5b ? [] : _0x52547b(0x17d) == typeof _0x1acf5b ? _0x128a02 ? [_0x1acf5b[_0x52547b(0x343)] || _0x1acf5b] : [_0x1acf5b] : _0x128a02 ? function (_0x255724) {
                  var _0x45f08a = _0x52547b;

                  for (var _0x591bd6 = new Array(_0x255724[_0x45f08a(0x1b1)]), _0x3a7cd5 = 0x0; _0x3a7cd5 < _0x591bd6[_0x45f08a(0x1b1)]; ++_0x3a7cd5) _0x591bd6[_0x3a7cd5] = _0x255724[_0x3a7cd5][_0x45f08a(0x343)] || _0x255724[_0x3a7cd5];

                  return _0x591bd6;
                }(_0x1acf5b) : _0x3ce7cd(_0x1acf5b, _0x1acf5b[_0x52547b(0x1b1)]);
              }

              function _0x32232d(_0x3bd785) {
                var _0x4762f4 = _0x17388d,
                    _0x4d6283 = this['_events'];

                if (void 0x0 !== _0x4d6283) {
                  var _0x54ddde = _0x4d6283[_0x3bd785];
                  if (_0x4762f4(0x17d) == typeof _0x54ddde) return 0x1;
                  if (void 0x0 !== _0x54ddde) return _0x54ddde[_0x4762f4(0x1b1)];
                }

                return 0x0;
              }

              function _0x3ce7cd(_0x21a800, _0x3143ba) {
                for (var _0x3cc9f2 = new Array(_0x3143ba), _0x2d35e7 = 0x0; _0x2d35e7 < _0x3143ba; ++_0x2d35e7) _0x3cc9f2[_0x2d35e7] = _0x21a800[_0x2d35e7];

                return _0x3cc9f2;
              }

              function _0x546ef1(_0x67e97b, _0xf576d5, _0x50cc08, _0x2f3db0) {
                var _0x2b7dc3 = _0x17388d;
                if (_0x2b7dc3(0x17d) == typeof _0x67e97b['on']) _0x2f3db0[_0x2b7dc3(0x319)] ? _0x67e97b[_0x2b7dc3(0x319)](_0xf576d5, _0x50cc08) : _0x67e97b['on'](_0xf576d5, _0x50cc08);else {
                  if ('function' != typeof _0x67e97b[_0x2b7dc3(0x466)]) throw new TypeError(_0x2b7dc3(0x41d) + typeof _0x67e97b);

                  _0x67e97b[_0x2b7dc3(0x466)](_0xf576d5, function _0x576b2b(_0x303576) {
                    var _0x1bd292 = _0x2b7dc3;
                    _0x2f3db0[_0x1bd292(0x319)] && _0x67e97b[_0x1bd292(0x1de)](_0xf576d5, _0x576b2b), _0x50cc08(_0x303576);
                  });
                }
              }

              Object[_0x17388d(0xf2)](_0x5d8fb5, _0x17388d(0x3a7), {
                'enumerable': !0x0,
                'get': function () {
                  return _0x4a1cc6;
                },
                'set': function (_0x2370ac) {
                  var _0xad45c8 = _0x17388d;
                  if (_0xad45c8(0x11f) != typeof _0x2370ac || _0x2370ac < 0x0 || _0x4430d4(_0x2370ac)) throw new RangeError(_0xad45c8(0x1d0) + _0x2370ac + '.');
                  _0x4a1cc6 = _0x2370ac;
                }
              }), _0x5d8fb5[_0x17388d(0x150)] = function () {
                var _0x5ddcec = _0x17388d;
                void 0x0 !== this[_0x5ddcec(0x49a)] && this[_0x5ddcec(0x49a)] !== Object[_0x5ddcec(0x1bf)](this)['_events'] || (this[_0x5ddcec(0x49a)] = Object[_0x5ddcec(0x39c)](null), this[_0x5ddcec(0x212)] = 0x0), this['_maxListeners'] = this[_0x5ddcec(0x2a9)] || void 0x0;
              }, _0x5d8fb5['prototype'][_0x17388d(0x492)] = function (_0x154d19) {
                if ('number' != typeof _0x154d19 || _0x154d19 < 0x0 || _0x4430d4(_0x154d19)) throw new RangeError('The\x20value\x20of\x20\x22n\x22\x20is\x20out\x20of\x20range.\x20It\x20must\x20be\x20a\x20non-negative\x20number.\x20Received\x20' + _0x154d19 + '.');
                return this['_maxListeners'] = _0x154d19, this;
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x39a)] = function () {
                return _0x314d7f(this);
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x24e)] = function (_0x270f30) {
                var _0x1d35d1 = _0x17388d;

                for (var _0x7eb821 = [], _0x3c6ea2 = 0x1; _0x3c6ea2 < arguments[_0x1d35d1(0x1b1)]; _0x3c6ea2++) _0x7eb821[_0x1d35d1(0x41c)](arguments[_0x3c6ea2]);

                var _0x2c2df1 = _0x1d35d1(0x122) === _0x270f30,
                    _0x572b8c = this[_0x1d35d1(0x49a)];

                if (void 0x0 !== _0x572b8c) _0x2c2df1 = _0x2c2df1 && void 0x0 === _0x572b8c['error'];else {
                  if (!_0x2c2df1) return !0x1;
                }

                if (_0x2c2df1) {
                  var _0x46b84a;

                  if (_0x7eb821[_0x1d35d1(0x1b1)] > 0x0 && (_0x46b84a = _0x7eb821[0x0]), _0x46b84a instanceof Error) throw _0x46b84a;

                  var _0x5d2f36 = new Error(_0x1d35d1(0x12c) + (_0x46b84a ? '\x20(' + _0x46b84a[_0x1d35d1(0x3dd)] + ')' : ''));

                  throw _0x5d2f36['context'] = _0x46b84a, _0x5d2f36;
                }

                var _0x595e10 = _0x572b8c[_0x270f30];
                if (void 0x0 === _0x595e10) return !0x1;
                if (_0x1d35d1(0x17d) == typeof _0x595e10) _0xaaa83d(_0x595e10, this, _0x7eb821);else {
                  var _0x26a1a1 = _0x595e10[_0x1d35d1(0x1b1)],
                      _0x1a8f84 = _0x3ce7cd(_0x595e10, _0x26a1a1);

                  for (_0x3c6ea2 = 0x0; _0x3c6ea2 < _0x26a1a1; ++_0x3c6ea2) _0xaaa83d(_0x1a8f84[_0x3c6ea2], this, _0x7eb821);
                }
                return !0x0;
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x379)] = function (_0x3ba541, _0x26d08a) {
                return _0x544cd7(this, _0x3ba541, _0x26d08a, !0x1);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['on'] = _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x379)], _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x2c6)] = function (_0x8dde63, _0x335c2a) {
                return _0x544cd7(this, _0x8dde63, _0x335c2a, !0x0);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['once'] = function (_0x35caea, _0x1aa387) {
                return _0x1ae696(_0x1aa387), this['on'](_0x35caea, _0x978843(this, _0x35caea, _0x1aa387)), this;
              }, _0x5d8fb5['prototype'][_0x17388d(0x25a)] = function (_0x27a857, _0xd4ab99) {
                var _0x69e3fd = _0x17388d;
                return _0x1ae696(_0xd4ab99), this[_0x69e3fd(0x2c6)](_0x27a857, _0x978843(this, _0x27a857, _0xd4ab99)), this;
              }, _0x5d8fb5[_0x17388d(0x1b3)]['removeListener'] = function (_0x515d41, _0x3bf6b8) {
                var _0x5a9be0 = _0x17388d,
                    _0x2209c7,
                    _0x86e85b,
                    _0x42ea2d,
                    _0x1f4ebe,
                    _0x493707;

                if (_0x1ae696(_0x3bf6b8), void 0x0 === (_0x86e85b = this['_events'])) return this;
                if (void 0x0 === (_0x2209c7 = _0x86e85b[_0x515d41])) return this;
                if (_0x2209c7 === _0x3bf6b8 || _0x2209c7['listener'] === _0x3bf6b8) 0x0 == --this[_0x5a9be0(0x212)] ? this[_0x5a9be0(0x49a)] = Object[_0x5a9be0(0x39c)](null) : (delete _0x86e85b[_0x515d41], _0x86e85b[_0x5a9be0(0x198)] && this[_0x5a9be0(0x24e)]('removeListener', _0x515d41, _0x2209c7[_0x5a9be0(0x343)] || _0x3bf6b8));else {
                  if ('function' != typeof _0x2209c7) {
                    for (_0x42ea2d = -0x1, _0x1f4ebe = _0x2209c7[_0x5a9be0(0x1b1)] - 0x1; _0x1f4ebe >= 0x0; _0x1f4ebe--) if (_0x2209c7[_0x1f4ebe] === _0x3bf6b8 || _0x2209c7[_0x1f4ebe][_0x5a9be0(0x343)] === _0x3bf6b8) {
                      _0x493707 = _0x2209c7[_0x1f4ebe][_0x5a9be0(0x343)], _0x42ea2d = _0x1f4ebe;
                      break;
                    }

                    if (_0x42ea2d < 0x0) return this;
                    0x0 === _0x42ea2d ? _0x2209c7['shift']() : function (_0x84481a, _0x287012) {
                      var _0x31c7f4 = _0x5a9be0;

                      for (; _0x287012 + 0x1 < _0x84481a[_0x31c7f4(0x1b1)]; _0x287012++) _0x84481a[_0x287012] = _0x84481a[_0x287012 + 0x1];

                      _0x84481a['pop']();
                    }(_0x2209c7, _0x42ea2d), 0x1 === _0x2209c7[_0x5a9be0(0x1b1)] && (_0x86e85b[_0x515d41] = _0x2209c7[0x0]), void 0x0 !== _0x86e85b['removeListener'] && this['emit'](_0x5a9be0(0x198), _0x515d41, _0x493707 || _0x3bf6b8);
                  }
                }
                return this;
              }, _0x5d8fb5[_0x17388d(0x1b3)]['off'] = _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x198)], _0x5d8fb5[_0x17388d(0x1b3)]['removeAllListeners'] = function (_0x26aa6d) {
                var _0x569903 = _0x17388d,
                    _0x5c40c5,
                    _0x496c46,
                    _0x4e2e65;

                if (void 0x0 === (_0x496c46 = this[_0x569903(0x49a)])) return this;
                if (void 0x0 === _0x496c46['removeListener']) return 0x0 === arguments[_0x569903(0x1b1)] ? (this[_0x569903(0x49a)] = Object['create'](null), this[_0x569903(0x212)] = 0x0) : void 0x0 !== _0x496c46[_0x26aa6d] && (0x0 == --this['_eventsCount'] ? this[_0x569903(0x49a)] = Object[_0x569903(0x39c)](null) : delete _0x496c46[_0x26aa6d]), this;

                if (0x0 === arguments[_0x569903(0x1b1)]) {
                  var _0x585c8b,
                      _0x2172dc = Object[_0x569903(0x44d)](_0x496c46);

                  for (_0x4e2e65 = 0x0; _0x4e2e65 < _0x2172dc[_0x569903(0x1b1)]; ++_0x4e2e65) _0x569903(0x198) !== (_0x585c8b = _0x2172dc[_0x4e2e65]) && this[_0x569903(0x146)](_0x585c8b);

                  return this[_0x569903(0x146)]('removeListener'), this['_events'] = Object[_0x569903(0x39c)](null), this['_eventsCount'] = 0x0, this;
                }

                if ('function' == typeof (_0x5c40c5 = _0x496c46[_0x26aa6d])) this[_0x569903(0x198)](_0x26aa6d, _0x5c40c5);else {
                  if (void 0x0 !== _0x5c40c5) {
                    for (_0x4e2e65 = _0x5c40c5[_0x569903(0x1b1)] - 0x1; _0x4e2e65 >= 0x0; _0x4e2e65--) this['removeListener'](_0x26aa6d, _0x5c40c5[_0x4e2e65]);
                  }
                }
                return this;
              }, _0x5d8fb5['prototype'][_0x17388d(0x4c3)] = function (_0x357fab) {
                return _0xfe9f9c(this, _0x357fab, !0x0);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['rawListeners'] = function (_0x390063) {
                return _0xfe9f9c(this, _0x390063, !0x1);
              }, _0x5d8fb5[_0x17388d(0x1f9)] = function (_0x1af358, _0x2733f6) {
                var _0x5e1582 = _0x17388d;
                return _0x5e1582(0x17d) == typeof _0x1af358[_0x5e1582(0x1f9)] ? _0x1af358[_0x5e1582(0x1f9)](_0x2733f6) : _0x32232d['call'](_0x1af358, _0x2733f6);
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x1f9)] = _0x32232d, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x46c)] = function () {
                var _0x392248 = _0x17388d;
                return this[_0x392248(0x212)] > 0x0 ? _0x49ca49(this[_0x392248(0x49a)]) : [];
              };
            },
            0xd8a: function (_0x1943e5, _0x9e9be1, _0x436768) {
              var _0x526890 = a0_0x107f,
                  _0x18e132 = _0x436768(0x16c2),
                  _0x213215 = Object[_0x526890(0x1b3)][_0x526890(0x436)],
                  _0x361968 = _0x526890(0x17d) == typeof Blob || _0x526890(0x364) != typeof Blob && _0x526890(0x432) === _0x213215[_0x526890(0x229)](Blob),
                  _0x2a2789 = 'function' == typeof File || _0x526890(0x364) != typeof File && _0x526890(0x4a4) === _0x213215[_0x526890(0x229)](File);

              _0x1943e5[_0x526890(0x38d)] = function _0x34bab7(_0x407e39) {
                var _0x429ca1 = _0x526890;
                if (!_0x407e39 || _0x429ca1(0x33c) != typeof _0x407e39) return !0x1;

                if (_0x18e132(_0x407e39)) {
                  for (var _0x3c262d = 0x0, _0x3b2818 = _0x407e39[_0x429ca1(0x1b1)]; _0x3c262d < _0x3b2818; _0x3c262d++) if (_0x34bab7(_0x407e39[_0x3c262d])) return !0x0;

                  return !0x1;
                }

                if (_0x429ca1(0x17d) == typeof Buffer && Buffer[_0x429ca1(0x160)] && Buffer[_0x429ca1(0x160)](_0x407e39) || 'function' == typeof ArrayBuffer && _0x407e39 instanceof ArrayBuffer || _0x361968 && _0x407e39 instanceof Blob || _0x2a2789 && _0x407e39 instanceof File) return !0x0;
                if (_0x407e39[_0x429ca1(0x46d)] && _0x429ca1(0x17d) == typeof _0x407e39[_0x429ca1(0x46d)] && 0x1 === arguments[_0x429ca1(0x1b1)]) return _0x34bab7(_0x407e39[_0x429ca1(0x46d)](), !0x0);

                for (var _0x3f0eeb in _0x407e39) if (Object[_0x429ca1(0x1b3)][_0x429ca1(0x32a)][_0x429ca1(0x229)](_0x407e39, _0x3f0eeb) && _0x34bab7(_0x407e39[_0x3f0eeb])) return !0x0;

                return !0x1;
              };
            },
            0x1f7a: function (_0xb1cefd) {
              var _0x55ccd2 = a0_0x107f;

              try {
                _0xb1cefd['exports'] = 'undefined' != typeof XMLHttpRequest && _0x55ccd2(0x26b) in new XMLHttpRequest();
              } catch (_0x4d3dff) {
                _0xb1cefd[_0x55ccd2(0x38d)] = !0x1;
              }
            },
            0x28a: function (_0x1c8f8b, _0x403917) {
              var _0x2f7a0e = a0_0x107f,
                  _0x18db60,
                  _0xa5f633;

              _0x18db60 = function () {
                var _0x35ddfd = a0_0x107f;

                function _0xc67562(_0x312080) {
                  var _0x5e32a7 = a0_0x107f;

                  switch (this['clear'](), arguments[_0x5e32a7(0x1b1)]) {
                    case 0x0:
                      break;

                    case 0x1:
                      _0x5e32a7(0x1b1) in _0x312080 ? _0x1e95ed(this, Array['prototype'][_0x5e32a7(0x23c)][_0x5e32a7(0x394)]([], _0x312080)) : this[_0x5e32a7(0x445)](_0x312080);
                      break;

                    default:
                      _0x1e95ed(this, arguments);

                  }
                }

                var _0x4e6b5f = _0xc67562[_0x35ddfd(0x1b3)] = {
                  'constructor': _0xc67562,
                  'get': function (_0x1e2fa8) {
                    var _0x31c7da = _0x35ddfd,
                        _0x1e1b0f = this[_0x31c7da(0xf8)][this[_0x31c7da(0x3bd)](_0x1e2fa8)];

                    return _0x1e1b0f && _0x1e1b0f[0x1];
                  },
                  'set': function (_0x4cde3e, _0x145c2c) {
                    var _0x13f2fe = _0x35ddfd,
                        _0x352f10 = this[_0x13f2fe(0x3bd)](_0x4cde3e);

                    _0x352f10 in this[_0x13f2fe(0xf8)] || this[_0x13f2fe(0x318)]++, this[_0x13f2fe(0xf8)][_0x352f10] = [_0x4cde3e, _0x145c2c];
                  },
                  'multi': function () {
                    _0x1e95ed(this, arguments);
                  },
                  'copy': function (_0xca64ba) {
                    var _0x1bcfcb = _0x35ddfd;

                    for (var _0xc711e in _0xca64ba[_0x1bcfcb(0xf8)]) _0xc711e in this[_0x1bcfcb(0xf8)] || this[_0x1bcfcb(0x318)]++, this[_0x1bcfcb(0xf8)][_0xc711e] = _0xca64ba[_0x1bcfcb(0xf8)][_0xc711e];
                  },
                  'has': function (_0x50b7ae) {
                    var _0x810e9f = _0x35ddfd;
                    return this[_0x810e9f(0x3bd)](_0x50b7ae) in this[_0x810e9f(0xf8)];
                  },
                  'search': function (_0x551d86) {
                    var _0x52f0df = _0x35ddfd;

                    for (var _0x1e3f74 in this[_0x52f0df(0xf8)]) if (this['_data'][_0x1e3f74][0x1] === _0x551d86) return this[_0x52f0df(0xf8)][_0x1e3f74][0x0];

                    return null;
                  },
                  'delete': function (_0xf7c5a4) {
                    var _0x2d50f5 = _0x35ddfd,
                        _0x3a426c = this[_0x2d50f5(0x3bd)](_0xf7c5a4);

                    _0x3a426c in this[_0x2d50f5(0xf8)] && (this[_0x2d50f5(0x318)]--, delete this[_0x2d50f5(0xf8)][_0x3a426c]);
                  },
                  'type': function (_0x7bff04) {
                    var _0x56397c = _0x35ddfd,
                        _0x5b0cd7 = Object['prototype'][_0x56397c(0x436)][_0x56397c(0x229)](_0x7bff04)[_0x56397c(0x389)](0x8, -0x1)['toLowerCase']();

                    return _0x7bff04 || 'domwindow' !== _0x5b0cd7 && _0x56397c(0x13e) !== _0x5b0cd7 ? _0x5b0cd7 : _0x7bff04 + '';
                  },
                  'keys': function () {
                    var _0x470833 = _0x35ddfd,
                        _0x434ca2 = [];
                    return this[_0x470833(0x293)](function (_0x263824, _0x12b5f2) {
                      var _0x27e192 = _0x470833;

                      _0x434ca2[_0x27e192(0x41c)](_0x12b5f2);
                    }), _0x434ca2;
                  },
                  'values': function () {
                    var _0x36ce3d = _0x35ddfd,
                        _0x3d2d5e = [];
                    return this[_0x36ce3d(0x293)](function (_0x20e2c2) {
                      var _0x522b7d = _0x36ce3d;

                      _0x3d2d5e[_0x522b7d(0x41c)](_0x20e2c2);
                    }), _0x3d2d5e;
                  },
                  'entries': function () {
                    var _0x56cdde = _0x35ddfd,
                        _0x5d74f2 = [];
                    return this[_0x56cdde(0x293)](function (_0x1ec74b, _0x10ff94) {
                      var _0x22cac5 = _0x56cdde;

                      _0x5d74f2[_0x22cac5(0x41c)]([_0x10ff94, _0x1ec74b]);
                    }), _0x5d74f2;
                  },
                  'count': function () {
                    return this['size'];
                  },
                  'clear': function () {
                    var _0xc39345 = _0x35ddfd;
                    this[_0xc39345(0xf8)] = {}, this[_0xc39345(0x318)] = 0x0;
                  },
                  'clone': function () {
                    return new _0xc67562(this);
                  },
                  'hash': function (_0x2c4979) {
                    var _0x1fd58f = _0x35ddfd;

                    switch (this['type'](_0x2c4979)) {
                      case 'undefined':
                      case _0x1fd58f(0x471):
                      case _0x1fd58f(0x2a8):
                      case _0x1fd58f(0x11f):
                      case _0x1fd58f(0x4c2):
                        return _0x2c4979 + '';

                      case 'date':
                        return '♣' + _0x2c4979['getTime']();

                      case _0x1fd58f(0x268):
                        return '♠' + _0x2c4979;

                      case 'array':
                        for (var _0x2c1bdc = [], _0x41a0b5 = 0x0; _0x41a0b5 < _0x2c4979['length']; _0x41a0b5++) _0x2c1bdc[_0x41a0b5] = this[_0x1fd58f(0x3bd)](_0x2c4979[_0x41a0b5]);

                        return '♥' + _0x2c1bdc['join']('⁞');

                      default:
                        return _0x2c4979[_0x1fd58f(0x32a)](_0x1fd58f(0x21b)) || (_0x2c4979[_0x1fd58f(0x21b)] = ++_0xc67562['uid'], _0x26a584 = _0x2c4979, _0x462eb1 = _0x1fd58f(0x21b), Object[_0x1fd58f(0xf2)] && Object[_0x1fd58f(0xf2)](_0x26a584, _0x462eb1, {
                          'enumerable': !0x1
                        })), '♦' + _0x2c4979[_0x1fd58f(0x21b)];
                    }

                    var _0x26a584, _0x462eb1;
                  },
                  'forEach': function (_0x22ec14, _0x598f25) {
                    var _0x658a40 = _0x35ddfd;

                    for (var _0x3ad735 in this[_0x658a40(0xf8)]) {
                      var _0x5593b1 = this[_0x658a40(0xf8)][_0x3ad735];

                      _0x22ec14[_0x658a40(0x229)](_0x598f25 || this, _0x5593b1[0x1], _0x5593b1[0x0]);
                    }
                  }
                };

                function _0x1e95ed(_0x5db2d2, _0x27964f) {
                  var _0x515449 = _0x35ddfd;

                  for (var _0x47a877 = 0x0; _0x47a877 < _0x27964f[_0x515449(0x1b1)]; _0x47a877 += 0x2) _0x5db2d2['set'](_0x27964f[_0x47a877], _0x27964f[_0x47a877 + 0x1]);
                }

                return _0xc67562[_0x35ddfd(0x10b)] = 0x0, _0x35ddfd(0x364) != typeof Symbol && void 0x0 !== Symbol[_0x35ddfd(0x406)] && (_0x4e6b5f[Symbol[_0x35ddfd(0x406)]] = function () {
                  var _0x242f5d = this['entries'](),
                      _0x15d552 = 0x0;

                  return {
                    'next': function () {
                      if (_0x15d552 === _0x242f5d['length']) return {
                        'done': !0x0
                      };
                      var _0x30db07 = _0x242f5d[_0x15d552++];
                      return {
                        'value': {
                          'key': _0x30db07[0x0],
                          'value': _0x30db07[0x1]
                        },
                        'done': !0x1
                      };
                    }
                  };
                }), [_0x35ddfd(0x4ba), 'multi', _0x35ddfd(0x445), 'delete', _0x35ddfd(0x44a), 'forEach'][_0x35ddfd(0x293)](function (_0x4217a1) {
                  var _0x344ec5 = _0x4e6b5f[_0x4217a1];

                  _0x4e6b5f[_0x4217a1] = function () {
                    var _0x457366 = a0_0x107f;
                    return _0x344ec5[_0x457366(0x394)](this, arguments), this;
                  };
                }), _0xc67562[_0x35ddfd(0x1b3)][_0x35ddfd(0x1fc)] = _0xc67562[_0x35ddfd(0x1b3)][_0x35ddfd(0xfd)], _0xc67562;
              }, void 0x0 === (_0xa5f633 = _0x18db60[_0x2f7a0e(0x394)](_0x403917, [])) || (_0x1c8f8b[_0x2f7a0e(0x38d)] = _0xa5f633);
            },
            0x1cbb: function (_0x1b0327) {
              var _0x28caec = a0_0x107f,
                  _0x3f32d9 = [][_0x28caec(0x22a)];

              _0x1b0327[_0x28caec(0x38d)] = function (_0x543e06, _0x400ad7) {
                var _0x553591 = _0x28caec;
                if (_0x3f32d9) return _0x543e06['indexOf'](_0x400ad7);

                for (var _0x5ca30a = 0x0; _0x5ca30a < _0x543e06[_0x553591(0x1b1)]; ++_0x5ca30a) if (_0x543e06[_0x5ca30a] === _0x400ad7) return _0x5ca30a;

                return -0x1;
              };
            },
            0x16c2: function (_0x532fd4) {
              var _0x2f4e04 = a0_0x107f,
                  _0x57bd81 = {}[_0x2f4e04(0x436)];

              _0x532fd4['exports'] = Array[_0x2f4e04(0x423)] || function (_0x50fa79) {
                var _0x3caa2b = _0x2f4e04;
                return '[object\x20Array]' == _0x57bd81[_0x3caa2b(0x229)](_0x50fa79);
              };
            },
            0x1e90: function (_0x2e128d) {
              var _0x342679 = 0x3e8,
                  _0x1ee293 = 0x3c * _0x342679,
                  _0x5c75dd = 0x3c * _0x1ee293,
                  _0x192763 = 0x18 * _0x5c75dd;

              function _0x5752e4(_0x558144, _0xc9771d, _0x15d187) {
                var _0x58848f = a0_0x107f;
                if (!(_0x558144 < _0xc9771d)) return _0x558144 < 1.5 * _0xc9771d ? Math[_0x58848f(0x330)](_0x558144 / _0xc9771d) + '\x20' + _0x15d187 : Math[_0x58848f(0x41f)](_0x558144 / _0xc9771d) + '\x20' + _0x15d187 + 's';
              }

              _0x2e128d['exports'] = function (_0x44f7bf, _0x431b32) {
                var _0x2ea289 = a0_0x107f;
                _0x431b32 = _0x431b32 || {};

                var _0x40b966,
                    _0x45faa9 = typeof _0x44f7bf;

                if ('string' === _0x45faa9 && _0x44f7bf[_0x2ea289(0x1b1)] > 0x0) return function (_0x41883d) {
                  var _0x1033f2 = _0x2ea289;

                  if (!((_0x41883d = String(_0x41883d))[_0x1033f2(0x1b1)] > 0x64)) {
                    var _0x29d7cf = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i[_0x1033f2(0x2d6)](_0x41883d);

                    if (_0x29d7cf) {
                      var _0x49598a = parseFloat(_0x29d7cf[0x1]);

                      switch ((_0x29d7cf[0x2] || 'ms')[_0x1033f2(0x317)]()) {
                        case _0x1033f2(0x238):
                        case _0x1033f2(0x4aa):
                        case _0x1033f2(0xf4):
                        case 'yr':
                        case 'y':
                          return 0x758fac300 * _0x49598a;

                        case _0x1033f2(0x33a):
                        case _0x1033f2(0x1ac):
                        case 'd':
                          return _0x49598a * _0x192763;

                        case _0x1033f2(0x265):
                        case _0x1033f2(0x2a4):
                        case _0x1033f2(0x205):
                        case 'hr':
                        case 'h':
                          return _0x49598a * _0x5c75dd;

                        case _0x1033f2(0x37c):
                        case _0x1033f2(0x1b5):
                        case _0x1033f2(0x4c1):
                        case _0x1033f2(0x2a3):
                        case 'm':
                          return _0x49598a * _0x1ee293;

                        case _0x1033f2(0x26a):
                        case _0x1033f2(0x4b6):
                        case _0x1033f2(0x155):
                        case 'sec':
                        case 's':
                          return _0x49598a * _0x342679;

                        case _0x1033f2(0x1e3):
                        case _0x1033f2(0x152):
                        case 'msecs':
                        case _0x1033f2(0x31b):
                        case 'ms':
                          return _0x49598a;

                        default:
                          return;
                      }
                    }
                  }
                }(_0x44f7bf);
                if ('number' === _0x45faa9 && !0x1 === isNaN(_0x44f7bf)) return _0x431b32[_0x2ea289(0x18b)] ? _0x5752e4(_0x40b966 = _0x44f7bf, _0x192763, _0x2ea289(0x1ac)) || _0x5752e4(_0x40b966, _0x5c75dd, 'hour') || _0x5752e4(_0x40b966, _0x1ee293, _0x2ea289(0x1b5)) || _0x5752e4(_0x40b966, _0x342679, _0x2ea289(0x4b6)) || _0x40b966 + _0x2ea289(0x3cf) : function (_0x349b04) {
                  var _0x2c282b = _0x2ea289;
                  return _0x349b04 >= _0x192763 ? Math['round'](_0x349b04 / _0x192763) + 'd' : _0x349b04 >= _0x5c75dd ? Math[_0x2c282b(0x4c5)](_0x349b04 / _0x5c75dd) + 'h' : _0x349b04 >= _0x1ee293 ? Math[_0x2c282b(0x4c5)](_0x349b04 / _0x1ee293) + 'm' : _0x349b04 >= _0x342679 ? Math['round'](_0x349b04 / _0x342679) + 's' : _0x349b04 + 'ms';
                }(_0x44f7bf);
                throw new Error('val\x20is\x20not\x20a\x20non-empty\x20string\x20or\x20a\x20valid\x20number.\x20val=' + JSON[_0x2ea289(0x296)](_0x44f7bf));
              };
            },
            0x726: function (_0x1e409, _0x51c4d4) {
              var _0x72398f = a0_0x107f;
              _0x51c4d4[_0x72398f(0x263)] = function (_0x118453) {
                var _0x53b20d = _0x72398f,
                    _0x385d41 = '';

                for (var _0x94137d in _0x118453) _0x118453[_0x53b20d(0x32a)](_0x94137d) && (_0x385d41[_0x53b20d(0x1b1)] && (_0x385d41 += '&'), _0x385d41 += encodeURIComponent(_0x94137d) + '=' + encodeURIComponent(_0x118453[_0x94137d]));

                return _0x385d41;
              }, _0x51c4d4[_0x72398f(0x3f1)] = function (_0x12bc0a) {
                var _0x4b2c14 = _0x72398f;

                for (var _0x1f6463 = {}, _0x2d3c01 = _0x12bc0a[_0x4b2c14(0x460)]('&'), _0x3c1cb6 = 0x0, _0x2fa9db = _0x2d3c01['length']; _0x3c1cb6 < _0x2fa9db; _0x3c1cb6++) {
                  var _0x2183d8 = _0x2d3c01[_0x3c1cb6][_0x4b2c14(0x460)]('=');

                  _0x1f6463[decodeURIComponent(_0x2183d8[0x0])] = decodeURIComponent(_0x2183d8[0x1]);
                }

                return _0x1f6463;
              };
            },
            0x105b: function (_0x1396f6) {
              var _0x51f1a5 = a0_0x107f,
                  _0x20cce3 = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
                  _0x1bc9d0 = ['source', 'protocol', _0x51f1a5(0x1d7), _0x51f1a5(0x359), 'user', _0x51f1a5(0x48f), _0x51f1a5(0x395), _0x51f1a5(0x4be), _0x51f1a5(0x3c9), _0x51f1a5(0x1ad), _0x51f1a5(0x38f), _0x51f1a5(0x3e4), 'query', _0x51f1a5(0x1a8)];

              _0x1396f6['exports'] = function (_0x274038) {
                var _0x294649 = _0x51f1a5,
                    _0x1b1686,
                    _0x48b85a,
                    _0x167855 = _0x274038,
                    _0x459abe = _0x274038[_0x294649(0x22a)]('['),
                    _0x4c913d = _0x274038[_0x294649(0x22a)](']');

                -0x1 != _0x459abe && -0x1 != _0x4c913d && (_0x274038 = _0x274038[_0x294649(0x4a5)](0x0, _0x459abe) + _0x274038[_0x294649(0x4a5)](_0x459abe, _0x4c913d)[_0x294649(0x3d9)](/:/g, ';') + _0x274038[_0x294649(0x4a5)](_0x4c913d, _0x274038['length']));

                for (var _0x5948ab, _0x4f2021, _0x278cd1 = _0x20cce3['exec'](_0x274038 || ''), _0x438808 = {}, _0x8b7782 = 0xe; _0x8b7782--;) _0x438808[_0x1bc9d0[_0x8b7782]] = _0x278cd1[_0x8b7782] || '';

                return -0x1 != _0x459abe && -0x1 != _0x4c913d && (_0x438808[_0x294649(0x34e)] = _0x167855, _0x438808[_0x294649(0x395)] = _0x438808[_0x294649(0x395)][_0x294649(0x4a5)](0x1, _0x438808[_0x294649(0x395)][_0x294649(0x1b1)] - 0x1)['replace'](/;/g, ':'), _0x438808[_0x294649(0x1d7)] = _0x438808[_0x294649(0x1d7)][_0x294649(0x3d9)]('[', '')[_0x294649(0x3d9)](']', '')['replace'](/;/g, ':'), _0x438808[_0x294649(0x1e5)] = !0x0), _0x438808[_0x294649(0x27a)] = (_0x1b1686 = _0x438808[_0x294649(0x1ad)], _0x48b85a = _0x1b1686[_0x294649(0x3d9)](/\/{2,9}/g, '/')[_0x294649(0x460)]('/'), '/' != _0x1b1686[_0x294649(0x40e)](0x0, 0x1) && 0x0 !== _0x1b1686['length'] || _0x48b85a['splice'](0x0, 0x1), '/' == _0x1b1686[_0x294649(0x40e)](_0x1b1686[_0x294649(0x1b1)] - 0x1, 0x1) && _0x48b85a[_0x294649(0x479)](_0x48b85a[_0x294649(0x1b1)] - 0x1, 0x1), _0x48b85a), _0x438808['queryKey'] = (_0x5948ab = _0x438808['query'], _0x4f2021 = {}, _0x5948ab[_0x294649(0x3d9)](/(?:^|&)([^&=]*)=?([^&]*)/g, function (_0x384d72, _0x47843d, _0x560cec) {
                  _0x47843d && (_0x4f2021[_0x47843d] = _0x560cec);
                }), _0x4f2021), _0x438808;
              };
            },
            0x1a99: function (_0x2934b1, _0x524be6, _0x36b6c5) {
              var _0xb2e42b = a0_0x107f,
                  _0x4f0197 = _0x36b6c5(0xe5e),
                  _0xdfe7fb = _0x36b6c5(0x2399),
                  _0x2ffdc7 = _0x36b6c5(0xab3),
                  _0x847c23 = _0x36b6c5(0x4cb)(_0xb2e42b(0x331));

              _0x2934b1['exports'] = _0x524be6 = _0x591f25;

              var _0x33a0d0 = _0x524be6['managers'] = {};

              function _0x591f25(_0x46dc35, _0x2bb449) {
                var _0x1b625f = _0xb2e42b;
                'object' == typeof _0x46dc35 && (_0x2bb449 = _0x46dc35, _0x46dc35 = void 0x0), _0x2bb449 = _0x2bb449 || {};

                var _0x3804f7,
                    _0x91fd6b = _0x4f0197(_0x46dc35),
                    _0x4926e9 = _0x91fd6b[_0x1b625f(0x34e)],
                    _0x55ed0b = _0x91fd6b['id'],
                    _0x115cfc = _0x91fd6b['path'],
                    _0x236a57 = _0x33a0d0[_0x55ed0b] && _0x115cfc in _0x33a0d0[_0x55ed0b][_0x1b625f(0x32e)];

                return _0x2bb449[_0x1b625f(0x2f3)] || _0x2bb449['force\x20new\x20connection'] || !0x1 === _0x2bb449[_0x1b625f(0x2b2)] || _0x236a57 ? (_0x847c23(_0x1b625f(0x2b3), _0x4926e9), _0x3804f7 = _0x2ffdc7(_0x4926e9, _0x2bb449)) : (_0x33a0d0[_0x55ed0b] || (_0x847c23('new\x20io\x20instance\x20for\x20%s', _0x4926e9), _0x33a0d0[_0x55ed0b] = _0x2ffdc7(_0x4926e9, _0x2bb449)), _0x3804f7 = _0x33a0d0[_0x55ed0b]), _0x91fd6b['query'] && !_0x2bb449[_0x1b625f(0x189)] && (_0x2bb449['query'] = _0x91fd6b[_0x1b625f(0x189)]), _0x3804f7['socket'](_0x91fd6b[_0x1b625f(0x1ad)], _0x2bb449);
              }

              _0x524be6[_0xb2e42b(0x1c7)] = _0xdfe7fb['protocol'], _0x524be6[_0xb2e42b(0x33f)] = _0x591f25, _0x524be6['Manager'] = _0x36b6c5(0xab3), _0x524be6[_0xb2e42b(0x355)] = _0x36b6c5(0x2188);
            },
            0xab3: function (_0x434b9d, _0x63082b, _0x429c8e) {
              var _0x346a7b = a0_0x107f,
                  _0x6653c4 = _0x429c8e(0x175f),
                  _0x3a6837 = _0x429c8e(0x2188),
                  _0x2300ef = _0x429c8e(0x223f),
                  _0x520e28 = _0x429c8e(0x2399),
                  _0x2df958 = _0x429c8e(0x1558),
                  _0x2c0fdd = _0x429c8e(0x17bd),
                  _0x18ad85 = _0x429c8e(0x4cb)(_0x346a7b(0x2ea)),
                  _0x3693c1 = _0x429c8e(0x1cbb),
                  _0x530ac4 = _0x429c8e(0xbc2),
                  _0x2efdf3 = Object[_0x346a7b(0x1b3)][_0x346a7b(0x32a)];

              function _0x15cd3f(_0x56b227, _0x1dcafc) {
                var _0x348d8a = _0x346a7b;
                if (!(this instanceof _0x15cd3f)) return new _0x15cd3f(_0x56b227, _0x1dcafc);
                _0x56b227 && _0x348d8a(0x33c) == typeof _0x56b227 && (_0x1dcafc = _0x56b227, _0x56b227 = void 0x0), (_0x1dcafc = _0x1dcafc || {})['path'] = _0x1dcafc['path'] || '/socket.io', this['nsps'] = {}, this['subs'] = [], this['opts'] = _0x1dcafc, this['reconnection'](!0x1 !== _0x1dcafc['reconnection']), this['reconnectionAttempts'](_0x1dcafc['reconnectionAttempts'] || 0x1 / 0x0), this[_0x348d8a(0x285)](_0x1dcafc[_0x348d8a(0x285)] || 0x3e8), this[_0x348d8a(0x2c8)](_0x1dcafc[_0x348d8a(0x2c8)] || 0x1388), this[_0x348d8a(0x455)](_0x1dcafc[_0x348d8a(0x455)] || 0.5), this[_0x348d8a(0x45b)] = new _0x530ac4({
                  'min': this[_0x348d8a(0x285)](),
                  'max': this[_0x348d8a(0x2c8)](),
                  'jitter': this['randomizationFactor']()
                }), this[_0x348d8a(0xee)](null == _0x1dcafc[_0x348d8a(0xee)] ? 0x4e20 : _0x1dcafc[_0x348d8a(0xee)]), this[_0x348d8a(0x3d0)] = _0x348d8a(0x183), this['uri'] = _0x56b227, this['connecting'] = [], this[_0x348d8a(0x17f)] = null, this[_0x348d8a(0x307)] = !0x1, this['packetBuffer'] = [];

                var _0x394d3b = _0x1dcafc[_0x348d8a(0x3b0)] || _0x520e28;

                this[_0x348d8a(0x278)] = new _0x394d3b['Encoder'](), this['decoder'] = new _0x394d3b[_0x348d8a(0x415)](), this[_0x348d8a(0x1f2)] = !0x1 !== _0x1dcafc[_0x348d8a(0x1f2)], this['autoConnect'] && this[_0x348d8a(0x412)]();
              }

              _0x434b9d[_0x346a7b(0x38d)] = _0x15cd3f, _0x15cd3f[_0x346a7b(0x1b3)]['emitAll'] = function () {
                var _0x26c495 = _0x346a7b;

                for (var _0x4edcc4 in this[_0x26c495(0x24e)]['apply'](this, arguments), this[_0x26c495(0x32e)]) _0x2efdf3[_0x26c495(0x229)](this['nsps'], _0x4edcc4) && this['nsps'][_0x4edcc4]['emit'][_0x26c495(0x394)](this['nsps'][_0x4edcc4], arguments);
              }, _0x15cd3f['prototype']['updateSocketIds'] = function () {
                var _0x97684a = _0x346a7b;

                for (var _0x412924 in this['nsps']) _0x2efdf3['call'](this[_0x97684a(0x32e)], _0x412924) && (this[_0x97684a(0x32e)][_0x412924]['id'] = this[_0x97684a(0x46b)](_0x412924));
              }, _0x15cd3f['prototype'][_0x346a7b(0x46b)] = function (_0x33082e) {
                var _0x22d9b7 = _0x346a7b;
                return ('/' === _0x33082e ? '' : _0x33082e + '#') + this[_0x22d9b7(0x2d1)]['id'];
              }, _0x2300ef(_0x15cd3f[_0x346a7b(0x1b3)]), _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x19d)] = function (_0x46e4d3) {
                return arguments['length'] ? (this['_reconnection'] = !!_0x46e4d3, this) : this['_reconnection'];
              }, _0x15cd3f['prototype']['reconnectionAttempts'] = function (_0x257aa0) {
                var _0x4346b1 = _0x346a7b;
                return arguments[_0x4346b1(0x1b1)] ? (this['_reconnectionAttempts'] = _0x257aa0, this) : this['_reconnectionAttempts'];
              }, _0x15cd3f['prototype'][_0x346a7b(0x285)] = function (_0x30cd3e) {
                var _0x503379 = _0x346a7b;
                return arguments['length'] ? (this['_reconnectionDelay'] = _0x30cd3e, this[_0x503379(0x45b)] && this['backoff'][_0x503379(0x2d8)](_0x30cd3e), this) : this['_reconnectionDelay'];
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x455)] = function (_0x5994db) {
                var _0x2ed314 = _0x346a7b;
                return arguments['length'] ? (this[_0x2ed314(0x3d5)] = _0x5994db, this[_0x2ed314(0x45b)] && this['backoff'][_0x2ed314(0x41b)](_0x5994db), this) : this[_0x2ed314(0x3d5)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['reconnectionDelayMax'] = function (_0x1d5aa0) {
                var _0x303dfb = _0x346a7b;
                return arguments['length'] ? (this['_reconnectionDelayMax'] = _0x1d5aa0, this['backoff'] && this[_0x303dfb(0x45b)][_0x303dfb(0x22e)](_0x1d5aa0), this) : this[_0x303dfb(0x289)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['timeout'] = function (_0x41d747) {
                var _0xeff28b = _0x346a7b;
                return arguments[_0xeff28b(0x1b1)] ? (this[_0xeff28b(0x254)] = _0x41d747, this) : this[_0xeff28b(0x254)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['maybeReconnectOnOpen'] = function () {
                var _0x187fc3 = _0x346a7b;
                !this[_0x187fc3(0x369)] && this[_0x187fc3(0x2a2)] && 0x0 === this[_0x187fc3(0x45b)]['attempts'] && this[_0x187fc3(0x33d)]();
              }, _0x15cd3f['prototype'][_0x346a7b(0x412)] = _0x15cd3f['prototype'][_0x346a7b(0x33f)] = function (_0x45a8f8, _0xab33e0) {
                var _0x491673 = _0x346a7b;
                if (_0x18ad85(_0x491673(0x428), this[_0x491673(0x3d0)]), ~this['readyState'][_0x491673(0x22a)]('open')) return this;
                _0x18ad85(_0x491673(0x484), this[_0x491673(0x2d0)]), this['engine'] = _0x6653c4(this[_0x491673(0x2d0)], this['opts']);

                var _0x58772d = this['engine'],
                    _0x2b23e4 = this;

                this[_0x491673(0x3d0)] = _0x491673(0x163), this[_0x491673(0x14c)] = !0x1;

                var _0x171435 = _0x2df958(_0x58772d, _0x491673(0x412), function () {
                  var _0x3ddabb = _0x491673;
                  _0x2b23e4[_0x3ddabb(0x3e5)](), _0x45a8f8 && _0x45a8f8();
                }),
                    _0x37e5d9 = _0x2df958(_0x58772d, _0x491673(0x122), function (_0x1645a6) {
                  var _0x26f1f2 = _0x491673;

                  if (_0x18ad85(_0x26f1f2(0x372)), _0x2b23e4[_0x26f1f2(0x42b)](), _0x2b23e4[_0x26f1f2(0x3d0)] = 'closed', _0x2b23e4[_0x26f1f2(0x2f7)](_0x26f1f2(0x372), _0x1645a6), _0x45a8f8) {
                    var _0x5a1c54 = new Error(_0x26f1f2(0x256));

                    _0x5a1c54['data'] = _0x1645a6, _0x45a8f8(_0x5a1c54);
                  } else _0x2b23e4[_0x26f1f2(0x2f9)]();
                });

                if (!0x1 !== this[_0x491673(0x254)]) {
                  var _0xf9704f = this[_0x491673(0x254)];

                  _0x18ad85(_0x491673(0x482), _0xf9704f), 0x0 === _0xf9704f && _0x171435[_0x491673(0x1eb)]();

                  var _0x3cffce = setTimeout(function () {
                    var _0x3f910a = _0x491673;
                    _0x18ad85('connect\x20attempt\x20timed\x20out\x20after\x20%d', _0xf9704f), _0x171435[_0x3f910a(0x1eb)](), _0x58772d[_0x3f910a(0x166)](), _0x58772d[_0x3f910a(0x24e)](_0x3f910a(0x122), _0x3f910a(0xee)), _0x2b23e4['emitAll'](_0x3f910a(0x329), _0xf9704f);
                  }, _0xf9704f);

                  this[_0x491673(0x1bd)][_0x491673(0x41c)]({
                    'destroy': function () {
                      clearTimeout(_0x3cffce);
                    }
                  });
                }

                return this[_0x491673(0x1bd)][_0x491673(0x41c)](_0x171435), this[_0x491673(0x1bd)][_0x491673(0x41c)](_0x37e5d9), this;
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x3e5)] = function () {
                var _0x42bffb = _0x346a7b;
                _0x18ad85(_0x42bffb(0x412)), this[_0x42bffb(0x42b)](), this[_0x42bffb(0x3d0)] = 'open', this[_0x42bffb(0x24e)](_0x42bffb(0x412));
                var _0x307e71 = this['engine'];
                this[_0x42bffb(0x1bd)][_0x42bffb(0x41c)](_0x2df958(_0x307e71, 'data', _0x2c0fdd(this, _0x42bffb(0x24f)))), this['subs']['push'](_0x2df958(_0x307e71, 'ping', _0x2c0fdd(this, _0x42bffb(0xef)))), this['subs'][_0x42bffb(0x41c)](_0x2df958(_0x307e71, 'pong', _0x2c0fdd(this, _0x42bffb(0x141)))), this[_0x42bffb(0x1bd)]['push'](_0x2df958(_0x307e71, _0x42bffb(0x122), _0x2c0fdd(this, 'onerror'))), this['subs']['push'](_0x2df958(_0x307e71, 'close', _0x2c0fdd(this, _0x42bffb(0xff)))), this['subs']['push'](_0x2df958(this[_0x42bffb(0x30b)], _0x42bffb(0x3e0), _0x2c0fdd(this, _0x42bffb(0x44e))));
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0xef)] = function () {
                var _0x250cd3 = _0x346a7b;
                this['lastPing'] = new Date(), this[_0x250cd3(0x2f7)](_0x250cd3(0x477));
              }, _0x15cd3f[_0x346a7b(0x1b3)]['onpong'] = function () {
                var _0xefc598 = _0x346a7b;

                this[_0xefc598(0x2f7)]('pong', new Date() - this[_0xefc598(0x17f)]);
              }, _0x15cd3f['prototype'][_0x346a7b(0x24f)] = function (_0x577f9c) {
                var _0x1ff64b = _0x346a7b;

                this['decoder'][_0x1ff64b(0x2fc)](_0x577f9c);
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x44e)] = function (_0x54f25b) {
                var _0x3c217e = _0x346a7b;

                this[_0x3c217e(0x24e)]('packet', _0x54f25b);
              }, _0x15cd3f['prototype'][_0x346a7b(0x112)] = function (_0x5cebbe) {
                var _0x2fd3c2 = _0x346a7b;
                _0x18ad85('error', _0x5cebbe), this[_0x2fd3c2(0x2f7)]('error', _0x5cebbe);
              }, _0x15cd3f[_0x346a7b(0x1b3)]['socket'] = function (_0x24ddf6, _0x289b28) {
                var _0xcdf404 = _0x346a7b,
                    _0xf3664b = this[_0xcdf404(0x32e)][_0x24ddf6];

                if (!_0xf3664b) {
                  _0xf3664b = new _0x3a6837(this, _0x24ddf6, _0x289b28), this[_0xcdf404(0x32e)][_0x24ddf6] = _0xf3664b;

                  var _0x42c25d = this;

                  _0xf3664b['on'](_0xcdf404(0x443), _0x2ceb62), _0xf3664b['on'](_0xcdf404(0x33f), function () {
                    var _0x144484 = _0xcdf404;
                    _0xf3664b['id'] = _0x42c25d[_0x144484(0x46b)](_0x24ddf6);
                  }), this[_0xcdf404(0x1f2)] && _0x2ceb62();
                }

                function _0x2ceb62() {
                  var _0x39b9ae = _0xcdf404;
                  ~_0x3693c1(_0x42c25d[_0x39b9ae(0x443)], _0xf3664b) || _0x42c25d[_0x39b9ae(0x443)][_0x39b9ae(0x41c)](_0xf3664b);
                }

                return _0xf3664b;
              }, _0x15cd3f['prototype']['destroy'] = function (_0x53ca03) {
                var _0x1a615c = _0x346a7b,
                    _0x36afa4 = _0x3693c1(this[_0x1a615c(0x443)], _0x53ca03);

                ~_0x36afa4 && this[_0x1a615c(0x443)][_0x1a615c(0x479)](_0x36afa4, 0x1), this[_0x1a615c(0x443)][_0x1a615c(0x1b1)] || this[_0x1a615c(0x166)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)]['packet'] = function (_0x56f798) {
                var _0x380ca2 = _0x346a7b;

                _0x18ad85(_0x380ca2(0x261), _0x56f798);

                var _0x299c2a = this;

                _0x56f798['query'] && 0x0 === _0x56f798[_0x380ca2(0x156)] && (_0x56f798['nsp'] += '?' + _0x56f798[_0x380ca2(0x189)]), _0x299c2a[_0x380ca2(0x307)] ? _0x299c2a[_0x380ca2(0x2ef)][_0x380ca2(0x41c)](_0x56f798) : (_0x299c2a[_0x380ca2(0x307)] = !0x0, this[_0x380ca2(0x278)][_0x380ca2(0x263)](_0x56f798, function (_0x81e51d) {
                  var _0x3b9248 = _0x380ca2;

                  for (var _0x37ecea = 0x0; _0x37ecea < _0x81e51d[_0x3b9248(0x1b1)]; _0x37ecea++) _0x299c2a[_0x3b9248(0x2d1)]['write'](_0x81e51d[_0x37ecea], _0x56f798[_0x3b9248(0x1a3)]);

                  _0x299c2a[_0x3b9248(0x307)] = !0x1, _0x299c2a['processPacketQueue']();
                }));
              }, _0x15cd3f['prototype'][_0x346a7b(0x20f)] = function () {
                var _0xd325f5 = _0x346a7b;

                if (this[_0xd325f5(0x2ef)][_0xd325f5(0x1b1)] > 0x0 && !this[_0xd325f5(0x307)]) {
                  var _0x2712d8 = this[_0xd325f5(0x2ef)]['shift']();

                  this[_0xd325f5(0x162)](_0x2712d8);
                }
              }, _0x15cd3f['prototype'][_0x346a7b(0x42b)] = function () {
                var _0x6cb7f1 = _0x346a7b;

                _0x18ad85(_0x6cb7f1(0x42b));

                for (var _0x2a8a99 = this['subs'][_0x6cb7f1(0x1b1)], _0x392ceb = 0x0; _0x392ceb < _0x2a8a99; _0x392ceb++) this['subs']['shift']()['destroy']();

                this[_0x6cb7f1(0x2ef)] = [], this[_0x6cb7f1(0x307)] = !0x1, this[_0x6cb7f1(0x17f)] = null, this[_0x6cb7f1(0x30b)]['destroy']();
              }, _0x15cd3f['prototype'][_0x346a7b(0x166)] = _0x15cd3f['prototype'][_0x346a7b(0x106)] = function () {
                var _0xfffda5 = _0x346a7b;
                _0x18ad85(_0xfffda5(0x106)), this['skipReconnect'] = !0x0, this[_0xfffda5(0x369)] = !0x1, 'opening' === this[_0xfffda5(0x3d0)] && this[_0xfffda5(0x42b)](), this[_0xfffda5(0x45b)][_0xfffda5(0x1ca)](), this[_0xfffda5(0x3d0)] = 'closed', this[_0xfffda5(0x2d1)] && this['engine'][_0xfffda5(0x166)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0xff)] = function (_0x250443) {
                var _0x1122ed = _0x346a7b;
                _0x18ad85('onclose'), this[_0x1122ed(0x42b)](), this['backoff'][_0x1122ed(0x1ca)](), this[_0x1122ed(0x3d0)] = _0x1122ed(0x183), this[_0x1122ed(0x24e)](_0x1122ed(0x166), _0x250443), this[_0x1122ed(0x2a2)] && !this[_0x1122ed(0x14c)] && this[_0x1122ed(0x33d)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)]['reconnect'] = function () {
                var _0x893533 = _0x346a7b;
                if (this[_0x893533(0x369)] || this[_0x893533(0x14c)]) return this;

                var _0x56fcf9 = this;

                if (this[_0x893533(0x45b)][_0x893533(0x3e8)] >= this[_0x893533(0x454)]) _0x18ad85(_0x893533(0x2f6)), this[_0x893533(0x45b)][_0x893533(0x1ca)](), this[_0x893533(0x2f7)](_0x893533(0x294)), this[_0x893533(0x369)] = !0x1;else {
                  var _0x253cb3 = this['backoff'][_0x893533(0x12d)]();

                  _0x18ad85(_0x893533(0x3e3), _0x253cb3), this[_0x893533(0x369)] = !0x0;

                  var _0x3b16ea = setTimeout(function () {
                    var _0x33d14a = _0x893533;
                    _0x56fcf9[_0x33d14a(0x14c)] || (_0x18ad85('attempting\x20reconnect'), _0x56fcf9[_0x33d14a(0x2f7)]('reconnect_attempt', _0x56fcf9['backoff'][_0x33d14a(0x3e8)]), _0x56fcf9['emitAll'](_0x33d14a(0x369), _0x56fcf9[_0x33d14a(0x45b)][_0x33d14a(0x3e8)]), _0x56fcf9['skipReconnect'] || _0x56fcf9[_0x33d14a(0x412)](function (_0x2231b4) {
                      var _0x5a7b8e = _0x33d14a;
                      _0x2231b4 ? (_0x18ad85('reconnect\x20attempt\x20error'), _0x56fcf9[_0x5a7b8e(0x369)] = !0x1, _0x56fcf9['reconnect'](), _0x56fcf9[_0x5a7b8e(0x2f7)](_0x5a7b8e(0x151), _0x2231b4[_0x5a7b8e(0x1c5)])) : (_0x18ad85(_0x5a7b8e(0x20e)), _0x56fcf9['onreconnect']());
                    }));
                  }, _0x253cb3);

                  this[_0x893533(0x1bd)][_0x893533(0x41c)]({
                    'destroy': function () {
                      clearTimeout(_0x3b16ea);
                    }
                  });
                }
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x2c3)] = function () {
                var _0x2036b0 = _0x346a7b,
                    _0x282c45 = this['backoff'][_0x2036b0(0x3e8)];

                this[_0x2036b0(0x369)] = !0x1, this['backoff']['reset'](), this['updateSocketIds'](), this[_0x2036b0(0x2f7)](_0x2036b0(0x33d), _0x282c45);
              };
            },
            0x1558: function (_0x2a3876) {
              _0x2a3876['exports'] = function (_0x3c119b, _0x5104c4, _0x33a3cf) {
                return _0x3c119b['on'](_0x5104c4, _0x33a3cf), {
                  'destroy': function () {
                    var _0x29b7be = a0_0x107f;

                    _0x3c119b[_0x29b7be(0x198)](_0x5104c4, _0x33a3cf);
                  }
                };
              };
            },
            0x2188: function (_0x514008, _0x3bb29e, _0x24673f) {
              var _0x3d5ec0 = a0_0x107f,
                  _0x58f630 = _0x24673f(0x2399),
                  _0x244399 = _0x24673f(0x223f),
                  _0x1b002c = _0x24673f(0xfca),
                  _0x570d6c = _0x24673f(0x1558),
                  _0x597036 = _0x24673f(0x17bd),
                  _0x159835 = _0x24673f(0x4cb)(_0x3d5ec0(0x145)),
                  _0x1718b5 = _0x24673f(0x726),
                  _0x34a8e3 = _0x24673f(0xd8a);

              _0x514008['exports'] = _0x1c8949;

              var _0x1d9f46 = {
                'connect': 0x1,
                'connect_error': 0x1,
                'connect_timeout': 0x1,
                'connecting': 0x1,
                'disconnect': 0x1,
                'error': 0x1,
                'reconnect': 0x1,
                'reconnect_attempt': 0x1,
                'reconnect_failed': 0x1,
                'reconnect_error': 0x1,
                'reconnecting': 0x1,
                'ping': 0x1,
                'pong': 0x1
              },
                  _0x3e326b = _0x244399[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x24e)];

              function _0x1c8949(_0x3c5fba, _0x236133, _0x27bf09) {
                var _0x485812 = _0x3d5ec0;
                this['io'] = _0x3c5fba, this[_0x485812(0x201)] = _0x236133, this[_0x485812(0x3d6)] = this, this[_0x485812(0x28f)] = 0x0, this[_0x485812(0x1e2)] = {}, this[_0x485812(0x486)] = [], this[_0x485812(0x11b)] = [], this[_0x485812(0x292)] = !0x1, this[_0x485812(0x2ab)] = !0x0, this[_0x485812(0x380)] = {}, _0x27bf09 && _0x27bf09[_0x485812(0x189)] && (this[_0x485812(0x189)] = _0x27bf09['query']), this['io'][_0x485812(0x1f2)] && this['open']();
              }

              _0x244399(_0x1c8949[_0x3d5ec0(0x1b3)]), _0x1c8949['prototype'][_0x3d5ec0(0xf9)] = function () {
                var _0x4de02f = _0x3d5ec0;

                if (!this['subs']) {
                  var _0x5db200 = this['io'];
                  this[_0x4de02f(0x1bd)] = [_0x570d6c(_0x5db200, 'open', _0x597036(this, _0x4de02f(0x3e5))), _0x570d6c(_0x5db200, _0x4de02f(0x162), _0x597036(this, _0x4de02f(0x191))), _0x570d6c(_0x5db200, _0x4de02f(0x166), _0x597036(this, _0x4de02f(0xff)))];
                }
              }, _0x1c8949['prototype']['open'] = _0x1c8949[_0x3d5ec0(0x1b3)]['connect'] = function () {
                var _0x5116d6 = _0x3d5ec0;
                return this['connected'] || (this['subEvents'](), this['io'][_0x5116d6(0x369)] || this['io'][_0x5116d6(0x412)](), _0x5116d6(0x412) === this['io']['readyState'] && this[_0x5116d6(0x3e5)](), this[_0x5116d6(0x24e)](_0x5116d6(0x443))), this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)]['send'] = function () {
                var _0x40230f = _0x3d5ec0,
                    _0x403b51 = _0x1b002c(arguments);

                return _0x403b51[_0x40230f(0x393)](_0x40230f(0x3dd)), this[_0x40230f(0x24e)][_0x40230f(0x394)](this, _0x403b51), this;
              }, _0x1c8949['prototype'][_0x3d5ec0(0x24e)] = function (_0x461a37) {
                var _0x1de62a = _0x3d5ec0;
                if (_0x1d9f46[_0x1de62a(0x32a)](_0x461a37)) return _0x3e326b['apply'](this, arguments), this;

                var _0x39f45d = _0x1b002c(arguments),
                    _0x9349a5 = {
                  'type': (void 0x0 !== this[_0x1de62a(0x380)][_0x1de62a(0x197)] ? this[_0x1de62a(0x380)][_0x1de62a(0x197)] : _0x34a8e3(_0x39f45d)) ? _0x58f630[_0x1de62a(0x2fd)] : _0x58f630['EVENT'],
                  'data': _0x39f45d,
                  'options': {}
                };

                return _0x9349a5[_0x1de62a(0x1a3)][_0x1de62a(0x473)] = !this[_0x1de62a(0x380)] || !0x1 !== this[_0x1de62a(0x380)][_0x1de62a(0x473)], _0x1de62a(0x17d) == typeof _0x39f45d[_0x39f45d[_0x1de62a(0x1b1)] - 0x1] && (_0x159835('emitting\x20packet\x20with\x20ack\x20id\x20%d', this['ids']), this[_0x1de62a(0x1e2)][this[_0x1de62a(0x28f)]] = _0x39f45d[_0x1de62a(0x457)](), _0x9349a5['id'] = this[_0x1de62a(0x28f)]++), this[_0x1de62a(0x292)] ? this[_0x1de62a(0x162)](_0x9349a5) : this[_0x1de62a(0x11b)][_0x1de62a(0x41c)](_0x9349a5), this['flags'] = {}, this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x162)] = function (_0xd3bebb) {
                var _0x1b8ba7 = _0x3d5ec0;
                _0xd3bebb[_0x1b8ba7(0x201)] = this[_0x1b8ba7(0x201)], this['io']['packet'](_0xd3bebb);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x3e5)] = function () {
                var _0x3bf249 = _0x3d5ec0;

                if (_0x159835(_0x3bf249(0x2c2)), '/' !== this[_0x3bf249(0x201)]) {
                  if (this[_0x3bf249(0x189)]) {
                    var _0x178201 = _0x3bf249(0x33c) == typeof this[_0x3bf249(0x189)] ? _0x1718b5['encode'](this[_0x3bf249(0x189)]) : this[_0x3bf249(0x189)];

                    _0x159835(_0x3bf249(0x302), _0x178201), this[_0x3bf249(0x162)]({
                      'type': _0x58f630[_0x3bf249(0x236)],
                      'query': _0x178201
                    });
                  } else this[_0x3bf249(0x162)]({
                    'type': _0x58f630[_0x3bf249(0x236)]
                  });
                }
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0xff)] = function (_0x92ff70) {
                var _0x493bc6 = _0x3d5ec0;
                _0x159835(_0x493bc6(0x462), _0x92ff70), this[_0x493bc6(0x292)] = !0x1, this[_0x493bc6(0x2ab)] = !0x0, delete this['id'], this['emit']('disconnect', _0x92ff70);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x191)] = function (_0x42da63) {
                var _0xfa7558 = _0x3d5ec0,
                    _0x197151 = _0x42da63[_0xfa7558(0x201)] === this['nsp'],
                    _0x28ce6f = _0x42da63[_0xfa7558(0x156)] === _0x58f630['ERROR'] && '/' === _0x42da63[_0xfa7558(0x201)];

                if (_0x197151 || _0x28ce6f) switch (_0x42da63[_0xfa7558(0x156)]) {
                  case _0x58f630[_0xfa7558(0x236)]:
                    this['onconnect']();
                    break;

                  case _0x58f630[_0xfa7558(0x29a)]:
                  case _0x58f630[_0xfa7558(0x2fd)]:
                    this[_0xfa7558(0x108)](_0x42da63);

                    break;

                  case _0x58f630[_0xfa7558(0x2a1)]:
                  case _0x58f630[_0xfa7558(0x133)]:
                    this['onack'](_0x42da63);
                    break;

                  case _0x58f630[_0xfa7558(0x203)]:
                    this['ondisconnect']();
                    break;

                  case _0x58f630[_0xfa7558(0x4ac)]:
                    this[_0xfa7558(0x24e)](_0xfa7558(0x122), _0x42da63[_0xfa7558(0x1c5)]);

                }
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x108)] = function (_0x1cee06) {
                var _0x348f54 = _0x3d5ec0,
                    _0x280378 = _0x1cee06['data'] || [];

                _0x159835(_0x348f54(0x114), _0x280378), null != _0x1cee06['id'] && (_0x159835(_0x348f54(0x243)), _0x280378[_0x348f54(0x41c)](this[_0x348f54(0x36c)](_0x1cee06['id']))), this[_0x348f54(0x292)] ? _0x3e326b['apply'](this, _0x280378) : this[_0x348f54(0x486)][_0x348f54(0x41c)](_0x280378);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x36c)] = function (_0x3b317f) {
                var _0x5e691b = this,
                    _0x5032a2 = !0x1;

                return function () {
                  var _0x416507 = a0_0x107f;

                  if (!_0x5032a2) {
                    _0x5032a2 = !0x0;

                    var _0x232ccf = _0x1b002c(arguments);

                    _0x159835('sending\x20ack\x20%j', _0x232ccf), _0x5e691b[_0x416507(0x162)]({
                      'type': _0x34a8e3(_0x232ccf) ? _0x58f630[_0x416507(0x133)] : _0x58f630['ACK'],
                      'id': _0x3b317f,
                      'data': _0x232ccf
                    });
                  }
                };
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x25f)] = function (_0xec390) {
                var _0x4d78f9 = _0x3d5ec0,
                    _0x4c26cd = this[_0x4d78f9(0x1e2)][_0xec390['id']];

                _0x4d78f9(0x17d) == typeof _0x4c26cd ? (_0x159835(_0x4d78f9(0x2e3), _0xec390['id'], _0xec390[_0x4d78f9(0x1c5)]), _0x4c26cd['apply'](this, _0xec390[_0x4d78f9(0x1c5)]), delete this[_0x4d78f9(0x1e2)][_0xec390['id']]) : _0x159835(_0x4d78f9(0x227), _0xec390['id']);
              }, _0x1c8949['prototype'][_0x3d5ec0(0x23d)] = function () {
                var _0x136b0b = _0x3d5ec0;
                this[_0x136b0b(0x292)] = !0x0, this['disconnected'] = !0x1, this[_0x136b0b(0x1d6)](), this['emit']('connect');
              }, _0x1c8949['prototype'][_0x3d5ec0(0x1d6)] = function () {
                var _0x591dcd = _0x3d5ec0,
                    _0x3c8fdd;

                for (_0x3c8fdd = 0x0; _0x3c8fdd < this[_0x591dcd(0x486)][_0x591dcd(0x1b1)]; _0x3c8fdd++) _0x3e326b['apply'](this, this['receiveBuffer'][_0x3c8fdd]);

                for (this[_0x591dcd(0x486)] = [], _0x3c8fdd = 0x0; _0x3c8fdd < this[_0x591dcd(0x11b)][_0x591dcd(0x1b1)]; _0x3c8fdd++) this[_0x591dcd(0x162)](this['sendBuffer'][_0x3c8fdd]);

                this['sendBuffer'] = [];
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x30f)] = function () {
                var _0x223263 = _0x3d5ec0;
                _0x159835(_0x223263(0x416), this['nsp']), this['destroy'](), this[_0x223263(0xff)]('io\x20server\x20disconnect');
              }, _0x1c8949['prototype'][_0x3d5ec0(0x1eb)] = function () {
                var _0x52dd53 = _0x3d5ec0;

                if (this[_0x52dd53(0x1bd)]) {
                  for (var _0x20b9bb = 0x0; _0x20b9bb < this[_0x52dd53(0x1bd)][_0x52dd53(0x1b1)]; _0x20b9bb++) this['subs'][_0x20b9bb][_0x52dd53(0x1eb)]();

                  this[_0x52dd53(0x1bd)] = null;
                }

                this['io']['destroy'](this);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x166)] = _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x106)] = function () {
                var _0x41de86 = _0x3d5ec0;
                return this[_0x41de86(0x292)] && (_0x159835(_0x41de86(0x356), this['nsp']), this[_0x41de86(0x162)]({
                  'type': _0x58f630[_0x41de86(0x203)]
                })), this['destroy'](), this[_0x41de86(0x292)] && this['onclose'](_0x41de86(0x4c4)), this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)]['compress'] = function (_0x294f4c) {
                var _0x1b93c0 = _0x3d5ec0;
                return this[_0x1b93c0(0x380)][_0x1b93c0(0x473)] = _0x294f4c, this;
              }, _0x1c8949['prototype'][_0x3d5ec0(0x197)] = function (_0x1017f3) {
                var _0x3d0b7e = _0x3d5ec0;
                return this['flags'][_0x3d0b7e(0x197)] = _0x1017f3, this;
              };
            },
            0xe5e: function (_0x300e57, _0x56fb21, _0x491f90) {
              var _0xa18035 = a0_0x107f,
                  _0xbe91aa = _0x491f90(0x105b),
                  _0x19186f = _0x491f90(0x4cb)(_0xa18035(0x4b5));

              _0x300e57[_0xa18035(0x38d)] = function (_0x2d9127, _0x319165) {
                var _0x34db8d = _0xa18035,
                    _0x4a3c5a = _0x2d9127;
                _0x319165 = _0x319165 || 'undefined' != typeof location && location, null == _0x2d9127 && (_0x2d9127 = _0x319165[_0x34db8d(0x1c7)] + '//' + _0x319165[_0x34db8d(0x395)]), 'string' == typeof _0x2d9127 && ('/' === _0x2d9127['charAt'](0x0) && (_0x2d9127 = '/' === _0x2d9127[_0x34db8d(0x144)](0x1) ? _0x319165[_0x34db8d(0x1c7)] + _0x2d9127 : _0x319165[_0x34db8d(0x395)] + _0x2d9127), /^(https?|wss?):\/\//[_0x34db8d(0x4c7)](_0x2d9127) || (_0x19186f('protocol-less\x20url\x20%s', _0x2d9127), _0x2d9127 = void 0x0 !== _0x319165 ? _0x319165[_0x34db8d(0x1c7)] + '//' + _0x2d9127 : _0x34db8d(0x36a) + _0x2d9127), _0x19186f(_0x34db8d(0x4ab), _0x2d9127), _0x4a3c5a = _0xbe91aa(_0x2d9127)), _0x4a3c5a[_0x34db8d(0x4be)] || (/^(http|ws)$/[_0x34db8d(0x4c7)](_0x4a3c5a[_0x34db8d(0x1c7)]) ? _0x4a3c5a[_0x34db8d(0x4be)] = '80' : /^(http|ws)s$/[_0x34db8d(0x4c7)](_0x4a3c5a[_0x34db8d(0x1c7)]) && (_0x4a3c5a['port'] = _0x34db8d(0x3f5))), _0x4a3c5a[_0x34db8d(0x1ad)] = _0x4a3c5a[_0x34db8d(0x1ad)] || '/';

                var _0x1af6cf = -0x1 !== _0x4a3c5a[_0x34db8d(0x395)][_0x34db8d(0x22a)](':') ? '[' + _0x4a3c5a['host'] + ']' : _0x4a3c5a['host'];

                return _0x4a3c5a['id'] = _0x4a3c5a[_0x34db8d(0x1c7)] + _0x34db8d(0x23a) + _0x1af6cf + ':' + _0x4a3c5a[_0x34db8d(0x4be)], _0x4a3c5a[_0x34db8d(0x453)] = _0x4a3c5a[_0x34db8d(0x1c7)] + _0x34db8d(0x23a) + _0x1af6cf + (_0x319165 && _0x319165['port'] === _0x4a3c5a['port'] ? '' : ':' + _0x4a3c5a[_0x34db8d(0x4be)]), _0x4a3c5a;
              };
            },
            0x916: function (_0x46ad26, _0x14fdfc, _0x35d46e) {
              var _0x213205 = a0_0x107f,
                  _0x381b3e = _0x35d46e(0x16c2),
                  _0x405ade = _0x35d46e(0x17b2),
                  _0x3a7dc3 = Object[_0x213205(0x1b3)][_0x213205(0x436)],
                  _0x11e6b3 = _0x213205(0x17d) == typeof Blob || _0x213205(0x364) != typeof Blob && '[object\x20BlobConstructor]' === _0x3a7dc3[_0x213205(0x229)](Blob),
                  _0x190a46 = _0x213205(0x17d) == typeof File || _0x213205(0x364) != typeof File && _0x213205(0x4a4) === _0x3a7dc3[_0x213205(0x229)](File);

              function _0x27708f(_0x109863, _0x3de405) {
                var _0x5b9116 = _0x213205;
                if (!_0x109863) return _0x109863;

                if (_0x405ade(_0x109863)) {
                  var _0x15b2ba = {
                    '_placeholder': !0x0,
                    'num': _0x3de405['length']
                  };
                  return _0x3de405['push'](_0x109863), _0x15b2ba;
                }

                if (_0x381b3e(_0x109863)) {
                  for (var _0x43b187 = new Array(_0x109863['length']), _0xe1ae0f = 0x0; _0xe1ae0f < _0x109863[_0x5b9116(0x1b1)]; _0xe1ae0f++) _0x43b187[_0xe1ae0f] = _0x27708f(_0x109863[_0xe1ae0f], _0x3de405);

                  return _0x43b187;
                }

                if ('object' == typeof _0x109863 && !(_0x109863 instanceof Date)) {
                  for (var _0x4a0b56 in _0x43b187 = {}, _0x109863) _0x43b187[_0x4a0b56] = _0x27708f(_0x109863[_0x4a0b56], _0x3de405);

                  return _0x43b187;
                }

                return _0x109863;
              }

              function _0x185565(_0x348a89, _0x2c9c76) {
                var _0x5c20f9 = _0x213205;
                if (!_0x348a89) return _0x348a89;
                if (_0x348a89 && _0x348a89[_0x5c20f9(0x4c8)]) return _0x2c9c76[_0x348a89[_0x5c20f9(0x1fd)]];

                if (_0x381b3e(_0x348a89)) {
                  for (var _0x401c87 = 0x0; _0x401c87 < _0x348a89['length']; _0x401c87++) _0x348a89[_0x401c87] = _0x185565(_0x348a89[_0x401c87], _0x2c9c76);
                } else {
                  if ('object' == typeof _0x348a89) {
                    for (var _0x4738e3 in _0x348a89) _0x348a89[_0x4738e3] = _0x185565(_0x348a89[_0x4738e3], _0x2c9c76);
                  }
                }

                return _0x348a89;
              }

              _0x14fdfc[_0x213205(0x43c)] = function (_0x25a793) {
                var _0x54a151 = _0x213205,
                    _0x14435c = [],
                    _0x547ca8 = _0x25a793['data'],
                    _0x4a0948 = _0x25a793;
                return _0x4a0948['data'] = _0x27708f(_0x547ca8, _0x14435c), _0x4a0948[_0x54a151(0x1d8)] = _0x14435c[_0x54a151(0x1b1)], {
                  'packet': _0x4a0948,
                  'buffers': _0x14435c
                };
              }, _0x14fdfc['reconstructPacket'] = function (_0x334829, _0xaffa4a) {
                var _0x1b92e2 = _0x213205;
                return _0x334829[_0x1b92e2(0x1c5)] = _0x185565(_0x334829[_0x1b92e2(0x1c5)], _0xaffa4a), _0x334829['attachments'] = void 0x0, _0x334829;
              }, _0x14fdfc[_0x213205(0x327)] = function (_0x865efd, _0x1d6f26) {
                var _0x4d6eea = 0x0,
                    _0x25b3ce = _0x865efd;
                !function _0x44ed1f(_0x4c9c79, _0x495595, _0x586dff) {
                  var _0x28f9a2 = a0_0x107f;
                  if (!_0x4c9c79) return _0x4c9c79;

                  if (_0x11e6b3 && _0x4c9c79 instanceof Blob || _0x190a46 && _0x4c9c79 instanceof File) {
                    _0x4d6eea++;

                    var _0x558f83 = new FileReader();

                    _0x558f83[_0x28f9a2(0x18e)] = function () {
                      var _0x3484aa = _0x28f9a2;
                      _0x586dff ? _0x586dff[_0x495595] = this[_0x3484aa(0x1c0)] : _0x25b3ce = this['result'], --_0x4d6eea || _0x1d6f26(_0x25b3ce);
                    }, _0x558f83['readAsArrayBuffer'](_0x4c9c79);
                  } else {
                    if (_0x381b3e(_0x4c9c79)) {
                      for (var _0x53526c = 0x0; _0x53526c < _0x4c9c79[_0x28f9a2(0x1b1)]; _0x53526c++) _0x44ed1f(_0x4c9c79[_0x53526c], _0x53526c, _0x4c9c79);
                    } else {
                      if (_0x28f9a2(0x33c) == typeof _0x4c9c79 && !_0x405ade(_0x4c9c79)) {
                        for (var _0x10875a in _0x4c9c79) _0x44ed1f(_0x4c9c79[_0x10875a], _0x10875a, _0x4c9c79);
                      }
                    }
                  }
                }(_0x25b3ce), _0x4d6eea || _0x1d6f26(_0x25b3ce);
              };
            },
            0x2399: function (_0x39fff8, _0x55a58a, _0x4c7453) {
              var _0x4acd4e = a0_0x107f,
                  _0x2a8bbd = _0x4c7453(0x4cb)(_0x4acd4e(0x3b7)),
                  _0x42b58c = _0x4c7453(0x223f),
                  _0x5c0dac = _0x4c7453(0x916),
                  _0x4a92b5 = _0x4c7453(0x16c2),
                  _0x3268d7 = _0x4c7453(0x17b2);

              function _0x3d8683() {}

              _0x55a58a[_0x4acd4e(0x1c7)] = 0x4, _0x55a58a[_0x4acd4e(0x24d)] = [_0x4acd4e(0x236), _0x4acd4e(0x203), _0x4acd4e(0x29a), _0x4acd4e(0x2a1), _0x4acd4e(0x4ac), 'BINARY_EVENT', _0x4acd4e(0x133)], _0x55a58a[_0x4acd4e(0x236)] = 0x0, _0x55a58a[_0x4acd4e(0x203)] = 0x1, _0x55a58a[_0x4acd4e(0x29a)] = 0x2, _0x55a58a[_0x4acd4e(0x2a1)] = 0x3, _0x55a58a[_0x4acd4e(0x4ac)] = 0x4, _0x55a58a['BINARY_EVENT'] = 0x5, _0x55a58a[_0x4acd4e(0x133)] = 0x6, _0x55a58a[_0x4acd4e(0x137)] = _0x3d8683, _0x55a58a['Decoder'] = _0x53eed1;

              var _0x59e063 = _0x55a58a['ERROR'] + _0x4acd4e(0x281);

              function _0x414f9a(_0x58e54d) {
                var _0x59f5f1 = _0x4acd4e,
                    _0x16ca00 = '' + _0x58e54d['type'];

                if (_0x55a58a[_0x59f5f1(0x2fd)] !== _0x58e54d[_0x59f5f1(0x156)] && _0x55a58a['BINARY_ACK'] !== _0x58e54d['type'] || (_0x16ca00 += _0x58e54d['attachments'] + '-'), _0x58e54d[_0x59f5f1(0x201)] && '/' !== _0x58e54d['nsp'] && (_0x16ca00 += _0x58e54d[_0x59f5f1(0x201)] + ','), null != _0x58e54d['id'] && (_0x16ca00 += _0x58e54d['id']), null != _0x58e54d[_0x59f5f1(0x1c5)]) {
                  var _0x1884a0 = function (_0xc0817f) {
                    var _0x4da44f = _0x59f5f1;

                    try {
                      return JSON[_0x4da44f(0x296)](_0xc0817f);
                    } catch (_0x2261c1) {
                      return !0x1;
                    }
                  }(_0x58e54d[_0x59f5f1(0x1c5)]);

                  if (!0x1 === _0x1884a0) return _0x59e063;
                  _0x16ca00 += _0x1884a0;
                }

                return _0x2a8bbd(_0x59f5f1(0x1b7), _0x58e54d, _0x16ca00), _0x16ca00;
              }

              function _0x53eed1() {
                var _0x53be65 = _0x4acd4e;
                this[_0x53be65(0xf1)] = null;
              }

              function _0x47050b(_0x5cd3b8) {
                var _0x3777f6 = _0x4acd4e;
                this[_0x3777f6(0x102)] = _0x5cd3b8, this[_0x3777f6(0x2b8)] = [];
              }

              function _0x2c0a0f(_0xb0869f) {
                var _0x54a4c6 = _0x4acd4e;
                return {
                  'type': _0x55a58a[_0x54a4c6(0x4ac)],
                  'data': 'parser\x20error:\x20' + _0xb0869f
                };
              }

              _0x3d8683[_0x4acd4e(0x1b3)]['encode'] = function (_0x5c23ca, _0x5dedd9) {
                var _0x246a81 = _0x4acd4e;
                _0x2a8bbd(_0x246a81(0x4cb), _0x5c23ca), _0x55a58a[_0x246a81(0x2fd)] === _0x5c23ca[_0x246a81(0x156)] || _0x55a58a['BINARY_ACK'] === _0x5c23ca[_0x246a81(0x156)] ? function (_0x11c7a9, _0x4e35f7) {
                  var _0x173008 = _0x246a81;

                  _0x5c0dac[_0x173008(0x327)](_0x11c7a9, function (_0x5613d3) {
                    var _0x425ebd = _0x173008,
                        _0x405526 = _0x5c0dac['deconstructPacket'](_0x5613d3),
                        _0x4aaa2c = _0x414f9a(_0x405526[_0x425ebd(0x162)]),
                        _0x1b28e3 = _0x405526[_0x425ebd(0x2b8)];

                    _0x1b28e3[_0x425ebd(0x393)](_0x4aaa2c), _0x4e35f7(_0x1b28e3);
                  });
                }(_0x5c23ca, _0x5dedd9) : _0x5dedd9([_0x414f9a(_0x5c23ca)]);
              }, _0x42b58c(_0x53eed1['prototype']), _0x53eed1[_0x4acd4e(0x1b3)][_0x4acd4e(0x2fc)] = function (_0x47f23f) {
                var _0x28617e = _0x4acd4e,
                    _0x860a70;

                if (_0x28617e(0x268) == typeof _0x47f23f) _0x860a70 = function (_0x54072d) {
                  var _0x4356b2 = _0x28617e,
                      _0x8d70e4 = 0x0,
                      _0x25f0f8 = {
                    'type': Number(_0x54072d[_0x4356b2(0x144)](0x0))
                  };
                  if (null == _0x55a58a[_0x4356b2(0x24d)][_0x25f0f8[_0x4356b2(0x156)]]) return _0x2c0a0f(_0x4356b2(0x3e9) + _0x25f0f8[_0x4356b2(0x156)]);

                  if (_0x55a58a[_0x4356b2(0x2fd)] === _0x25f0f8[_0x4356b2(0x156)] || _0x55a58a[_0x4356b2(0x133)] === _0x25f0f8[_0x4356b2(0x156)]) {
                    for (var _0x5bd91f = _0x8d70e4 + 0x1; '-' !== _0x54072d[_0x4356b2(0x144)](++_0x8d70e4) && _0x8d70e4 != _0x54072d[_0x4356b2(0x1b1)];);

                    var _0xfab0f8 = _0x54072d[_0x4356b2(0x4a5)](_0x5bd91f, _0x8d70e4);

                    if (_0xfab0f8 != Number(_0xfab0f8) || '-' !== _0x54072d[_0x4356b2(0x144)](_0x8d70e4)) throw new Error('Illegal\x20attachments');
                    _0x25f0f8[_0x4356b2(0x1d8)] = Number(_0xfab0f8);
                  }

                  if ('/' === _0x54072d[_0x4356b2(0x144)](_0x8d70e4 + 0x1)) {
                    for (_0x5bd91f = _0x8d70e4 + 0x1; ++_0x8d70e4 && ',' !== (_0x2a1e8e = _0x54072d['charAt'](_0x8d70e4)) && _0x8d70e4 !== _0x54072d[_0x4356b2(0x1b1)];);

                    _0x25f0f8[_0x4356b2(0x201)] = _0x54072d['substring'](_0x5bd91f, _0x8d70e4);
                  } else _0x25f0f8['nsp'] = '/';

                  var _0x26180c = _0x54072d[_0x4356b2(0x144)](_0x8d70e4 + 0x1);

                  if ('' !== _0x26180c && Number(_0x26180c) == _0x26180c) {
                    for (_0x5bd91f = _0x8d70e4 + 0x1; ++_0x8d70e4;) {
                      var _0x2a1e8e;

                      if (null == (_0x2a1e8e = _0x54072d[_0x4356b2(0x144)](_0x8d70e4)) || Number(_0x2a1e8e) != _0x2a1e8e) {
                        --_0x8d70e4;
                        break;
                      }

                      if (_0x8d70e4 === _0x54072d[_0x4356b2(0x1b1)]) break;
                    }

                    _0x25f0f8['id'] = Number(_0x54072d[_0x4356b2(0x4a5)](_0x5bd91f, _0x8d70e4 + 0x1));
                  }

                  if (_0x54072d[_0x4356b2(0x144)](++_0x8d70e4)) {
                    var _0x10bffc = function (_0x54a351) {
                      var _0x381d81 = _0x4356b2;

                      try {
                        return JSON[_0x381d81(0x288)](_0x54a351);
                      } catch (_0x1a3ab6) {
                        return !0x1;
                      }
                    }(_0x54072d[_0x4356b2(0x40e)](_0x8d70e4));

                    if (!0x1 === _0x10bffc || _0x25f0f8[_0x4356b2(0x156)] !== _0x55a58a['ERROR'] && !_0x4a92b5(_0x10bffc)) return _0x2c0a0f(_0x4356b2(0x346));
                    _0x25f0f8[_0x4356b2(0x1c5)] = _0x10bffc;
                  }

                  return _0x2a8bbd('decoded\x20%s\x20as\x20%j', _0x54072d, _0x25f0f8), _0x25f0f8;
                }(_0x47f23f), _0x55a58a['BINARY_EVENT'] === _0x860a70[_0x28617e(0x156)] || _0x55a58a[_0x28617e(0x133)] === _0x860a70['type'] ? (this['reconstructor'] = new _0x47050b(_0x860a70), 0x0 === this[_0x28617e(0xf1)][_0x28617e(0x102)][_0x28617e(0x1d8)] && this['emit']('decoded', _0x860a70)) : this['emit'](_0x28617e(0x3e0), _0x860a70);else {
                  if (!_0x3268d7(_0x47f23f) && !_0x47f23f[_0x28617e(0x275)]) throw new Error(_0x28617e(0x45e) + _0x47f23f);
                  if (!this[_0x28617e(0xf1)]) throw new Error(_0x28617e(0x1ab));
                  (_0x860a70 = this[_0x28617e(0xf1)][_0x28617e(0x341)](_0x47f23f)) && (this['reconstructor'] = null, this['emit'](_0x28617e(0x3e0), _0x860a70));
                }
              }, _0x53eed1[_0x4acd4e(0x1b3)][_0x4acd4e(0x1eb)] = function () {
                var _0x5b7d94 = _0x4acd4e;
                this[_0x5b7d94(0xf1)] && this[_0x5b7d94(0xf1)][_0x5b7d94(0x401)]();
              }, _0x47050b[_0x4acd4e(0x1b3)][_0x4acd4e(0x341)] = function (_0x379cb9) {
                var _0x217c42 = _0x4acd4e;

                if (this[_0x217c42(0x2b8)]['push'](_0x379cb9), this[_0x217c42(0x2b8)][_0x217c42(0x1b1)] === this['reconPack'][_0x217c42(0x1d8)]) {
                  var _0x316383 = _0x5c0dac[_0x217c42(0x371)](this[_0x217c42(0x102)], this[_0x217c42(0x2b8)]);

                  return this[_0x217c42(0x401)](), _0x316383;
                }

                return null;
              }, _0x47050b[_0x4acd4e(0x1b3)][_0x4acd4e(0x401)] = function () {
                var _0x317abd = _0x4acd4e;
                this[_0x317abd(0x102)] = null, this[_0x317abd(0x2b8)] = [];
              };
            },
            0x17b2: function (_0x291aec) {
              var _0x3f84d0 = a0_0x107f;

              _0x291aec[_0x3f84d0(0x38d)] = function (_0x52fa6d) {
                var _0x3f1e53 = _0x3f84d0;
                return _0x3c0b0f && Buffer[_0x3f1e53(0x160)](_0x52fa6d) || _0x3d54c7 && (_0x52fa6d instanceof ArrayBuffer || function (_0x3e9182) {
                  var _0x37018c = _0x3f1e53;
                  return 'function' == typeof ArrayBuffer['isView'] ? ArrayBuffer[_0x37018c(0x37b)](_0x3e9182) : _0x3e9182['buffer'] instanceof ArrayBuffer;
                }(_0x52fa6d));
              };

              var _0x3c0b0f = _0x3f84d0(0x17d) == typeof Buffer && _0x3f84d0(0x17d) == typeof Buffer[_0x3f84d0(0x160)],
                  _0x3d54c7 = 'function' == typeof ArrayBuffer;
            },
            0xfca: function (_0x380d45) {
              var _0x1f5fae = a0_0x107f;

              _0x380d45[_0x1f5fae(0x38d)] = function (_0x191559, _0x4854eb) {
                for (var _0x4167ca = [], _0x4f7eab = (_0x4854eb = _0x4854eb || 0x0) || 0x0; _0x4f7eab < _0x191559['length']; _0x4f7eab++) _0x4167ca[_0x4f7eab - _0x4854eb] = _0x191559[_0x4f7eab];

                return _0x4167ca;
              };
            },
            0x8e9: function (_0x5085b0) {
              var _0x5a8e81 = a0_0x107f;

              var _0x22d8a7,
                  _0x3e91f5 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'[_0x5a8e81(0x460)](''),
                  _0x25398f = {},
                  _0x300919 = 0x0,
                  _0x3a78b3 = 0x0;

              function _0x40321d(_0x57cf33) {
                var _0x4ba9a3 = '';

                do {
                  _0x4ba9a3 = _0x3e91f5[_0x57cf33 % 0x40] + _0x4ba9a3, _0x57cf33 = Math['floor'](_0x57cf33 / 0x40);
                } while (_0x57cf33 > 0x0);

                return _0x4ba9a3;
              }

              function _0x1cdc79() {
                var _0xf10362 = _0x40321d(+new Date());

                return _0xf10362 !== _0x22d8a7 ? (_0x300919 = 0x0, _0x22d8a7 = _0xf10362) : _0xf10362 + '.' + _0x40321d(_0x300919++);
              }

              for (; _0x3a78b3 < 0x40; _0x3a78b3++) _0x25398f[_0x3e91f5[_0x3a78b3]] = _0x3a78b3;

              _0x1cdc79[_0x5a8e81(0x263)] = _0x40321d, _0x1cdc79[_0x5a8e81(0x3f1)] = function (_0x7e8dac) {
                var _0x3e0af3 = _0x5a8e81,
                    _0x142437 = 0x0;

                for (_0x3a78b3 = 0x0; _0x3a78b3 < _0x7e8dac[_0x3e0af3(0x1b1)]; _0x3a78b3++) _0x142437 = 0x40 * _0x142437 + _0x25398f[_0x7e8dac[_0x3e0af3(0x144)](_0x3a78b3)];

                return _0x142437;
              }, _0x5085b0['exports'] = _0x1cdc79;
            },
            0x1b6c: function () {}
          },
              _0x2de417 = {},
              _0x10ca6e = function _0x460d82(_0x421da6) {
            var _0x1e4cd6 = a0_0x107f,
                _0xeaf771 = _0x2de417[_0x421da6];
            if (void 0x0 !== _0xeaf771) return _0xeaf771[_0x1e4cd6(0x38d)];

            var _0x39b422 = _0x2de417[_0x421da6] = {
              'exports': {}
            };

            return _0x1cc45a[_0x421da6][_0x1e4cd6(0x229)](_0x39b422[_0x1e4cd6(0x38d)], _0x39b422, _0x39b422[_0x1e4cd6(0x38d)], _0x460d82), _0x39b422['exports'];
          }(0x370);

          module[_0x172cd5(0x38d)] = _0x10ca6e;
        }(); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/gameCommonUtils.ts", ['cc', './loadConfigAsync.ts', './utils.ts'], function (exports) {
  var cclegacy, sys, rect, director, game, loadConfigAsync, setOpacity, setDeviceOrientation;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      rect = module.rect;
      director = module.director;
      game = module.game;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
      setDeviceOrientation = module.setDeviceOrientation;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57626ZrpD9Ds4C68txemV+u", "gameCommonUtils", undefined);

      const lodash = globalThis._;

      class GameCommonUtils {
        constructor() {
          this.gameCanvasSize = {};

          this.getUrlParam = name => {
            if (sys.isNative) return null;
            const url = new URL(window.location);
            return url.searchParams.get(name);
          };

          this.checkConditionCloseGameIframe = () => {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();

            if (!LOGIN_IFRAME) {
              return true;
            }

            const returnUrl = this.getUrlParam('ru');
            return returnUrl && LOGIN_IFRAME;
          };

          this.handleCloseGameIframe = () => {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();

            if (!LOGIN_IFRAME) {
              this.handleBackToLobby();
              return;
            }

            const returnUrl = this.getUrlParam('ru');

            if (returnUrl && LOGIN_IFRAME) {
              if (returnUrl.trim() === 'close') {
                window.close();
              } else {
                window.location.href = returnUrl;
              }
            } else {
              location.reload();
            }
          };

          this.handleFlowOutGame = () => {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              this.handleBackToLobby();
            }
          };

          this.handleBackLogin = () => {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              this.handleBackToLobby();
            }
          };

          this.getMessageSlot = (mess = {}) => {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();
            let language = LOGIN_IFRAME ? this.getUrlParam('l') : sys.localStorage.getItem('l'); //@ts-ignore

            if (CC_PREVIEW) {
              const sceneName = this.getSceneName();

              if (sceneName.lastIndexOf('-') >= 0) {
                language = sceneName.substring(sceneName.lastIndexOf('-') + 1);
              }
            }

            let result = {};

            if (globalThis.slotLanguageData) {
              result = new globalThis.slotLanguageData(language).getMessageSlot(mess);
            }

            return result;
          };

          this.getBetValueWithGame = (gameId, listBet) => {
            if (!gameId) return '';
            let betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              const newObj = {};
              newObj[gameId] = '';
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);

              if (lodash.isEmpty(listBet)) {
                return betValue[gameId];
              } else {
                if (lodash.isArray(listBet) && listBet.includes(betValue[gameId])) {
                  return betValue[gameId];
                } else {
                  let isExist = false;
                  Object.keys(listBet).map(betId => {
                    if (listBet[betId] === betValue[gameId]) {
                      isExist = true;
                    }
                  });

                  if (isExist) {
                    return betValue[gameId];
                  }
                }
              }
            }

            return '';
          };

          this.setBetValueWithGame = (gameId, betId) => {
            let betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              const newObj = {};
              newObj[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);
              betValue[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(betValue));
            }
          };

          this.getKeyWithGame = (gameId, key, value = '') => {
            if (!gameId || !key) return '';
            let betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              const newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              return betLinesValue[gameId] ? betLinesValue[gameId] : value;
            }

            return value;
          };

          this.setKeyWithGame = (gameId, key, value = '') => {
            if (!gameId || !key) return '';
            let betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              const newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              betLinesValue[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(betLinesValue));
            }
          };

          this.optimizeScrollView = listView => {
            let view = listView.parent;
            let viewRect = rect(-view.width / 2, -listView.y - view.height, view.width, view.height);

            for (let i = 0; i < listView.children.length; i++) {
              const node = listView.children[i];

              if (viewRect.intersects(node.getBoundingBox())) {
                setOpacity(node, 255);
              } else {
                setOpacity(node, 0);
              }
            }
          };
        }

        isLoginIframe() {
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();
          return LOGIN_IFRAME === true;
        }

        handleBackToLobby() {
          const {
            IS_PRODUCTION,
            LOBBY_SCENE_NAME,
            IS_LOBBY_PORTRAIT
          } = loadConfigAsync.getConfig();

          if (IS_PRODUCTION) {
            director.emit("INTEGRATION_BACK_TO_LOBBY");
          } else {
            const scene = director.getScene();
            const nodePersist = scene.getChildByName('OverlayPersistent');

            if (nodePersist) {
              game.removePersistRootNode(nodePersist);
            }

            setDeviceOrientation(IS_LOBBY_PORTRAIT ? true : false);
            director.preloadScene(LOBBY_SCENE_NAME, () => {
              director.loadScene(LOBBY_SCENE_NAME);
            });
          }
        }

        handleReleaseBundle() {}

        getSceneName() {
          var sceneName = ""; //@ts-ignore

          var info = game._sceneInfos.find(sceneInfo => sceneInfo.uuid == director._scene._id);

          sceneName = info ? info.url : "";
          sceneName = sceneName.substring(sceneName.lastIndexOf('/') + 1).match(/[^\.]+/)[0];
          return sceneName;
        }

      }

      const gameCommonUtils = exports('default', new GameCommonUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, Node, Label, _decorator, Component, NodePool, instantiate, formatMoney, customDateFormat, startGameFromEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }, function (module) {
      formatMoney = module.formatMoney;
      customDateFormat = module.customDateFormat;
      startGameFromEvent = module.startGameFromEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "3a765ClryJDR75k/7uN4CBN", "GameEvent", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameEvent = exports('GameEvent', (_dec = ccclass('GameEvent'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec(_class = (_class2 = class GameEvent extends Component {
        constructor(...args) {
          super(...args);
          this.currentQuest = null;
          this.eventId = null;
          this.type = '';

          _initializerDefineProperty(this, "questPrefab", _descriptor, this);

          _initializerDefineProperty(this, "questHolder", _descriptor2, this);

          _initializerDefineProperty(this, "rewardHolder", _descriptor3, this);

          _initializerDefineProperty(this, "rewardString", _descriptor4, this);

          _initializerDefineProperty(this, "eventName", _descriptor5, this);

          _initializerDefineProperty(this, "eventTime", _descriptor6, this);

          _initializerDefineProperty(this, "eventPeriod", _descriptor7, this);

          this.questPool = null;
        }

        onLoad() {
          this.questPool = new NodePool();
        }

        getQuest() {
          let quest = this.questPool.get();

          if (!quest) {
            quest = instantiate(this.questPrefab);
          }

          return quest;
        }

        onDisable() {
          while (this.questHolder.children.length > 0) {
            this.questPool.put(this.questHolder.children[0]);
          }
        }

        init(data) {
          // console.log(data);
          this.currentQuest = null;
          this.eventId = data.eventInfo.id;
          this.type = data.eventInfo.isMission == 1 ? "Mission" : "Event";
          this.eventName.string = this.type + ": " + data.eventInfo.name;
          let loadCurrentQuest = false;

          for (let i = 0; i < data.listQuest.length; i++) {
            let quest = this.getQuest();
            quest.setParent(this.questHolder);
            quest.getComponent('GameQuest').init(data.listQuest[i], data.eventInfo.id);

            if (!loadCurrentQuest && !data.listQuest[i].isComplete) {
              this.currentQuest = data.listQuest[i];
              loadCurrentQuest = true;
            }
          }

          if (data.eventInfo.rewardAmount) {
            this.rewardHolder.active = true;
            this.rewardString.string = formatMoney(data.eventInfo.rewardAmount);
          } else {
            this.rewardHolder.active = false;
          }

          let startDate = new Date(data.eventInfo.startDate);
          let endDate = new Date(data.eventInfo.endDate);
          let startDateStr = customDateFormat(startDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          let endDataStr = customDateFormat(endDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          this.eventTime.string = `Thời gian: ${startDateStr} - ${endDataStr}`;

          if (data.eventInfo.timePeriod && data.eventInfo.timePeriod.length > 0) {
            let periodString = '';

            for (let i = 0; i < data.eventInfo.timePeriod.length; i++) {
              let period = data.eventInfo.timePeriod[i];
              periodString += `[${this.convertHourUTC(period.startTime)} - ${this.convertHourUTC(period.endTime)}]`;
            }

            this.eventPeriod.string = 'Khung giờ: ' + periodString;
          } else {
            this.eventPeriod.string = 'Khung giờ: Tất Cả';
          }
        }

        convertHourUTC(time) {
          //to GMT +7
          let timeArray = time.split(':');
          let hour = parseInt(timeArray[0]) + 7;
          hour = hour > 24 ? hour - 24 : hour;
          let result = `${hour}:${timeArray[1]}`;
          if (hour < 10) result = '0' + result;
          return result;
        }

        playEvent() {
          if (this.currentQuest) {
            let gameId = this.currentQuest.serviceIds[0];
            let eventId = this.eventId;
            startGameFromEvent(gameId);
          }
        }

        onDestroy() {
          this.questPool.clear();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "questPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "questHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rewardHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardString", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "eventTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eventPeriod", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLogo.ts", ['cc', './loadConfigAsync.ts'], function (exports) {
  var cclegacy, Component, _decorator, loadConfigAsync;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "197f4TTNgtGs71sl9ECWnVm", "GameLogo", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameLogo = exports('GameLogo', (_dec = ccclass('GameLogo'), _dec(_class = class GameLogo extends Component {
        onLoad() {
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();

          if (LOGIN_IFRAME) {
            this.node.active = false;
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameQuest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './LobbyScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, Node, Label, _decorator, Component, formatMoney, LobbyScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Node = module.Node;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      LobbyScene = module.LobbyScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6c9a3NtH3hPhpKRbfg0K99V", "GameQuest", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameQuest = exports('GameQuest', (_dec = ccclass('GameQuest'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = class GameQuest extends Component {
        constructor(...args) {
          super(...args);
          this.gameId = null;
          this.finished = false;
          this.eventId = '';

          _initializerDefineProperty(this, "iconGame", _descriptor, this);

          _initializerDefineProperty(this, "iconDone", _descriptor2, this);

          _initializerDefineProperty(this, "reward", _descriptor3, this);
        }

        init(data, eventId) {
          this.eventId = eventId;
          this.gameId = data.serviceIds[0];
          const lobbyScene = this.node.scene.getComponentInChildren(LobbyScene);

          if (lobbyScene) {
            this.iconGame.spriteFrame = lobbyScene.getIconSpriteFrame(this.gameId);
          } else {
            this.iconGame.spriteFrame = null;
          }

          this.finished = data.isComplete;
          this.iconDone.active = this.finished;
          this.reward.string = formatMoney(data.rewardAmount); // console.log(`Reward String ${this.reward.string}`)
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "reward", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GeneralInitialization1975.ts", ['cc', './gfGeneralInitialization.ts', './gfLocalize.ts', './gfEventEmitter.ts', './gfNetworkParser.ts', './Config1975.ts', './DataStore1975.ts', './gfMainFSM.ts', './MainController1975.ts', './PoolManager1975.ts', './NodePoolConfig1975.ts', './FishManager1975.ts', './gfReferenceManager.ts', './gfAutoFireController.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var cclegacy, _decorator, gfGeneralInitialization, gfLocalize, gfEventEmitter, gfNetworkParser, Config1975, DataStore1975, gfMainFSM, MainController1975, PoolManager1975, NodePoolConfig1975, FishManager1975, gfReferenceManager, gfAutoFireController, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfGeneralInitialization = module.gfGeneralInitialization;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      MainController1975 = module.default;
    }, function (module) {
      PoolManager1975 = module.default;
    }, function (module) {
      NodePoolConfig1975 = module.default;
    }, function (module) {
      FishManager1975 = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfAutoFireController = module.gfAutoFireController;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fe4beZyUqxLMLXh2So+GWL+", "GeneralInitialization1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GeneralInitialization1975 = exports('default', (_dec = ccclass('GeneralInitialization1975'), _dec(_class = class GeneralInitialization1975 extends gfGeneralInitialization {
        initInstances() {
          //Init Localize
          gfLocalize.instance = new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          gfEventEmitter.instance = new gfEventEmitter(); //Init NetworkParser

          gfNetworkParser.instance = new gfNetworkParser(); // CurrencyCalculator.instance = new CurrencyCalculator();
          //Init GameConfig

          if (!Config1975.instance) {
            new Config1975();
          } //Init Datastore


          DataStore1975.instance = new DataStore1975(); //Init ReferenceManager

          gfReferenceManager.instance = new gfReferenceManager(); //Init Main FSM

          gfMainFSM.instance = new gfMainFSM(); //Init Main Controller

          MainController1975.instance = new MainController1975();
          PoolManager1975.instance = new PoolManager1975(this.gameObjectPrefabs);
          NodePoolConfig1975.instance = new NodePoolConfig1975(this.nodePoolAssetPrefab);
          FishManager1975.instance = new FishManager1975();
          gfAutoFireController.instance = new gfAutoFireController();
          new gfCurrencyCalculator();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gf3DParticle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPoolManager.ts', './utils.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, misc, v3, gfBaseConfig, gfPoolManager, getRandomInt, v3f;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      misc = module.misc;
      v3 = module.v3;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      v3f = module.v3f;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _dec2, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "ba957p7g4xH/6+/05dsHsb4", "gf3DParticle", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let configParticle = exports('configParticle', (_dec = ccclass('configParticle'), _dec(_class = (_class2 = class configParticle {
        constructor() {
          _initializerDefineProperty(this, "start", _descriptor, this);

          _initializerDefineProperty(this, "end", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "start", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "end", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      let gf3DParticle = exports('gf3DParticle', (_dec2 = ccclass('gf3DParticle'), _dec3 = property(configParticle), _dec4 = property(configParticle), _dec5 = property(configParticle), _dec2(_class4 = (_class5 = class gf3DParticle extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "particlePerSpawn", _descriptor3, this);

          _initializerDefineProperty(this, "spawnInterval", _descriptor4, this);

          _initializerDefineProperty(this, "gravity", _descriptor5, this);

          _initializerDefineProperty(this, "speed", _descriptor6, this);

          _initializerDefineProperty(this, "angle", _descriptor7, this);

          _initializerDefineProperty(this, "size", _descriptor8, this);

          _initializerDefineProperty(this, "lifetime", _descriptor9, this);

          _initializerDefineProperty(this, "radius", _descriptor10, this);

          _initializerDefineProperty(this, "duration", _descriptor11, this);

          _initializerDefineProperty(this, "coinAnimSpeed", _descriptor12, this);

          this._isMe = true;
          this.isPlaying = false;
          this.spawnTimer = void 0;
          this.timer = void 0;
        }

        onLoad() {
          // this.node.setSpawnRate = this.setSpawnRate.bind(this);
          // this.node.setGravity = this.setGravity.bind(this);
          // this.node.setItemSpeed = this.setItemSpeed.bind(this);
          // this.node.setSpawnInterval = this.setSpawnInterval.bind(this);
          // this.node.setLifetime = this.setLifetime.bind(this);
          // this.node.startAnimation = this.startAnimation.bind(this);
          // this.node.stopAnimation = this.stopAnimation.bind(this);
          // this.node.setDuration = this.setDuration.bind(this);
          // this.node.setIsMe = this.setIsMe.bind(this);
          this.isPlaying = false;
        }

        startAnimation() {
          this.isPlaying = true;
          this.spawnTimer = this.spawnInterval;
          this.timer = 0;
        }

        setSpawnRate(perSpawn) {
          this.particlePerSpawn = perSpawn;
        }

        setSpawnInterval(interval) {
          this.spawnInterval = interval;
          this.spawnTimer = this.spawnInterval;
        }

        setItemSpeed(minSpeed, maxSpeed) {
          this.speed = {
            start: minSpeed,
            end: maxSpeed
          };
        }

        setGravity(gravity) {
          this.gravity = gravity;
        }

        setDuration(duration) {
          this.duration = duration;
        }

        setLifetime(lifeTime) {
          this.lifetime = lifeTime;
        }

        setIsMe(isMe) {
          this._isMe = isMe;
        }

        stopAnimation() {
          this.isPlaying = false;
          this.timer = 0;

          while (this.node.children.length > 0) {
            this.node.children[0].emit("STOP_ANIMATION");
          }
        }

        update(dt) {
          if ((this.duration < 0 || this.timer <= this.duration) && this.isPlaying == true) {
            this.timer += dt;
            this.spawnTimer += dt;

            if (this.spawnTimer >= this.spawnInterval) {
              this.spawnTimer -= this.spawnInterval;

              for (let i = 0; i < this.particlePerSpawn; i++) {
                let coin = this._isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);
                coin.node.parent = this.node;
                coin.node.angle = getRandomInt(0, 360);
                coin.setOpacity(255);
                coin.node.setScale(v3f(this.size.start + Math.random() * (this.size.end - this.size.start) * 2));
                let angle = misc.degreesToRadians(this.angle.start) + Math.random() * (misc.degreesToRadians(this.angle.end) - misc.degreesToRadians(this.angle.start));
                const pos = this.radius === 0 ? v3(0, 0, 0) : this.generatePoint(angle);
                coin.node.setPosition(pos.x, pos.y, coin.node.position.z);
                let speed = this.speed.start + Math.random() * (this.speed.end - this.speed.start);
                coin.startAnimation(1, this.coinAnimSpeed, Math.cos(angle) * speed, Math.sin(angle) * speed, 0, this.gravity, this.lifetime);
              }
            }
          }
        }

        generatePoint(angle) {
          let x = Math.cos(angle) * this.radius;
          let y = Math.sin(angle) * this.radius;
          return v3(x, y, 0);
        }

      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "particlePerSpawn", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 80;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "spawnInterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 2;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "gravity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return -250;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "angle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "size", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "lifetime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "radius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return -1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "coinAnimSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 1.25;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfActionHelper.ts", ['cc', './utils.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, tween, UIRenderer, UIOpacity, math, v3, Tween, bezier, v2, misc, Mask, Color, setOpacity, roundAngle;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      UIRenderer = module.UIRenderer;
      UIOpacity = module.UIOpacity;
      math = module.math;
      v3 = module.v3;
      Tween = module.Tween;
      bezier = module.bezier;
      v2 = module.v2;
      misc = module.misc;
      Mask = module.Mask;
      Color = module.Color;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      roundAngle = module.roundAngle;
    }],
    execute: function () {
      cclegacy._RF.push({}, "41cdfMfFS5De7ZV3uy8io9a", "gfActionHelper", undefined);

      const fadeOut = exports('fadeOut', function (time, easing) {
        return fadeTo(time, 0, easing);
      });
      const fadeIn = exports('fadeIn', function (time, easing) {
        return fadeTo(time, 255, easing);
      });
      const fadeTo = exports('fadeTo', function (time, opacity, easing) {
        if (opacity < 0 || opacity > 255) {
          opacity = 0;
        }

        let currentOpacity = 0;
        return tween().to(time, null, {
          easing,
          onStart: target => {
            const renderer = target.getComponent(UIRenderer);

            if (renderer) {
              currentOpacity = renderer.color.a;
            } else {
              let uiProps = target.getComponent(UIOpacity);

              if (!uiProps) {
                uiProps = target.addComponent(UIOpacity);
              }

              currentOpacity = uiProps.opacity;
            }
          },
          onUpdate: (target, ratio) => {
            let newOpacity = math.lerp(currentOpacity, opacity, ratio);
            setOpacity(target, newOpacity);
          }
        });
      });
      const delay = exports('delay', function (time) {
        return tween().delay(time);
      });
      const scaleTo = exports('scaleTo', function (time, x, y, easing) {
        if (y == undefined) {
          y = x;
        }

        return tween().to(time, {
          scale: v3(x, y, 1)
        }, {
          easing
        });
      });
      const rotateTo = exports('rotateTo', function (time, angle, easing) {
        let startAngle = null;
        let realAngle = null;
        return tween().to(time, null, {
          easing,
          onStart: target => {
            startAngle = roundAngle(target.angle);
            realAngle = roundAngle(angle - startAngle);
          },
          onUpdate: (target, ratio) => {
            target.angle = startAngle + realAngle * ratio;
          }
        });
      });
      const rotateBy = exports('rotateBy', function (time, a, easing) {
        return tween().by(time, {
          angle: a
        }, {
          easing
        });
      });
      const call = exports('call', function (callFunc) {
        return tween().call(callFunc);
      });
      const v3f = exports('v3f', function (f) {
        return v3(f, f, f);
      });
      const stopAllActions = exports('stopAllActions', function (target) {
        Tween.stopAllByTarget(target);
      });
      const moveTo = exports('moveTo', function (dur, x, y = 0, z = 0, easing) {
        return tween().to(dur, {
          position: v3(x, y, z)
        }, {
          easing
        });
      });
      const moveBy = exports('moveBy', function (dur, x, y = 0, z = 0, easing) {
        return tween().by(dur, {
          position: v3(x, y, z)
        }, {
          easing
        });
      });
      const bezierTo = exports('bezierTo', function (dur, points, easing) {
        let start = v3(0, 0, 0);
        return tween().to(dur, null, {
          easing,
          onStart: target => {
            start = target.getPosition();
          },
          onUpdate: (target, ratio) => {
            const x = bezier(start.x, points[0].x, points[1].x, points[2].x, ratio);
            const y = bezier(start.y, points[0].y, points[1].y, points[2].y, ratio);
            target.setPosition(x, y, start.z);
          }
        });
      });
      const gfMoveBy = exports('gfMoveBy', function (duration, x, y, timeSkipped = 0, easing) {
        let startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing,
          onStart: target => {
            startPos = target.getPosition();
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            const px = startPos.x + dt * x;
            const py = startPos.y + dt * y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      const gfMoveTo = exports('gfMoveTo', function (duration, x, y, timeSkipped = 0, easing) {
        let startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing,
          onStart: target => {
            startPos = target.getPosition();
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            const px = startPos.x + dt * (x - startPos.x);
            const py = startPos.y + dt * (y - startPos.y);
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      const gfMoveByDistance = exports('gfMoveByDistance', function (duration, distance, timeSkipped = 0) {
        let startPos = v3(0, 0, 0);
        let deltaPos = v2(0, 0);
        return tween().to(duration, null, {
          onStart: target => {
            const node = target;
            startPos = node.getPosition();
            const angle = misc.degreesToRadians(node.angle);
            deltaPos = v2(distance * Math.cos(angle), distance * Math.sin(angle));
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            const px = startPos.x + dt * deltaPos.x;
            const py = startPos.y + dt * deltaPos.y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      const gfCircleBy = exports('gfCircleBy', function (duration, center, radius, angle, timeSkipped = 0) {
        let startPos = v3(0, 0, 0);
        let baseAngle = 0;
        return tween().to(duration, null, {
          onStart: target => {
            const node = target;
            startPos = node.getPosition();
            baseAngle = Math.atan2(startPos.y - center.y, startPos.x - center.x);
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            const radian = baseAngle + misc.degreesToRadians(angle) * dt;
            const x = radius * Math.cos(radian);
            const y = radius * Math.sin(radian);
            target.setPosition(x + center.x, y + center.y, startPos.z);
          }
        });
      });
      const gfBezierBy = exports('gfBezierBy', function (duration, points, timeSkipped = 0) {
        let start = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: target => {
            start = target.getPosition();
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            const x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, dt);
            const y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, dt);
            target.setPosition(x, y, start.z);
          }
        });
      });
      const shake = exports('shake', function (pos, duration, delay = 0) {
        const timeFrame = duration / 11;
        const posX = pos.x;
        const posY = pos.y;
        return tween().to(timeFrame, {
          position: v3(posX - 1, posY - 2, 0),
          angle: -1
        }) //10%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 0, 0),
          angle: 1
        }) //20%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 2, 0),
          angle: 0
        }) //30%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 1, 0),
          angle: 1
        }) //40%
        .to(timeFrame, {
          position: v3(posX - 1, posY + 2, 0),
          angle: -1
        }) //50%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 1, 0),
          angle: 0
        }) //60%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 1, 0),
          angle: -1
        }) //70%
        .to(timeFrame, {
          position: v3(posX - 1, posY - 1, 0),
          angle: 1
        }) //80%
        .to(timeFrame, {
          position: v3(posX + 1, posY + 2, 0),
          angle: 0
        }) //90%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 2, 0),
          angle: -1
        }) //100%
        .to(timeFrame, {
          position: v3(posX, posY, 0),
          angle: 0
        }) //100%
        .delay(delay);
      });
      const blink = exports('blink', function (duration, times, finalOpacity = 255) {
        let slice = 1.0 / times;
        return tween().to(duration, null, {
          onUpdate: (target, ratio) => {
            var m = ratio % slice;
            setOpacity(target, m > slice / 2 ? 255 : 0);
          },
          onComplete: target => {
            setOpacity(target, finalOpacity);
          }
        });
      });
      const moveBySpring = exports('moveBySpring', function (data, timeSkipped = 0) {
        const {
          duration,
          cycleIntensity,
          speed,
          radius,
          timeSpent,
          pos,
          flip,
          angle
        } = data;
        let startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: target => {
            const node = target;
            startPos = node.getPosition();
          },
          onUpdate: (target, dt) => {
            dt = (dt * duration + timeSpent) / (duration + timeSkipped);

            function mx(u) {
              const timeSpent = u * duration * speed * (flip ? 1 : -1);
              return (timeSpent / cycleIntensity - Math.cos(timeSpent + angle * Math.PI / 180)) * radius + pos.x;
            }

            function my(u) {
              const timeSpent = u * duration * speed * (flip ? 1 : -1);
              return Math.sin(timeSpent + angle * Math.PI / 180) * radius + pos.y;
            }

            const x = mx(dt);
            const y = my(dt);
            target.setPosition(x, y, startPos.z);
          }
        });
      });
      const gfSetOpacityAll = exports('gfSetOpacityAll', function (node, opacity) {
        setOpacity(node, opacity);
        const children = node.getComponentsInChildren(UIRenderer).filter(child => !child.getComponent(Mask));
        children.forEach(child => {
          const {
            r,
            g,
            b
          } = child.color;
          child.color = new Color(r, g, b, opacity);
        });
      });
      const gfFadeOutAll = exports('gfFadeOutAll', function (time, easing) {
        return gfFadeToAll(time, 0, easing);
      });
      const gfFadeInAll = exports('gfFadeInAll', function (time, easing) {
        return gfFadeToAll(time, 255, easing);
      });
      const gfFadeToAll = exports('gfFadeToAll', function (time, opacity, easing) {
        opacity = math.clamp(opacity, 0, 255);
        let currentOpacity = 255;
        return tween().to(time, null, {
          easing,
          onStart: target => {
            let node = target;
            let uiProps = node.getComponent(UIOpacity);

            if (uiProps) {
              currentOpacity = uiProps.opacity;
            } else {
              const renderable2D = node.getComponent(UIRenderer);

              if (renderable2D) {
                currentOpacity = renderable2D.color.a;
              }
            }
          },
          onUpdate: (target, ratio) => {
            let node = target;
            let newOpacity = math.lerp(currentOpacity, opacity, ratio);
            gfSetOpacityAll(node, newOpacity);
          }
        });
      });
      const gfBezierLengthBy = exports('gfBezierLengthBy', function (dur, points, timeSkipped = 0, easing) {
        let start = v3(0, 0, 0); // Tính sẵn length và lookup table

        const segments = 100;
        let lookup = [];

        const initLookupTable = () => {
          lookup = [];
          let length = 0;
          let prev = {
            x: start.x,
            y: start.y
          };
          lookup.push({
            t: 0,
            length: 0
          });

          for (let i = 1; i <= segments; i++) {
            const t = i / segments;
            const x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, t);
            const y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, t);
            const dx = x - prev.x;
            const dy = y - prev.y;
            length += Math.sqrt(dx * dx + dy * dy);
            lookup.push({
              t,
              length
            });
            prev = {
              x,
              y
            };
          }

          return length;
        };

        const getTForDistance = distance => {
          for (let i = 1; i < lookup.length; i++) {
            if (lookup[i].length >= distance) {
              const prev = lookup[i - 1];
              const curr = lookup[i];
              const ratio = (distance - prev.length) / (curr.length - prev.length);
              return prev.t + (curr.t - prev.t) * ratio;
            }
          }

          return 1;
        };

        let totalLength = 0;
        return tween().to(dur, null, {
          easing,
          onStart: target => {
            start = target.getPosition();
            totalLength = initLookupTable();
          },
          onUpdate: (target, ratio) => {
            const dt = (ratio * dur + timeSkipped) / (dur + timeSkipped);
            const distance = totalLength * dt;
            const t = getTForDistance(distance);
            const x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, t);
            const y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, t);
            target.setPosition(x, y, start.z);
          }
        });
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAnimateNumberLabel.ts", ['cc', './animateNumberLabel.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var cclegacy, Label, _decorator, AnimateNumberLabel, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d1b43nRv3NOEKJ592SvCv8s", "gfAnimateNumberLabel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfAnimateNumberLabel = exports('gfAnimateNumberLabel', (_dec = ccclass('gfAnimateNumberLabel'), _dec(_class = class gfAnimateNumberLabel extends AnimateNumberLabel {
        onLoad() {
          super.onLoad();
          this.node['onUpdateValue'] = this.onUpdateValueByCurrency.bind(this);
        }

        onUpdateValueByCurrency(end, animationDuration = 3000, acceptRunDown = true, removeDecimalZero = false, removeDecimal = false) {
          clearInterval(this.timer);
          if (!this.node) return;
          const label = this.node.getComponent(Label);
          let start = this.currentValue ? this.currentValue : 0;
          start *= 10000;
          end *= 10000;

          if (!acceptRunDown && end < start) {
            this.currentValue = end / 10000;
            label.string = gfCurrencyCalculator.instance.formatCurrency(this.currentValue, removeDecimalZero, removeDecimal);
            return;
          } // assumes integer values for start and end


          const range = end - start; // no timer shorter than 50ms (not really visible any way)

          const minTimer = 50; // calc step time to show all interediate values

          let stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          const startTime = new Date().getTime();
          const endTime = startTime + animationDuration;
          this.timer;

          const run = () => {
            const now = new Date().getTime();
            const remaining = Math.max((endTime - now) / animationDuration, 0);
            let value = end - remaining * range;
            value /= 10000;
            this.currentValue = value; // label.string = CurrencyCalculator.instance.formatCurrency(value, removeDecimalZero, removeDecimal);

            label.string = gfCurrencyCalculator.instance.formatCurrency(value, removeDecimalZero, removeDecimal);

            if (value == end / 10000) {
              clearInterval(this.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAssetBundle.ts", ['cc', './gfBaseConfig.ts'], function (exports) {
  var assetManager, cclegacy, gfBaseConfig;
  return {
    setters: [function (module) {
      assetManager = module.assetManager;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c97dRruwtJ64FqLt6xq3zu", "gfAssetBundle", undefined);

      class gfAssetBundle {
        constructor() {
          this.GameBundle = void 0;
          gfAssetBundle.instance = this;
        }

        loadVipRoomAssets(callback) {
          if (!this.GameBundle) {
            callback && callback();
            return;
          }

          callback && callback();
        }

        releaseVipRoomAssets() {
          if (!this.GameBundle) return;
        }

        releaseLoadingAssets() {
          if (!this.GameBundle) return;
          this.GameBundle.release('./Scenes/' + gfBaseConfig.instance.LoadingSceneName);
        }

        destroy() {
          if (!this.GameBundle) return;
          this.GameBundle.releaseAll();
          assetManager.removeBundle(this.GameBundle);
          this.GameBundle = null;
          gfAssetBundle.instance = null;
        }

      }

      exports('default', gfAssetBundle);
      gfAssetBundle.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAssetLangController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, JsonAsset, _decorator, Component, director, error, Button, sp, Sprite, Label, Node, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      JsonAsset = module.JsonAsset;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
      error = module.error;
      Button = module.Button;
      sp = module.sp;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;

      cclegacy._RF.push({}, "a2f43nzzA5Ft7QbTO++40oc", "gfAssetLangController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfAssetLangController = exports('gfAssetLangController', (_dec = ccclass('gfAssetLangController'), _dec2 = property(JsonAsset), _dec3 = property(JsonAsset), _dec(_class = (_class2 = (_class3 = class gfAssetLangController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "configLanguage", _descriptor, this);

          _initializerDefineProperty(this, "localizeConfig", _descriptor2, this);

          _initializerDefineProperty(this, "sceneLoadingName", _descriptor3, this);

          _initializerDefineProperty(this, "language", _descriptor4, this);

          this._configJson = void 0;
          this._listOldAssets = null;
        }

        onLoad() {
          if (!gfAssetLangController.instance) {
            gfAssetLangController.instance = this;
          }

          director.addPersistRootNode(this.node);
          this.initMultiLangAssets();
          this.preloadSceneLoading(); // this.downLoadAssets();
        }

        getConfigByID(nodeID) {
          //@ts-ignore
          return this._configJson[[nodeID]];
        }

        getLocalizeJson() {
          return this.localizeConfig;
        }

        initMultiLangAssets() {
          let scene = director.getScene();
          let children = scene.children;
          let listAllNode = this.getAllNodeInTarget(children, []);
          listAllNode = listAllNode.filter(node => {
            return node.getComponent("gfLocalizeNodeAsset") !== null;
          });
          this._configJson = this.configLanguage.json;

          for (let configID in this._configJson) {
            let nodeTarget = listAllNode.find(node => {
              let _nodeID = node.getComponent("gfLocalizeNodeAsset").getNodeId();

              return _nodeID === configID;
            });

            if (nodeTarget) {
              let _uuid;

              switch (this._configJson[configID].Type) {
                case "cc.Label":
                  _uuid = nodeTarget.getComponent(Label).font.uuid ? nodeTarget.getComponent(Label).font.uuid : nodeTarget.getComponent(Label).font._uuid;
                  this._configJson[configID].assetUuid = _uuid;
                  break;

                case "cc.Sprite":
                  _uuid = nodeTarget.getComponent(Sprite).spriteFrame.uuid ? nodeTarget.getComponent(Sprite).spriteFrame.uuid : nodeTarget.getComponent(Sprite).spriteFrame._uuid;
                  this._configJson[configID].assetUuid = _uuid;
                  break;

                case "sp.Skeleton":
                  _uuid = nodeTarget.getComponent(sp.Skeleton).skeletonData.uuid ? nodeTarget.getComponent(sp.Skeleton).skeletonData.uuid : nodeTarget.getComponent(sp.Skeleton).skeletonData._uuid;
                  this._configJson[configID].assetUuid = _uuid;
                  break;

                case "cc.Button":
                  {
                    let btn = nodeTarget.getComponent(Button);
                    _uuid = {};

                    if (btn._disabledSprite) {
                      _uuid._disabledSprite = btn._disabledSprite._uuid;
                    }

                    _uuid._hoverSprite = btn._hoverSprite._uuid;
                    _uuid._normalSprite = btn._normalSprite._uuid;
                    _uuid._pressedSprite = btn._pressedSprite._uuid;
                    this._configJson[configID].assetUuid = _uuid;
                    break;
                  }

                default:
                  error('Type not supported:', this._configJson[configID].Type);
              }
            }
          }
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        }

        preloadSceneLoading() {
          director.loadScene(this.sceneLoadingName);
        }

        getAllNodeInTarget(target, result) {
          if (!target) return;

          if (Array.isArray(target)) {
            target.forEach(elm => {
              result = this.getAllNodeInTarget(elm, result);
            });
          } else if (Object.getPrototypeOf(target) === Node.prototype) {
            result.push(target);
            target.children.forEach(elm => {
              result = this.getAllNodeInTarget(elm, result);
            });
          }

          return result;
        }

        refreshPage() {
          director.removePersistRootNode(this.node);
          removeEvents(this);
          gfAssetLangController.instance = null;
          this.node.destroy();
        }

        onDestroy() {
          this.refreshPage();
        }

      }, _class3.instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "configLanguage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "localizeConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sceneLoadingName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "language", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAutoFireController.ts", ['cc', './state-machine.min.mjs_cjs=&original=.js', './gfDataStore.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfFishManager.ts', './gfBossController.ts', './state-machine.min.js'], function (exports) {
  var cclegacy, _decorator, Component, gfDataStore, gfBaseEvents, gfEventEmitter, registerEvent, StateMachineHistory, removeEvents, gfFishManager, gfBossController, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      StateMachineHistory = module.StateMachineHistory;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "cd35dTh+M1OgZnYGWjh4LdK", "gfAutoFireController", undefined);

      const {
        ccclass
      } = _decorator;
      let gfAutoFireController = exports('gfAutoFireController', (_dec = ccclass('gfAutoFireController'), _dec(_class = (_class2 = class gfAutoFireController extends Component {
        constructor() {
          super();
          this._fsm = null;
          this._isPriorityTargetBoss = true;
          gfAutoFireController.instance = this;
          this.initStateMachine();
          this.initEvents();
          this.goIdle();
        }

        initEvents() {
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE, this.goLock, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE, this.goIdle, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.CHANGE_AUTO_FIRE_BY_STATE, this.changeAutoFireByState, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.CHANGE_TARGET, this.onChangeTarget, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_AFTER_CHOOSE_FISH, this.onAfterChooseFish, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.GET_LOCK_FISH_BY_KIND, this.getNewFishForTargetOne, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET, this.resumeAutoFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET, this.goIdle, this);
          registerEvent(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME, this.onBossEnter, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.onGameHide, this);
          registerEvent(gfBaseEvents.COMMON.PAUSE_AUTO_FIRE, this.onGameHide, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.exitGame, this);
        }

        initStateMachine() {
          const {
            STATE,
            TRANSITION
          } = gfAutoFireController;
          this._fsm = new _cjsExports({
            init: STATE.START,
            transitions: [{
              name: TRANSITION.GO_IDLE,
              from: [STATE.START, STATE.TARGET_ALL, STATE.AUTO_FIRE, STATE.TARGET_ONE, STATE.LOCK, STATE.EXIT_GAME],
              to: STATE.IDLE
            }, {
              name: TRANSITION.GO_AUTO_FIRE,
              from: [STATE.IDLE, STATE.TARGET_ONE, STATE.TARGET_ALL, STATE.PAUSE, STATE.LOCK],
              to: STATE.AUTO_FIRE
            }, {
              name: TRANSITION.GO_TARGET_ONE,
              from: [STATE.AUTO_FIRE, STATE.TARGET_ALL, STATE.PAUSE, STATE.LOCK, STATE.IDLE],
              to: STATE.TARGET_ONE
            }, {
              name: TRANSITION.GO_TARGET_ALL,
              from: [STATE.IDLE, STATE.TARGET_ONE, STATE.AUTO_FIRE, STATE.PAUSE, STATE.LOCK],
              to: STATE.TARGET_ALL
            }, {
              name: TRANSITION.GO_LOCK,
              from: [STATE.TARGET_ONE, STATE.TARGET_ALL, STATE.AUTO_FIRE, STATE.IDLE],
              to: STATE.LOCK
            }, {
              name: TRANSITION.GO_PAUSE,
              from: [STATE.TARGET_ONE, STATE.AUTO_FIRE, STATE.TARGET_ALL],
              to: STATE.PAUSE
            }, {
              name: TRANSITION.GO_EXIT,
              from: "*",
              to: STATE.EXIT_GAME
            }],
            data: {
              _lockFishKind: -1,
              _lockFishID: null,

              set lockFishKind(lockFishKind) {
                this._lockFishKind = lockFishKind;
              },

              get lockFishKind() {
                return this._lockFishKind;
              },

              set lockFishID(lockFishID) {
                this._lockFishID = lockFishID;
              },

              get lockFishID() {
                return this._lockFishID;
              }

            },
            plugins: [new StateMachineHistory({
              max: 10
            })],
            methods: {
              onIdle: this.onIdle.bind(this),
              onAutoFire: this.onAutoFire.bind(this),
              onTargetOne: this.onTargetOne.bind(this),
              onTargetAll: this.onTargetAll.bind(this),
              onLock: this.onLock.bind(this),
              onPause: this.onPause.bind(this),
              onExitGame: this.onExitGame.bind(this),
              onLeaveTargetOne: this.onLeaveTargetOne.bind(this),
              onLeaveTargetAll: this.onLeaveTargetAll.bind(this),
              onLeaveLock: this.onLeaveLock.bind(this),

              onInvalidTransition() {// console.warn("Transition", transition, "from", from, "is not allowed");
              },

              onTransition: function () {// console.warn("From ", lifecycle.from, " >>>>>>>>>>>>> ", lifecycle.to);
              }
            }
          });
        } //Start FSM function


        goIdle() {
          const {
            TRANSITION
          } = gfAutoFireController;

          if (this._fsm.can(TRANSITION.GO_IDLE)) {
            this._fsm.goIdle();
          }
        }

        goLock() {
          const {
            TRANSITION
          } = gfAutoFireController;

          if (this._fsm.can(TRANSITION.GO_LOCK)) {
            this._fsm.goLock();
          }
        }

        onIdle() {
          this.clearLockFish();
          this.clearChangeTarget();
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.STOP_HUD_TOGGLE_TARGET);
        }

        onAutoFire() {
          this.clearLockFish();
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_START_SCHEDULE_AUTO_FIRE, {
            state: this._fsm.state
          });
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
          gfEventEmitter.instance.emit(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_AUTO_FIRE);
        }

        onTargetOne() {
          const dataLockFish = this.getLockFishData();
          const {
            lockFish,
            lockFishKind
          } = dataLockFish;
          const scheduleData = {
            state: this._fsm.state,
            dataLockFish: dataLockFish
          };

          if (!lockFish && lockFishKind < 0) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LOCK_FISH_IMAGE, lockFishKind);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_START_SCHEDULE_AUTO_FIRE, scheduleData);
          gfEventEmitter.instance.emit(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_TARGET_ONE);
        }

        onLeaveTargetOne() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
        }

        onLeaveTargetAll(lifecycle) {
          const {
            STATE
          } = gfAutoFireController;
          const {
            to
          } = lifecycle;

          switch (to) {
            case STATE.IDLE:
            case STATE.AUTO_FIRE:
            case STATE.TARGET_ONE:
              this._isPriorityTargetBoss = true;
              break;
          }
        }

        onTargetAll() {
          this.checkUpdateLockFish();
          const dataLockFish = this.getLockFishData();
          const scheduleData = {
            state: this._fsm.state,
            dataLockFish: dataLockFish
          };
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_START_SCHEDULE_AUTO_FIRE, scheduleData);
          gfEventEmitter.instance.emit(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_TARGET_ALL);
        }

        onLock() {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.RESET_LOCK_FISH_TARGET);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
          this.clearChangeTarget();
        }

        onLeaveLock() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
        }

        onPause() {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
          this.clearChangeTarget();
        }

        onExitGame() {
          this.clearLockFish();
          this.clearChangeTarget();
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.STOP_HUD_TOGGLE_TARGET);
        } //End FSM function
        // state before
        // - targetAll, One, Auto, Idle(if latestState = Lock) ==> call historyBack


        resumeAutoFire() {
          const {
            STATE
          } = gfAutoFireController;
          const history = this._fsm.history;
          const latestState = history[history.length - 1];

          switch (latestState) {
            case STATE.PAUSE:
            case STATE.LOCK:
              if (this._fsm.canHistoryBack) {
                this._fsm.historyBack();
              } else {
                this.goIdle();
              }

              break;

            case STATE.EXIT_GAME:
              this.goIdle();
              break;
          }
        }

        checkUpdateLockFish() {
          let fish;

          if (this._isPriorityTargetBoss) {
            var _BossController$insta;

            fish = (_BossController$insta = gfBossController.instance) == null ? void 0 : _BossController$insta.getBossForTargetAll();
          }

          if (!fish) {
            fish = this.getNewLockFish();
          }

          if (fish) {
            this.updateLockFishData({
              lockFishKind: fish.getKind(),
              lockFishID: fish.getId()
            });
          }
        }

        isAutoMode() {
          const {
            STATE
          } = gfAutoFireController;
          return this._fsm.is(STATE.TARGET_ALL) || this._fsm.is(STATE.TARGET_ONE) || this._fsm.is(STATE.AUTO_FIRE);
        }

        checkTargetOnStartTouch() {
          if (gfDataStore.instance.isHoldingOneShotGunSkill() || !this.isAutoMode()) {
            return false;
          }

          const {
            STATE
          } = gfAutoFireController;

          switch (this._fsm.state) {
            case STATE.TARGET_ALL:
            case STATE.TARGET_ONE:
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, gfDataStore.instance.getMousePos());
          }

          return true;
        }

        getNewLockFish() {
          //Clear schedule get new lock fish
          const {
            lockFishKind
          } = this.getLockFishData();
          let fish;

          if (this._isPriorityTargetBoss) {
            var _BossController$insta2;

            fish = (_BossController$insta2 = gfBossController.instance) == null ? void 0 : _BossController$insta2.getBossForTargetAll();
          }

          if (!fish) {
            fish = this.getOneFish(lockFishKind);
          }

          return fish;
        }

        updateTargetLockByFish(fish) {
          if (fish) {
            // set new lock fish data
            const fishId = fish ? fish.getId() : null;
            const fishKind = fish ? fish.getKind() : -1;
            const dataLockFish = {
              lockFish: fish,
              lockFishID: fishId,
              lockFishKind: fishKind
            };
            this.setLockFishData(dataLockFish);
          }
        }

        onChangeTarget() {
          const {
            lockFishKind,
            lockFish
          } = this.getLockFishData();
          const fishData = {
            lockFishKind: lockFishKind,
            lockFish: lockFish
          };
          let fish;

          if (this._isPriorityTargetBoss) {
            var _BossController$insta3;

            fish = (_BossController$insta3 = gfBossController.instance) == null ? void 0 : _BossController$insta3.getBossForTargetAll();
          }

          if (!fish) {
            fish = gfFishManager.instance.getFishForTargetAll(fishData);
          }

          this.updateTargetLockByFish(fish);
        }

        getOneFish(lockFishKind) {
          let fishData = {
            lockFishKind: lockFishKind,
            lockFish: null
          };
          return gfFishManager.instance.getFishForTargetAll(fishData);
        }

        getNewFishForTargetOne() {
          const {
            lockFishKind,
            lockFishID
          } = this.getLockFishData();
          const lockFish = gfFishManager.instance.getFishByType(lockFishKind, lockFishID);

          if (lockFish) {
            const dataLockFish = {
              lockFish: lockFish,
              lockFishID: lockFish.getId(),
              lockFishKind: lockFishKind
            };
            this.setLockFishData(dataLockFish);
          } else {
            this.goIdle();
          }
        }

        onAfterChooseFish(fish) {
          if (!fish || !fish.isAvailable()) {
            return;
          }

          const {
            lockFish
          } = this.getLockFishData();

          if (lockFish && lockFish.getId() === fish.getId()) {
            return;
          }

          this.updateTargetLockByFish(fish);

          if (this._fsm.is(gfAutoFireController.STATE.TARGET_ONE)) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LOCK_FISH_IMAGE, fish.getKind());
          } else if (this._fsm.is(gfAutoFireController.STATE.TARGET_ALL)) {
            var _BossController$insta4, _BossController$insta5;

            this._isPriorityTargetBoss = !((_BossController$insta4 = gfBossController.instance) != null && _BossController$insta4.getBossForTargetAll() && !((_BossController$insta5 = gfBossController.instance) != null && _BossController$insta5.isBossKind(fish.getKind()))); // if (BossController.instance?.isBossInGame()) {
            //     this._isPriorityTargetBoss = BossController.instance?.isBossKind(fish.getKind());
            // }
          }
        }

        onBossEnter() {
          const {
            TARGET_ALL
          } = gfAutoFireController.STATE;

          if (this._fsm.is(TARGET_ALL)) {
            if (this._isPriorityTargetBoss) {
              const fish = this.getNewLockFish();
              this.updateTargetLockByFish(fish);
            }
          }
        }

        changeAutoFireByState(state) {
          const {
            STATE
          } = gfAutoFireController;

          switch (state) {
            case STATE.AUTO_FIRE:
              this._fsm.goAutoFire();

              break;

            case STATE.TARGET_ALL:
              this._fsm.goTargetAll();

              break;

            case STATE.TARGET_ONE:
              this._fsm.goTargetOne();

              break;

            default:
              this.goIdle();
              break;
          }
        }

        getLockFishData() {
          let lockFish = gfFishManager.instance.getFishById(this._fsm.lockFishID);
          return {
            lockFish: lockFish,
            lockFishKind: this._fsm.lockFishKind,
            lockFishID: this._fsm.lockFishID
          };
        }

        getTargetState() {
          const {
            FIRE_TYPE_MAPPING
          } = gfAutoFireController;
          return FIRE_TYPE_MAPPING[this._fsm.state];
        }

        updateLockFishData(data) {
          const {
            lockFishKind,
            lockFishID
          } = data;
          this._fsm.lockFishKind = lockFishKind;
          this._fsm.lockFishID = lockFishID;
        }

        setLockFishData(data) {
          this.updateLockFishData(data);
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.UPDATE_LOCK_FISH_DATA, data);
        }

        clearChangeTarget() {
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.STOP_ALL_TARGET);
        }

        clearLockFish() {
          const dataLockFish = {
            lockFish: null,
            lockFishKind: -1,
            lockFishID: null
          };
          this.setLockFishData(dataLockFish);
        }

        isLockFishExist() {
          const {
            lockFish,
            lockFishID,
            lockFishKind
          } = this.getLockFishData();
          return lockFish || lockFishID || lockFishKind >= 0;
        } //Handle Common events


        onGameHide() {
          const {
            TRANSITION
          } = gfAutoFireController;

          if (this._fsm.can(TRANSITION.GO_PAUSE)) {
            this._fsm.goPause();
          }
        }

        resetOnExit() {
          this._fsm.clearHistory();

          this._fsm.goExit();

          this._fsm.goIdle();
        }

        exitGame() {
          removeEvents(this);
          gfAutoFireController.instance = null;
        } //End Common handler


      }, _class2.instance = null, _class2.STATE = {
        START: 'start',
        IDLE: 'idle',
        PAUSE: 'pause',
        LOCK: 'lock',
        AUTO_FIRE: 'autoFire',
        TARGET_ALL: 'targetAll',
        TARGET_ONE: 'targetOne',
        EXIT_GAME: 'exitGame'
      }, _class2.TRANSITION = {
        GO_IDLE: 'goIdle',
        GO_PAUSE: 'goPause',
        GO_AUTO_FIRE: 'goAutoFire',
        GO_TARGET_ALL: 'goTargetAll',
        GO_TARGET_ONE: 'goTargetOne',
        GO_LOCK: 'goLock',
        GO_EXIT: 'goExit'
      }, _class2.FIRE_TYPE_MAPPING = {
        start: 0,
        idle: 0,
        exitGame: 0,
        lock: 0,
        autoFire: 1,
        targetOne: 2,
        targetAll: 3,
        pause: 5
      }, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAutoFireScheduler.ts", ['cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfAutoFireController.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfBossController.ts'], function (exports) {
  var cclegacy, Component, v3, _decorator, gfDataStore, gfEventEmitter, registerEvent, removeEvents, gfAutoFireController, gfBaseEvents, gfBaseConfig, gfBossController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      v3 = module.v3;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfAutoFireController = module.gfAutoFireController;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBossController = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "62b65GD3PNPLJOIKterRRoG", "gfAutoFireScheduler", undefined);

      const {
        ccclass
      } = _decorator;
      let gfAutoFireScheduler = exports('gfAutoFireScheduler', (_dec = ccclass('gfAutoFireScheduler'), _dec(_class = class gfAutoFireScheduler extends Component {
        constructor(...args) {
          super(...args);
          this._timeChangeTarget = 0;
          this._dataLockFish = null;
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_START_SCHEDULE_AUTO_FIRE, this.playScheduleByState, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.STOP_ALL_TARGET, this.stopAutoTarget, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.UPDATE_LOCK_FISH_DATA, this.updateLockFishData, this);
        }

        playScheduleByState(data) {
          this.stopAutoTarget();
          const {
            state,
            dataLockFish
          } = data;
          const {
            STATE
          } = gfAutoFireController;
          this._dataLockFish = dataLockFish;
          let callback;

          switch (state) {
            case STATE.AUTO_FIRE:
              callback = this.handleAutoFire;
              break;

            case STATE.TARGET_ALL:
              callback = this.handleTargetAll;
              break;

            case STATE.TARGET_ONE:
              callback = this.handleTargetOne;
              break;

            default:
              console.error('Invalid state:', state);
              break;
          }

          if (callback) {
            this.schedule(callback, gfDataStore.instance.FireSpeed.TURBO);
          }
        }

        handleAutoFire() {
          let point = gfDataStore.instance.getMousePos() || v3(gfBaseConfig.instance.realSize.Width / 2, gfBaseConfig.instance.realSize.Height / 2);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point,
            lockFishID: -1
          });
        }

        handleTargetAll() {
          const {
            lockFish
          } = this._dataLockFish;

          if (lockFish && lockFish.isAvailable() && this._timeChangeTarget < gfDataStore.instance.ChangeTarget) {
            var _BossController$insta;

            this._timeChangeTarget += (_BossController$insta = gfBossController.instance) != null && _BossController$insta.isBossKind(lockFish.getKind()) ? 0 : gfDataStore.instance.FireSpeed.TURBO;
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
              point: lockFish.node.position,
              lockFishID: lockFish.getId()
            });
          } else {
            this._timeChangeTarget = 0;
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.CHANGE_TARGET);
          }
        }

        handleTargetOne() {
          let {
            lockFishKind,
            lockFish
          } = this._dataLockFish;

          if (lockFishKind > -1) {
            if (!lockFish || !lockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.GET_LOCK_FISH_BY_KIND);
            } else if (lockFish && lockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: lockFish.node.position,
                lockFishID: lockFish._FishID
              });
            }
          }
        }

        updateLockFishData(data = null) {
          this._dataLockFish = data;
          this._timeChangeTarget = 0;
        }

        stopAutoTarget() {
          this.unscheduleAllCallbacks();
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAutoGrayScaleButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, _decorator, Component, Sprite;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Sprite = module.Sprite;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6b31a5jSS9JbYVRbAQLli//", "gfAutoGrayScaleButton", undefined);

      const {
        ccclass,
        property,
        requireComponent,
        executeInEditMode
      } = _decorator;
      let gfAutoGrayScaleButton = exports('default', (_dec = ccclass("gfAutoGrayScaleButton"), _dec2 = requireComponent(Button), _dec(_class = _dec2(_class = executeInEditMode(_class = (_class2 = class gfAutoGrayScaleButton extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "enableAutoGrayEffect", _descriptor, this);
        }

        onLoad() {
          const button = this.getComponent(Button);
          const baseApplyTransition = button['_applyTransition'].bind(button);

          button['_applyTransition'] = state => {
            baseApplyTransition(state);

            if (this.enableAutoGrayEffect) {
              const sprite = button.target.getComponent(Sprite);

              if (sprite) {
                sprite.grayscale = state === 'disabled';
              }
            }
          };
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "enableAutoGrayEffect", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      }), _class2)) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBackgroundController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfBaseConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, SpriteFrame, Sprite, _decorator, Component, tween, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents, gfEventEmitter, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "448e8PVDLlGxICPVN85eBPB", "gfBackgroundController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfBackgroundController = exports('GfBackgroundController', (_dec = ccclass('GfBackgroundController'), _dec2 = property(SpriteFrame), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec(_class = (_class2 = class GfBackgroundController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "arrDataBackground", _descriptor, this);

          _initializerDefineProperty(this, "background1", _descriptor2, this);

          _initializerDefineProperty(this, "background2", _descriptor3, this);

          this._curBackgroundID = -1;
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        }

        onInitBackground(data) {
          let {
            SceneKind
          } = data;

          if (gfBaseConfig.instance.IsNewLogin) {
            SceneKind -= 1;
          }

          if (this._curBackgroundID == SceneKind) return;
          this._curBackgroundID = SceneKind;
          this.background1.spriteFrame = this.arrDataBackground[SceneKind];
          this.background2.spriteFrame = this.arrDataBackground[SceneKind];
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, SceneKind);
        }

        onChangeRound(data) {
          let {
            SceneKind,
            isFishGroupToNormal
          } = data;

          if (gfBaseConfig.instance.IsNewLogin) {
            SceneKind -= 1;
          }

          if (this._curBackgroundID == SceneKind) return;
          this._curBackgroundID = SceneKind;
          tween(this.background1.node).delay(1).then(fadeOut(1.5)).call(() => {
            this.background1.spriteFrame = this.arrDataBackground[this._curBackgroundID];
          }).then(fadeIn(0)).start();
          tween(this.background2.node).then(fadeOut(0)).call(() => {
            this.background2.spriteFrame = this.arrDataBackground[this._curBackgroundID];
          }).delay(1).then(fadeIn(1.5)).start();

          if (!isFishGroupToNormal) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this._curBackgroundID); //gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION); // Sound change round
          }
        }

        resetOnExit() {
          this._curBackgroundID = -1;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrDataBackground", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "background1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "background2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBallTray.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfDragonEvent.ts', './gfActionHelper.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, sp, _decorator, Component, tween, v3, setOpacity, gfDragonEvent, stopAllActions, scaleTo, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "aab78w0roROIJELbktbTQbV", "gfBallTray", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfBallTray = exports('GfBallTray', (_dec = ccclass('GfBallTray'), _dec2 = property(Node), _dec3 = property(sp.Skeleton), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = class GfBallTray extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "trayGlowFX", _descriptor, this);

          _initializerDefineProperty(this, "bodySpine", _descriptor2, this);

          _initializerDefineProperty(this, "slot7FX", _descriptor3, this);

          _initializerDefineProperty(this, "electroEffect", _descriptor4, this);

          _initializerDefineProperty(this, "ballHolder", _descriptor5, this);

          this._ballInTray = void 0;
          this._isActive = false;
        }

        onLoad() {
          setOpacity(this.bodySpine.node, 0);
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
        }

        appear() {
          if (this._isActive) return;
          this._isActive = true;
          this.node.active = true;
          setOpacity(this.bodySpine.node, 255);
          this.bodySpine.setAnimation(0, 'Appear', false);
          this.bodySpine.setCompleteListener(() => {});
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.BALL_TRAY_SHOW);
        }

        disappear() {
          this._isActive = false;
          this.bodySpine.setAnimation(0, 'Disappear', false);
          this.bodySpine.setCompleteListener(() => {
            this.node.active = false;
          });
          this.hideElectroEffect();
          setOpacity(this.slot7FX, 0);
          this._ballInTray = 0;
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.BALL_TRAY_DRAW);
        }

        isAppear() {
          return this._isActive;
        }

        hide() {
          this._isActive = false;
          this.node.active = false;
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          this._ballInTray = 0;
          this.hideElectroEffect();
        }

        activeSlot7FX() {
          this.slot7FX.active = true;
          setOpacity(this.slot7FX, 255);
        }

        activeTrayGlow() {
          this.trayGlowFX.active = true;
        }

        getBallHolder(index) {
          if (!this.ballHolder[index]) return this.node;
          return this.ballHolder[index];
        }

        onBallEnter(count = 1) {
          this._ballInTray += count;
          this.showElectroEffect();
        }

        showElectroEffect() {
          const scaleTime = 0.2;

          if (this.electroEffect) {
            if (this._ballInTray >= 4) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.5)).then(scaleTo(scaleTime, 1.4)).start();
            } else if (this._ballInTray > 1) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.1)).then(scaleTo(scaleTime, 1.0)).start();
            }
          }

          if (this._ballInTray > 1) {
            this.activeTrayGlow();
          }

          if (this._ballInTray >= 6) {
            this.activeSlot7FX();
          }
        }

        hideElectroEffect() {
          if (this.electroEffect) {
            this.electroEffect.scale = v3(0);
            this.electroEffect.active = false;
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "trayGlowFX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bodySpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slot7FX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "electroEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ballHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, UITransform, Label, formatTimeStamp, formatUserName, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      Label = module.Label;
    }, function (module) {
      formatTimeStamp = module.formatTimeStamp;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "80122TukRxO4YAoD+vE5lcq", "gfBaseCellHistory", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfBaseCellHistory = exports('GfBaseCellHistory', (_dec = ccclass('GfBaseCellHistory'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = class GfBaseCellHistory extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "time", _descriptor, this);

          _initializerDefineProperty(this, "account", _descriptor2, this);

          _initializerDefineProperty(this, "bet", _descriptor3, this);

          _initializerDefineProperty(this, "winAmount", _descriptor4, this);

          _initializerDefineProperty(this, "height", _descriptor5, this);
        }

        onLoad() {
          this.node.getComponent(UITransform).height = this.height;
        }

        updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = formatTimeStamp(data.time);
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = gfCurrencyCalculator.instance.formatCurrency(data.betAmt, true);
          this.winAmount.getComponent(Label).string = gfCurrencyCalculator.instance.formatCurrency(data.jpAmt);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "account", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 50;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseConfig.ts", ['cc'], function (exports) {
  var Vec3, cclegacy;
  return {
    setters: [function (module) {
      Vec3 = module.Vec3;
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74a69ZRNVVE0Y3Ky3LtcPr0", "gfBaseConfig", undefined);

      class gfBaseConfig {
        //default value "" and enable code is "|1"
        // 2D speed
        //This code is in gfLangVi.json MessagesSystem
        constructor() {
          this.isLandscapeGame = true;
          this.IPMasterName = "IPMasterBase";
          this.IPMaster = "";
          this.IPGame = "";
          this.token4Game = "";
          this.userToken = "";
          this.token4Master = "";
          this.RoomVersion = "11";
          this.ProductVersion = "";
          this.ProdVersion = "1";
          this.ClientType = "1";
          this.HasCode = "|1";
          this.GameId = '1900';
          this.IsDevMode = false;
          this.IsNewLogin = false;
          this.DefaultLanguage = 'vi';
          this.RoomKind = {
            Normal: "1",
            VIP: "2"
          };
          this.GameVersion = "0.5.7";
          this.MiniBossSceneKind = 1;
          this.SceneName = {
            Lobby: 'ktfLobby1900',
            Game1: 'ktfGame1900_1',
            Game2: 'ktfGame1900_2'
          };
          this.LoadingSceneName = 'ktfLoading1900';
          this.LOCAL_STORE = {
            LOCAL_LOGIN_VAR: "ktfllv",
            NOT_SHOW_NT: "NSNT",
            MUSIC_VOLUME: "music_volume",
            EFFECT_VOLUME: "effect_volume",
            SHOW_EVENT_INFO: "SEIF"
          };
          this.MaxBullet = 20;
          this.BotState = {
            INITIALIZED: 1,
            STARTED: 2,
            STOPPED: 3
          };
          this.AppSize = {
            Width: 1280,
            Height: 720,
            MaxWidth: 1604
          };
          this.realSize = {
            Width: 1280,
            Height: 720,
            Scale: 1
          };
          this.SceneBox = {
            Left: 0,
            Bottom: 0,
            Right: 1280,
            Top: 720
          };
          this.BulletSpeed = 938;
          this.gunRadius = 92;
          this.SKILL_ITEM = {};
          this.POPUP_TYPE = {
            Info: 'PopupInfo',
            Message: 'PopupNotify',
            Tutorial: 'PopupTutorial',
            Setting: 'PopupSetting',
            Chat: 'PopupChatMsg',
            Jackpot: 'PopupHistoryJackpot'
          };
          this.POPUP_ANIMATION = {
            PULSE: 'PULSE',
            BOUNCE: 'BOUNCE',
            EASE: 'EASE',
            FADE: 'FADE',
            DEFAULT: 'DEFAULT'
          };
          this.POPUP_PROMPT = {
            JUST_CONFIRM_BUTTON: 'JUST_CONFIRM_BUTTON',
            CONFIRM_AND_CLOSE_BUTTON: 'CONFIRM_AND_CLOSE_BUTTON',
            CONFIRM_AND_REJECT_BUTTON: 'CONFIRM_AND_REJECT_BUTTON',
            NONE_BUTTON: 'NONE_BUTTON'
          };
          this.POPUP_WARNING_CODE = [209, 212, 301, 302, 400];
          this.CursorBase64 = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAAAAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAH/uwAC/7sAAv+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAj/twAZ/6wAJv+tADT/rQAy/60AIv+5ABb/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/vAAI/7EAIP+9HHX/1XbC/9FmxP/SacX/1G67/7cFXf+0ABj/vAAF/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/uwAO/7IAG/+rADb/sA50/9Nt2v//////////////////////xD7A/7ADZ/+rAC3/tQAY/7wACv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAH/7UAGf+pADv/wTiK/+ax3//01///5rXv/+q29v///////////+Kk7//sxvb/8c77/+Cb0v+6H3n/qwAx/7kAFv+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70AC/+vACL/sgpm/+e34P/57P//4abX/8I3iv+wAWj/qgCF//z7///tx/b/ogBz/7YMbP/HTJf/5bbj//ru///ZjMT/qwBO/7QAHP+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAr/rQAm/7ktgf/58P//6sXo/7YdeP+pADP/sgAa/7oAGv+yAC//xjmJ/8Epd/+0ACb/uQAW/7AAH/+pAD3/vjqM//HX+P/v0vL/sQll/7EAHv+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAG/68AIv+5K4H//////9eHxf+lAEP/tAAd/7wACf+7AAD/ugAA/7wADv+yABD/tAAQ/7wACf+6AAD/uwAA/7wADf+xACL/qgBZ/+m76P/46v//rgZg/7UAG/+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+1ABr/sApj//78///Ygsb/pQA5/7sAFf+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAf+3ABv/pQBK/+y/7P/vx/H/qQBG/7oAFP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/uwAO/6kAOP/oseP/7MLu/6YAQ/+6ABX/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+2ABz/qwBf//v0///Vcbz/qwAo/7wABv+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+xABv/wzWO//75//+2DXj/tAAd/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAA/+tACT/yESj//z0//+zBmP/twAU/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/6wANf/os+T/4qPZ/6kAM/+9AAn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAEf+rAEr/8dL3/9h6v/+tACP/vAAB/7oAAP+6AAD/ugAA/7wACP+wACD/sgB2//jm///DM4z/sgAZ/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAf+7AAz/swAQ/7EAEf+5AA7/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAB/6wAI//WeLf/78v2/6YAVf+1ABn/vAAI/7oAAP+6AAD/twAZ/74pdP/Ratf/6bb1/68AaP+7ABn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAH/ugAV/7EAO/+/KYH/wDGJ/7EASf+4ABv/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/tQAh/70ahv/tw///xEHD/8Mwc/+2ABj/ugAB/7sAAf+sACT/2HjF///////mr/H/qgCI/7IAL/+8AA3/ugAA/7oAAP+6AAD/ugAA/7sACP+wADP/z2Wz////////////3Y/S/7EASf+6AA7/ugAA/7oAAP+6AAD/ugAA/7wADf+wADT/sQCY//LQ/P//////2H7F/6sAJP+7AAL/uwAB/60ANP/RZsT////////////77f//xT+H/7EAD/+6AAD/ugAA/7oAAP+6AAD/tgAJ/7YEZ//++v//////////////////wjKM/7EAEP+7AAD/ugAA/7oAAP+6AAD/sgAP/8U+h//57P/////////////QZMT/rQA0/7sAAf+7AAL/rAAy/9Jqxf///////////+rB6P/BNXj/tAAQ/7oAAP+6AAD/ugAA/7oAAP+3AAn/tARd//jo//////////////////++KID/sgAQ/7sAAP+6AAD/ugAA/7oAAP+0ABD/wTR4/+i66P///////////9Joxf+tADL/uwAB/7sAAv+tACH/1W69//7+///io+z/pAB2/7MAJv+8AAn/ugAA/7oAAP+6AAD/ugAA/7sABv+xACr/wziW//LV+f/45v//0GW0/7AAO/+7AAz/ugAA/7oAAP+6AAD/ugAA/7wACv+xACr/qwCK/+7J/P/57f//13W9/60AIP+7AAL/ugAA/7kAFv+3EV7/yEbB/+/G+v+1AGz/uQAW/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAEf+xACr/tQBg/7gHaf+wADT/ugAV/7sAAf+6AAD/ugAA/7oAAP+6AAD/uwAA/7QAHv/EL43/7sb//7gbqf+9GFz/uQAV/7oAAP+6AAD/vAAE/7QAGP+wAGb/9uL//8pIm/+wAB3/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sABv+3AAr/tgAK/7oACP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAT/qwAp/9yMxf/swu//pwBH/7YAEf+8AAT/ugAA/7oAAP+6AAD/vAAE/6sALP/indX/6rvo/6gAPP+8AA3/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7kAFf+tAFj/9uD//9BerP+uAB7/vAAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/tQAY/7oad//9+///vyyQ/7AAIf+8AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAf/qQAq/9JpvP/35v//rgBS/7kAEv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAr/qgAu/9yJzP/46P//qABW/7cAGv+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vQAE/7EAIP+zEnn//////8hMn/+tACL/uwAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+5ABb/qgBM//LS+P/puOj/pQBK/7YAHP+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70ACP+xACH/rAJl//vu///gmtL/qQA3/7sAEP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAv+zABv/sAlj//jo///swez/rQBh/64AJv+7ABH/uwAB/7oAAP+8AA3/sgAP/7QAEP+9AAn/ugAA/7wABP+5ABb/qgAs/7Ufev/45///6Lbi/6kASf+4ABf/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABv+yAB3/sARi/+zI6v/03f3/xVGc/6wATf+tACX/tQAg/7AAM//GOIj/wSl5/7EAK/+0AB7/qwAr/68AW//PbrL//PT//96g0P+pAEj/twAa/7sAAv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABf+1ABv/qgBH/9FxtP/13///6sTu/9R8tP+9IIj/sAWU//36///sxvb/qgeG/8Mxjv/akcT/7s/2//DS9f/GUZn/qgA4/7gAGP+7AAL/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+6ABT/rAAq/7UIZ//Vdrj/67rw/+zC/v/01P/////////////uy/3/7Mn+/+q16v/NYKf/rwBW/68AJP+8ABD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAf/twAT/64AJf+nAFX/w0PE//////////////////////+2Iaf/qABG/68AIP+6ABL/vAAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAC/7QAGv/CJ3P/1njB/9Fmxf/SacT/13W7/70OW/+2ABL/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/7cAGP+sACX/rQA0/60AMv+tACH/uQAW/7sABP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+7AAL/uwAB/7sAAf+6AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA//w////wD///4Af//4AB//4AAH/8AAA/+AAAH/AMMA/wP/gP4H/+B+D//gfA//8DgfgfAYHwD4AA8A8AAPAPAADwDwAA8A8AgfgPgYH8PwHA//8H4H/+B+B//AfwH/gP8AQgH/gAAB/8AAA//gAA//+AAf//4A////AP///8H/8=";
          this.FISH_KIND = {
            LASER_CRAB: 27,
            KING_LOBSTER: 34,
            LANTERN: 36,
            BOMB: 43,
            BOMB_M: 44,
            DRILL: 46,
            DRILL_M: 47,
            FIRE_STORM: 49,
            KING_CRAB: 50
          };
          this.PRIORITY_FISH = [];
          this.NOTIFY_TYPE = {
            SYSTEM: 0,
            JACKPOT: 1,
            MESSAGE_BIG_FISH: 2,
            MESSAGE_SPECIAL_SKILL: 3,
            MESSAGE_DRAGON_BALL: 4,
            MESSAGE_KILL_MINIBOSS: 5,
            MESSAGE_DROP_ITEM_MINIBOSS: 6,
            MESSAGE_EVENT: 7
          };
          this.NOTIFY_CONFIG = {
            [this.NOTIFY_TYPE.JACKPOT]: {
              userName: 0,
              goldReward: 1
            },
            [this.NOTIFY_TYPE.MESSAGE_BIG_FISH]: {
              userName: 0,
              fishKind: 1,
              multiple: 3,
              goldReward: 2
            },
            [this.NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL]: {
              userName: 0,
              subID: 1,
              goldReward: 2
            },
            [this.NOTIFY_TYPE.MESSAGE_DRAGON_BALL]: {
              userName: 0,
              countBall: 1,
              goldReward: 2
            },
            [this.NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS]: {
              userName: 0,
              fishKind: 1,
              goldReward: 3,
              itemID: 2,
              multiple: 4
            },
            [this.NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS]: {
              userName: 0,
              fishKind: 1,
              itemID: 2,
              goldReward: 3,
              multiple: 4
            },
            [this.NOTIFY_TYPE.MESSAGE_EVENT]: {
              userName: 0,
              goldReward: 1
            }
          };
          this.BOTTOM_Z_INDEX = {
            BULLET: 9000
          };
          this.MID_Z_INDEX = {
            MENU: 2000,
            WHEEL: 1000
          };
          this.TOP_Z_INDEX = {
            NETFX_ICE: 1000,
            NETFX_MINIBOSS: 1100,
            NETFX: 1200,
            COIN: 2000,
            COIN_LABEL: 2100,
            BIGWIN: 2200,
            CUTSCENE: 9000
          };
          this.PERSIST_Z_INDEX = {
            NOTIFY: 1,
            CUTSCENE: 6,
            POPUP: 8,
            WAITING: 10
          };
          this.EXCEPTION_SOUNDS = ['sfxClick'];
          this.NOTIFY_MESSAGE = {
            position: {
              [this.SceneName.Game1]: new Vec3(0, 240, 1),
              [this.SceneName.Game2]: new Vec3(0, 240, 1),
              [this.SceneName.Lobby]: new Vec3(0, 240, 1)
            },
            limited_stack_size: 10
          };
          this.NOTIFY_JACKPOT = {
            array_type_notify_jackpot: [this.NOTIFY_TYPE.JACKPOT, this.NOTIFY_TYPE.MESSAGE_EVENT],
            limited_stack_size: 10
          };
          this.SOUND_BACKGROUND_CONFIG = {
            LOBBY: "LOBBY",
            IN_GAME: "IN_GAME",
            FISH_GROUP: "FISH_GROUP"
          };
          this.DEFAULT_AVATAR = "Avatar0";
          this.COIN_TYPE = {
            MY_COIN: 0,
            OTHER_COIN: 1
          };
          this.NOTIFY_ENVIRONMENT_CONFIG = {
            ALL: 0,
            IFRAME: 1,
            APP: 2
          };
          this.ENVIRONMENT_CONFIG = {
            WEB_APP: 1,
            IFRAME: 2,
            NATIVE_APP: 3
          };
          this.SHAKE_SCREEN_STYLE = {
            HORIZONTAL: 0,
            VERTICAL: 1,
            CROSS_1: 2,
            //theo hình dấu cộng
            CROSS_2: 3,
            //theo hình dấu nhân
            FULL: 4 //kết hợp cả 2 loại style CROSS

          };
          this.BIG_WIN_RATIO = {
            BIG_WIN: 80,
            MEGA_WIN: 180,
            SUPER_WIN: 301
          };
          this.waiting_timeout_network = 15;
          this.waiting_timeout_load_scene = 5;
          this.SOUND_SLIDER = false;
          this.POS_WIFI_STATUS = {
            LEFT: new Vec3(-476, -253, 1),
            RIGHT: new Vec3(445, -255, 1)
          };
          this.POS_EVENT = {
            LEFT: new Vec3(-565, -100, 1),
            RIGHT: new Vec3(565, -100, 1)
          };
          this.POS_BTN_QUICK_HUNT = {
            LEFT: new Vec3(-565, -100, 1),
            RIGHT: new Vec3(565, -100, 1)
          };
          this.BOSS_PREFAB_NAME = {
            DRAGON: 'gfDragon'
          };
          this.TURN_ON_WIFI_STATUS = false;
          this.LoadGameByPrefab = false;
          this.BundleName = 'bundle1900';
          this.ScenePrefabs = {};
          this.MainGameNode = null;
          this.LOAD_DYNAMIC_ASSET = false;
          this.BOSS_CONFIG = {};
          this.LIST_SPECIAL_FISH_KIND = [27, 32, 33, 43, 44, 46, 47, 49, 50];
          this.SKILL_TYPE = {
            ONE_SHOT_GUN: "ONE_SHOT_GUN",
            RIFLE_GUN: "RIFLE_GUN",
            SPECIAL_FISH: "SPECIAL_FISH"
          };
          this.SKILL_CONFIG = {
            ONE_SHOT_GUN: {
              SkillID: 1,
              Type: this.SKILL_TYPE.ONE_SHOT_GUN,
              TIME_OUT: 30
            },
            RIFLE_GUN: {
              SkillID: 2,
              Type: this.SKILL_TYPE.RIFLE_GUN
            },
            FISH_BOOM: {
              SkillID: 5,
              Type: this.SKILL_TYPE.SPECIAL_FISH
            },
            PROMOTION_GUN: {
              SkillID: 99,
              Type: this.SKILL_TYPE.RIFLE_GUN
            }
          };
          this.PRIORITY_GUN_SKILL = [this.SKILL_CONFIG.ONE_SHOT_GUN.SkillID, this.SKILL_CONFIG.RIFLE_GUN.SkillID, this.SKILL_CONFIG.PROMOTION_GUN.SkillID];
          this.FISH_LOG_CONFIG = {
            FISH_GROUP: "Fish group appear"
          };
          this.CURRENCY_CONFIG = {
            VND: {
              ACRONYM: "VND",
              DECIMAL_COUNT: 0,
              CURRENCY_PREFIX: ""
            },
            USD: {
              ACRONYM: "USD",
              DECIMAL_COUNT: 2,
              CURRENCY_PREFIX: "$"
            },
            CENT: {
              ACRONYM: "CENT",
              DECIMAL_COUNT: 2,
              CURRENCY_PREFIX: "¢"
            },
            THB: {
              ACRONYM: "THB",
              DECIMAL_COUNT: 2,
              CURRENCY_PREFIX: "฿"
            }
          };
          gfBaseConfig.instance = this;
        }

        parseJoinGame(data) {
          this.IPGame = data.Server;
          this.token4Game = data.Token;
        }

        destroy() {
          gfBaseConfig.instance = null;
        }

        IsSpecialFish(fishKind) {
          return this.LIST_SPECIAL_FISH_KIND.indexOf(fishKind) != -1;
        }

        IsCrab(fishKind) {
          return fishKind == this.FISH_KIND.BOMB || fishKind == this.FISH_KIND.BOMB_M || fishKind == this.FISH_KIND.LASER_CRAB || fishKind == this.FISH_KIND.DRILL || fishKind == this.FISH_KIND.DRILL_M;
        }

      }

      exports('default', gfBaseConfig);
      gfBaseConfig.instance = null;
      gfBaseConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseEvents.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e57f8GD7yFOiJEBw3WDnc3w", "gfBaseEvents", undefined); // Contain Events communicate between components


      const gfBaseEvents = exports('default', {
        COMMON: {
          UPDATE_GAME_VERSION: "UPDATE_GAME_VERSION",
          UPDATE_PING: "UPDATE_PING",
          SHOW_WAITING: "SHOW_WAITING",
          HIDE_WAITING: "HIDE_WAITING",
          UPDATE_WAITING_PERCENT: "UPDATE_WAITING_PERCENT",
          GO_LOBBY: "GO_LOBBY",
          EXIT_GAME_ROOM: "EXIT_GAME_ROOM",
          INIT_SCENE: "COMMON_INIT_SCENE",
          REFRESH_PAGE: "REFRESH_PAGE",
          UPDATE_JACKPOT: "UPDATE_JACKPOT",
          SHOW_NOTIFY: "SHOW_NOTIFY",
          RESET_TOUCH_LISTENER: "RESET_TOUCH_LISTENER",
          RESET_TOUCH_LISTENER_NO_MONEY: "RESET_TOUCH_LISTENER_NO_MONEY",
          REMOVE_TOUCH_LISTENER: "REMOVE_TOUCH_LISTENER",
          GAME_SHOW: "GAME_SHOW",
          GAME_HIDE: "GAME_HIDE",
          SHAKE_SCREEN: "SHAKE_SCREEN",
          ON_SHOW_GAME_LAYER: "ON_SHOW_GAME_LAYER",
          SCENE_LOAD_DONE: "SCENE_LOAD_DONE",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          CONNECT_MASTER: "CONNECT_MASTER",
          CONNECT_GAME: "CONNECT_GAME",
          REMOVE_PERSIST_NODE: "REMOVE_PERSIST_NODE",
          ON_SCREEN_RESIZE: "ON_SCREEN_RESIZE",
          FISH_LOG: "FISH_LOG",
          EXIT_GAME: "EXIT_GAME",
          LOADING_TRANSITION: "LOADING_TRANSITION",
          NETWORK_STATUS_INFO: "NETWORK_STATUS_INFO",
          BEFORE_LOAD_SCENE: "BEFORE_LOAD_SCENE",
          SET_REFERENCE_DATA: "SET_REFERENCE_DATA",
          AFTER_LOAD_SCENE_GAME: "AFTER_LOAD_SCENE_GAME",
          PAUSE_AUTO_FIRE: "PAUSE_AUTO_FIRE",
          SHOW_TRANSITION: "SHOW_TRANSITION"
        },
        POPUP: {
          CLOSE_ALL: "CLOSE_ALL",
          UPDATE_BOT_SETTING: "UPDATE_BOT_SETTING",
          GET_BOT_SETTING: "GET_BOT_SETTING",
          SET_BOT_SETTING: "SET_BOT_SETTING",
          SHOW_POPUP_TUTORIAL: "SHOW_POPUP_TUTORIAL",
          SHOW_POPUP_PROMPT: "SHOW_POPUP_PROMPT",
          SHOW_POPUP_HISTORY: "SHOW_POPUP_HISTORY",
          SHOW_POPUP_INFO: "SHOW_POPUP_INFO",
          SHOW_POPUP_SETTING: "SHOW_POPUP_SETTING",
          CHECK_SHOW_POPUP_EVENT: "CHECK_SHOW_POPUP_EVENT",
          SHOW_POPUP_EVENT_INFO: "SHOW_POPUP_EVENT_INFO",
          SHOW_POPUP_AUTOBOT: "SHOW_POPUP_AUTOBOT",
          POPUP_PROMPT: "POPUP_PROMPT",
          POPUP_SETTING: "POPUP_SETTING",
          POPUP_INFO: "POPUP_INFO",
          POPUP_TUTORIAL: "POPUP_TUTORIAL",
          POPUP_JACKPOT_HISTORY: "POPUP_JACKPOT_HISTORY",
          CLOSE_TOP_POPUP: "CLOSE_TOP_POPUP",
          SHOW_POPUP_PROMOTION: "SHOW_POPUP_PROMOTION",
          ON_AFTER_OPEN: "ON_AFTER_OPEN",
          ON_BEFORE_CLOSE: "ON_BEFORE_CLOSE",
          ON_AFTER_CLOSE: "ON_AFTER_CLOSE",
          CLEAR_TIMEOUT_SHOW_POPUP_NETWORK_DIE: "CLEAR_TIMEOUT_SHOW_POPUP_NETWORK_DIE"
        },
        SOUND: {
          SOUND_EFFECT_ENABLE: "SOUND_EFFECT_ENABLE",
          SOUND_BGM_ENABLE: "SOUND_BGM_ENABLE",
          RESUME_SOUND_BACKGROUND: "RESUME_SOUND_BACKGROUND",
          PLAY_SOUND_BACKGROUND: "PLAY_SOUND_BACKGROUND",
          STOP_ALL: "STOP_ALL",
          CLICK: "CLICK",
          GUN_FIRE: "GUN_FIRE",
          EFFECT_GOLD: "EFFECT_GOLD",
          EFFECT_CATCH: "EFFECT_CATCH",
          EFFECT_CATCH_BIGFISH: "EFFECT_CATCH_BIGFISH",
          EFFECT_BOMB: "EFFECT_BOMB",
          BIG_WIN: "BIG_WIN",
          MEGA_WIN: "MEGA_WIN",
          SUPER_WIN: "SUPER_WIN",
          BOSS_BIG_WIN: "BOSS_BIG_WIN",
          FIRE_LASER: "FIRE_LASER",
          RESET_VOLUME: "RESET_VOLUME",
          UPDATE_MUSIC_VOL: "UPDATE_MUSIC_VOL",
          UPDATE_EFFECT_VOL: "UPDATE_EFFECT_VOL",
          STOP_ALL_AUDIO: "STOP_ALL_AUDIO",
          PLAY_EFFECT_JACKPOT_COIN: "PLAY_EFFECT_JACKPOT_COIN",
          STOP_EFFECT_JACKPOT_COIN: "STOP_EFFECT_JACKPOT_COIN",
          MAIN_BGM: "MAIN_BGM",
          LOBBY_BGM: "LOBBY_BGM",
          CLICK_BET: "CLICK_BET",
          EVENT_JOIN_GAME: "EVENT_JOIN_GAME",
          EFFECT_GET_ITEM_LASER: "EFFECT_GET_ITEM_LASER",
          PAUSE_OR_RESUME_SOUND_WIN: "PAUSE_OR_RESUME_SOUND_WIN",
          STOP_BIG_WIN: "STOP_SOUND_BIG_WIN",
          PLAY_SOUND_BY_NAME: "PLAY_SOUND_BY_NAME",
          PLAY_MUSIC_BY_NAME: "PLAY_MUSIC_BY_NAME",
          STOP_SOUND: "STOP_SOUND",
          STOP_ALL_EFFECT: "STOP_ALL_EFFECT",
          SHOW_PROMOTION_POPUP: "SHOW_PROMOTION_POPUP",
          PROMOTION_GUN_APPEAR: "PROMOTION_GUN_APPEAR",
          PROMOTION_GUN_DISAPPEAR: "PROMOTION_GUN_DISAPPEAR"
        },
        GAME_LAYER: {
          UPDATE_TABLE_ID: "UPDATE_TABLE_ID",
          ON_ENTER_GAME_ROOM: "GAME_LAYER_ON_ENTER_GAME_ROOM",
          ON_PLAYER_FIRE: "ON_PLAYER_FIRE",
          CREATE_ONE_FISH: "CREATE_ONE_FISH",
          CREATE_FISH: "GAME_LAYER_CREATE_FISH",
          CREATE_FISH_GROUP: "GAME_LAYER_CREATE_FISH_GROUP",
          RESUME_FISH_GROUP: "GAME_LAYER_RESUME_FISH_GROUP",
          BULLET_COLLIDE_FISH: "GAME_LAYER_BULLET_COLLIDE_FISH",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_FIRE_DRILL: "SEND_FIRE_DRILL",
          CREATE_BULLET: "GAME_LAYER_CREATE_BULLET",
          CATCH_FISH: "CATCH_FISH",
          CHOOSE_FISH_BY_POINT: "CHOOSE_FISH_BY_POINT",
          ON_SEND_FIRE: "ON_SEND_FIRE",
          REMOVE_FISH: "REMOVE_FISH",
          UPDATE_LOCK_FISH_IMAGE: "UPDATE_LOCK_FISH_IMAGE",
          UPDATE_ROOM_DATA: "GAME_LAYER_UPDATE_ROOM_DATA",
          ON_OTHER_PLAYER_FIRE: "ON_OTHER_PLAYER_FIRE",
          UPDATE_LIST_ITEM: "UPDATE_LIST_ITEM",
          GAME_CHANGE_ROUND: "GAME_CHANGE_ROUND",
          SHOW_JACKPOT_INFO: "SHOW_JACKPOT_INFO",
          INTERACTABLE_HUD: "INTERACTABLE_HUD",
          MOVE_OUT_ALL_FISHES: "MOVE_OUT_ALL_FISHES",
          OFF_ALL_TARGET: "OFF_ALL_TARGET",
          GAME_UPDATE_SKILL: "GAME_UPDATE_SKILL",
          INIT_BUBBLE: "INIT_BUBBLE",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          RESUME_AUTO_FIRE: "RESUME_AUTO_FIRE",
          RECEIVE_LASER_GUN: "RECEIVE_LASER_GUN",
          RESUME_DRILL_GUN: "RESUME_DRILL_GUN",
          BLOCK_ALL_BUTTON_WHEN_REFRESH: "BLOCK_ALL_BUTTON_WHEN_REFRESH",
          ON_AFTER_INIT_PLAYER_LIST: "ON_AFTER_INIT_PLAYER_LIST",
          RESUME_OLD_TARGET: "RESUME_OLD_TARGET",
          UPDATE_JACKPOT_INFO: "GAME_LAYER_UPDATE_JACKPOT_INFO",
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          UPDATE_EVENT_TRAY: "UPDATE_EVENT_TRAY",
          INTERACTABLE_FREEZE_SKILL: "INTERACTABLE_FREEZE_SKILL",
          PROCESS_ITEM_SKILLS: "PROCESS_ITEM_SKILLS",
          CREATE_ONE_BULLET: "CREATE_ONE_BULLET",
          STOP_HUD_TOGGLE_TARGET: 'STOP_HUD_TOGGLE_TARGET',
          REMOVE_EXTRA_EFFECT_ON_FISH: "REMOVE_EXTRA_EFFECT_ON_FISH",
          PLAYER_CHANGE_GUN: "PLAYER_CHANGE_GUN",
          PROMOTION_GUN_EXPIRED: "PROMOTION_GUN_EXPIRED",
          PROMOTION_GUN_EXPIRED_OTHER_ROOM: "PROMOTION_GUN_EXPIRED_OTHER_ROOM",
          GAME_QUICK_JOIN_ROOM: "GAME_QUICK_JOIN_ROOM"
        },
        FISH_LAYER: {
          BOSS_ON_GAME: "FISH_LAYER_BOSS_ON_GAME",
          SET_DIE_LIST_FISH: "SET_DIE_LIST_FISH",
          CATCH_LIST_FISH: "CATCH_LIST_FISH",
          REMOVE_BOSS: 'REMOVE_BOSS',
          CATCH_LIST_FISH_BY_SPECIAL_FISH: "CATCH_LIST_FISH_BY_SPECIAL_FISH"
        },
        LOBBY_LAYER: {
          ON_SHOW_LOBBY_LAYER: "ON_SHOW_LOBBY_LAYER",
          UPDATE_LOBBY_INFO: "UPDATE_LOBBY_INFO",
          UPDATE_LOBBY_WALLET: "UPDATE_LOBBY_WALLET",
          LOBBY_GET_ROOM_INFO: "LOBBY_GET_ROOM_INFO",
          LOBBY_UPDATE_VIP_LEVEL: "LOBBY_UPDATE_VIP_LEVEL",
          UPDATE_LOBBY_ON_SHOW: "UPDATE_LOBBY_ON_SHOW",
          ON_PLAY_NOW: "ON_PLAY_NOW"
        },
        PLAYER_LAYER: {
          UPDATE_LIST_PLAYER: "UPDATE_LIST_PLAYER",
          PLAYER_JOIN_BOARD: "PLAYER_JOIN_BOARD",
          PLAYER_LEAVE_BOARD: "PLAYER_LEAVE_BOARD",
          STOP_LOCK_FISH: "STOP_LOCK_FISH",
          CHANGE_LOCK_FISH: "CHANGE_LOCK_FISH",
          START_LOCK_FISH: "START_LOCK_FISH",
          CHANGE_GUN_LASER: "CHANGE_GUN_LASER",
          GAME_UPDATE_WALLET: "GAME_UPDATE_WALLET",
          HIDE_IS_ME: "HIDE_IS_ME",
          SHOW_POPUP_NO_MONEY: "PLAYER_SHOW_POPUP_NO_MONEY",
          PLAYER_UPDATE_VIP_LEVEL: "PLAYER_UPDATE_VIP_LEVEL",
          SHOW_QUICK_HUNT: "SHOW_QUICK_HUNT"
        },
        EVENT_TRAY_LAYER: {
          RESET_EVENT_TRAY: "RESET_EVENT_TRAY"
        },
        EFFECT_LAYER: {
          REMOVE_EVENT_EFFECT_PLAYER: "REMOVE_EVENT_EFFECT_PLAYER",
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          PLAY_BIG_WIN_EFFECT: "PLAY_BIG_WIN_EFFECT",
          PLAY_WAVE_TRANSITION: "PLAY_WAVE_TRANSITION",
          SHOW_NOTIFY_LOCK_FISH: "SHOW_NOTIFY_LOCK_FISH",
          HIDE_NOTIFY_LOCK_FISH: "HIDE_NOTIFY_LOCK_FISH",
          LUCKY_EFFECT_FISH: "LUCKY_EFFECT_FISH",
          PLAY_REWARD_EFFECT: "PLAY_REWARD_EFFECT",
          PLAY_LUCKY_EFFECT_DONE: "PLAY_LUCKY_EFFECT_DONE",
          PLAY_FISH_GROUP_TRANSITION: "PLAY_FISH_GROUP_TRANSITION",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          DROP_GUN_LASER: "DROP_GUN_LASER",
          TRIGGER_BOMB: "TRIGGER_BOMB",
          ADD_ANIM_TO_QUEUE_ANIM: "EFFECT_LAYER_ADD_ANIM_TO_QUEUE_ANIM",
          CHECK_QUEUE_ANIM: "EFFECT_LAYER_CHECK_QUEUE_ANIM",
          PLAY_EFFECT_EVENT_WIN: "PLAY_EFFECT_EVENT_WIN",
          PLAY_OTHER_USER_BIG_WIN_WHEEL_BOSS: "PLAY_OTHER_USER_BIG_WIN_WHEEL_BOSS",
          CREATE_ONE_NETFX: "CREATE_ONE_NETFX",
          PLAY_EFFECT_SPECIAL_FISH: "PLAY_EFFECT_SPECIAL_FISH",
          PLAY_EFFECT_CATCH_LIST_FISH: "PLAY_EFFECT_CATCH_LIST_FISH",
          PLAY_BOSS_JACKPOT: "PLAY_BOSS_JACKPOT"
        },
        WALLET: {
          ADD_TO_DISPLAY: "WALLET_ADD_TO_DISPLAY",
          ADD_GOLD_REWARD: "WALLET_ADD_GOLD_REWARD"
        },
        CUT_SCENE: {
          SHOW_CUT_SCENE: "SHOW_CUT_SCENE",
          HIDE_CUT_SCENE: "HIDE_CUT_SCENE",
          HIDE_ALL_CUT_SCENE: "HIDE_ALL_CUT_SCENE"
        },
        EVENT: {
          UPDATE_EVENT_STATUS: "UPDATE_EVENT_STATUS",
          EVENT_COMING: "EVENT_COMING",
          EVENT_PLAYING: "EVENT_PLAYING",
          EVENT_END: "EVENT_END",
          EVENT_IDLE: "EVENT_IDLE",
          SEND_GET_EVENT_INFO: "SEND_GET_EVENT_INFO",
          UPDATE_EVENT_TIME: "UPDATE_EVENT_TIME"
        },
        PERSIST_ROOM: {
          ADD_GAME_LAYER_TO_GAME_SCENE: "ADD_GAME_LAYER_TO_GAME_SCENE",
          ADD_JACKPOT_INFO_TO_GAME_LAYER: "ADD_JACKPOT_INFO_TO_GAME_LAYER",
          ON_PRELOAD_SCENE: "ON_PRELOAD_SCENE",
          ON_AFTER_PRELOAD_SCENE: "ON_AFTER_PRELOAD_SCENE",
          ADD_EXTRA_SOUND: "ADD_EXTRA_SOUND",
          REMOVE_EXTRA_SOUND: "REMOVE_EXTRA_SOUND",
          ON_AFTER_ADD_GAME_LAYER: "ON_AFTER_ADD_GAME_LAYER",
          ADD_SINGLE_EXTRA_SOUND: "ADD_SINGLE_EXTRA_SOUND"
        },
        GUN_SKILL: {
          RECEIVE_SKILL: "RECEIVE_SKILL",
          PLAY_EFFECT_RECEIVE_GUN_SKILL: "PLAY_EFFECT_RECEIVE_GUN_SKILL",
          CLEAR_EFFECT_RECEIVE_GUN_SKILL: "CLEAR_EFFECT_RECEIVE_GUN_SKILL",
          COMPLETED_RECEIVE_GUN_SKILL: "COMPLETED_RECEIVE_GUN_SKILL",
          MY_PLAYER_SEND_FIRE_GUN_SKILL: "MY_PLAYER_SEND_FIRE_GUN_SKILL",
          ON_SEND_FIRE_ONE_SHOT_GUN_SKILL: "ON_SEND_FIRE_ONE_SHOT_GUN_SKILL",
          PLAYER_FIRE_RIFLE_GUN_SKILL: "PLAYER_FIRE_RIFLE_GUN_SKILL",
          CATCH_FISH_BY_ONE_SHOT_GUN_SKILL: "CATCH_FISH_BY_ONE_SHOT_GUN_SKILL",
          PLAY_EFFECT_RECEIVE_EXTRA_BULLET_RIFLE_GUN: "PLAY_EFFECT_RECEIVE_EXTRA_BULLET_RIFLE_GUN",
          COMPLETED_RECEIVE_EXTRA_BULLET_RIFLE_GUN: "COMPLETED_RECEIVE_EXTRA_BULLET_RIFLE_GUN"
        },
        AUTO_FIRE_CONTROLLER: {
          IDLE_AUTO_FIRE: 'IDLE_AUTO_FIRE',
          LOCK_AUTO_FIRE: "LOCK_AUTO_FIRE",
          CHANGE_AUTO_FIRE_BY_STATE: 'CHANGE_AUTO_FIRE_BY_STATE',
          CHANGE_TARGET: 'CHANGE_TARGET',
          ON_AFTER_CHOOSE_FISH: 'ON_AFTER_CHOOSE_FISH',
          STOP_ALL_TARGET: "STOP_ALL_TARGET",
          GET_LOCK_FISH_BY_KIND: 'GET_LOCK_FISH_BY_KIND',
          ON_START_SCHEDULE_AUTO_FIRE: 'ON_START_SCHEDULE_AUTO_FIRE',
          UPDATE_LOCK_FISH_DATA: 'UPDATE_LOCK_FISH_DATA',
          RESET_LOCK_FISH_TARGET: 'RESET_LOCK_FISH_TARGET'
        },
        BOSS: {
          CATCH_BOSS_BY_ID: "CATCH_BOSS_BY_ID",
          CATCH_BOSS_BY_KIND: "CATCH_BOSS_BY_KIND",
          CREATE_BOSS: "CREATE_BOSS",
          DROP_ITEM: "BOSS_DROP_ITEM",
          REMOVE_BOSS_BY_ID: "REMOVE_BOSS_BY_ID",
          JACKPOT_WIN_AMOUNT_POPUP_CLOSE: "JACKPOT_WIN_AMOUNT_POPUP_CLOSE"
        },
        HUD_CONTROLLER: {
          SHOW_FX_ACTIVE_TARGET_ONE: 'SHOW_FX_ACTIVE_TARGET_ONE',
          SHOW_FX_ACTIVE_TARGET_ALL: 'SHOW_FX_ACTIVE_TARGET_ALL',
          SHOW_FX_ACTIVE_AUTO_FIRE: 'SHOW_FX_ACTIVE_AUTO_FIRE'
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseFish.ts", ['cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './gfNode.ts', './gfMoveByTwoPoints.ts', './gfMoveByThreePoints.ts', './gfMoveByFourPoints.ts', './gfFishUpdateAngle.ts', './gfFishUpdateOutScreen.ts'], function (exports) {
  var cclegacy, Color, v2, BoxCollider2D, tween, UITransform, Vec3, v3, Tween, PolygonCollider2D, _decorator, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfDataStore, gfReferenceManager, convertFishCoordinateSystem, SetZIndex, getSkillTypeBySkillID, gfFadeOutAll, delay, call, rotateTo, gfNode, gfMoveByTwoPoints, gfMoveByThreePoints, gfMoveByFourPoints, gfFishUpdateAngle, gfFishUpdateOutScreen;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      v2 = module.v2;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      v3 = module.v3;
      Tween = module.Tween;
      PolygonCollider2D = module.PolygonCollider2D;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      convertFishCoordinateSystem = module.convertFishCoordinateSystem;
      SetZIndex = module.SetZIndex;
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
    }, function (module) {
      gfFadeOutAll = module.gfFadeOutAll;
      delay = module.delay;
      call = module.call;
      rotateTo = module.rotateTo;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfMoveByTwoPoints = module.gfMoveByTwoPoints;
    }, function (module) {
      gfMoveByThreePoints = module.gfMoveByThreePoints;
    }, function (module) {
      gfMoveByFourPoints = module.gfMoveByFourPoints;
    }, function (module) {
      gfFishUpdateAngle = module.gfFishUpdateAngle;
    }, function (module) {
      gfFishUpdateOutScreen = module.gfFishUpdateOutScreen;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ff2e0CgJnFIOIxIH4G1Rti3", "gfBaseFish", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBaseFish = exports('gfBaseFish', (_dec = ccclass('gfBaseFish'), _dec(_class = class gfBaseFish extends gfNode {
        constructor(...args) {
          super(...args);
          this.NORMAL_COLOR = new Color(255, 255, 255, 255);
          this.HIT_COLOR = new Color(230, 30, 30, 255);
          this._maxWidth = 0;
          this._offsetX = 0;
          this._offsetY = 0;
          this._FishID = 0;
          this._FishKind = 0;
          this._buildTick = 0;
          this._isFishGroup = false;
          this._timeLost = 0;
          this._isDie = false;
          this._skipRotate = false;
          this._skipFlipY = false;
          this._lastPos = null;
          this._targetPoint = v2(0, 0);
          this._visibleSize = v2(0, 0);
          this._hitTime = [];
          this._dataCatchFish = null;
          this._moveOutAction = null;
          this.speed = 100;
          this.moveAction = void 0;
          this.zIndex = 0;
          this._isFreezed = false;
          this.movePath = null;
          this._outScreenComp = null;
          this._angleComp = null;
        }

        get outScreenComp() {
          if (!this.getComponent(gfFishUpdateOutScreen)) {
            this.addComponent(gfFishUpdateOutScreen);
          }

          this._outScreenComp = this.getComponent(gfFishUpdateOutScreen);
          return this._outScreenComp;
        }

        get angleComp() {
          if (!this.getComponent(gfFishUpdateAngle)) {
            this._angleComp = this.addComponent(gfFishUpdateAngle);
          }

          this._angleComp = this.getComponent(gfFishUpdateAngle);
          return this._angleComp;
        }

        onLoad() {}

        initAssets(config) {
          this.speed = config.speed;
          this.setUpBoxColliders(config.BoxCollider);
          this.updateZIndex(config.zIndex);
          this._skipRotate = !!config.skipRotate;
          this._skipFlipY = !!config.skipFlipY;

          if (config.targetPoint) {
            this._targetPoint = config.targetPoint;
          }

          this._maxWidth = this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x;
          this._offsetX = this.node.getComponent(BoxCollider2D).offset.x * this.node.scale.x;
          this._visibleSize = config.visibleSize;
        }

        setUpBoxColliders(boxes) {
          const fishColliderBoxes = this.node.getComponents(BoxCollider2D);

          for (let i = 0; i < fishColliderBoxes.length; ++i) {
            fishColliderBoxes[i].enabled = false;
          }

          if (boxes.constructor === Array) {
            boxes.forEach((configBox, i) => {
              let fishBox = fishColliderBoxes[i];

              if (!fishBox) {
                fishBox = this.node.addComponent(BoxCollider2D);
                fishBox.group = fishColliderBoxes[0].group;
              }

              this.setBoxCollider(fishBox, configBox);
            });
          } else {
            this.setBoxCollider(fishColliderBoxes[0], boxes);
          }
        }

        setBoxCollider(box, config) {
          box.enabled = true;
          box.offset.x = config.x;
          box.offset.y = config.y;
          box.size.width = config.width;
          box.size.height = config.height;
        }

        initFishData(data) {
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._isFishGroup = !!data.isFishGroup;
          this._isDie = false;
          this._moveOutAction = data.moveOutAction;
          this._buildTick = data.BuildTick ? data.BuildTick : gfDataStore.instance.getTime();
          this._timeLost = this.calculateTimeSpent(data.TimeFreeze);
          this.updateZIndex(data.zIndex);

          if (data.Position) {
            this.angleComp.enabled = false;
            this.outScreenComp.enabled = false;
            this.moveByPoints(data.Position, data.isResume);
          } else {
            this.angleComp.enabled = true;
            this.outScreenComp.enabled = true;

            if (!data.hasOwnProperty('skipRotate')) {
              data.skipRotate = this._skipRotate;
            }

            if (!data.hasOwnProperty('skipFlipY')) {
              data.skipFlipY = this._skipFlipY;
            }

            this.angleComp.init(data);
            this.outScreenComp.updateVisibleSize(this._visibleSize, this._maxWidth, this._offsetX);
          }
        }

        calculateTimeSpent(TimeFreeze = 0) {
          let timeSpent = (gfDataStore.instance.getTime() - this._buildTick - TimeFreeze / 2) / 1000;
          return timeSpent;
        }

        moveByPoints(dataPos, isResume) {
          this.moveAction = tween(this.node);

          if (gfDataStore.instance.getSelfDeskStation() > 1) {
            convertFishCoordinateSystem(dataPos);
          }

          const points = [];

          for (let i = 0; i < dataPos.length; ++i) {
            points[i] = v2(dataPos[i].PosX, dataPos[i].PosY);
          }

          const config = {
            speed: this.speed,
            points,
            timeSpent: this._timeLost,
            isResume: isResume,
            skipRotate: this._skipRotate,
            skipFlipY: this._skipFlipY,
            target: this.node,
            visibleData: {
              maxWidth: this._maxWidth,
              offset: this._offsetX,
              visibleWidth: this._visibleSize ? this._visibleSize.x : 0
            }
          };

          if (points.length === 2) {
            this.movePath = new gfMoveByTwoPoints(config);
          } else if (points.length === 3) {
            this.movePath = new gfMoveByThreePoints(config);
          } else if (points.length === 4) {
            this.movePath = new gfMoveByFourPoints(config);
          }

          this.moveAction.then(this.movePath.getAction());
          this.moveAction.call(() => {
            this.onDie();
          });
          this.moveAction.start();
        }

        update(dt) {}

        updateZIndex(zIndex) {
          if (zIndex != undefined) {
            this.zIndex = zIndex;
            SetZIndex(this.node, zIndex);
          }
        }

        onDie(isResume = false) {
          this.setDie(true);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.returnPool();
        }

        resetColor() {}

        setColor(color) {}

        onHit(data) {
          if (data) {
            this.triggerHit(data);
          }

          if (this._isFreezed) return;
          this.tweenHitColor();
        }

        tweenHitColor() {}

        tweenResetColor() {}

        setIsFreezed(isFreezed) {
          this._isFreezed = isFreezed;
        }

        getIsFreezed() {
          return this._isFreezed;
        }

        onCatch(data) {
          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.onPlayEffectWinInCatchFish(data);
          this.stopAllActions();
          this.resetColor();
          this.setDie(true);
          this.playEffectDie();
          this.moveAction = tween(this.node);

          if (!gfBaseConfig.instance.IsNewLogin && gfBaseConfig.instance.IsSpecialFish(this._FishKind)) {
            this.moveAction.then(gfFadeOutAll(0.5));
            this.processSkillForOldServer(data);
          } else if (data.skillInfo) {
            this.moveAction.then(gfFadeOutAll(0.5));
            this.processSkill(data);
          } else {
            this.moveAction.then(delay(1));
            this.moveAction.then(gfFadeOutAll(0.5));
          }

          this.moveAction.then(call(() => {
            this.onDie();
          }));
          this.moveAction.start();
        }

        processSkillForOldServer(data) {
          let {
            DeskStation
          } = data;
          const {
            LASER_CRAB,
            BOMB
          } = gfBaseConfig.instance.FISH_KIND;

          switch (this._FishKind) {
            case BOMB:
              const point = this.getLockPositionByWorldSpace();
              data.mainPoint = point;
              data.DeskStation = DeskStation;
              data.BulletMultiple = data.BulletMultiple;
              data.FishKind = this._FishKind;
              data.isSkill = true;
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_SPECIAL_FISH, data);
              break;

            case LASER_CRAB:
              gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.RECEIVE_SKILL, {
                fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)),
                DeskStation: DeskStation,
                skillInfo: {
                  SkillID: data.SkillID,
                  BulletRemain: 1,
                  BulletMultiple: data.BulletMultiple
                }
              });
              break;
          }
        }

        processSkill(data) {
          let {
            skillInfo,
            DeskStation
          } = data;

          if (skillInfo) {
            skillInfo.forEach(item => {
              const {
                SkillID,
                IsActive
              } = item;
              const {
                ONE_SHOT_GUN,
                RIFLE_GUN,
                SPECIAL_FISH
              } = gfBaseConfig.instance.SKILL_TYPE;

              if (IsActive) {
                switch (getSkillTypeBySkillID(SkillID)) {
                  case SPECIAL_FISH:
                    {
                      const point = this.getLockPositionByWorldSpace();
                      item.mainPoint = point;
                      item.DeskStation = DeskStation;
                      item.BulletMultiple = data.BulletMultiple;
                      item.FishKind = this._FishKind;
                      item.isSkill = true;
                      gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_SPECIAL_FISH, item);
                      this.moveAction.then(gfFadeOutAll(0.1));
                      break;
                    }

                  case ONE_SHOT_GUN:
                  case RIFLE_GUN:
                    {
                      item.BulletMultiple = data.BulletMultiple;
                      gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.RECEIVE_SKILL, {
                        fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)),
                        DeskStation: data.DeskStation,
                        skillInfo: item
                      });
                      break;
                    }
                }
              }
            });
          }
        }

        getTargetPoint() {
          return this._targetPoint;
        }

        getLockPositionByNodeSpace(node) {
          return node.getComponent(UITransform).convertToNodeSpaceAR(this.getLockPositionByWorldSpace());
        }

        getLockPositionByWorldSpace() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(this._targetPoint.x, this._targetPoint.y, 0));
        }

        onPlayEffectWinInCatchFish(data) {
          data.fishKind = this._FishKind;
          data.fishPos = this.getLockPositionByWorldSpace();
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, data, true);
        }

        stopAllActions() {
          Tween.stopAllByTarget(this.node);
        }

        moveOut(time) {
          if (this._isDie) return;

          if (this.checkOutScene()) {
            this.onDie();
            return;
          }

          this.movePath = null;
          this.outScreenComp.enabled = true;
          this.angleComp.enabled = true;
          this.stopAllActions();
          this.moveAction = tween(this.node);
          const moveOutActions = [];
          this.changeAnimationSpeed(2.5);

          if (this._moveOutAction) {
            moveOutActions.push(this._moveOutAction);
          } else {
            const {
              AppSize
            } = gfBaseConfig.instance;
            const yPos = (this.node.position.y > AppSize.Height / 2 ? AppSize.Height + 400 : -400) - this.node.position.y;
            const angle = this.node.position.y > AppSize.Height / 2 ? -90 : 90;

            if (this._skipRotate) {
              this.moveAction.then(delay(0.325));
            } else {
              this.moveAction.then(rotateTo(0.325, angle));
            }

            this.moveAction.then(tween().by(1.675, {
              position: v3(0, yPos, 0)
            }, {
              easing: 'sineOut'
            }));
          }

          this.moveAction.then(call(() => {
            this.onDie();
          }));
          this.moveAction.start();
        }

        setDie(isDie) {
          this._isDie = isDie;
        }

        checkDie() {
          return this._isDie;
        }

        isAvailable() {
          return !this.checkDie() && !this.checkOutScene();
        }

        getKind() {
          return this._FishKind;
        }

        getZIndex() {
          return this.zIndex;
        }

        getId() {
          return this._FishID;
        }

        checkOutScene() {
          if (this.movePath) {
            return this.movePath.isOutScreen();
          }

          return this.outScreenComp.isOutScreen();
        }

        checkFishGroup() {
          return this._isFishGroup;
        }

        changeAnimationSpeed(x) {}

        resetAnimationSpeed() {}

        playEffectDie() {}

        needFakeBullet(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return false;

          if (data.DeskStation !== gfDataStore.instance.getSelfDeskStation() && !data.isSkill && !this._isDie && !data.SkillID && !gfDataStore.instance.isHoldingGunSkill()) {
            return this._hitTime[data.DeskStation] ? gfDataStore.instance.getTime() > this._hitTime[data.DeskStation] + 1000 : true;
          }

          return false;
        }

        createFakeBullet(data) {
          this._dataCatchFish = data;
          this.scheduleOnce(() => {
            if (this.needFakeBullet(data)) {
              const bulletData = {
                Angle: 0,
                LockedFishID: this._FishID,
                isBulletFake: true,
                DeskStation: data.DeskStation,
                BulletMultiple: data.BulletMultiple,
                FishID: data.FishID
              };
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, bulletData);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, bulletData);
            }
          }, 1);
        }

        triggerHit(data) {
          this._hitTime[data.DeskStation] = gfDataStore.instance.getTime();

          if (this._dataCatchFish && this._dataCatchFish.DeskStation === data.DeskStation) {
            this._dataCatchFish.isCheckedFakeBullet = true;
            this.onCatch(this._dataCatchFish);
            this._dataCatchFish = null;
          }
        }

        getListBox() {
          return [...this.getComponents(BoxCollider2D), ...this.getComponents(PolygonCollider2D)];
        }

        onScreenResize() {
          var _this$movePath;

          (_this$movePath = this.movePath) == null ? void 0 : _this$movePath.calculatePathVisible();
        } // Called whenever object is returned to Object Pool


        unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.node.scale = v3(1, 1, 1);
          this.unscheduleAllCallbacks();
          this.resetColor();
          this.resetAnimationSpeed();
          this.outScreenComp.setDie(true);
          this.angleComp.setDie(true);
          this.node.angle = 0;
          this.setDie(true);
          this._FishID = null;
          this._moveOutAction = null;
          this._lastPos = null;
          this._targetPoint = v2(0, 0);
          this._hitTime.length = 0;
          this._dataCatchFish = null;
          this.moveAction = null;
          this.movePath = null;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseGunSkill.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfReferenceManager.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, gfDataStore, gfEventEmitter, gfBaseEvents, gfReferenceManager, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6e130TF9HJIm5v5ufmjkJ1F", "gfBaseGunSkill", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBaseGunSkill = exports('gfBaseGunSkill', (_dec = ccclass('gfBaseGunSkill'), _dec2 = property(Node), _dec(_class = (_class2 = class gfBaseGunSkill extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "gun", _descriptor, this);

          this._skillID = 0;
          this._nodeParent = null;
          this._isMe = false;
          this.DeskStation = 0;
        }

        onLoad() {
          this._nodeParent = this.node.parent;
          this.node.active = false;
        }

        init(data) {
          this.bindAllFunctions();
          const {
            SkillID
          } = data;
          this._skillID = SkillID;
        }

        bindAllFunctions() {
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['gunFire'] = this.gunFire.bind(this);
          this.node['sendFireGun'] = this.sendFireGun.bind(this);
          this.node['isActive'] = this.isActive.bind(this);
          this.node['getSkillID'] = this.getSkillID.bind(this);
          this.node['destroyGun'] = this.destroyGun.bind(this);
        }

        show(data) {
          //DeskStation, SkillID, isResume, gunData
          this.node.active = true;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return;
          this._isMe = player.isMe;
          this.DeskStation = data.DeskStation;

          if (data.gunData && data.gunData.BulletMultiple) {
            player.txtBet.string = formatMoney(data.gunData.BulletMultiple);
          }

          this.playAnimationShow(data, () => {
            this.onAfterShow(data);
          });
        }

        hide(forceHide = false, callback = null) {
          this.playAnimationHide(forceHide, () => {
            this.onAfterHide();

            if (callback && typeof callback === 'function') {
              callback();
            }
          });
        }

        playAnimationShow(data, callback) {
          callback();
        }

        playAnimationHide(forceHide = false, callback) {
          if (callback && typeof callback === 'function') {
            callback();
          }
        }

        onAfterShow(data) {
          if (this._isMe) {
            if (data.isResume) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
            }

            gfDataStore.instance.setLockGun(false);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, {
            DeskStation: data.DeskStation
          });
        }

        onAfterHide() {
          this.node.active = false;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, {
            DeskStation: this.DeskStation
          });
        }

        sendFireGun() {}

        gunFire(data, callback) {
          this.onAfterGunFire(callback);
        }

        onAfterGunFire(callback) {
          callback();
        }

        isActive() {
          return this.node.active;
        }

        getSkillID() {
          return this._skillID;
        }

        resetChildNodeParent() {}

        destroyGun() {
          this.hide(true);
          this.resetChildNodeParent();
          this.node.destroy();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseCellHistory.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Prefab, CCString, _decorator, Component, UIOpacity, Button, Label, warn, instantiate, apiObject, loadConfigAsync, gfBaseEvents, gfEventEmitter, GfBaseCellHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Prefab = module.Prefab;
      CCString = module.CCString;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
      Label = module.Label;
      warn = module.warn;
      instantiate = module.instantiate;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "e805awNTAlKVppn+BPOs/M1", "gfBaseHistory", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfBaseHistory = exports('GfBaseHistory', (_dec = ccclass('GfBaseHistory'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(CCString), _dec10 = property(Node), _dec11 = property(Node), _dec(_class = (_class2 = class GfBaseHistory extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "table", _descriptor, this);

          _initializerDefineProperty(this, "cell", _descriptor2, this);

          _initializerDefineProperty(this, "pageIndexView", _descriptor3, this);

          _initializerDefineProperty(this, "itemPerPage", _descriptor4, this);

          _initializerDefineProperty(this, "loading", _descriptor5, this);

          _initializerDefineProperty(this, "btnBack", _descriptor6, this);

          _initializerDefineProperty(this, "btnNext", _descriptor7, this);

          _initializerDefineProperty(this, "noHistoryText", _descriptor8, this);

          _initializerDefineProperty(this, "pagePrefix", _descriptor9, this);

          _initializerDefineProperty(this, "errorMessage", _descriptor10, this);

          _initializerDefineProperty(this, "framePageIndex", _descriptor11, this);

          this._initialized = false;
          this.currentPage = void 0;
          this.totalPage = void 0;
          this.jpPrefix = void 0;
          this.gameId = void 0;
          this.jpList = void 0;
          this.url = void 0;
        }

        onLoad() {
          if (this._initialized) {
            return;
          }

          this.currentPage = 1;
          this.totalPage = 1;
          this.stopLoading();
          this.initTableCells(this.itemPerPage);
          this.noHistoryText.active = false;
          this.clearTableData();
          this.btnNext.on(Node.EventType.TOUCH_START, this.onNextPage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_START, this.onPrevPage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this._initialized = true;
        }

        initData(data) {
          const {
            gameId,
            jpList,
            jpPrefix,
            url
          } = data;
          this.gameId = gameId;
          this.jpList = jpList;
          this.jpPrefix = jpPrefix;
          this.url = url;
        }

        openPanel(data) {
          this.initData(data);
          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.currentPage = 1;

          if (this.currentPage == 1) {
            this.btnBack.getComponent(Button).interactable = false;
            this.btnNext.getComponent(Button).interactable = false;
          }

          this.pageIndexView.getComponent(Label).string = this.pagePrefix + this.currentPage.toString();
          if (this.errorMessage) this.errorMessage.active = false;
          this.playLoading();
          this.onActiveNextBackButton(false);

          if (this.framePageIndex) {
            this.framePageIndex.active = false;
          }

          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        }

        closePanel() {
          this.clearTableData();
        }

        playLoading() {
          this.noHistoryText.active = false;
          this.loading.active = true;
        }

        stopLoading() {
          this.loading.active = false;
        }

        onNextPage() {
          if (this.btnNext.getComponent(Button).interactable) {
            this.btnBack.getComponent(Button).interactable = false;
          }
        }

        onPrevPage() {
          if (this.btnBack.getComponent(Button).interactable) {
            this.btnNext.getComponent(Button).interactable = false;
          }
        }

        cancelChangePage() {
          if (this.currentPage !== 1) this.btnBack.getComponent(Button).interactable = true;
          if (this.currentPage < this.totalPage) this.btnNext.getComponent(Button).interactable = true;
        }

        onNextButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage += 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        }

        onPreviousButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          if (this.currentPage == 1) return;
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage -= 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        }

        requestDataPage(page, quantity, callback, callbackErr) {
          let from = (page - 1) * quantity;
          let requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity,
            type: this.jpList
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr);
        }

        requestHistory(requestParams = {}, callback, callbackErr, headers = null) {
          if (!this.gameId) {
            warn("GameId has not been set");
            callback({});
            return;
          }

          const {
            API_URL
          } = loadConfigAsync.getConfig();

          if (headers) {
            apiObject.getWithHeader({
              url: this.url,
              params: requestParams,
              callback,
              callbackErr,
              headers,
              apiUrl: API_URL
            });
          } else {
            apiObject.get({
              url: this.url,
              params: requestParams,
              callback,
              callbackErr,
              apiUrl: API_URL
            });
          }
        }

        requestErr() {
          this.stopLoading();

          if (this.errorMessage) {
            this.errorMessage.active = true;
            this.clearTableData();
          }
        }

        onActiveNextBackButton(isActive) {
          this.btnBack.active = isActive;
          this.btnNext.active = isActive;
        }

        onRequestResponse(res) {
          const isNullData = !!(res.error || Object.keys(res).length <= 0 || !res.data || res.data.length <= 0);
          this.noHistoryText.active = isNullData;

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.onActiveNextBackButton(!isNullData && this.totalPage > 1);

          if (this.framePageIndex && !isNullData) {
            const isActivePageIndex = this.totalPage == 1 || res.total;
            this.framePageIndex.active = isActivePageIndex;
          }

          this.stopLoading();

          if (!res.error) {
            if (Object.keys(res).length > 0 && res.data && res.data.length > 0) {
              this.btnNext.getComponent(Button).interactable = true;
              this.btnBack.getComponent(Button).interactable = true;
              this.pageIndexView.getComponent(Label).string = this.pagePrefix + this.currentPage.toString();
              this.updateTableData(res.data);

              if (this.currentPage == 1) {
                this.btnBack.getComponent(Button).interactable = false;
              }

              if (res.total <= this.currentPage * this.itemPerPage || res.data.length < this.itemPerPage) {
                this.btnNext.getComponent(Button).interactable = false;
                return;
              }
            } else {
              return;
            }
          }
        } // Table


        initTableCells(itemPerPage) {
          for (let i = 0; i < itemPerPage; ++i) {
            const cell = instantiate(this.cell);
            cell.parent = this.table;
          }
        }

        updateTableData(data) {
          this.table.children.forEach((child, index) => {
            if (index < data.length) {
              child.getComponent(GfBaseCellHistory).updateData(data[index]);
              child.active = true;
            } else {
              child.active = false;
            }
          });
        }

        clearTableData() {
          this.table.children.forEach(child => child.active = false);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cell", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemPerPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 7;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "noHistoryText", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "pagePrefix", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "framePageIndex", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlockAllInput.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "72b3exqR0JHzboyROaa+4zY", "gfBlockAllInput", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBlockAllInput = exports('gfBlockAllInput', (_dec = ccclass('gfBlockAllInput'), _dec(_class = class gfBlockAllInput extends Component {
        onLoad() {
          registerEvent(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH, this.blockAll, this);
          this.node.active = false;
        }

        blockAll() {
          this.node.active = true;
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlurScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, ScrollView, isValid;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      ScrollView = module.ScrollView;
      isValid = module.isValid;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "b66f8n3AdJAR7nVq9d9ro3m", "gfBlurScrollView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBlurScrollView = exports('gfBlurScrollView', (_dec = ccclass('gfBlurScrollView'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class gfBlurScrollView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "topBlur", _descriptor, this);

          _initializerDefineProperty(this, "bottomBlur", _descriptor2, this);

          this.minOffsetY = 0;
        }

        onLoad() {
          this.node.on('scrolling', this.scrolling, this);
          this.minOffsetY = 0;
        }

        onEnable() {
          const scrollView = this.node.getComponent(ScrollView);
          this.scrolling(scrollView);
        }

        scrolling(event) {
          const scrollOffset = event.getScrollOffset();

          if (scrollOffset.y <= this.minOffsetY && isValid(this.topBlur)) {
            this.topBlur.active = false;
            return;
          }

          if (scrollOffset.y >= event.getMaxScrollOffset().y && isValid(this.bottomBlur)) {
            this.bottomBlur.active = false;
            return;
          }

          this.topBlur.active = true;
          this.bottomBlur.active = true;
        }

        onDestroy() {
          this.node.off('scrolling', this.scrolling, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "topBlur", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bottomBlur", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlurScrollViewController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, ScrollView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      ScrollView = module.ScrollView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7ae0b+JgddJa6SDxk8f3lSD", "gfBlurScrollViewController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBlurScrollViewController = exports('gfBlurScrollViewController', (_dec = ccclass('gfBlurScrollViewController'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class gfBlurScrollViewController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "decor_top", _descriptor, this);

          _initializerDefineProperty(this, "decor_bot", _descriptor2, this);
        }

        onLoad() {
          this.node.on(ScrollView.EventType.SCROLLING, this.onScrolling, this);
          this.decor_top.active = false;
        }

        onScrolling() {
          const scrollOffset = this.node.getComponent(ScrollView).getScrollOffset();

          if (scrollOffset.y <= 0) {
            this.decor_top.active = false;
            this.decor_bot.active = true;
            return;
          }

          if (scrollOffset.y >= this.node.getComponent(ScrollView).getMaxScrollOffset().y) {
            this.decor_bot.active = false;
            this.decor_top.active = true;
            return;
          }

          this.decor_top.active = true;
          this.decor_bot.active = true;
        }

        onDestroy() {
          this.node.off(ScrollView.EventType.SCROLLING, this.onScrolling, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "decor_top", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "decor_bot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossAssetsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBossExtraSound.ts', './gfBossExtraNodePoolAsset.ts', './gfBossNetworkController.ts', './gfBossEffectLayer.ts', './gfBossConfig.ts', './gfBossController.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfPoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, gfBossExtraSound, gfBossExtraNodePoolAsset, gfBossNetworkController, gfBossEffectLayer, gfBossConfig, gfBossController, gfEventEmitter, gfBaseEvents, gfPoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfBossExtraSound = module.gfBossExtraSound;
    }, function (module) {
      gfBossExtraNodePoolAsset = module.gfBossExtraNodePoolAsset;
    }, function (module) {
      gfBossNetworkController = module.gfBossNetworkController;
    }, function (module) {
      gfBossEffectLayer = module.gfBossEffectLayer;
    }, function (module) {
      gfBossConfig = module.default;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec4, _dec5, _dec6, _dec7, _dec8, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "9a355ML6o1Na5wL3cDVGnVC", "gfBossAssetsManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBossData = exports('gfBossData', (_dec = ccclass('gfBossData'), _dec2 = property(Prefab), _dec3 = property(gfBossEffectLayer), _dec(_class = (_class2 = class gfBossData {
        constructor() {
          _initializerDefineProperty(this, "bossPrefab", _descriptor, this);

          _initializerDefineProperty(this, "bossKind", _descriptor2, this);

          _initializerDefineProperty(this, "bossEffectLayer", _descriptor3, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bossPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bossKind", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bossEffectLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      let gfBossAssetsManager = exports('gfBossAssetsManager', (_dec4 = ccclass('gfBossAssetsManager'), _dec5 = property(gfBossData), _dec6 = property(gfBossExtraNodePoolAsset), _dec7 = property(gfBossExtraSound), _dec8 = property(gfBossNetworkController), _dec4(_class4 = (_class5 = class gfBossAssetsManager extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bossData", _descriptor4, this);

          _initializerDefineProperty(this, "extraNodePoolAsset", _descriptor5, this);

          _initializerDefineProperty(this, "extraSound", _descriptor6, this);

          _initializerDefineProperty(this, "bossNetworkController", _descriptor7, this);
        }

        initBossAssetsManager() {
          var _gfBossController$ins, _this$bossData$bossEf, _this$bossNetworkCont;

          this.mergeConfig();
          (_gfBossController$ins = gfBossController.instance) == null ? void 0 : _gfBossController$ins.addBossAsset(this.bossData);
          this.addExtraSoundsToSoundController();
          this.addExtraAssetsToPoolManager();
          (_this$bossData$bossEf = this.bossData.bossEffectLayer) == null ? void 0 : _this$bossData$bossEf.initEffectLayer();
          (_this$bossNetworkCont = this.bossNetworkController) == null ? void 0 : _this$bossNetworkCont.initEvents();
        }

        removeBossAssetsManager() {
          var _gfBossController$ins2, _this$bossData$bossEf2, _this$bossNetworkCont2;

          this.removeConfig();

          if (this.extraSound) {
            this.removeExtraSoundsFromSoundController(); //Remove all events extra of boss

            this.extraSound.removeExtraEvents();
          }

          if (this.extraNodePoolAsset) {
            this.removeExtraAssetsFromPoolManager();
          }

          (_gfBossController$ins2 = gfBossController.instance) == null ? void 0 : _gfBossController$ins2.removeBossAssets(this.bossData);
          (_this$bossData$bossEf2 = this.bossData.bossEffectLayer) == null ? void 0 : _this$bossData$bossEf2.removeEffectLayer();
          (_this$bossNetworkCont2 = this.bossNetworkController) == null ? void 0 : _this$bossNetworkCont2.removeEvents();
        }

        addExtraSoundsToSoundController() {
          const {
            sfxList,
            musicList
          } = this.extraSound;
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.ADD_EXTRA_SOUND, musicList, sfxList);
        }

        addExtraAssetsToPoolManager() {
          for (let i = 0; i < this.extraNodePoolAsset.assets.length; ++i) {
            this.updatePoolsData(this.extraNodePoolAsset.assets[i]);
            this.creteNewPools(this.extraNodePoolAsset.configs[i]);
          }
        }

        updatePoolsData(assets) {
          assets.forEach(asset => gfPoolManager.instance.updatePoolData(asset));
        }

        creteNewPools(configs) {
          configs.forEach(config => gfPoolManager.instance.createNewPool(config));
        }

        removeExtraSoundsFromSoundController() {
          const {
            sfxList,
            musicList
          } = this.extraSound;
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.REMOVE_EXTRA_SOUND, musicList, sfxList);
        }

        removeExtraAssetsFromPoolManager() {
          for (let i = 0; i < this.extraNodePoolAsset.assets.length; ++i) {
            this.removePoolsData(this.extraNodePoolAsset.assets[i]);
            this.removePools(this.extraNodePoolAsset.configs[i]);
          }
        }

        removePoolsData(assets) {
          assets.forEach(asset => gfPoolManager.instance.removeRoomAsset(asset));
        }

        removePools(configs) {
          configs.forEach(config => gfPoolManager.instance.removePool(config));
        }

        mergeConfig() {
          new gfBossConfig();
          gfBossConfig.instance.bossKind = this.bossData.bossKind;
          gfBossConfig.instance.mergeToBaseConfig(gfBossConfig.instance);
        }

        removeConfig() {
          var _gfBossConfig$instanc;

          (_gfBossConfig$instanc = gfBossConfig.instance) == null ? void 0 : _gfBossConfig$instanc.destroy();
        }

      }, (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "bossData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "extraNodePoolAsset", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "extraSound", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "bossNetworkController", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './gfActionHelper.ts', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, UIOpacity, Color, gfBaseFish, stopAllActions, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bccddUT5GRN+7n68yLWRm8j", "gfBossBase", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBossBase = exports('gfBossBase', (_dec = ccclass('gfBossBase'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class gfBossBase extends gfBaseFish {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "fishAnim", _descriptor, this);

          this.listBox = void 0;
          this._initialized = false;
        }

        initFishData(data) {
          this.initFishState();
          this.resetAllActions();
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._buildTick = data.BuildTick;
        }

        setBossKind(bossKind) {
          this._FishKind = bossKind;
        }

        initFishState() {
          this._isDie = false;

          if (this.node.getComponent(UIOpacity)) {
            this.node.getComponent(UIOpacity).opacity = 255;
          }

          this.node.active = true;
        }

        resetAllActions() {
          this.unscheduleAllCallbacks();

          if (this.fishAnim) {
            this.fishAnim.color = Color.WHITE;
            stopAllActions(this.fishAnim.node);
          }
        }

        scheduleCheckOutScreen() {}

        playEffectDie() {
          this.unscheduleAllCallbacks();
          this._isDie = true;

          if (this.fishAnim.node) {
            stopAllActions(this.fishAnim.node);
            this.stopEventListeners();
          }
        }

        stopEventListeners() {
          //@TODO stop all event listeners of boss anim
          this.fishAnim.setCompleteListener(() => {});
        }

        onHit() {//@todo play effect color hit
        }

        onCatch(data) {//todo handler catch Boss
        }

        onDie() {
          this.node.removeFromParent();
          this._isDie = true;
          this.node.active = false;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          gfEventEmitter.instance.emit(gfBaseEvents.BOSS.REMOVE_BOSS_BY_ID, this._FishID);
        }

        isDie() {
          return this._isDie;
        }

        update(dt) {}

        onDestroy() {}

        moveOut() {}

        onIced() {}

        returnPool() {}

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossConfig.ts", ['cc', './gfBaseConfig.ts'], function (exports) {
  var cclegacy, gfBaseConfig;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7dc42LX6ltAeLzq/TnJHq9f", "gfBossConfig", undefined);

      const lodash = globalThis._;

      class gfBossConfig {
        constructor() {
          this.Z_INDEX = void 0;
          this.ITEM_CONFIG = void 0;
          this.ASSETS_NAME = void 0;
          this.NOTIFY_TYPE = void 0;
          this.BOSS_CONFIG = void 0;
          this.PRIORITY_FISH = void 0;
          this.NOTIFY_CONFIG = void 0;
          this.SOUND_BACKGROUND_CONFIG = {};
          this._bossKind = 0;
          gfBossConfig.instance = this;
        }

        get bossKind() {
          return this._bossKind;
        }

        set bossKind(bossKind) {
          this._bossKind = bossKind;
        }

        mergeToBaseConfig(config) {
          lodash.merge(gfBaseConfig.instance, gfBaseConfig.instance, config);
        }

        destroy() {
          gfBossConfig.instance = null;
        }

      }

      exports('default', gfBossConfig);
      gfBossConfig.instance = null;
      gfBossConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossController.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfBaseFish.ts', './gfReferenceManager.ts'], function (exports) {
  var cclegacy, _decorator, Component, instantiate, isValid, gfBaseEvents, registerEvent, removeEvents, gfBaseConfig, gfBaseFish, gfReferenceManager;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      isValid = module.isValid;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "bcb2eHPvO5G2K3xoiXXpgzr", "gfBossController", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBossController = exports('default', (_dec = ccclass('gfBossController'), _dec(_class = (_class2 = class gfBossController extends Component {
        constructor(...args) {
          super(...args);
          this.listBossAssets = [];
          this.listBoss = [];
        }

        onLoad() {
          gfBossController.instance = this;
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.BOSS.REMOVE_BOSS_BY_ID, this.removeBoss, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.clearAllBoss, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.clearAllBoss, this);
        }

        createBoss(data) {
          const bossAsset = this.getBossAssetByKind(data.FishKind);

          if (bossAsset) {
            const nodeFish = instantiate(bossAsset.bossPrefab);
            nodeFish.setParent(gfReferenceManager.instance.getNodeFishLayer());
            const fish = nodeFish.getComponent(gfBaseFish);
            fish.initFishData(data);
            this.listBoss.push(fish);
            return fish;
          }

          return null;
        }

        removeBoss(id) {
          const fish = this.getBossById(id);

          if (!fish) {
            return false;
          }

          this.listBoss.splice(this.listBoss.indexOf(fish), 1);
          return true;
        }

        getBossById(bossId) {
          return this.listBoss.find(boss => boss.getId() === bossId);
        }

        clearAllBoss() {
          for (let i = 0; i < this.listBoss.length; ++i) {
            const fish = this.listBoss[i];

            if (isValid(fish)) {
              fish.onDie(true);
            }
          }

          this.listBoss.length = 0;
        }

        addBossAsset(bossAsset) {
          if (!this.getBossAssetByKind(bossAsset.bossKind)) {
            this.listBossAssets.push(bossAsset);
          }
        }

        getBossAssetByKind(kind) {
          return this.listBossAssets.find(bossAsset => bossAsset.bossKind === kind);
        }

        removeBossAssets(bossAsset) {
          const index = this.listBossAssets.indexOf(bossAsset);

          if (index > -1) {
            this.listBossAssets.splice(index, 1);
          }
        }

        getBossForTargetAll() {
          for (let i = 0; i < this.listBoss.length; ++i) {
            const boss = this.listBoss[i];

            if (boss.isAvailable()) {
              return boss;
            }
          }

          return null;
        }

        isBossKind(fishKind) {
          return Object.values(gfBaseConfig.instance.BOSS_CONFIG).indexOf(fishKind) > -1;
        }

        getBossByKind(bossKind) {
          var _this$listBoss;

          return (_this$listBoss = this.listBoss) == null ? void 0 : _this$listBoss.find(boss => boss.getKind() === bossKind);
        }

        checkExtraCondition() {
          return this.listBossAssets.some(bossAsset => {
            var _bossAsset$bossEffect;

            return (_bossAsset$bossEffect = bossAsset.bossEffectLayer) == null ? void 0 : _bossAsset$bossEffect.checkExtraCondition();
          });
        }

        onDestroy() {
          this.clearAllBoss();
          removeEvents(this);
          gfBossController.instance = null;
        }

      }, _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossEffectLayer.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Component, Tween, isValid, _decorator, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Tween = module.Tween;
      isValid = module.isValid;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "19509ojFHpC3I+RerlbqxpU", "gfBossEffectLayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBossEffectLayer = exports('gfBossEffectLayer', (_dec = ccclass('gfBossEffectLayer'), _dec(_class = class gfBossEffectLayer extends Component {
        constructor(...args) {
          super(...args);
          this._listFXItem = [];
        }

        onLoad() {
          this._listFXItem.length = 0;
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.userExitBoard, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
        }

        checkExtraCondition() {}

        initEffectLayer() {}

        removeEffectLayer() {}

        userExitBoard(data) {}

        resetOnExit() {
          this._listFXItem.forEach(item => {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._listFXItem.length = 0;
        }

        onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossExtraNodePoolAsset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCustomDataType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, gfPoolSpriteAssetExist, gfPoolSpriteAsset, gfPoolSpineAssetExist, gfPoolSpineAsset, gfAnimationFXAssetExist, gfAnimationFXAsset;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfPoolSpriteAssetExist = module.gfPoolSpriteAssetExist;
      gfPoolSpriteAsset = module.gfPoolSpriteAsset;
      gfPoolSpineAssetExist = module.gfPoolSpineAssetExist;
      gfPoolSpineAsset = module.gfPoolSpineAsset;
      gfAnimationFXAssetExist = module.gfAnimationFXAssetExist;
      gfAnimationFXAsset = module.gfAnimationFXAsset;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "e168dMkZ9ZLZrcGo8i4SdEL", "gfBossExtraNodePoolAsset", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBossExtraNodePoolAsset = exports('gfBossExtraNodePoolAsset', (_dec = ccclass('gfBossExtraNodePoolAsset'), _dec2 = property(gfPoolSpriteAssetExist), _dec3 = property(gfPoolSpriteAsset), _dec4 = property(gfPoolSpineAssetExist), _dec5 = property(gfPoolSpineAsset), _dec6 = property(gfAnimationFXAssetExist), _dec7 = property(gfAnimationFXAsset), _dec(_class = (_class2 = class gfBossExtraNodePoolAsset extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "extraSprites", _descriptor, this);

          _initializerDefineProperty(this, "extraSpritesConfig", _descriptor2, this);

          _initializerDefineProperty(this, "extraSpines", _descriptor3, this);

          _initializerDefineProperty(this, "extraSpinesConfig", _descriptor4, this);

          _initializerDefineProperty(this, "extraAnimationClips", _descriptor5, this);

          _initializerDefineProperty(this, "extraAnimationClipsConfig", _descriptor6, this);
        }

        get assets() {
          return [this.extraSprites, this.extraSpines, this.extraAnimationClips];
        }

        get configs() {
          return [this.extraSpritesConfig, this.extraSpinesConfig, this.extraAnimationClipsConfig];
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "extraSprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "extraSpritesConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "extraSpines", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "extraSpinesConfig", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "extraAnimationClips", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "extraAnimationClipsConfig", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossExtraSound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './CustomTypeShare.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, removeEvents, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      removeEvents = module.removeEvents;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "72812NaAixCPY5/uwEpCFwR", "gfBossExtraSound", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfBossExtraSound = exports('gfBossExtraSound', (_dec = ccclass('gfBossExtraSound'), _dec2 = property({
        type: CustomAudioClip
      }), _dec3 = property({
        type: CustomAudioClip
      }), _dec(_class = (_class2 = class gfBossExtraSound extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "musicList", _descriptor, this);

          _initializerDefineProperty(this, "sfxList", _descriptor2, this);
        }

        initExtraEvents() {//event sound bgm boss
        }

        removeExtraEvents() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossInterface.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ac1dczhmFtAf7MZf4UtbouL", "gfBossInterface", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossItem.ts", ['cc', './gfNode.ts', './gfActionHelper.ts'], function (exports) {
  var cclegacy, tween, _decorator, gfNode, scaleTo, moveTo;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      scaleTo = module.scaleTo;
      moveTo = module.moveTo;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a1a5f6/nrVAIrMVaBH4RMx0", "gfBossItem", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBossItem = exports('gfBossItem', (_dec = ccclass('gfBossItem'), _dec(_class = class gfBossItem extends gfNode {
        constructor(...args) {
          super(...args);

          this.callbackFunc = () => {};

          this.listAction = void 0;
        }

        playAnimation(dataInfo, callback) {
          const {
            startPos
          } = dataInfo;
          this.callbackFunc = callback;
          this.node.setPosition(startPos);
          this.listAction = tween(this.node).then(this.onStart(dataInfo)).then(this.onFly(dataInfo)).then(this.onFinish(dataInfo)).start();
        }

        onStart(dataInfo) {
          return tween().then(scaleTo(0.2, 2.5, 2.5, 'bounceOut')).delay(0.5);
        }

        onFly(dataInfo) {
          const {
            endPos
          } = dataInfo;
          return tween().parallel(tween().then(scaleTo(0.8, 1, 1, 'sineOut')), tween().then(moveTo(0.8, endPos.x, endPos.y, 1, 'sineIn'))).delay(0.2);
        }

        onFinish(dataInfo) {
          return tween().call(() => {
            if (this.callbackFunc && typeof this.callbackFunc === 'function') {
              this.callbackFunc();
            }

            this.returnPool();
          });
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossLoader.ts", ['cc', './gfBossAssetsManager.ts', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfBossAssetsManager, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfBossAssetsManager = module.gfBossAssetsManager;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f06b1CPko9NOrsrJvw8wO2q", "gfBossLoader", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBossLoader = exports('default', (_dec = ccclass('gfBossLoader'), _dec(_class = class gfBossLoader extends Component {
        constructor(...args) {
          super(...args);
          this.bossAssetsManagers = [];
        }

        onLoad() {
          this.onEnterGameRoom();
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.closeScene, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.closeScene, this);
        }

        onEnterGameRoom() {
          var _this$bossAssetsManag;

          this.bossAssetsManagers = this.getComponentsInChildren(gfBossAssetsManager);
          (_this$bossAssetsManag = this.bossAssetsManagers) == null ? void 0 : _this$bossAssetsManag.forEach(bossManager => {
            bossManager.initBossAssetsManager();
          });
        }

        closeScene() {
          var _this$bossAssetsManag2;

          (_this$bossAssetsManag2 = this.bossAssetsManagers) == null ? void 0 : _this$bossAssetsManag2.forEach(bossManager => {
            bossManager.removeBossAssetsManager();
          });
          this.bossAssetsManagers.length = 0;
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBossNetworkController.ts", ['cc'], function (exports) {
  var cclegacy, Component, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bed54KzmutPpbgcSU3hykTB", "gfBossNetworkController", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBossNetworkController = exports('gfBossNetworkController', (_dec = ccclass('gfBossNetworkController'), _dec(_class = class gfBossNetworkController extends Component {
        initEvents() {}

        removeEvents() {}

        onDestroy() {}

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubble.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, v3, Node, _decorator, Component, tween, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4b1fapnhTFCyKZzqTCSwxzy", "gfBubble", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const POS_LIST = [[v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)] //Background 3
      ];
      let GfBubble = exports('GfBubble', (_dec = ccclass('GfBubble'), _dec2 = property(Node), _dec(_class = (_class2 = class GfBubble extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "BubbleNodes", _descriptor, this);
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, this.initBubble, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this.changeBackground, this);
        }

        initBubble(index) {
          for (let i = 0; i < this.BubbleNodes.length; i++) {
            this.BubbleNodes[i].setPosition(POS_LIST[index][i]);
          }
        }

        changeBackground(index) {
          for (let i = 0; i < this.BubbleNodes.length; i++) {
            tween(this.BubbleNodes[i]).then(fadeOut(0.5)).delay(0.5).call(() => {
              this.BubbleNodes[i].setPosition(POS_LIST[index][i]);
            }).then(fadeIn(1.5)).start();
          }
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "BubbleNodes", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubbleTransition.ts", ['cc', './gfActionHelper.ts'], function (exports) {
  var cclegacy, Component, UIOpacity, tween, v3, _decorator, fadeOut;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      _decorator = module._decorator;
    }, function (module) {
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "226f1XJTa1IH4OFwpGBBGUO", "gfBubbleTransition", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfBubbleTransition = exports('GfBubbleTransition', (_dec = ccclass('GfBubbleTransition'), _dec(_class = class GfBubbleTransition extends Component {
        start() {
          this.node.setScale(0, 0, 0);
          this.node.getComponent(UIOpacity).opacity = 255;
          const offset = 5;
          const shakeTime = 0.5;
          tween(this.node).to(shakeTime, {
            position: v3(-offset, 0, this.node.position.z)
          }).to(shakeTime, {
            position: v3(offset, 0, this.node.position.z)
          }).repeatForever().start();
          tween(this.node).parallel(tween().to(0.5, {
            scale: v3(0.5, 1, this.node.scale.z)
          }), tween().then(fadeOut(1))).removeSelf().call(() => {
            this.node.destroy();
          }).start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBullet.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfFishManager.ts', './gfNode.ts', './gfBaseFish.ts'], function (exports) {
  var cclegacy, Collider2D, Contact2DType, BoxCollider2D, Sprite, misc, isValid, _decorator, gfEventEmitter, gfBaseEvents, gfBaseConfig, getRotation, v2Distance, gfFishManager, gfNode, gfBaseFish;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      Sprite = module.Sprite;
      misc = module.misc;
      isValid = module.isValid;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      getRotation = module.getRotation;
      v2Distance = module.v2Distance;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "24803oDDQRJLLLvpEqor32O", "gfBullet", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBullet = exports('gfBullet', (_dec = ccclass('gfBullet'), _dec(_class = class gfBullet extends gfNode {
        constructor(...args) {
          super(...args);
          this._BulletMultiple = 0;
          this._LockedFish = null;
          this._DeskStation = null;
          this._BulletID = null;
          this._isMe = false;
          this._lastPos = null;
          this._vectorX = 0;
          this._vectorY = 0;
          this._isDie = false;
          this._FireType = 0;
          this._isFake = false;
          this._speed = 0;
          this._skillID = null;
        }

        onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        }

        initAssets(config) {
          this.setSpriteFrame(config.asset);
          const box = this.node.getComponent(BoxCollider2D);
          box.offset.x = config.BoxCollider.x;
          box.offset.y = config.BoxCollider.y;
          box.size.width = config.BoxCollider.width;
          box.size.height = config.BoxCollider.height;
          this._speed = gfBaseConfig.instance.BulletSpeed;
        }

        setSpriteFrame(frame) {
          this.node.getComponent(Sprite).spriteFrame = frame;
        }

        initData(data) {
          this.node.setPosition(data.position);
          this.node.angle = data.Angle;
          this._BulletMultiple = data.BulletMultiple;
          this._LockedFish = gfFishManager.instance.getFishById(data.LockedFishID);
          this._DeskStation = data.DeskStation;
          this._BulletID = data.BulletID;
          this._isMe = data.isMe;
          this._isFake = data.isBulletFake;
          this._FireType = data.FireType;
          this._skillID = data.SkillID;
          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
        }

        update(dt) {
          if (this._isDie) {
            this.onDie();
            return;
          }

          if (this._LockedFish) {
            if (this._isFake) {
              var _this$_LockedFish;

              if ((_this$_LockedFish = this._LockedFish) != null && _this$_LockedFish.checkDie()) {
                this._LockedFish = null;
                this.onDie();
                return;
              }
            } else {
              var _this$_LockedFish2;

              if (!isValid(this._LockedFish.node) || !((_this$_LockedFish2 = this._LockedFish) != null && _this$_LockedFish2.isAvailable())) {
                this._LockedFish = null;
              }
            }
          }

          if (this._lastPos) {
            this.updatePosition(dt);
            this.limitPositionForTarget();
            this.node.angle = getRotation(this.node.getPosition(), this._lastPos);
          }

          this._lastPos = this.node.getPosition();
        }

        updatePosition(dt) {
          let delta = dt * this._speed;
          let x = this.node.position.x,
              y = this.node.position.y;

          if (this._LockedFish) {
            this.node.angle = getRotation(this._LockedFish.getLockPositionByNodeSpace(this.node.parent), this._lastPos);
            this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
            this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          } else {
            const SceneBox = gfBaseConfig.instance.SceneBox;

            if (x > SceneBox.Right) {
              this._vectorX *= -1;
              x = SceneBox.Right;
            } else if (x < SceneBox.Left) {
              this._vectorX *= -1;
              x = SceneBox.Left;
            }

            if (y > SceneBox.Top) {
              this._vectorY *= -1;
              y = SceneBox.Top;
            } else if (y < SceneBox.Bottom) {
              this._vectorY *= -1;
              y = SceneBox.Bottom;
            }
          }

          x += this._vectorX * delta;
          y += this._vectorY * delta;
          this.node.setPosition(x, y, 0);
        }

        onCollisionEnter(self, other, contact) {
          if (this._isDie) return;
          let fish = other.getComponent(gfBaseFish) || other.node.parent.getComponent(gfBaseFish);
          if (!fish || fish.checkDie()) return;

          if (this._LockedFish) {
            if (fish.getId() != this._LockedFish._FishID) {
              return;
            }
          }

          this.onHit(fish);
        }

        limitPositionForTarget() {
          if (this._LockedFish) {
            const fishPos = this._LockedFish.getLockPositionByNodeSpace(this.node.parent);

            if (v2Distance(this.node.position, this._lastPos) > v2Distance(this._lastPos, fishPos)) {
              this.node.position = fishPos;
              this.onHit(this._LockedFish);
            }
          }
        }

        onHit(fish) {
          const data = this.makeBulletCollisionData(fish);
          fish.onHit(data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);

          if (!this._isFake) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, data);
          }

          this._isDie = true;
        }

        makeBulletCollisionData(fish) {
          const data = {
            bullet: this,
            position: this.node.position,
            FishID: fish.getId(),
            FishKind: fish.getKind(),
            BulletMultiple: this._BulletMultiple,
            isMe: this._isMe,
            BulletID: this._BulletID,
            DeskStation: this._DeskStation,
            FireType: this._FireType,
            SkillID: this._skillID
          };
          return data;
        }

        onDie() {
          this.returnPool();
        }

        checkDie() {
          return this._isDie;
        }

        isAvailable() {
          return !this.checkDie();
        }

        isFake() {
          return this._isFake;
        }

        getPosition() {
          return this.node.getPosition();
        }

        getAngle() {
          return this.node.angle;
        } //Called whenever object is returned to Object Pool


        unuse() {
          this._BulletMultiple = 0;
          this._LockedFish = null;
          this._DeskStation = null;
          this._BulletID = null;
          this._isMe = false;
          this._lastPos = undefined;
          this._vectorX = 0;
          this._vectorY = 0;
          this._isDie = false;
          this._skillID = null;
          super.unuse();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBulletLayer.ts", ['cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfPoolManager.ts', './gfEventEmitter.ts'], function (exports) {
  var cclegacy, Component, UITransform, _decorator, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, registerEvent, getPointByDegrees, SetZIndex, removeEvents, gfPoolManager, gfEventEmitter;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPointByDegrees = module.getPointByDegrees;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5f8c2rNPRJLuKY00KHKsTQq", "gfBulletLayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfBulletLayer = exports('gfBulletLayer', (_dec = ccclass('gfBulletLayer'), _dec(_class = class gfBulletLayer extends Component {
        constructor(...args) {
          super(...args);
          this.numBullet = 0;
        }

        onLoad() {
          this.initEvent();
          this.numBullet = 0;
        }

        initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_BULLET, this.createBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.countDownBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.onResumeGame, this);
        }

        createBullet(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            const posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.gun.worldPosition);
            const realPosFire = getPointByDegrees(posFire.x, posFire.y, posFire.x + gfBaseConfig.instance.gunRadius, posFire.y, Number.parseFloat(data.Angle));
            data.position = realPosFire;

            if (player.isMe) {
              if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
                this.createBulletPool(data);
                this.countBullet(true);
              } else {
                this.onReachMaxNumBullet(true);
              }
            } else {
              this.createBulletPool(data);
            }
          }
        }

        createBulletPool(data) {
          const bullet = gfPoolManager.instance.getBulletWithData(data);
          bullet.node.setParent(this.node);
          SetZIndex(bullet.node, gfBaseConfig.instance.BOTTOM_Z_INDEX.BULLET);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_ONE_BULLET, {
            bullet,
            data
          });
        }

        countBullet(plus = true) {
          this.numBullet += plus ? 1 : -1;

          if (this.numBullet < 0) {
            this.numBullet = 0;
          } else if (this.numBullet >= gfBaseConfig.instance.MaxBullet) {
            this.onReachMaxNumBullet(true);
          }

          if (gfDataStore.instance.isReachMaxNumBullet()) {
            if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
              this.onReachMaxNumBullet(false);
            }
          }
        }

        countDownBullet(data) {
          if (data.isMe) {
            this.countBullet(false);
          }
        }

        onResumeGame() {
          this.numBullet = 0;
          this.onReachMaxNumBullet(false);
        }

        onReachMaxNumBullet(isMax) {
          gfDataStore.instance.setDataStore({
            reachMaxNumBullet: isMax
          });
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts', './gfActionHelper.ts', './gfBaseConfig.ts', './gfReferenceManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Animation, _decorator, tween, UITransform, gfNode, fadeOut, call, gfBaseConfig, gfReferenceManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      _decorator = module._decorator;
      tween = module.tween;
      UITransform = module.UITransform;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f380cz8iaxPraDA+YrZD7Yl", "gfCoinFX", undefined);

      const TYPE_COIN = ["COIN_3D", "COIN_PARTICLE"];
      const {
        ccclass,
        property
      } = _decorator;
      let gfCoinFX = exports('gfCoinFX', (_dec = ccclass('gfCoinFX'), _dec2 = property(Animation), _dec(_class = (_class2 = class gfCoinFX extends gfNode {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "anim", _descriptor, this);

          this.velX = void 0;
          this.velY = void 0;
          this.aclX = void 0;
          this.aclY = void 0;
          this.screenSize = void 0;
          this.type = void 0;
          this.lifetime = void 0;
          this._animState = void 0;
          this.index = 0;
          this.animName = void 0;
        }

        onLoad() {
          this.velX = 0;
          this.velY = 0;
          this.aclX = 0;
          this.aclY = 0;
          this.screenSize = gfBaseConfig.instance.realSize;
          this.type = TYPE_COIN[0];
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
        }

        initAssets(config) {
          this.anim.clips = [config.asset];
          this.animName = config.asset.name;
        }

        startAnimation(type = 0, coinAnimSpeed = 1, velX = 1, velY = 1, aclX = 1, aclY = 1, lifetime = -1) {
          this.type = TYPE_COIN[type];
          this.velX = velX;
          this.velY = velY;
          this.aclX = aclX;
          this.aclY = aclY;
          this.lifetime = lifetime;

          if (!this._animState) {
            this._animState = this.anim.getState(this.animName);
          }

          this._animState.speed = coinAnimSpeed;
          this.anim.play(this.animName);
        }

        stopAnimation() {
          this.anim.stop();
          this.returnPool();
        }

        update(dt) {
          if (this.type != TYPE_COIN[1]) return;

          if (this.lifetime >= 0) {
            this.lifetime -= dt;

            if (this.lifetime <= 0) {
              tween(this.node).then(fadeOut(0.5)).then(call(() => {
                this.stopAnimation();
              })).start();
              return;
            }
          }

          this.node.setPosition(this.node.position.x + this.velX * dt, this.node.position.y + this.velY * dt, 0);
          this.velX += this.aclX * dt;
          this.velY += this.aclY * dt;
          const worldPos = this.node.parent.getComponent(UITransform).convertToWorldSpaceAR(this.node.position);
          const pos = gfReferenceManager.instance.getEffectLayer().getComponent(UITransform).convertToNodeSpaceAR(worldPos);
          const widthScreen = this.screenSize.Width;
          const heightScreen = this.screenSize.Height;

          if (pos.x < -widthScreen - widthScreen * 0.25 || pos.x > widthScreen + widthScreen * 0.25 || pos.y < -heightScreen - heightScreen * 0.25 || pos.y > heightScreen + heightScreen * 0.25) {
            this.stopAnimation();
          }
        } //nodepool
        //Called whenever card object is get from Object Pool


        reuse(poolMng) {
          super.reuse(poolMng);
          this.type = TYPE_COIN[0];
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinLabel.ts", ['cc', './gfNode.ts'], function (exports) {
  var cclegacy, Label, _decorator, gfNode;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cb4429oW5FBmJ42ATSrwfSZ", "gfCoinLabel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfCoinLabel = exports('gfCoinLabel', (_dec = ccclass('gfCoinLabel'), _dec(_class = class gfCoinLabel extends gfNode {
        initAssets(config) {
          if (config) {
            this.node.getComponent(Label).font = config;
          }
        }

        setString(value) {
          this.node.getComponent(Label).string = value;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCommonRoomController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfBaseConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, registerEvent, removeEvents, gfBaseEvents, gfEventEmitter, gfDataStore, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "15ee5Vik01H0Jyn8s9VamJi", "gfCommonRoomController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfCommonRoomController = exports('gfCommonRoomController', (_dec = ccclass('gfCommonRoomController'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = class gfCommonRoomController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "gameLayer", _descriptor, this);
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
          registerEvent(gfBaseEvents.PERSIST_ROOM.ADD_GAME_LAYER_TO_GAME_SCENE, this.addGameLayerToGameScene, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
        }

        onBeforeSceneChange() {
          const currentScene = gfDataStore.instance.getCurrentSceneName();

          if (currentScene !== gfBaseConfig.instance.SceneName.Lobby) {
            this.addGameLayerToCurrentNode();
          }
        }

        addGameLayerToGameScene(node) {
          this.gameLayer.parent = node;
          this.gameLayer.active = true;
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.ON_AFTER_ADD_GAME_LAYER);
        }

        addGameLayerToCurrentNode() {
          this.gameLayer.parent = this.node;
          this.gameLayer.active = false;
        }

        refreshPage() {
          removeEvents(this);
        }

        onDestroy() {
          this.refreshPage();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCurrencyCalculator.ts", ['cc', './gfDataStore.ts', './gfBaseConfig.ts', './gfModuleBig.mjs_cjs=&original=.js', './gfUtilities.ts', './gfModuleBig.js'], function (exports) {
  var cclegacy, _decorator, gfDataStore, gfBaseConfig, updateUtilConfig, formatMoney, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, null, function (module) {
      updateUtilConfig = module.updateUtilConfig;
      formatMoney = module.formatMoney;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c7a4fyb9ctEg69HVKkD995e", "gfCurrencyCalculator", undefined);

      const {
        ccclass
      } = _decorator;
      let gfCurrencyCalculator = exports('default', (_dec = ccclass('gfCurrencyCalculator'), _dec(_class = (_class2 = class gfCurrencyCalculator {
        constructor() {
          this.decimalPoint = "";
          this._listMoneyKey = [];
          gfCurrencyCalculator.instance = this;
          this._listMoneyKey = ["Wallet", "GoldReward", "BulletMultiple", "WinAmount", "TotalReward"];
        }

        updateKeyMoneyInCurrencyData(content, convertToDefault = true) {
          if (content === undefined || content === null) {
            return content;
          }

          if (Array.isArray(content)) {
            content.forEach(elm => this.updateKeyMoneyInCurrencyData(elm, convertToDefault));
          } else if (typeof content === 'object') {
            Object.keys(content).forEach(key => {
              const val = content[key];

              if (this.isInListMoneyKey(key)) {
                if (key === "BulletMultiple") {
                  content[key] = convertToDefault ? this.convertMultipleToDefaultBetConfig(val) : this.convertMultipleToUserBetConfig(val);
                } else {
                  content[key] = convertToDefault ? this.convertToDefaultCurrency(val) : this.convertToUserCurrency(val);
                }
              } else if (Array.isArray(val)) {
                content[key].forEach(elm => this.updateKeyMoneyInCurrencyData(elm, convertToDefault));
              } else if (typeof val === 'object') {
                content[key] = this.updateKeyMoneyInCurrencyData(val, convertToDefault);
              }
            });
          }

          return content;
        }

        formatCurrency(value, isRemoveZeroDecimal = true, isRemoveDecimal = false, decimalPoint = ".") {
          value = +value; // Get Type of currency

          let targetTypeCurrency = gfDataStore.instance && gfDataStore.instance.getUserTypeOfCurrency();

          if (value < 0.5 && value > 0 && targetTypeCurrency === gfBaseConfig.instance.CURRENCY_CONFIG.USD.ACRONYM) {
            // Auto change from USD to Cent when value < 0.5
            targetTypeCurrency = gfBaseConfig.instance.CURRENCY_CONFIG.CENT.ACRONYM;
            value = this.multiplyTwoNumber(value, 100);
          }

          let CURRENCY_CONFIG = gfBaseConfig.instance && gfBaseConfig.instance.CURRENCY_CONFIG[targetTypeCurrency];

          if (!CURRENCY_CONFIG) {
            console.error("===== CAN'T FORMAT CURRENCY => CAN'T FIND CONFIG =====");
            return value;
          } // Format Currency Prefix


          updateUtilConfig("CURRENCY_CONFIG", CURRENCY_CONFIG);

          switch (targetTypeCurrency) {
            case gfBaseConfig.instance.CURRENCY_CONFIG.USD.ACRONYM:
              value = this.formatUSDCurrency(value);
              break;

            case gfBaseConfig.instance.CURRENCY_CONFIG.CENT.ACRONYM:
              value = this.formatCentCurrency(value);
              break;

            case gfBaseConfig.instance.CURRENCY_CONFIG.THB.ACRONYM:
              value = this.formatTHBCurrency(value);
              break;

            case gfBaseConfig.instance.CURRENCY_CONFIG.VND.ACRONYM:
              value = this.formatVNDCurrency(value);
              break;

            default:
              value = formatMoney(value);
              break;
          } // Format Decimal


          if (isRemoveDecimal) {
            value = this.removeDecimal(value, decimalPoint);
          }

          if (isRemoveZeroDecimal) {
            value = this.removeZeroDecimal(value, decimalPoint);
          }

          return value;
        } // ======================= Format Func ========================


        formatUSDCurrency(value) {
          value = formatMoney(value, gfBaseConfig.instance.CURRENCY_CONFIG.USD.DECIMAL_COUNT);
          return value;
        }

        formatCentCurrency(value) {
          value = formatMoney(value, gfBaseConfig.instance.CURRENCY_CONFIG.CENT.DECIMAL_COUNT);

          if (value.search(/^[1-9]/g) !== -1) {
            // start with number
            value = value + gfBaseConfig.instance.CURRENCY_CONFIG.CENT.CURRENCY_PREFIX;
          } else {
            value = value.slice(1) + gfBaseConfig.instance.CURRENCY_CONFIG.CENT.CURRENCY_PREFIX;
          }

          return value;
        }

        formatTHBCurrency(value) {
          value = formatMoney(value, gfBaseConfig.instance.CURRENCY_CONFIG.THB.DECIMAL_COUNT);
          return value;
        }

        formatVNDCurrency(value) {
          value = formatMoney(value, gfBaseConfig.instance.CURRENCY_CONFIG.VND.DECIMAL_COUNT);
          return value;
        } // ======================== Utilities Func ========================


        isInListMoneyKey(key) {
          //@ts-ignore
          return this._listMoneyKey.includes(key);
        }

        isDefaultCurrency() {
          return gfDataStore.instance.getCurrencyRatio() === 1;
        }

        convertMultipleToUserBetConfig(BulletMultiple) {
          const userBetConfig = gfDataStore.instance.getUserBetConfig();
          const defaultBetConfig = gfDataStore.instance.getDefaultBetConfig();
          const index = defaultBetConfig.indexOf(BulletMultiple);

          if (index === -1) {
            return BulletMultiple;
          }

          return userBetConfig[index];
        }

        convertMultipleToDefaultBetConfig(BulletMultiple) {
          const userBetConfig = gfDataStore.instance.getUserBetConfig();
          const defaultBetConfig = gfDataStore.instance.getDefaultBetConfig();
          const index = userBetConfig.indexOf(BulletMultiple);

          if (index === -1) {
            return BulletMultiple;
          }

          return defaultBetConfig[index];
        }

        convertToUserCurrency(val) {
          const ratio = gfDataStore.instance.getCurrencyRatio();
          let result = this.divideTwoNumber(val, ratio);
          return result;
        }

        convertToDefaultCurrency(val) {
          const ratio = gfDataStore.instance.getCurrencyRatio();
          let result = this.multiplyTwoNumber(val, ratio);
          return result;
        }

        plusTwoNumber(firstNum, secondNum) {
          firstNum = new _cjsExports(firstNum);
          secondNum = new _cjsExports(secondNum);
          return +firstNum.plus(secondNum);
        }

        minusTwoNumber(firstNum, secondNum) {
          firstNum = new _cjsExports(firstNum);
          secondNum = new _cjsExports(secondNum);
          return +firstNum.minus(secondNum);
        }

        divideTwoNumber(firstNum, secondNum) {
          firstNum = new _cjsExports(firstNum);
          secondNum = new _cjsExports(secondNum);
          return +firstNum.div(secondNum);
        }

        multiplyTwoNumber(firstNum, secondNum) {
          firstNum = new _cjsExports(firstNum);
          secondNum = new _cjsExports(secondNum);
          return +firstNum.times(secondNum);
        }

        removeZeroDecimal(value, decimalPoint) {
          const lstSplitChar = value.toString().split(decimalPoint);

          if (lstSplitChar[1] === "00") {
            return lstSplitChar[0];
          }

          if (lstSplitChar[1] === "00¢") {
            return lstSplitChar[0] + "¢";
          }

          return value;
        }

        removeDecimal(value, decimalPoint) {
          // Caution: this condition commonly used for tween value. When value is round number, tween without decimal. For better view
          return value.toString().split(decimalPoint)[0];
        }

      }, _class2.instance = null, _class2)) || _class));
      gfCurrencyCalculator.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCustomDataType.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, AnimationClip, sp, SpriteFrame, Font, Prefab, Enum, _decorator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      AnimationClip = module.AnimationClip;
      sp = module.sp;
      SpriteFrame = module.SpriteFrame;
      Font = module.Font;
      Prefab = module.Prefab;
      Enum = module.Enum;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _class5, _descriptor3, _descriptor4, _dec7, _dec8, _dec9, _class7, _class8, _descriptor5, _descriptor6, _dec10, _dec11, _dec12, _class10, _class11, _descriptor7, _descriptor8, _dec13, _dec14, _dec15, _class13, _class14, _descriptor9, _descriptor10, _dec16, _dec17, _dec18, _class16, _class17, _descriptor11, _descriptor12, _dec19, _dec20, _class19, _class20, _descriptor13, _descriptor14, _dec21, _dec22, _dec23, _class22, _class23, _descriptor15, _descriptor16, _dec24, _dec25, _dec26, _class25, _class26, _descriptor17, _descriptor18, _dec27, _dec28, _dec29, _class28, _class29, _descriptor19, _descriptor20, _dec30, _dec31, _dec32, _class31, _class32, _descriptor21, _descriptor22, _dec33, _dec34, _dec35, _dec36, _class34, _class35, _descriptor23, _descriptor24, _descriptor25, _dec37, _dec38, _class37, _class38, _descriptor26, _dec39, _dec40, _dec41, _dec42, _class40, _class41, _descriptor27, _descriptor28, _descriptor29, _dec43, _dec44, _class43, _class44, _descriptor30, _dec45, _dec46, _class46, _class47, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _dec47, _dec48, _dec49, _dec50, _class49, _class50, _descriptor37, _descriptor38, _descriptor39, _dec51, _dec52, _class52, _class53, _descriptor40;

      cclegacy._RF.push({}, "7e8d4aBKjZHD7Jyk/cIgLo4", "gfCustomDataType", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfSpriteFishAsset = exports('gfSpriteFishAsset', (_dec = ccclass('gfSpriteFishAsset'), _dec2 = property(AnimationClip), _dec3 = property({
        visible: true
      }), _dec(_class = (_class2 = class gfSpriteFishAsset {
        constructor() {
          _initializerDefineProperty(this, "animation", _descriptor, this);

          _initializerDefineProperty(this, "_name", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class2)) || _class));
      let gfSpineFishAsset = exports('gfSpineFishAsset', (_dec4 = ccclass('gfSpineFishAsset'), _dec5 = property(sp.SkeletonData), _dec6 = property({
        visible: true
      }), _dec4(_class4 = (_class5 = class gfSpineFishAsset {
        constructor() {
          _initializerDefineProperty(this, "animation", _descriptor3, this);

          _initializerDefineProperty(this, "_name", _descriptor4, this);
        }

      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "animation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_name", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class5)) || _class4));
      let gfBulletAsset = exports('gfBulletAsset', (_dec7 = ccclass('gfBulletAsset'), _dec8 = property(SpriteFrame), _dec9 = property({
        visible: true
      }), _dec7(_class7 = (_class8 = class gfBulletAsset {
        constructor() {
          _initializerDefineProperty(this, "sprite", _descriptor5, this);

          _initializerDefineProperty(this, "_name", _descriptor6, this);
        }

      }, (_descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "sprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "_name", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class8)) || _class7));
      let gfNetFXAsset = exports('gfNetFXAsset', (_dec10 = ccclass('gfNetFXAsset'), _dec11 = property(sp.SkeletonData), _dec12 = property({
        visible: true
      }), _dec10(_class10 = (_class11 = class gfNetFXAsset {
        constructor() {
          _initializerDefineProperty(this, "animation", _descriptor7, this);

          _initializerDefineProperty(this, "_name", _descriptor8, this);
        }

      }, (_descriptor7 = _applyDecoratedDescriptor(_class11.prototype, "animation", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class11.prototype, "_name", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class11)) || _class10));
      let gfCoinAsset = exports('gfCoinAsset', (_dec13 = ccclass('gfCoinAsset'), _dec14 = property(AnimationClip), _dec15 = property({
        visible: true
      }), _dec13(_class13 = (_class14 = class gfCoinAsset {
        constructor() {
          _initializerDefineProperty(this, "animation", _descriptor9, this);

          _initializerDefineProperty(this, "_name", _descriptor10, this);
        }

      }, (_descriptor9 = _applyDecoratedDescriptor(_class14.prototype, "animation", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class14.prototype, "_name", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class14)) || _class13));
      let gfLabelCoinAsset = exports('gfLabelCoinAsset', (_dec16 = ccclass('gfLabelCoinAsset'), _dec17 = property(Font), _dec18 = property({
        visible: true
      }), _dec16(_class16 = (_class17 = class gfLabelCoinAsset {
        constructor() {
          _initializerDefineProperty(this, "font", _descriptor11, this);

          _initializerDefineProperty(this, "_name", _descriptor12, this);
        }

      }, (_descriptor11 = _applyDecoratedDescriptor(_class17.prototype, "font", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class17.prototype, "_name", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class17)) || _class16));
      let gfJackpotStatic = exports('gfJackpotStatic', (_dec19 = ccclass('gfJackpotStatic'), _dec20 = property(SpriteFrame), _dec19(_class19 = (_class20 = class gfJackpotStatic {
        constructor() {
          _initializerDefineProperty(this, "name", _descriptor13, this);

          _initializerDefineProperty(this, "static", _descriptor14, this);
        }

      }, (_descriptor13 = _applyDecoratedDescriptor(_class20.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class20.prototype, "static", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class20)) || _class19));
      let gfGunSkeletonData = exports('gfGunSkeletonData', (_dec21 = ccclass('gfGunSkeletonData'), _dec22 = property({
        visible: true
      }), _dec23 = property(sp.SkeletonData), _dec21(_class22 = (_class23 = class gfGunSkeletonData {
        constructor() {
          _initializerDefineProperty(this, "_name", _descriptor15, this);

          _initializerDefineProperty(this, "animation", _descriptor16, this);
        }

      }, (_descriptor15 = _applyDecoratedDescriptor(_class23.prototype, "_name", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class23.prototype, "animation", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class23)) || _class22));
      let EnvObjectAsset = exports('EnvObjectAsset', (_dec24 = ccclass('EnvObjectAsset'), _dec25 = property({
        visible: true
      }), _dec26 = property(SpriteFrame), _dec24(_class25 = (_class26 = class EnvObjectAsset {
        constructor() {
          _initializerDefineProperty(this, "_name", _descriptor17, this);

          _initializerDefineProperty(this, "sprite", _descriptor18, this);
        }

      }, (_descriptor17 = _applyDecoratedDescriptor(_class26.prototype, "_name", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class26.prototype, "sprite", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class26)) || _class25));
      let gfRoomSkeletonData = exports('gfRoomSkeletonData', (_dec27 = ccclass('gfRoomSkeletonData'), _dec28 = property({
        visible: true
      }), _dec29 = property(sp.SkeletonData), _dec27(_class28 = (_class29 = class gfRoomSkeletonData {
        constructor() {
          _initializerDefineProperty(this, "_name", _descriptor19, this);

          _initializerDefineProperty(this, "asset", _descriptor20, this);
        }

      }, (_descriptor19 = _applyDecoratedDescriptor(_class29.prototype, "_name", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class29.prototype, "asset", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class29)) || _class28));
      let gfRoomSpriteFrame = exports('gfRoomSpriteFrame', (_dec30 = ccclass('gfRoomSpriteFrame'), _dec31 = property({
        visible: true
      }), _dec32 = property(SpriteFrame), _dec30(_class31 = (_class32 = class gfRoomSpriteFrame {
        constructor() {
          _initializerDefineProperty(this, "_name", _descriptor21, this);

          _initializerDefineProperty(this, "asset", _descriptor22, this);
        }

      }, (_descriptor21 = _applyDecoratedDescriptor(_class32.prototype, "_name", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class32.prototype, "asset", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class32)) || _class31)); //SPINE

      let gfPoolSpineAssetExist = exports('gfPoolSpineAssetExist', (_dec33 = ccclass('gfPoolSpineAssetExist'), _dec34 = property(gfRoomSkeletonData), _dec35 = property({
        visible: true
      }), _dec36 = property({
        visible: true
      }), _dec33(_class34 = (_class35 = class gfPoolSpineAssetExist {
        constructor() {
          _initializerDefineProperty(this, "assetData", _descriptor23, this);

          _initializerDefineProperty(this, "_assetName", _descriptor24, this);

          _initializerDefineProperty(this, "_typeName", _descriptor25, this);
        }

      }, (_descriptor23 = _applyDecoratedDescriptor(_class35.prototype, "assetData", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class35.prototype, "_assetName", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class35.prototype, "_typeName", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class35)) || _class34));
      let gfPoolSpineAsset = exports('gfPoolSpineAsset', (_dec37 = ccclass('gfPoolSpineAsset'), _dec38 = property(Prefab), _dec37(_class37 = (_class38 = class gfPoolSpineAsset extends gfPoolSpineAssetExist {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodePoolPrefab", _descriptor26, this);
        }

      }, _descriptor26 = _applyDecoratedDescriptor(_class38.prototype, "nodePoolPrefab", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class38)) || _class37)); //SPRITE

      let gfPoolSpriteAssetExist = exports('gfPoolSpriteAssetExist', (_dec39 = ccclass('gfPoolSpriteAssetExist'), _dec40 = property(gfRoomSpriteFrame), _dec41 = property({
        visible: true
      }), _dec42 = property({
        visible: true
      }), _dec39(_class40 = (_class41 = class gfPoolSpriteAssetExist {
        constructor() {
          _initializerDefineProperty(this, "assetData", _descriptor27, this);

          _initializerDefineProperty(this, "_assetName", _descriptor28, this);

          _initializerDefineProperty(this, "_typeName", _descriptor29, this);
        }

      }, (_descriptor27 = _applyDecoratedDescriptor(_class41.prototype, "assetData", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class41.prototype, "_assetName", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class41.prototype, "_typeName", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class41)) || _class40));
      let gfPoolSpriteAsset = exports('gfPoolSpriteAsset', (_dec43 = ccclass('gfPoolSpriteAsset'), _dec44 = property(Prefab), _dec43(_class43 = (_class44 = class gfPoolSpriteAsset extends gfPoolSpriteAssetExist {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodePoolPrefab", _descriptor30, this);
        }

      }, _descriptor30 = _applyDecoratedDescriptor(_class44.prototype, "nodePoolPrefab", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class44)) || _class43));
      let gfNotifyConfig = exports('gfNotifyConfig', (_dec45 = ccclass('gfNotifyConfig'), _dec46 = property(sp.SkeletonData), _dec45(_class46 = (_class47 = class gfNotifyConfig {
        constructor() {
          _initializerDefineProperty(this, "animAppear", _descriptor31, this);

          _initializerDefineProperty(this, "animIdle", _descriptor32, this);

          _initializerDefineProperty(this, "animDisappear", _descriptor33, this);

          _initializerDefineProperty(this, "languageKey", _descriptor34, this);

          _initializerDefineProperty(this, "spineData", _descriptor35, this);

          _initializerDefineProperty(this, "type", _descriptor36, this);
        }

      }, (_descriptor31 = _applyDecoratedDescriptor(_class47.prototype, "animAppear", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class47.prototype, "animIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class47.prototype, "animDisappear", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class47.prototype, "languageKey", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "txtJPNotify";
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class47.prototype, "spineData", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class47.prototype, "type", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class47)) || _class46)); //ANIMATION

      let gfAnimationFXAssetExist = exports('gfAnimationFXAssetExist', (_dec47 = ccclass('gfAnimationFXAssetExist'), _dec48 = property(gfSpriteFishAsset), _dec49 = property({
        visible: true
      }), _dec50 = property({
        visible: true
      }), _dec47(_class49 = (_class50 = class gfAnimationFXAssetExist {
        constructor() {
          _initializerDefineProperty(this, "assetData", _descriptor37, this);

          _initializerDefineProperty(this, "_assetName", _descriptor38, this);

          _initializerDefineProperty(this, "_typeName", _descriptor39, this);
        }

      }, (_descriptor37 = _applyDecoratedDescriptor(_class50.prototype, "assetData", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class50.prototype, "_assetName", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class50.prototype, "_typeName", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class50)) || _class49));
      let gfAnimationFXAsset = exports('gfAnimationFXAsset', (_dec51 = ccclass('gfAnimationFXAsset'), _dec52 = property(Prefab), _dec51(_class52 = (_class53 = class gfAnimationFXAsset extends gfAnimationFXAssetExist {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodePoolPrefab", _descriptor40, this);
        }

      }, _descriptor40 = _applyDecoratedDescriptor(_class53.prototype, "nodePoolPrefab", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class53)) || _class52));
      let WheelType = exports('WheelType', /*#__PURE__*/function (WheelType) {
        WheelType[WheelType["NORMAL"] = 0] = "NORMAL";
        WheelType[WheelType["EVENT"] = 1] = "EVENT";
        WheelType[WheelType["BOSS"] = 2] = "BOSS";
        WheelType[WheelType["OTHER"] = 3] = "OTHER";
        return WheelType;
      }({}));
      Enum(WheelType);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCustomTiledAssembler.ts", ['cc'], function (exports) {
  var Sprite, cclegacy, Mat4, Color;
  return {
    setters: [function (module) {
      Sprite = module.Sprite;
      cclegacy = module.cclegacy;
      Mat4 = module.Mat4;
      Color = module.Color;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3e42cla/zpBF473DeRJPoT6", "gfCustomTiledAssembler", undefined);

      const m = new Mat4();
      let origin;
      let leftInner;
      let rightInner;
      let rightOuter;
      let bottomInner;
      let topInner;
      let topOuter;
      let tempRenderDataLength = 0;
      const tempRenderData = [];
      let QUAD_INDICES;

      function has9SlicedOffsetVertexCount(spriteFrame) {
        if (spriteFrame) {
          if (spriteFrame.insetTop > 0 || spriteFrame.insetBottom > 0 || spriteFrame.insetLeft > 0 || spriteFrame.insetRight > 0) {
            return 2; // left + right
          }
        }

        return 0;
      }

      const customTiled = exports('customTiled', {
        createData(sprite) {
          return sprite.requestRenderData();
        },

        updateRenderData(sprite) {
          const renderData = sprite.renderData;
          const frame = sprite.spriteFrame;

          if (!frame || !renderData) {
            return;
          }

          if (!renderData.vertDirty) {
            return;
          }

          const uiTrans = sprite.node._uiProps.uiTransformComp;
          const contentWidth = Math.abs(uiTrans.width);
          const contentHeight = Math.abs(uiTrans.height);
          const rect = frame.getRect();
          const leftWidth = frame.insetLeft;
          const rightWidth = frame.insetRight;
          const centerWidth = rect.width - leftWidth - rightWidth;
          const topHeight = frame.insetTop;
          const bottomHeight = frame.insetBottom;
          const centerHeight = rect.height - topHeight - bottomHeight;
          let sizableWidth = contentWidth - leftWidth - rightWidth;
          let sizableHeight = contentHeight - topHeight - bottomHeight;
          sizableWidth = sizableWidth > 0 ? sizableWidth : 0;
          sizableHeight = sizableHeight > 0 ? sizableHeight : 0;
          const hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          const vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          const offsetVertexCount = has9SlicedOffsetVertexCount(frame);
          const row = Math.ceil(vRepeat + offsetVertexCount);
          const col = Math.ceil(hRepeat + offsetVertexCount);
          renderData.dataLength = row * 2 * (col * 2);
          this.updateVerts(sprite, sizableWidth, sizableHeight, row, col);

          if (renderData.vertexCount !== row * col * 4) {
            sprite.renderEntity.colorDirty = true;
          } // update data property


          renderData.resize(row * col * 4, row * col * 6); // update index here

          if (globalThis.CC_JSB) {
            const indexCount = renderData.indexCount;
            this.createQuadIndices(indexCount);
            renderData.chunk.setIndexBuffer(QUAD_INDICES); // may can update color & uv here
            // need dirty

            this.updateWorldUVData(sprite); //this.updateColorLate(sprite);
          }

          renderData.updateRenderData(sprite, frame);
        },

        createQuadIndices(indexCount) {
          if (indexCount % 6 !== 0) {
            console.error('illegal index count!');
            return;
          }

          const quadCount = indexCount / 6;
          QUAD_INDICES = null;
          QUAD_INDICES = new Uint16Array(indexCount);
          let offset = 0;

          for (let i = 0; i < quadCount; i++) {
            QUAD_INDICES[offset++] = 0 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 3 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
          }
        },

        // dirty Mark
        // the real update uv is on updateWorldUVData
        updateUVs(sprite) {
          const renderData = sprite.renderData;
          renderData.vertDirty = true;
          sprite.markForUpdateRenderData();
        },

        fillBuffers(sprite, renderer) {
          const node = sprite.node;
          const renderData = sprite.renderData;
          const chunk = renderData.chunk;

          if (node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexAndUVData(sprite, chunk);
            renderData.vertDirty = false;
          } // forColor


          this.updateColorLate(sprite); // update indices

          const bid = chunk.bufferId;
          let vid = chunk.vertexOffset;
          const meshBuffer = chunk.meshBuffer;
          const ib = chunk.meshBuffer.iData;
          let indexOffset = meshBuffer.indexOffset;

          for (let i = 0; i < renderData.indexCount; i += 6) {
            ib[indexOffset++] = vid;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 2;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 3;
            ib[indexOffset++] = vid + 2;
            vid += 4;
            meshBuffer.indexOffset += 6;
          }

          meshBuffer.setDirty();
        },

        updateWorldUVData(sprite) {
          const renderData = sprite.renderData;
          const stride = renderData.floatStride;
          const dataList = renderData.data;
          const vData = renderData.chunk.vb;

          for (let i = 0; i < dataList.length; i++) {
            const offset = i * stride;
            vData[offset + 3] = dataList[i].u;
            vData[offset + 4] = dataList[i].v;
          }
        },

        // only for TS
        updateWorldVertexAndUVData(sprite, chunk) {
          const node = sprite.node;
          node.getWorldMatrix(m);
          const renderData = sprite.renderData;
          const stride = renderData.floatStride;
          const dataList = renderData.data;
          const vData = chunk.vb;
          const length = dataList.length;

          for (let i = 0; i < length; i++) {
            const x = dataList[i].x;
            const y = dataList[i].y;
            const z = dataList[i].z;
            let rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            const offset = i * stride;
            vData[offset] = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
            vData[offset + 1] = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
            vData[offset + 2] = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
          }

          this.updateWorldUVData(sprite);
        },

        updateVerts(sprite, sizableWidth, sizableHeight, row, col) {
          const uiTrans = sprite.node._uiProps.uiTransformComp;
          const renderData = sprite.renderData;
          const dataList = renderData.data;
          const frame = sprite.spriteFrame;
          const rect = frame.rect;
          const contentWidth = Math.abs(uiTrans.width);
          const contentHeight = Math.abs(uiTrans.height);
          const appx = uiTrans.anchorX * contentWidth;
          const appy = uiTrans.anchorY * contentHeight;
          const leftWidth = frame.insetLeft;
          const rightWidth = frame.insetRight;
          const centerWidth = rect.width - leftWidth - rightWidth;
          const topHeight = frame.insetTop;
          const bottomHeight = frame.insetBottom;
          const centerHeight = rect.height - topHeight - bottomHeight;
          const xScale = uiTrans.width / (leftWidth + rightWidth) > 1 ? 1 : uiTrans.width / (leftWidth + rightWidth);
          const yScale = uiTrans.height / (topHeight + bottomHeight) > 1 ? 1 : uiTrans.height / (topHeight + bottomHeight);
          let offsetWidth = 0;
          let offsetHeight = 0;

          if (centerWidth > 0) {
            /*
             * Because the float numerical calculation in javascript is not accurate enough,
             * there is an expected result of 1.0, but the actual result is 1.000001.
             */
            offsetWidth = Math.floor(sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : sizableWidth % centerWidth;
          } else {
            offsetWidth = sizableWidth;
          }

          if (centerHeight > 0) {
            offsetHeight = Math.floor(sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : sizableHeight % centerHeight;
          } else {
            offsetHeight = sizableHeight;
          } // 临时变量存前置数据


          tempRenderData.length = 0;
          tempRenderDataLength = Math.max(row + 1, col + 1);

          for (let i = 0; i < tempRenderDataLength; i++) {
            tempRenderData.push({
              x: 0,
              y: 0,
              z: 0,
              u: 0,
              v: 0,
              color: new Color()
            });
          }

          const offsetVertexCount = has9SlicedOffsetVertexCount(frame);

          if (offsetVertexCount === 0) {
            for (let i = 0; i < tempRenderDataLength; i++) {
              // for x
              if (i >= col) {
                tempRenderData[i].x = contentWidth - appx;
              } else {
                tempRenderData[i].x = -appx + i * centerWidth;
              } // for y


              if (i >= row) {
                tempRenderData[i].y = contentHeight - appy;
              } else {
                tempRenderData[i].y = -appy + i * centerHeight;
              }
            }
          } else {
            for (let i = 0; i < tempRenderDataLength; i++) {
              // for x
              if (i === 0) {
                tempRenderData[i].x = -appx;
              } else if (i === 1) {
                tempRenderData[i].x = -appx + leftWidth * xScale;
              } else if (i > 1 && i < col - 1) {
                if (centerWidth > 0) {
                  tempRenderData[i].x = -appx + leftWidth * xScale + centerWidth * (i - 1);
                } else {
                  tempRenderData[i].x = leftWidth + sizableWidth - appx;
                }
              } else if (i === col - 1) {
                tempRenderData[i].x = -appx + leftWidth * xScale + offsetWidth + centerWidth * (i - 2);
              } else if (i >= col) {
                tempRenderData[i].x = Math.min(leftWidth + sizableWidth + rightWidth, contentWidth) - appx;
              } // for y


              if (i === 0) {
                tempRenderData[i].y = -appy;
              } else if (i === 1) {
                tempRenderData[i].y = -appy + bottomHeight * yScale;
              } else if (i > 1 && i < row - 1) {
                if (centerHeight > 0) {
                  tempRenderData[i].y = -appy + bottomHeight * yScale + centerHeight * (i - 1);
                } else {
                  tempRenderData[i].y = bottomHeight + sizableHeight - appy;
                }
              } else if (i === row - 1) {
                tempRenderData[i].y = -appy + bottomHeight * yScale + offsetHeight + centerHeight * (i - 2);
              } else if (i >= row) {
                tempRenderData[i].y = Math.min(bottomHeight + sizableHeight + topHeight, contentHeight) - appy;
              }
            }
          } // 填datalist


          let x = 0;
          let x1 = 0;
          let y = 0;
          let y1 = 0;

          for (let yIndex = 0; yIndex < row; ++yIndex) {
            y = tempRenderData[yIndex].y;
            y1 = tempRenderData[yIndex + 1].y;

            for (let xIndex = 0; xIndex < col; ++xIndex) {
              x = tempRenderData[xIndex].x;
              x1 = tempRenderData[xIndex + 1].x; // 4 vertices in a rect

              const curIndex = 4 * (yIndex * col + xIndex); //left bottom

              dataList[curIndex].x = x;
              dataList[curIndex].y = y; //right bottom

              dataList[curIndex + 1].x = x1;
              dataList[curIndex + 1].y = y; //left top

              dataList[curIndex + 2].x = x;
              dataList[curIndex + 2].y = y1; //right top

              dataList[curIndex + 3].x = x1;
              dataList[curIndex + 3].y = y1;
            }
          }

          const rotated = frame.rotated;
          const uv = frame.uv;
          const uvSliced = frame.uvSliced; // origin at left bottom

          origin = uvSliced[0]; // on bottom edge

          leftInner = uvSliced[1];
          rightInner = uvSliced[2];
          rightOuter = uvSliced[3]; // on left edge

          bottomInner = uvSliced[4];
          topInner = uvSliced[8];
          topOuter = uvSliced[12];
          let coefU = 0;
          let coefV = 0;
          const hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          const vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          const tempXVerts = [];
          const tempYVerts = [];

          for (let yIndexUV = 0; yIndexUV < row; ++yIndexUV) {
            if (sizableHeight > centerHeight) {
              //if 9 sliced, we should exclude bottom border vertex (yIndex-1)
              const curYRectCount = offsetVertexCount > 0 ? yIndexUV : yIndexUV + 1; // The height of the rect which contains the left bottom vertex in current loop should be calculated in total height.

              if (sizableHeight >= curYRectCount * centerHeight) {
                coefV = 1;
              } else {
                coefV = vRepeat % 1;
              }
            } else {
              coefV = vRepeat;
            }

            for (let xIndexUV = 0; xIndexUV < col; ++xIndexUV) {
              if (sizableWidth > centerWidth) {
                //if 9 sliced, we should exclude left border vertex (xIndex-1)
                const curXRectCount = offsetVertexCount > 0 ? xIndexUV : xIndexUV + 1; // The width of the rect which contains the left bottom vertex in current loop should be calculated in total width.
                // Example: xIndex = 2 means that these is the third vertex, we should take the rect whose left bottom vertex is this
                // vertex into account, so the following condition should be comparing the values of content size and (2+1)*centerWidth.

                if (sizableWidth >= curXRectCount * centerWidth) {
                  coefU = 1;
                } else {
                  coefU = hRepeat % 1;
                }
              } else {
                coefU = hRepeat;
              }

              if (rotated) {
                if (offsetVertexCount === 0) {
                  //无九宫
                  tempXVerts[0] = bottomInner.u;
                  tempXVerts[1] = bottomInner.u;
                  tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  tempYVerts[0] = leftInner.v;
                  tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                  tempYVerts[2] = leftInner.v;
                } else {
                  //有九宫
                  if (yIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = origin.u;
                    tempXVerts[2] = bottomInner.u;
                  } else if (yIndexUV < row - 1) {
                    tempXVerts[0] = bottomInner.u;
                    tempXVerts[1] = bottomInner.u;
                    tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempXVerts[0] = topInner.u;
                    tempXVerts[1] = topInner.u;
                    tempXVerts[2] = topOuter.u;
                  }

                  if (xIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = leftInner.v;
                    tempYVerts[2] = origin.v;
                  } else if (xIndexUV < col - 1) {
                    tempYVerts[0] = leftInner.v;
                    tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                    tempYVerts[2] = leftInner.v;
                  } else if (xIndexUV === col - 1) {
                    tempYVerts[0] = rightInner.v;
                    tempYVerts[1] = rightOuter.v;
                    tempYVerts[2] = rightInner.v;
                  }
                }

                tempXVerts[3] = tempXVerts[2];
                tempYVerts[3] = tempYVerts[1];
              } else {
                if (offsetVertexCount === 0) {
                  //无九宫
                  tempXVerts[0] = leftInner.u;
                  tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                  tempXVerts[2] = leftInner.u;
                  tempYVerts[0] = bottomInner.v;
                  tempYVerts[1] = bottomInner.v;
                  tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                } else {
                  //有九宫
                  if (xIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = leftInner.u;
                    tempXVerts[2] = origin.u;
                  } else if (xIndexUV < col - 1) {
                    tempXVerts[0] = leftInner.u;
                    tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                    tempXVerts[2] = leftInner.u;
                  } else if (xIndexUV === col - 1) {
                    tempXVerts[0] = rightInner.u;
                    tempXVerts[1] = rightOuter.u;
                    tempXVerts[2] = rightInner.u;
                  }

                  if (yIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = origin.v;
                    tempYVerts[2] = bottomInner.v;
                  } else if (yIndexUV < row - 1) {
                    tempYVerts[0] = bottomInner.v;
                    tempYVerts[1] = bottomInner.v;
                    tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempYVerts[0] = topInner.v;
                    tempYVerts[1] = topInner.v;
                    tempYVerts[2] = topOuter.v;
                  }
                }

                tempXVerts[3] = tempXVerts[1];
                tempYVerts[3] = tempYVerts[2];
              } // it represents the left bottom corner vertex of a rect


              const curIndex = 4 * (yIndexUV * col + xIndexUV); // lb

              dataList[curIndex].u = tempXVerts[0];
              dataList[curIndex].v = tempYVerts[0]; // rb

              dataList[curIndex + 1].u = tempXVerts[1];
              dataList[curIndex + 1].v = tempYVerts[1]; // lt

              dataList[curIndex + 2].u = tempXVerts[2];
              dataList[curIndex + 2].v = tempYVerts[2]; // rt

              dataList[curIndex + 3].u = tempXVerts[3];
              dataList[curIndex + 3].v = tempYVerts[3];
            }
          }
        },

        // fill color here
        updateColorLate(sprite) {
          const renderData = sprite.renderData;
          const vData = renderData.chunk.vb;
          const stride = renderData.floatStride;
          const vertexCount = renderData.vertexCount;
          let colorOffset = 5;
          const color = sprite.color;
          const colorR = color.r / 255;
          const colorG = color.g / 255;
          const colorB = color.b / 255;
          const colorA = sprite.node._uiProps.opacity;

          for (let i = 0; i < vertexCount; i++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        },

        // Too early
        updateColor(sprite) {}

      });
      const originalGetAssembler = Sprite.Assembler.getAssembler;

      class gfCustomTiledAssembler {
        static custom() {
          Sprite.Assembler.getAssembler = function (sprite) {
            if (sprite.type == Sprite.Type.TILED) {
              return customTiled;
            }

            return originalGetAssembler.bind(this)(sprite);
          };
        }

        static restore() {
          Sprite.Assembler.getAssembler = originalGetAssembler;
        }

      }

      exports('default', gfCustomTiledAssembler);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneItem.ts", ['cc', './gfActionHelper.ts', './utils.ts'], function (exports) {
  var cclegacy, Component, tween, log, Tween, _decorator, call, delay, setOpacity;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      tween = module.tween;
      log = module.log;
      Tween = module.Tween;
      _decorator = module._decorator;
    }, function (module) {
      call = module.call;
      delay = module.delay;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e27fpLouRPtJkozKYizg3I", "gfCutSceneItem", undefined);

      const {
        ccclass
      } = _decorator;
      let gfCutSceneItem = exports('gfCutSceneItem', (_dec = ccclass('gfCutSceneItem'), _dec(_class = class gfCutSceneItem extends Component {
        constructor(...args) {
          super(...args);
          this.callbackFunc = null;
        }

        onLoad() {
          this.node.active = false;
          setOpacity(this.node, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetOnExit'] = this.resetOnExit.bind(this);
        }

        show(content, callback) {
          this.node.active = true;
          this.callbackFunc = callback;
          setOpacity(this.node, 255);
          this.extendShow(content);
        }

        extendShow(content) {
          // Overwrite here
          tween(this.node).then(call(() => {
            log("Content", content);
          })).then(delay(2)).then(call(() => {
            if (this.callbackFunc && typeof this.callbackFunc == 'function') {
              this.callbackFunc();
            }

            this.hide();
          }));
        }

        hide() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.callbackFunc = null;
          setOpacity(this.node, 0);
          this.resetOnExit();
          this.node.removeFromParent();
          this.node.destroy();
        }

        resetOnExit() {}

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneJackpotWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCutSceneItem.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gf3DParticle.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Component, Label, Node, _decorator, v3, tween, Button, gfCutSceneItem, fadeOut, stopAllActions, gfEventEmitter, gfBaseEvents, gf3DParticle, gfDataStore, gfBaseConfig, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfCutSceneItem = module.gfCutSceneItem;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "36a4cPBh6pHfrE6FP8Gk35n", "gfCutSceneJackpotWin", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfCutSceneJackpotWin = exports('gfCutSceneJackpotWin', (_dec = ccclass('gfCutSceneJackpotWin'), _dec2 = property(Component), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = class gfCutSceneJackpotWin extends gfCutSceneItem {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "blackLayer", _descriptor, this);

          _initializerDefineProperty(this, "txtCoin", _descriptor2, this);

          _initializerDefineProperty(this, "particleCoin", _descriptor3, this);

          _initializerDefineProperty(this, "animNode", _descriptor4, this);

          _initializerDefineProperty(this, "winFrame", _descriptor5, this);

          this.tweenCoin = void 0;
          this.winValue = 0;
          this._coinValue = 0;
          this._duration = 9;
          this._removeDecimal = false;
        }

        get coinValue() {
          return this._coinValue;
        }

        set coinValue(value) {
          this._coinValue = value;

          this._updateCoinWin();
        }

        extendShow(content) {
          this.winValue = content.jackpotAmount;
          this.startAnimShow();
        }

        _updateCoinWin() {
          this.txtCoin.string = gfCurrencyCalculator.instance.formatCurrency(this._coinValue, false, this._removeDecimal);
        }

        start() {}

        startAnimShow() {
          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(0, 0, 1));
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BOSS_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(1, 1, 1)
          }).start();
          this.scheduleOnce(() => {
            this.winFrame.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        }

        _tweenCoin() {
          this._removeDecimal = this.winValue % 1 == 0 || this.winValue.toString().includes('.00');
          const superValue = this.winValue * 0.75;
          const megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = ratio * megaValue;
            }
          }).to(this._duration / 3, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = this.coinValue + ratio * (superValue - this.coinValue);
            }
          }).to(this._duration / 3, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = this.coinValue + (this.winValue - this.coinValue) * ratio;
            }
          }).call(() => {
            this.hide();
          });
          this.tweenCoin.start();
        }

        quickShow() {
          if (this.coinValue === this.winValue) {
            return;
          }

          this.winFrame.active = false;
          this.blackLayer.getComponent(Button).interactable = false;
          this.tweenCoin.stop();
          this.tweenCoin = tween(this).to(1, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = this.coinValue + (this.winValue - this.coinValue) * ratio;
            }
          }).delay(1).call(() => {
            this.hide();
          }).start();
        }

        hide(forceClose = false) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          gfDataStore.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);

          if (forceClose) {
            if (this.callbackFunc && typeof this.callbackFunc == "function") {
              this.callbackFunc();
            }

            this.particleCoin.getComponent(gf3DParticle).stopAnimation();
            gfEventEmitter.instance.emit(gfBaseEvents.BOSS.JACKPOT_WIN_AMOUNT_POPUP_CLOSE);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);
            super.hide();
          } else {
            tween(this.node).delay(.5).then(fadeOut(0.5)).call(() => {
              if (this.callbackFunc && typeof this.callbackFunc == "function") {
                this.callbackFunc();
              }

              this.particleCoin.getComponent(gf3DParticle).stopAnimation();
              gfEventEmitter.instance.emit(gfBaseEvents.BOSS.JACKPOT_WIN_AMOUNT_POPUP_CLOSE);
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);
              super.hide();
            }).removeSelf().start();
          }
        }

        onDestroy() {
          stopAllActions(this.node);

          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            return;
          }

          if (this.tweenCoin) {
            gfDataStore.instance.curBGMusic = null;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
            this.tweenCoin.stop();
          }
        }

        resetOnExit() {
          this.particleCoin.getComponent(gf3DParticle).stopAnimation();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleCoin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneLayer.ts", ['cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, Component, isValid, instantiate, _decorator, gfBaseConfig, gfBaseEvents, SetZIndex, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      isValid = module.isValid;
      instantiate = module.instantiate;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1d7bcUxjolBO5vxnSUWWlQw", "gfCutSceneLayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfCutSceneLayer = exports('gfCutSceneLayer', (_dec = ccclass('gfCutSceneLayer'), _dec(_class = class gfCutSceneLayer extends Component {
        constructor(...args) {
          super(...args);
          this._queueCutScene = [];
          this._isPlayingCutScene = false;
          this._currentCutScene = null;
        }

        onLoad() {
          this.initEvents();
          this._isPlayingCutScene = false;
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.CUTSCENE);
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
          registerEvent(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.showCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.hideCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_ALL_CUT_SCENE, this.hideAllCutScene, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.resetOnExit, this);
        }

        showCutScene(prefab = null, content = null, isForcePlay = false) {
          if (!prefab) {
            console.error("No Prefab to init CutScene");
            return;
          }

          const cutSceneData = {
            prefab: prefab,
            content: content
          };

          if (isForcePlay) {
            if (this._isPlayingCutScene && isValid(this._currentCutScene)) {
              this._currentCutScene.hide && this._currentCutScene.hide();
            }

            this._isPlayingCutScene = false;
            this._queueCutScene.length = 0;

            this._queueCutScene.unshift(cutSceneData);

            this._queueCutScene.unshift();
          } else {
            this._queueCutScene.push(cutSceneData);
          }

          this.checkQueue();
        }

        checkQueue() {
          if (this._queueCutScene.length > 0 && !this._isPlayingCutScene) {
            const data = this._queueCutScene.shift();

            const callback = () => this.completedCutScene();

            this._currentCutScene = instantiate(data.prefab);

            this._currentCutScene.setParent(this.node);

            this._isPlayingCutScene = true;
            this._currentCutScene.show && this._currentCutScene.show(data.content, callback);
          }
        }

        completedCutScene() {
          this._isPlayingCutScene = false;

          if (isValid(this._currentCutScene)) {
            this._currentCutScene.destroy();
          }

          this._currentCutScene = null;
          this.checkQueue();
        }

        hideCutScene() {//TODO: implement later
        }

        hideAllCutScene() {
          if (this._isPlayingCutScene && isValid(this._currentCutScene)) {
            this._currentCutScene.hide && this._currentCutScene.hide(true);
          }

          this._queueCutScene.length = 0;
          this._isPlayingCutScene = false;
          this._currentCutScene = null;
        }

        resetOnExit() {
          this.hideAllCutScene();
        }

        refreshPage() {
          removeEvents(this);
        }

        onDestroy() {
          this.refreshPage();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCutSceneItem.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Component, Node, _decorator, tween, Button, gfCutSceneItem, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Node = module.Node;
      _decorator = module._decorator;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfCutSceneItem = module.gfCutSceneItem;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "db4968kfPlKYZIinqpJhYyL", "gfCutSceneWin", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfCutSceneWin = exports('gfCutSceneWin', (_dec = ccclass('gfCutSceneWin'), _dec2 = property(Component), _dec3 = property(Node), _dec(_class = (_class2 = class gfCutSceneWin extends gfCutSceneItem {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "overlay", _descriptor, this);

          _initializerDefineProperty(this, "txtCoin", _descriptor2, this);

          this.CONFIG_TIME = void 0;
          this.winValue = 0;
          this.isQuickShow = void 0;
        }

        onLoad() {
          super.onLoad();
          this.CONFIG_TIME = {
            START: 2,
            IDLE: 6,
            END: 1
          };
        }

        extendShow(content) {
          const {
            GoldReward
          } = content;
          this.resetCutScene();
          this.winValue = GoldReward;
          tween(this.node).call(() => {
            this.animStart();
          }).delay(this.CONFIG_TIME.START).call(() => {
            this.animIdle();
          }).delay(this.CONFIG_TIME.IDLE).call(() => {
            this.animEnd();
          }).start();
        }

        animStart() {}

        animIdle() {
          this.overlay.getComponent(Button).interactable = true;
          this.txtCoin.active = true;
          this.txtCoin.onUpdateValue(this.winValue, (this.CONFIG_TIME.IDLE - 2) * 1000);
        }

        animEnd() {
          this.txtCoin.active = false;
          stopAllActions(this.node);
          tween(this.node).delay(this.CONFIG_TIME.END).call(() => {
            if (this.callbackFunc && typeof this.callbackFunc == 'function') {
              this.callbackFunc();
            }

            this.hide();
          }).start();
        }

        resetCutScene() {
          this.isQuickShow = false;
          this.overlay.getComponent(Button).interactable = false;
          this.txtCoin.resetValue();
          this.txtCoin.active = false;
          stopAllActions(this.node);
        }

        quickShow() {
          if (this.isQuickShow) return; //cc.warn("quickShow");

          this.isQuickShow = true;
          stopAllActions(this.node);
          tween(this.node).call(() => {
            this.txtCoin.onUpdateValue(this.winValue, 500);
          }).delay(1.5).call(() => {
            this.animEnd();
          }).start();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDataStore.ts", ['cc', './gfUtilities.ts', './gfBaseConfig.ts', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, getSkillTypeBySkillID, isEmpty, gfBaseConfig, gfAssetLangController;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
      isEmpty = module.isEmpty;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85e1bKgh5VG1ZymH+Qp38JU", "gfDataStore", undefined);

      class gfDataStore {
        constructor() {
          this.listJackpotBet = void 0;
          this.selfInfo = void 0;
          this.GunValue = void 0;
          this.jackpotValue = void 0;
          this.currentRoom = void 0;
          this.currentSceneName = void 0;
          this.deltaTime = void 0;
          this.mousePos = void 0;
          this.listCatchLaser = void 0;
          this.isEnableBGM = void 0;
          this.isEnableSFX = void 0;
          this.currSound = void 0;
          this.currMusic = void 0;
          this.reachMaxNumBullet = void 0;
          this.botSetting = void 0;
          this.FireSpeed = void 0;
          this.ChangeTarget = void 0;
          this.curBGMusic = void 0;
          this.timeHide = void 0;
          this.listGunSkillData = void 0;
          this.jackpotDragonInfo = void 0;
          this.CurrencyRatio = void 0;
          this.UserBetConfig = void 0;
          this.defaultBetConfig = void 0;
          this.MLMCInfo = void 0;
          this.promotionInfo = void 0;
          this.isPlayingLoadingTransition = false;
          gfDataStore.instance = this;
          this.selfInfo = {
            UserID: "",
            Wallet: 0,
            PromotionWallet: 0,
            Username: "TestUser",
            Avatar: "Avatar0",
            DeskStation: null,
            isLockGun: false,
            currentSkillID: 0,
            autoState: 0,
            listItem: [],
            DeskId: '',
            TargetTime: null,
            cpm: null,
            pek: null,
            isReadyToPlay: false,
            VipLevel: 0,
            EventInfo: null,
            Version: ""
          };
          this.promotionInfo = null;
          this.listJackpotBet = "50-60-70-80-90-a0-b0";
          this.GunValue = [];
          this.jackpotValue = 0;
          this.currentRoom = null;
          this.currentSceneName = null;
          this.deltaTime = 0;
          this.mousePos = null;
          this.listCatchLaser = [];
          this.isEnableBGM = false;
          this.isEnableSFX = false;
          this.currSound = 0;
          this.currMusic = 0;
          this.reachMaxNumBullet = false;
          this.ChangeTarget = 5;
          this.botSetting = {
            fishKindArr: [],
            bulletValue: 0,
            duration: 0,
            botStarted: 0,
            autoCountdown: 0,
            bulletIndex: 0
          };
          this.FireSpeed = {
            NORMAL: 0.25,
            TURBO: 0.15
          };
          this.curBGMusic = null;
          this.timeHide = null;
          this.listGunSkillData = [[], [], [], []]; // For Currency

          this.jackpotDragonInfo = [30000, 60000, 150000, 500000, 2000000, 10000000], //default value
          this.CurrencyRatio = 1, //default value
          this.UserBetConfig = [];
          this.defaultBetConfig = [];
          this.setMLMCInfo();
        }

        setPromotionInfo(data) {
          this.promotionInfo = data;
        }

        getPromotionInfo() {
          return this.promotionInfo;
        }

        getListSkillSkillData() {
          return this.listGunSkillData;
        }

        setListSkillSkillData(listGunSkillData) {
          this.listGunSkillData = listGunSkillData;
        }

        getCurrentSkill() {
          return this.selfInfo.currentSkillID;
        }

        setCurrentSkill(skillID) {
          this.selfInfo.currentSkillID = skillID;
        }

        isHoldingOneShotGunSkill() {
          const {
            ONE_SHOT_GUN
          } = gfBaseConfig.instance.SKILL_TYPE;
          return getSkillTypeBySkillID(this.getCurrentSkill()) == ONE_SHOT_GUN;
        }

        isHoldingRifleGunSkill() {
          const {
            RIFLE_GUN
          } = gfBaseConfig.instance.SKILL_TYPE;
          return getSkillTypeBySkillID(this.getCurrentSkill()) == RIFLE_GUN;
        }

        isHoldingGunSkill() {
          return this.selfInfo.currentSkillID > 0;
        }

        getLockGun() {
          return this.selfInfo.isLockGun;
        }

        setLockGun(lock = false) {
          this.selfInfo.isLockGun = lock;
        }

        setSelfInfo(data) {
          if (!isEmpty(data)) {
            Object.keys(data).forEach(key => {
              this.selfInfo[key] = data[key];
            });
          }
        }

        getSelfInfo() {
          return this.selfInfo;
        }

        getJackpotValue() {
          return this.jackpotValue;
        }

        setDataStore(dataStore) {
          if (!isEmpty(dataStore)) {
            Object.keys(dataStore).forEach(key => {
              this[key] = dataStore[key];
            });
          }
        }

        parseLoginGame(data) {
          if (!isEmpty(data)) {
            if (!data.UserBetConfig) {
              data.UserBetConfig = data.BetConfig;
            }

            Object.keys(data).forEach(key => {
              this.selfInfo[key] = data[key];
            });

            if (data.BetConfig) {
              this.defaultBetConfig = data.BetConfig;
            }

            this.UserBetConfig = data.UserBetConfig ? data.UserBetConfig : this.defaultBetConfig;
            this.parseBetConfig(this.getUserBetConfig());

            if (data.KindID) {
              this.currentRoom = data.KindID;
            }

            if (data.itemInfo) {
              this.parseListItemConfig(data.itemInfo.listItem);
            }

            this.parseFireSpeed(data.FireSpeed);

            if (data.TargetTime) {
              this.ChangeTarget = data.TargetTime;
            }
          }
        }

        parseFireSpeed(data) {
          if (!data) return;
          this.FireSpeed.NORMAL = data[1];
          this.FireSpeed.TURBO = data[0];
        }

        getCurrentSceneName() {
          return this.currentSceneName;
        }

        getCurrentRoom() {
          return this.currentRoom;
        }

        setCurrentRoom(kind) {
          this.currentRoom = kind;
        } //ID = 1 : ice


        parseListItemConfig(lstItem) {
          for (let i = 0; i < lstItem.length; i++) {
            this.selfInfo.listItem[lstItem[i].ID] = lstItem[i].amount;
          }
        }

        parseBetConfig(data) {
          for (let i = 0; i < data.length; ++i) {
            this.GunValue[i] = data[i];
          }
        }

        clearSelfInfo() {
          this.selfInfo.DeskId = '';
        }

        getSelfDeskStation() {
          return this.selfInfo.DeskStation;
        }

        getBulletIndex(bulletMultiple) {
          for (let i = 0; i < this.GunValue.length; ++i) {
            if (bulletMultiple == this.GunValue[i]) return i;
          }

          return 0;
        }

        getGunValue() {
          return this.GunValue;
        }

        getTotalGun() {
          return this.GunValue.length;
        }

        checkWallet() {
          return this.selfInfo.Wallet > 0;
        }

        getWallet() {
          return this.selfInfo.Wallet;
        }

        getMousePos() {
          return this.mousePos;
        }

        getListCatchLaser() {
          return this.listCatchLaser;
        }

        getIsEnableSFX() {
          return this.isEnableSFX;
        }

        setIsEnableSFX(isEnableSFX) {
          this.isEnableSFX = isEnableSFX;
        }

        getIsEnableBGM() {
          return this.isEnableBGM;
        }

        setIsEnableBGM(isEnableBGM) {
          this.isEnableBGM = isEnableBGM;
        }

        getCurrentSFXVolume() {
          return this.currSound;
        }

        setCurrentSFXVolume(volume) {
          this.currSound = volume;
        }

        getCurrentBGMVolume() {
          return this.currMusic;
        }

        setCurrentBGMVolume(volume) {
          this.currMusic = volume;
        }

        getCurBGMusic() {
          return this.curBGMusic;
        }

        setCurBGMusic(curBGMusic) {
          this.curBGMusic = curBGMusic;
        }

        updateDeltaTime(serverTime) {
          if (serverTime) {
            this.deltaTime = Date.now() - serverTime;
          } else {
            this.deltaTime = 0;
          }
        }

        getTime() {
          return Date.now();
        }

        setBotSetting(data) {
          if (!isEmpty(data)) {
            Object.keys(data).forEach(key => {
              this.botSetting[key] = data[key];
            });
          }
        }

        getBotSetting() {
          return this.botSetting;
        }

        isReachMaxNumBullet() {
          return this.reachMaxNumBullet;
        }

        getTimeHide() {
          return this.timeHide;
        }

        getIsReadyToPlay() {
          return this.selfInfo.isReadyToPlay;
        }

        getItemSkillById(id) {
          //@ts-ignore
          return this.selfInfo.listItem.find(e => e.ID === id);
        }

        setListItemSkillByData(data) {
          if (!isEmpty(data)) {
            const listItem = this.selfInfo.listItem; //@ts-ignore

            for (let i = 0; i < listItem.length; i++) {
              if (listItem[i].ID === data.ID) {
                listItem[i] = data;
              }
            }
          }
        } // Currency method


        getUserTypeOfCurrency() {
          return this.MLMCInfo.currency;
        }

        getCurrencyRatio() {
          return this.CurrencyRatio;
        }

        setCurrencyConfig(data) {
          if (data.TypeOfCurrency) {
            this.MLMCInfo.currency = data.TypeOfCurrency;
          }

          if (data.CurrencyRatio) {
            this.CurrencyRatio = data.CurrencyRatio;
          }

          if (data.JackpotInfo && data.JackpotInfo.length > 0) {
            this.jackpotDragonInfo = data.JackpotInfo;
          }
        }

        getMLMCInfo() {
          return this.MLMCInfo;
        }

        setMLMCInfo() {
          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          }

          this.MLMCInfo = {
            lang: gfAssetLangController.instance ? gfAssetLangController.instance.language : gfBaseConfig.instance.DefaultLanguage,
            currency: "VND" //default value - will be set later

          };
        }

        getUserBetConfig() {
          return this.UserBetConfig;
        }

        getDefaultBetConfig() {
          return this.defaultBetConfig;
        }

        getJackpotDragonInfo() {
          return this.jackpotDragonInfo;
        }

        getEventInfo() {
          return this.selfInfo.EventInfo;
        }

        clearEventInfo() {
          this.selfInfo.EventInfo = null;
        }

        setCurrentRoomJackpotValue() {}

        destroy() {
          gfDataStore.instance = null;
        }

      }

      exports('default', gfDataStore);
      gfDataStore.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDecorBullet.ts", ['cc', './gfDataStore.ts', './gfBullet.ts'], function (exports) {
  var cclegacy, Color, Component, Sprite, _decorator, gfDataStore, gfBullet;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      Component = module.Component;
      Sprite = module.Sprite;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBullet = module.gfBullet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "659e8g3AfFM3b3ykFWYRyej", "gfDecorBullet", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const COLOR_BY_BULLET = {
        0: Color.RED,
        1: Color.YELLOW,
        2: Color.GRAY,
        3: Color.MAGENTA,
        4: Color.GREEN,
        5: Color.BLACK,
        6: Color.CYAN,
        DEFAULT: Color.WHITE
      };
      let gfDecorBullet = exports('gfDecorBullet', (_dec = ccclass('gfDecorBullet'), _dec(_class = class gfDecorBullet extends Component {
        constructor(...args) {
          super(...args);
          this._compoBullet = null;
        }

        onLoad() {
          this._compoBullet = this.node.getComponent(gfBullet);
        }

        onEnable() {
          this.node.getComponent(Sprite).color = COLOR_BY_BULLET[gfDataStore.instance.getBulletIndex(this._compoBullet._BulletMultiple)];
        }

        onDisable() {
          this.node.getComponent(Sprite).color = COLOR_BY_BULLET.DEFAULT;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDecorFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color, Size, Sprite, UITransform, BoxCollider2D, v2, gfBaseFish, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
      Size = module.Size;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      BoxCollider2D = module.BoxCollider2D;
      v2 = module.v2;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a523dpaHMtKH6UePp3CuZsF", "gfDecorFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfDecorFish = exports('gfDecorFish', (_dec = ccclass('gfDecorFish'), _dec2 = property(Label), _dec(_class = (_class2 = class gfDecorFish extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "labelFishKind", _descriptor, this);

          this._fishKind = 0;
          this._fish = null;
          this._fishNode = null;
          this.tempFunc = null;
          this.initFishDataBinding = null;
          this.tempAddCompo = null;
          this.resetColorBinding = null;
          this.RANGE_FISH = {
            SMALL: {
              Color: new Color(144, 238, 144),
              Size: new Size(50, 30)
            },
            MEDIUM: {
              Color: new Color(173, 216, 230),
              Size: new Size(100, 60)
            },
            SPECIAL: {
              Color: new Color(255, 127, 80),
              Size: new Size(200, 120)
            },
            BIG: {
              Color: Color.YELLOW,
              Size: new Size(170, 110)
            }
          };
        }

        onLoad() {
          this._fish = this.node.getComponent(gfBaseFish);
          this._fishNode = this.node.getChildByName("mainFish");
          this.initFishDataBinding = this.initFishData.bind(this);
          this.resetColorBinding = this.resetColor.bind(this);

          this._setup(this._fish);

          this.tempAddCompo = this.node.addComponent.bind(this.node);
          this.node.addComponent = this.addCompo.bind(this);
        }

        _setup(obj) {
          this.tempFunc = obj.initFishData.bind(obj);
          obj.initFishData = this.initFishDataBinding;
          obj.resetColor = this.resetColorBinding;
        }

        addCompo(obj) {
          const newCompo = this.tempAddCompo(obj);

          if (newCompo instanceof gfBaseFish) {
            this._setup(newCompo);
          }

          return newCompo;
        }

        resetColor() {
          const configFish = this.checkFishByKind(this._fishKind);
          this._fishNode.getComponent(Sprite).color = configFish.Color;
        }

        initFishData(data) {
          setOpacity(this.labelFishKind.node, 255);
          const configFish = this.checkFishByKind(data.FishKind);
          this._fishKind = data.FishKind;
          this.labelFishKind.string = data.FishKind.toString();
          this.resetColor();

          this._fishNode.getComponent(UITransform).setContentSize(configFish.Size);

          this.setBoxCollider(configFish.Size);
          this._fish._maxWidth = this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x;
          this._fish._offsetX = this.node.getComponent(BoxCollider2D).offset.x * this.node.scale.x;
          this.tempFunc(data);
        }

        setBoxCollider(size) {
          const box = this.node.getComponents(BoxCollider2D);
          box[0].enabled = true;
          box[0].offset = v2(0, 0);
          box[0].size.width = size.width;
          box[0].size.height = size.height;
        }

        checkFishByKind(kind = 0) {
          if (kind < 10) {
            return this.RANGE_FISH.SMALL;
          } else if (kind < 20) {
            return this.RANGE_FISH.MEDIUM;
          } else if (kind < 25) {
            return this.RANGE_FISH.BIG;
          } else {
            return this.RANGE_FISH.SPECIAL;
          }
        }

        update(dt) {
          this.labelFishKind.node.setScale(this.node.scale);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelFishKind", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDecorGun.ts", ['cc', './gfPlayer.ts'], function (exports) {
  var cclegacy, Color, Size, Component, Sprite, UITransform, _decorator, gfPlayer;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      Size = module.Size;
      Component = module.Component;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e0289xWnedOsLwCS1ln3hna", "gfDecorGun", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const GUN_CONFIG = {
        0: {
          color: Color.RED,
          size: new Size(150, 40)
        },
        1: {
          color: Color.YELLOW,
          size: new Size(150, 50)
        },
        2: {
          color: Color.GRAY,
          size: new Size(150, 60)
        },
        3: {
          color: Color.MAGENTA,
          size: new Size(150, 70)
        },
        4: {
          color: Color.GREEN,
          size: new Size(150, 80)
        },
        5: {
          color: Color.BLACK,
          size: new Size(150, 90)
        },
        6: {
          color: Color.CYAN,
          size: new Size(150, 100)
        },
        DEFAULT: {
          color: Color.WHITE,
          size: new Size(10, 10)
        }
      };
      let gfDecorGun = exports('gfDecorGun', (_dec = ccclass('gfDecorGun'), _dec(_class = class gfDecorGun extends Component {
        constructor(...args) {
          super(...args);
          this._player = null;
          this.cacheFun = null;
        }

        onLoad() {
          this._player = this.node.getComponent(gfPlayer);
          this.cacheFun = this._player._updateGun.bind(this._player);
          this._player._updateGun = this.updateGun.bind(this);
        }

        updateGun() {
          this.cacheFun();

          const config = GUN_CONFIG[this._player.getGunIndex()];

          this._player.gunNode.getComponent(Sprite).color = config.color;

          this._player.gunNode.getComponent(UITransform).setContentSize(config.size);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragon.ts", ['cc', './AnimUtils.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfBossBase.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfDragonConfig.ts', './gfDragonEvent.ts'], function (exports) {
  var cclegacy, Color, sp, BoxCollider2D, isValid, UITransform, v3, tween, _decorator, setOpacity, gfDataStore, gfEventEmitter, gfBossBase, gfBaseConfig, gfBaseEvents, stopAllActions, gfMoveBy, fadeOut, SetZIndex, isPointInScreen, updateSpineTime, gfDragonConfig, gfDragonEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      sp = module.sp;
      BoxCollider2D = module.BoxCollider2D;
      isValid = module.isValid;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBossBase = module.gfBossBase;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      gfMoveBy = module.gfMoveBy;
      fadeOut = module.fadeOut;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      isPointInScreen = module.isPointInScreen;
      updateSpineTime = module.updateSpineTime;
    }, function (module) {
      gfDragonConfig = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e3b05rbEilHs4RqghzQKo6Y", "gfDragon", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const FLAG_COLOR = new Color(230, 230, 230, 255);
      const TIME_CONFIG = {
        TIME_ANIM_SWIM_IN: 5.997,
        TIME_ANIM_SWIM_LOOP: 29.985,
        TIME_ANIM_SWIM_OUT: 5.997,
        BASE_TIME_SCALE: 0.667,
        TOTAL_LIVE_TIME: 42
      };
      let gfDragon = exports('gfDragon', (_dec = ccclass('gfDragon'), _dec(_class = class gfDragon extends gfBossBase {
        constructor(...args) {
          super(...args);
          this.ANIMATION = {
            In: "Swim_In",
            Loop: "Swim_Loop",
            Out: "Swim_Out",
            In_L: "Swim_In_L",
            In_R: "Swim_In_R"
          };
          this.head = null;
          this.tail = null;
          this.body = null;
          this._isLoaded = false;
          this._isOutScreen = false;
          this._isLeft = false;
          this.listBoneName = [];
          this.bone = [];
        }

        onLoad() {
          SetZIndex(this.node, gfDragonConfig.instance.BOTTOM_Z_INDEX.DRAGON);
          this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
        }

        initFishData(data) {
          this.ANIMATION.In = data.isL ? this.ANIMATION.In_R : this.ANIMATION.In_L;
          super.initFishData(data);
          this._isLeft = data.isL;
          this._isDie = false;
          setOpacity(this.node, 255);
          stopAllActions(this.fishAnim.node);
          this.node.active = true;
          this._isOutScreen = true;
          this.fishAnim.color = Color.WHITE;
          this.unscheduleAllCallbacks();
          const timeLost = data.BuildTick ? Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000) : 0;
          const timeRemain = TIME_CONFIG.TOTAL_LIVE_TIME - timeLost;

          if (!this._isLoaded) {
            this.setupBones();
          }

          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.CREATE);
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.BACKGROUND_MUSIC_DRAGON);
          this._initialized = true;
          this.startMoving(timeRemain);
        }

        startMoving(timeRemain) {
          this.node.setPosition(gfBaseConfig.instance.AppSize.Width / 2, gfBaseConfig.instance.AppSize.Height / 2);
          const {
            BASE_TIME_SCALE,
            TIME_ANIM_SWIM_OUT,
            TIME_ANIM_SWIM_LOOP,
            TIME_ANIM_SWIM_IN
          } = TIME_CONFIG;
          this.fishAnim.timeScale = BASE_TIME_SCALE;

          if (timeRemain <= TIME_ANIM_SWIM_OUT) {
            this.setDragonAnim([this.ANIMATION.Out], TIME_ANIM_SWIM_OUT - timeRemain);
          } else if (timeRemain <= TIME_ANIM_SWIM_OUT + TIME_ANIM_SWIM_LOOP) {
            const swimLoopTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT;
            this.setDragonAnim([this.ANIMATION.Loop, this.ANIMATION.Out], TIME_ANIM_SWIM_LOOP - swimLoopTimeLeft);
          } else {
            const swimInTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT - TIME_ANIM_SWIM_LOOP;
            const timePassed = Math.max(TIME_ANIM_SWIM_IN - swimInTimeLeft, 0);
            this.setDragonAnim([this.ANIMATION.In, this.ANIMATION.Loop, this.ANIMATION.Out], timePassed);
          }
        }

        setupBones() {
          this.listBox = this.node.getComponentsInChildren(BoxCollider2D);
          this.head = this.node.getChildByName('Box1');
          this.tail = this.node.getChildByName('Box12');
          this.body = this.node.getChildByName('Box6');
          this.listBoneName = ["Head", "Body 3", "Body 6", "Body 9", "Body 12", "Body 15", "Body 18", "Body 21", "Body 24", "Body 27", "Body 30", "Body 33", "Body 36", "Body 39", "Body 42", "Body 45", "Body 47", "All Tail Position"];

          for (let i = 0; i < this.listBoneName.length; i++) {
            this.bone[i] = this.fishAnim.findBone(this.listBoneName[i]);
          }

          this._isLoaded = true;
        }

        checkOutScreen() {
          if (!this._initialized) return;
          const lastState = this._isOutScreen;
          this._isOutScreen = !(isPointInScreen(this.head.worldPosition) || isPointInScreen(this.tail.worldPosition));

          if (lastState && !this._isOutScreen) {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME);
          }

          return this._isOutScreen;
        }

        getLockPositionByNodeSpace(node) {
          if (!isValid(this.node.parent)) return null;
          const positionList = [this.head.worldPosition, this.body.worldPosition, this.tail.worldPosition];

          for (let i = 0; i < positionList.length; ++i) {
            if (isPointInScreen(this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(positionList[i]))) {
              return node.getComponent(UITransform).convertToNodeSpaceAR(positionList[i]);
            }
          }

          return node.getComponent(UITransform).convertToNodeSpaceAR(this.tail.worldPosition);
        }

        getListBox() {
          return this.listBox;
        }

        getLockPositionByWorldSpace() {
          const positionList = [this.head.worldPosition, this.tail.worldPosition, this.body.worldPosition];

          for (let i = 0; i < positionList.length; ++i) {
            if (isPointInScreen(this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(positionList[i]))) {
              return positionList[i];
            }
          }

          return this.tail.worldPosition;
        }

        onHit() {
          this.fishAnim.color = FLAG_COLOR;
          this.scheduleOnce(() => {
            this.fishAnim.color = Color.WHITE;
          }, 0.1);
        }

        checkOutScene() {
          return this._isOutScreen;
        }

        onDie(isResume = false) {
          super.onDie();

          if (!isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        }

        setDragonAnim(animList, timePassed = 0) {
          this.fishAnim.setStartListener(track => {
            this.scheduleCheckOutScreen(track.animation.name);
          });
          this.fishAnim.setAnimation(0, animList[0], false);

          for (let i = 1; i < animList.length; ++i) {
            this.fishAnim.addAnimation(0, animList[i], false);
          }

          if (timePassed > 0) {
            updateSpineTime(this.fishAnim, timePassed * TIME_CONFIG.BASE_TIME_SCALE);
          }
        }

        scheduleCheckOutScreen(animName = this.ANIMATION.Loop) {
          if (!this._isDie) {
            if (animName === this.ANIMATION.In || animName === this.ANIMATION.Out) {
              this.checkOutScreen();
              this.schedule(this.checkOutScreen, 0.2);
            } else {
              this.unschedule(this.checkOutScreen);
              this._isOutScreen = false;
            }
          }
        }

        onCatch(data) {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_DIE);
          this.playEffectDie();
        }

        playEffectDie() {
          this.unschedule(this.checkOutScreen);
          this.fishAnim.timeScale = 0;
          stopAllActions(this.fishAnim.node);
          this.fishAnim.setCompleteListener(() => {});
          this.fishAnim.clearTrack(0);
          const explosionBones = [0, 14, 6, 17, 9];
          const explosionPositions = [];

          for (let i = 0; i < explosionBones.length; ++i) {
            explosionPositions.push(v3(this.bone[explosionBones[i]].worldX, this.bone[explosionBones[i]].worldY));
          }

          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.SMALL_EXPLOSION, explosionPositions);
          tween(this.node).then(gfMoveBy(0.1, 0, 10)).then(gfMoveBy(0.1, 0, -10)).then(gfMoveBy(0.1, 0, -10)).then(gfMoveBy(0.1, 10, 10)).then(gfMoveBy(0.1, -10, 0)).then(gfMoveBy(0.1, -10, 0)).then(gfMoveBy(0.1, 10, 0)).then(gfMoveBy(0.1, 0, 10)).then(gfMoveBy(0.1, 0, -10)).then(gfMoveBy(0.1, 0, -10)).then(gfMoveBy(0.1, 10, 10)).then(gfMoveBy(0.1, -10, 0)).then(gfMoveBy(0.1, -10, 0)).then(gfMoveBy(0.1, 10, 0)).start();
          this.fishAnim.color = Color.RED;
          tween(this.node).call(() => {
            this.fishAnim.color = Color.WHITE;
          }).delay(0.35).call(() => {
            this.fishAnim.color = Color.RED;
          }).delay(0.35).call(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.BIG_EXPLOSION, this.node.position);
          }).then(fadeOut(0.1)).delay(0.75).call(() => {
            this.onDie();
          }).start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonAssetsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfReferenceManager.ts', './gfBossAssetsManager.ts', './gfDragonConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, changeParent, gfReferenceManager, gfBossAssetsManager, gfDragonConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBossAssetsManager = module.gfBossAssetsManager;
    }, function (module) {
      gfDragonConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "2dde2G99utF6L8VI9XRjd3D", "gfDragonAssetsManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfDragonAssetsManager = exports('gfDragonAssetsManager', (_dec = ccclass('gfDragonAssetsManager'), _dec2 = property(Node), _dec(_class = (_class2 = (_class3 = class gfDragonAssetsManager extends gfBossAssetsManager {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "jackpotInfo", _descriptor, this);
        }

        initBossAssetsManager() {
          gfDragonAssetsManager.instance = this;
          this.addJackpotInfo();
          super.initBossAssetsManager();
        }

        removeBossAssetsManager() {
          super.removeBossAssetsManager();
          this.removeJPInfoInRoom();
        }

        addJackpotInfo() {
          this.jackpotInfo.active = true;
          changeParent(this.jackpotInfo, gfReferenceManager.instance.getMidLayer());
        }

        removeJPInfoInRoom() {
          this.jackpotInfo.active = false;
          this.jackpotInfo.removeFromParent();
          this.jackpotInfo.destroy();
        }

        removeConfig() {
          var _gfDragonConfig$insta;

          (_gfDragonConfig$insta = gfDragonConfig.instance) == null ? void 0 : _gfDragonConfig$insta.destroy();
        }

      }, _class3.instance = null, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotInfo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonBall.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts', './gfUtilities.ts', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfDragonEvent.ts', './gfDragonConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, Node, _decorator, UITransform, v3, Vec3, tween, gfNode, autoEnum, SetZIndex, setOpacity, getRandomInt, randRange, fadeIn, fadeOut, rotateBy, moveTo, scaleTo, v3f, stopAllActions, gfEventEmitter, gfDragonEvent, gfDragonConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Node = module.Node;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      v3 = module.v3;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      autoEnum = module.autoEnum;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
      randRange = module.randRange;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      rotateBy = module.rotateBy;
      moveTo = module.moveTo;
      scaleTo = module.scaleTo;
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      gfDragonConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "d9c9frW3PZCmJJSX44SpjTm", "gfDragonBall", undefined);

      const STATE = autoEnum(["Invalid", "Dropping", "InTray", "InJackpotStar"]);
      const {
        ccclass,
        property
      } = _decorator;
      let gfDragonBall = exports('gfDragonBall', (_dec = ccclass('gfDragonBall'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = class gfDragonBall extends gfNode {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "ballSprite", _descriptor, this);

          _initializerDefineProperty(this, "backEff", _descriptor2, this);

          _initializerDefineProperty(this, "frontEff", _descriptor3, this);

          _initializerDefineProperty(this, "ballSpark", _descriptor4, this);

          _initializerDefineProperty(this, "hitGlow", _descriptor5, this);

          _initializerDefineProperty(this, "hitLight", _descriptor6, this);

          _initializerDefineProperty(this, "fireEfx", _descriptor7, this);

          this._state = void 0;
          this.baseScale = void 0;
          this.kind = void 0;
          this.BASE_SCALE_CONFIG = {
            0: 0.3,
            1: 0.3,
            2: 0.3,
            3: 0.3,
            4: 0.3,
            5: 0.3,
            6: 0.4
          };
        }

        initAssets(config) {
          this.ballSprite.spriteFrame = config.asset;
          this.baseScale = this.BASE_SCALE_CONFIG[config.kind];
          this.kind = config.kind;
          SetZIndex(this.node, gfDragonConfig.instance.Z_INDEX.DRAGON_BALL);
        }

        dropToPlayer(dragonPosition, playerBallHolder, deskStation) {
          const destination = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(playerBallHolder.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          setOpacity(this.ballSprite.node, 0);
          setOpacity(this.ballSpark, 0);
          setOpacity(this.hitGlow, 0);
          setOpacity(this.hitLight, 0);
          setOpacity(this.frontEff, 0); //@ts-ignore

          this._state = STATE.Dropping;
          const dropTime = 0.5;
          const sparkTime = 0.25;
          const zoomTime = 1;
          const stopTime = 0.5;
          const randomX = getRandomInt(-200, 200);
          const randomY = getRandomInt(-150, 150);
          const randomPos = new Vec3(randomX, randomY, 0);
          this.node.setPosition(dragonPosition);
          tween(this.ballSpark).then(fadeIn(sparkTime)).then(fadeOut(sparkTime)).start();
          tween(this.node).delay(sparkTime).call(() => {
            this.frontEff.active = true;
            this.backEff.active = true;
            setOpacity(this.frontEff, 255);
            setOpacity(this.backEff, 255);
            this.frontEff.scale.set(v3(0, 0, 0));
            this.backEff.scale.set(v3(0, 0, 0));
            tween(this.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(this.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(this.backEff).repeatForever(rotateBy(1, 360)).start();
            this.fireEfx.scale.set(v3(0, 0, 0));
            setOpacity(this.fireEfx, 255);
            this.fireEfx.active = true;
            tween(this.fireEfx).to(zoomTime, {
              scale: v3(2.5, 2.5, 1)
            }).start();
            tween(this.fireEfx).repeatForever(rotateBy(1, 360)).start();
          }).delay(zoomTime).parallel(moveTo(stopTime, randomPos.x, randomPos.y), tween().call(() => {
            tween(this.frontEff).then(fadeOut(0.1)).start();
            tween(this.ballSprite).then(fadeIn(0.1)).start();
          })).delay(stopTime).parallel(moveTo(dropTime, destination.x, destination.y), scaleTo(dropTime, this.baseScale)).call(() => {
            this.addToPlayer(playerBallHolder); //@ts-ignore

            this._state = STATE.InTray;
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.DONE_BALL_DROP, deskStation);
          }).start();
        }

        addToPlayer(playerBallHolder) {
          setOpacity(this.frontEff, 0);
          setOpacity(this.ballSprite.node, 255);
          this.node.scale = new Vec3(this.baseScale, this.baseScale, this.baseScale);
          this.node.parent = playerBallHolder;
          this.node.position = v3f(0);
          setOpacity(this.backEff, 0);
          setOpacity(this.fireEfx, 0);
          this.hitGlow.scale = v3f(3);
          tween(this.hitGlow).repeatForever(tween().then(fadeIn(1)).then(fadeOut(1))).start();
          setOpacity(this.hitLight, 255);
          this.hitLight.scale = v3f(0);
          tween(this.hitLight).then(scaleTo(0.15, 4)).then(fadeOut(0.15)).start();
        }

        playGlowEffect() {
          this.frontEff.active = false;
          if (this.backEff.active) this.backEff.active = false;
          this.frontEff.active = true;
          setOpacity(this.frontEff, 0);
          tween(this.frontEff).then(fadeIn(0.25)).delay(0.15).repeatForever(tween().then(scaleTo(0.15, 1.1)).then(scaleTo(0.15, 1))).start();
        }

        playLightEffect() {
          if (this.frontEff.active) this.stopGlowEffect();
          this.backEff.active = true;
          setOpacity(this.backEff, 0);
          tween(this.backEff).then(fadeIn(0.25)).call(() => {
            tween(this.backEff).repeatForever(tween().parallel(tween().then(scaleTo(0.25, 0.9)).then(scaleTo(0.25, 1.05)), rotateBy(0.5, -90))).start();
          }).start();
        }

        stopGlowEffect() {
          stopAllActions(this.frontEff);
          this.frontEff.scale = v3f(1);
          tween(this.frontEff).then(fadeOut(0.25)).call(() => {
            this.frontEff.active = false;
          }).start();
        }

        moveToJackpotStar({
          delay,
          position
        }) {
          //@ts-ignore
          this._state = STATE.InJackpotStar;
          this.playGlowEffect();
          tween(this.node).delay(delay).to(1, {
            position,
            scale: v3(1, 1, 1)
          }).delay(0.25).call(() => {
            this.playLightEffect();
          }).start();
        }

        flyAway(flyTime = 1) {
          const rand = randRange(10, 14) / 10;
          tween(this.node).parallel(moveTo(flyTime * rand, this.node.position.x * 15, this.node.position.y * 15), scaleTo(flyTime * rand, 5)).call(() => {
            this.returnPool();
          }).start();
        }

        moveToBigWinEffect({
          ballIndex,
          position,
          playerIndex
        }) {
          const flyTime = 0.5;
          const delayEach = 0.2;
          tween(this.node).delay(ballIndex * delayEach).parallel(moveTo(flyTime, position.x, position.y), scaleTo(flyTime, 1, 1)).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_BALL_HIDE);
          }).then(scaleTo(flyTime, 0)).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.BALL_ENTER_BIGWIN_WHEEL, playerIndex);
          }).call(() => {
            this.returnPool();
          }).start();
        }

        isDropping() {
          //@ts-ignore
          return this._state == STATE.Dropping;
        }

        isInJackpotStar() {
          //@ts-ignore
          return this._state == STATE.InJackpotStar;
        }

        unuse() {
          super.unuse(); //@ts-ignore

          this._state = STATE.Invalid;
          stopAllActions(this.ballSprite.node);
          stopAllActions(this.backEff);
          stopAllActions(this.frontEff);
          stopAllActions(this.ballSpark);
          stopAllActions(this.hitGlow);
          stopAllActions(this.hitLight);
          stopAllActions(this.fireEfx);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ballSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "backEff", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frontEff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ballSpark", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hitGlow", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "hitLight", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fireEfx", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonConfig.ts", ['cc', './gfBossConfig.ts', './gfBaseConfig.ts'], function (exports) {
  var cclegacy, _decorator, gfBossConfig, gfBaseConfig;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossConfig = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "251d9YJQoVDjoQsYWq9EBqn", "gfDragonConfig", undefined);

      const {
        ccclass
      } = _decorator;
      const lodash = globalThis._;
      let gfDragonConfig = exports('default', (_dec = ccclass('gfDragonConfig'), _dec(_class = (_class2 = class gfDragonConfig extends gfBossConfig {
        constructor() {
          super();
          gfDragonConfig.instance = this;
          this.BOTTOM_Z_INDEX = {
            DRAGON: 900
          };
          this.TOP_Z_INDEX = {
            DRAGON_BALL: 2300
          };
          this.BOSS_BACKGROUND_CONFIG = 'DRAGON';
          this.POOL_TYPE_NAME = {
            DRAGON_BALL: "DragonBall"
          };
        }

        mergeToBaseConfig() {
          const notifyTypeDragon = 4;
          const bossKind = this.bossKind;
          const config = {
            BOSS_CONFIG: {
              DRAGON: bossKind
            },
            PRIORITY_FISH: [bossKind],
            NOTIFY_TYPE: {
              MESSAGE_DRAGON_BALL: notifyTypeDragon
            },
            NOTIFY_CONFIG: {
              [notifyTypeDragon]: {
                userName: 0,
                countBall: 1,
                goldReward: 2
              }
            }
          };
          lodash.merge(gfBaseConfig.instance, gfBaseConfig.instance, config);
        }

      }, _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonEffectLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfPoolManager.ts', './gfReferenceManager.ts', './gfBossController.ts', './gfBossEffectLayer.ts', './gfEffectLayer.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfBallTray.ts', './gfDragonConfig.ts', './gfDragonEvent.ts', './gfNetworkGameEvent.ts', './gfLocalize.ts', './loadConfigAsync.ts', './utils.ts', './gfGunSkillController.ts', './gfCustomDataType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, instantiate, UITransform, gfDataStore, gfEventEmitter, gfPoolManager, gfReferenceManager, gfBossController, gfBossEffectLayer, gfEffectLayer, gfBaseConfig, gfBaseEvents, registerEvent, SetZIndex, getPositionInOtherNode, GfBallTray, gfDragonConfig, gfDragonEvent, gfNetworkGameEvent, gfLocalize, loadConfigAsync, changeParent, gfGunSkillController, WheelType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      gfBossEffectLayer = module.gfBossEffectLayer;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      getPositionInOtherNode = module.getPositionInOtherNode;
    }, function (module) {
      GfBallTray = module.GfBallTray;
    }, function (module) {
      gfDragonConfig = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      gfGunSkillController = module.gfGunSkillController;
    }, function (module) {
      WheelType = module.WheelType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "39a4cuo0sxGG5dKa/7RFlb6", "gfDragonEffectLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfDragonEffectLayer = exports('gfDragonEffectLayer', (_dec = ccclass('gfDragonEffectLayer'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = class gfDragonEffectLayer extends gfBossEffectLayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "ballTrayPrefab", _descriptor, this);

          _initializerDefineProperty(this, "dragonDieSmallExplosionPrefab", _descriptor2, this);

          _initializerDefineProperty(this, "jackpotStarPrefab", _descriptor3, this);

          _initializerDefineProperty(this, "cutSceneJackpotPrefab", _descriptor4, this);

          this._listBallTray = [];
          this._ballList = [];
          this._ballDropping = 0;
          this._endData = null;
          this.jackpotStarFX = null;
          this._bigWinPlaying = 0;
          this.needUpdateWallet = false;
        }

        get endData() {
          return this._endData;
        }

        set endData(data) {
          this._endData = data;
        }

        onLoad() {
          super.onLoad();
        }

        initEvents() {
          super.initEvents();
          registerEvent(gfDragonEvent.DRAGON.WARNING, this.onDragonWaring, this);
          registerEvent(gfDragonEvent.DRAGON.ON_BALL_DROPPED, this.onDragonBallDropped, this);
          registerEvent(gfDragonEvent.DRAGON.DONE_BALL_DROP, this.onBallDropDone, this);
          registerEvent(gfDragonEvent.DRAGON.ON_END, this.onDragonEnd, this);
          registerEvent(gfDragonEvent.DRAGON.DONE_ALL_BIG_WIN, this.onHideBallTray, this);
          registerEvent(gfDragonEvent.DRAGON.BIG_EXPLOSION, this.onPlayBigExplosion, this);
          registerEvent(gfDragonEvent.DRAGON.SMALL_EXPLOSION, this.onPlaySmallExplosion, this);
          registerEvent(gfDragonEvent.DRAGON.SHOW_JACKPOT_WINAMOUNT, this.onJackpotStarDone, this);
          registerEvent(gfDragonEvent.DRAGON.ADD_BALL_TO_PLAYER, this.addBallToPlayer, this);
          registerEvent(gfDragonEvent.DRAGON.BALL_ENTER_BIGWIN_WHEEL, this.onWheelEnterBall, this);
          registerEvent(gfDragonEvent.DRAGON.DONE_PLAYER_BIGWIN, this.onDonePlayerBigWin, this);
          registerEvent(gfDragonEvent.DRAGON.DONE_JACKPOT_STAR, this.playDragonBallBigWin, this);
          registerEvent(gfDragonEvent.DRAGON.CREATE, this.onDragonCreated, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_BOSS_JACKPOT, this.playDragonBallJackpot, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.onEnterGameRoom, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.onExitGameRoom, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.BOSS.JACKPOT_WIN_AMOUNT_POPUP_CLOSE, this.updatePlayerWallet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, this.playerChangeGun, this);
        }

        initEffectLayer() {
          this.createBallTrays();
        }

        removeEffectLayer() {
          this.onRefresh();

          for (let i = 0; i < this._listBallTray.length; i++) {
            const tray = this._listBallTray[i];
            tray.hide();
            tray.node.removeFromParent();
          }

          this._listBallTray.length = 0;
        }

        onEnterGameRoom(data) {
          this.onRefresh();
          const dragon = gfBossController.instance.getBossByKind(gfDragonConfig.instance.bossKind);
          data.forEach(item => {
            const {
              DeskStation,
              Balls
            } = item;
            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
            const tray = this._listBallTray[player.index];

            if (dragon) {
              tray.appear();
              tray.onBallEnter(Balls);
              this.addBallToPlayer({
                ballCount: Balls,
                playerIndex: player.index
              });
            } else {
              tray.isAppear() && tray.hide();
            }
          });
        }

        createBallTrays() {
          for (let i = 0; i < 4; ++i) {
            this._ballList[i] = [];
            const player = gfReferenceManager.instance.getPlayerByIndex(i);
            const trayNode = instantiate(this.ballTrayPrefab);
            trayNode.active = false;
            player.gunNode.addChild(trayNode);

            this._listBallTray.push(trayNode.getComponent(GfBallTray));
          }
        }

        onExitGameRoom() {
          this.onRefresh();
        }

        playerJoinBoard(data) {
          const dragon = gfBossController.instance.getBossByKind(gfDragonConfig.instance.bossKind);
          const {
            DeskStation,
            Balls
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (dragon) {
            const tray = this._listBallTray[player.index];
            tray.appear();
            tray.onBallEnter(Balls);
            this.addBallToPlayer({
              ballCount: Balls,
              playerIndex: player.index
            });
          }
        }

        updatePlayerWallet() {
          if (this.endData) {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              player.addToDisplayWallet(this.endData.jackpotAmount);
            }
          }

          this.needUpdateWallet = false;
          this.onFinishState();
        }

        onDragonWaring() {
          for (let i = 0; i < this._listBallTray.length; i++) {
            const tray = this._listBallTray[i];
            const player = gfReferenceManager.instance.getPlayerByIndex(i);

            if (player.isActive()) {
              tray.appear();
            }
          }
        }

        onDragonBallDropped(data) {
          const dragon = gfBossController.instance.getBossByKind(gfDragonConfig.instance.bossKind);
          data.position = dragon.head.worldPosition;
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_HIT_BALL);
          const dragonPosition = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.position);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          const {
            POOL_TYPE_NAME
          } = gfDragonConfig.instance;
          data.forEach(item => {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(item.DeskStation);
            const playerIndex = player.index;
            const playerBallCount = this._ballList[playerIndex].length;

            for (let i = playerBallCount; i < item.Balls; ++i) {
              const ball = gfPoolManager.instance.getExtraAsset(POOL_TYPE_NAME.DRAGON_BALL, i);
              effectLayer.addChild(ball.node);
              ball.dropToPlayer(dragonPosition, this._listBallTray[playerIndex].getBallHolder(i), item.DeskStation);

              this._ballList[playerIndex].push(ball);

              ++this._ballDropping;
            }
          });
        }

        onBallDropDone(deskStation) {
          this._ballDropping--;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          player && this._listBallTray[player.index].onBallEnter();

          if (this._ballDropping === 0) {
            if (this.endData) {
              this.playDragonEndEffect();
            }
          }
        }

        onDragonEnd(data) {
          var _data$Result;

          this.endData = data;

          if (data.wonJackpot) {
            this.endData.jackpotAmount = this.getJackpotWinAmount();
          }

          const dragon = gfBossController.instance.getBossByKind(gfDragonConfig.instance.bossKind);
          data.wonJackpot ? dragon == null ? void 0 : dragon.onCatch(data) : dragon == null ? void 0 : dragon.onDie();
          (_data$Result = data.Result) == null ? void 0 : _data$Result.forEach(result => {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(result.DeskStation);

            if (player.isMe) {
              player.addGoldReward(result.WinAmount);

              if (result.DeskStation === this.endData.DeskStation) {
                this.needUpdateWallet = true;
              }
            }
          });

          if (data.Result && this._ballDropping === 0) {
            this.playDragonEndEffect();
          }
        }

        onHideBallTray() {
          for (let i = 0; i < this._listBallTray.length; i++) {
            const tray = this._listBallTray[i];
            tray.disappear();
          }
        }

        onPlayBigExplosion(position) {
          const JPExplosion = gfPoolManager.instance.createBigExplosion({
            position: this.node.getComponent(UITransform).convertToNodeSpaceAR(position)
          });
          SetZIndex(JPExplosion, gfBaseConfig.instance.PERSIST_Z_INDEX.POPUP + 10);
        }

        onPlaySmallExplosion(listPosition) {
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          listPosition.forEach((pos, i) => {
            this.scheduleOnce(() => {
              const explosion = instantiate(this.dragonDieSmallExplosionPrefab);
              effectLayer.addChild(explosion);
              explosion.active = true;
              explosion.position = pos;
            }, i * 0.15);
          });
        }

        onJackpotStarDone() {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.cutSceneJackpotPrefab, this.endData);
          }
        }

        addBallToPlayer({
          ballCount,
          playerIndex
        }) {
          const {
            POOL_TYPE_NAME
          } = gfDragonConfig.instance;

          for (let i = this._ballList[playerIndex].length; i < ballCount; ++i) {
            const ball = gfPoolManager.instance.getExtraAsset(POOL_TYPE_NAME.DRAGON_BALL, i);
            ball.addToPlayer(this._listBallTray[playerIndex].getBallHolder(i));

            this._ballList[playerIndex].push(ball);
          }
        }

        onWheelEnterBall(playerIndex) {
          const player = gfReferenceManager.instance.getPlayerByIndex(playerIndex);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          const effectCompo = effectLayer.getComponent(gfEffectLayer);
          const wheel = effectCompo.wheelController.getWheel(player.index, WheelType.BOSS);

          if (wheel && player.isActive()) {
            wheel.onBallEnter();
          }
        }

        onDonePlayerBigWin() {
          --this._bigWinPlaying;
          this.onFinishState();
        }

        playDragonBallBigWin() {
          this.endData.Result.forEach(result => {
            const {
              DeskStation,
              WinAmount
            } = result;
            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

            if (player.isActive()) {
              if (DeskStation === this.endData.DeskStation) {
                if (!player.isMe) {
                  this.playWheelDragonBallsJackpot(player, WinAmount);
                }
              } else if (WinAmount) {
                this.playWheelDragonBallsWin(player, WinAmount);
              }
            }
          });
          this.onFinishState();
        }

        onDragonCreated() {
          for (let i = 0; i < this._listBallTray.length; i++) {
            const tray = this._listBallTray[i];
            const player = gfReferenceManager.instance.getPlayerByIndex(i);

            if (player.isActive()) {
              tray.appear();
            }
          }
        }

        playDragonBallJackpot() {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();

          if (player.isActive()) {
            this.jackpotStarFX = instantiate(this.jackpotStarPrefab);
            effectLayer.addChild(this.jackpotStarFX);
            const ballList = this._ballList[player.index];
            this.jackpotStarFX.getComponent('gfJackpotStarFX').playAnimation(ballList);
            gfEventEmitter.instance.emit(gfDragonEvent.SOUND.COLLECT_BALL);
          } else {
            this.playDragonBallBigWin();
          }
        }

        playDragonEndEffect() {
          if (this.endData.wonJackpot) {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "JACKPOT", this.endData);
            } else {
              this.playDragonBallJackpot();
            }
          } else {
            this.playDragonBallBigWin();
          }
        }

        onRefresh() {
          this.removeAllBalls();
          this.removeAllEffects();
          this.endData = null;
          this.unscheduleAllCallbacks();
        }

        onFinishState() {
          if (this._bigWinPlaying > 0 || this.needUpdateWallet) return;
          this.onRefresh();
          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.DONE_ALL_BIG_WIN);
        }

        removeAllBalls() {
          this._ballList.forEach(arr => {
            arr.forEach(ball => {
              ball.returnPool();
            });
            arr.length = 0;
          });

          this._ballDropping = 0;
        }

        removeAllEffects() {
          var _this$jackpotStarFX;

          (_this$jackpotStarFX = this.jackpotStarFX) == null ? void 0 : _this$jackpotStarFX.destroy();
          this.jackpotStarFX = null;
        }

        userExitBoard(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          const ballList = this._ballList[player.index];
          const tray = this._listBallTray[player.index];
          tray.hide();
          this._ballList[player.index] = [];
          ballList.forEach(ball => {
            if (ball.isDropping()) {
              this.onBallDropDone(data.DeskStation);
            }

            if (!ball.isInJackpotStar()) {
              ball.returnPool();
            }
          });
        }

        playWheelDragonBallsJackpot(player, winAmount) {
          const data = {
            player,
            GoldReward: winAmount,
            wheelType: WheelType.BOSS,
            isWonJP: true
          };
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, data);
        }

        playWheelDragonBallsWin(player, winAmount) {
          const ballList = this._ballList[player.index];
          if (!ballList || ballList.length <= 0) return;
          ++this._bigWinPlaying;
          let isValidBall = true;

          for (let i = 0; i < ballList.length; i++) {
            let ball = ballList[i];

            if (!ball.node.parent) {
              isValidBall = false;
              break;
            }

            const effectLayer = gfReferenceManager.instance.getEffectLayer();
            const wheel = effectLayer.getComponent(gfEffectLayer).wheelController.getWheel(player.index, WheelType.BOSS);
            const wheelPos = getPositionInOtherNode(this.node, wheel.node);
            ball.node.position = getPositionInOtherNode(this.node, ball.node);
            ball.node.setParent(effectLayer);
            ball.moveToBigWinEffect({
              ballIndex: i,
              position: wheelPos,
              playerIndex: player.index
            });
          }

          if (isValidBall) {
            const data = {
              player,
              GoldReward: winAmount,
              wheelType: WheelType.BOSS,
              isWonJP: false,
              itemCount: ballList.length
            };
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, data);
            gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_BALL_REWARD);
          }
        }

        getJackpotWinAmount() {
          for (let i = 0; i < this.endData.Result.length; ++i) {
            const result = this.endData.Result[i];

            if (result.DeskStation === this.endData.DeskStation) {
              return result.WinAmount;
            }
          }

          return 0;
        }

        getMyTotalBall() {
          return this.getTotalBallOfUser(gfDataStore.instance.getSelfDeskStation());
        }

        getTotalBallOfUser(deskStation) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          if (player) {
            return this._ballList[player.index].length;
          }

          return 0;
        }

        checkExtraCondition() {
          const config = gfDataStore.instance.getGunValue();
          const minBet = config[0];
          const ballCount = this.getMyTotalBall();
          const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (!player) {
            return false;
          }

          const wallet = player.getWallet();

          if (ballCount === 0 && wallet.getRealWallet() < minBet) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
            this.showPopupNoMoney();
          } else if (ballCount > 0) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER_NO_MONEY);
            const data = {
              customMsg: gfLocalize.instance.txtCustomNotify.NotEnoughCoin,
              customCallbacks: {
                code: gfNetworkGameEvent.MSG_CODE.DRAGON_NOT_ENOUGH_MONEY,
                confirmCallback: () => {
                  const currentBallCount = this.getMyTotalBall();

                  if (currentBallCount === 0 && wallet.getRealWallet() >= minBet) {
                    gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
                  } else {
                    const {
                      LOGIN_IFRAME
                    } = loadConfigAsync.getConfig();

                    if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
                      globalThis.ingameDeposit();
                    }
                  }
                },
                rejectCallback: () => {}
              }
            };
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
          }

          return true;
        }

        showPopupNoMoney() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME);
        }

        playerChangeGun(data) {
          const {
            DeskStation
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          if (!player) return;
          const gunSkillController = gfReferenceManager.instance.getPlayerLayer().getComponent(gfGunSkillController);
          const gunSkill = gunSkillController.getGunSkillNodeActiveByDeskStation(DeskStation);
          const tray = this._listBallTray[player.index];

          if (tray) {
            if (gunSkill) {
              changeParent(tray.node, gunSkill);
            } else {
              changeParent(tray.node, player.gunNode);
            }
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ballTrayPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dragonDieSmallExplosionPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpotStarPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneJackpotPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ef213DHm2NBI6PVvqL1+jsc", "gfDragonEvent", undefined);

      const gfDragonEvent = exports('default', {
        DRAGON: {
          CREATE: "DRAGON_CREATED",
          WARNING: "GAME_DRAGON_WARNING",
          ON_END: "GAME_DRAGON_END",
          ON_BALL_DROPPED: "GAME_DRAGON_ON_BALL_DROPPED",
          SMALL_EXPLOSION: "DRAGON_DIE_SMALL_EXPLOSION",
          BIG_EXPLOSION: "DRAGON_DIE_BIG_EXPLOSION",
          DONE_BALL_DROP: "DRAGON_BALL_DROP_DONE",
          DONE_JACKPOT_STAR: "DRAGON_PLAY_JACKPOT_STAR_DONE",
          SHOW_JACKPOT_WINAMOUNT: "DRAGON_SHOW_JACKPOT_CUTSCENE",
          BALL_ENTER_BIGWIN_WHEEL: "DRAGON_BALL_ENTER_BIGWIN",
          DONE_PLAYER_BIGWIN: "DRAGON_DONE_PLAYER_BIGWIN",
          ADD_BALL_TO_PLAYER: "DRAGON_ADD_BALL_TO_PLAYER",
          JACKPOT_WINAMOUNT_POPUP_CLOSE: "DRAGON_JACKPOT_WINAMOUNT_POPUP_CLOSE",
          PLAY_DRAGON_BALL_JACKPOT: "PLAY_DRAGON_BALL_JACKPOT",
          DONE_ALL_BIG_WIN: "DRAGON_DONE_ALL_BIG_WIN",
          REMOVE_BALL: "DRAGON_REMOVE_BALL"
        },
        EFFECT_LAYER: {
          PLAY_JACKPOT_WIN: "PLAY_JACKPOT_WIN"
        },
        SOUND: {
          DRAGON_DROP_BALL: "DRAGON_SOUND_DROP_BALL",
          DRAGON_SCREAM: "DRAGON_SCREAM",
          DRAGON_DIE: "DRAGON_DIE",
          BALL_TRAY_SHOW: "DRAGON_BALL_TRAY_SHOW",
          BALL_TRAY_DRAW: "DRAGON_BALL_TRAY_DRAW",
          COLLECT_BALL: "DRAGON_COLLECT_BALL",
          DRAGON_APPEAR: "DRAGON_SOUND_DRAGON_APPEAR",
          PLAY_EFFECT_JACKPOT_COIN: "DRAGON_PLAY_EFFECT_JACKPOT_COIN",
          STOP_EFFECT_JACKPOT_COIN: "DRAGON_STOP_EFFECT_JACKPOT_COIN",
          DRAGON_HIT_BALL: "DRAGON_HIT_BALL",
          DRAGON_BALL_REWARD: "DRAGON_BALL_REWARD",
          DRAGON_BALL_HIDE: "DRAGON_BALL_HIDE",
          BACKGROUND_MUSIC_DRAGON: "BACKGROUND_MUSIC_DRAGON"
        },
        PLAYER_LAYER: {
          CHECK_WALLET_MODULE: "CHECK_WALLET_MODULE"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonExtraSound.ts", ['cc', './gfUtilities.ts', './gfBossExtraSound.ts', './gfDragonEvent.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDataStore.ts'], function (exports) {
  var cclegacy, _decorator, registerEvent, gfBossExtraSound, gfDragonEvent, gfEventEmitter, gfBaseEvents, gfDataStore;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      gfBossExtraSound = module.gfBossExtraSound;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "39c6bEC6KVDaJt7BtIwac60", "gfDragonExtraSound", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDragonExtraSound = exports('gfDragonExtraSound', (_dec = ccclass('gfDragonExtraSound'), _dec(_class = class gfDragonExtraSound extends gfBossExtraSound {
        constructor(...args) {
          super(...args);
          this.coinLoopId = {
            soundID: null
          };
        }

        onLoad() {
          this.initExtraEvents();
        }

        initExtraEvents() {
          super.initExtraEvents();
          registerEvent(gfDragonEvent.SOUND.DRAGON_SCREAM, this.playNewSfxWarning, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_DIE, this.playSfxDragonDie, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_DROP_BALL, this.playSfxBallDrop, this);
          registerEvent(gfDragonEvent.DRAGON.DONE_BALL_DROP, this.playSfxBallInsert, this);
          registerEvent(gfDragonEvent.SOUND.BALL_TRAY_SHOW, this.playSfxBallTray, this);
          registerEvent(gfDragonEvent.SOUND.BALL_TRAY_DRAW, this.playSfxBallTrayDraw, this);
          registerEvent(gfDragonEvent.SOUND.COLLECT_BALL, this.playSfxCollectBalls, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_APPEAR, this.playSfxWarning, this);
          registerEvent(gfBaseEvents.SOUND.BOSS_BIG_WIN, this.playSfxJackpotExplode, this);
          registerEvent(gfDragonEvent.SOUND.PLAY_EFFECT_JACKPOT_COIN, this.playSfxJackpotCoin, this);
          registerEvent(gfDragonEvent.SOUND.STOP_EFFECT_JACKPOT_COIN, this.stopSfxJackpotCoin, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_HIT_BALL, this.playDragonHitBall, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_BALL_REWARD, this.playSfxWinDragonBallShow, this);
          registerEvent(gfDragonEvent.SOUND.DRAGON_BALL_HIDE, this.playSfxWinDragonBallHide, this);
          registerEvent(gfDragonEvent.SOUND.BACKGROUND_MUSIC_DRAGON, this.playBossBackGroundMusic, this);
        }

        playBossBackGroundMusic() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, 'bgmDragon');
        }

        playSfxJackpotCoin() {
          const data = {
            name: "sfxJackpot_coin",
            loop: true,
            ratio: 0.4,
            sound: this.coinLoopId,
            callBack: soundID => {
              this.coinLoopId.soundID = soundID;
            }
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playDragonHitBall() {
          const data = {
            name: "sfxDragon_ball_drop"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBallDrop() {
          const data = {
            name: "sfxBall_drop"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBallInsert() {
          const data = {
            name: "sfxBall_insert"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBallTray() {
          const data = {
            name: "sfxBall_tray"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxBallTrayDraw() {
          const data = {
            name: "sfxBall_tray_draw"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxCollectBalls() {
          const data = {
            name: "sfxCollect_ball"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxDragonDie() {
          const data = {
            name: "sfxDragon_die"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxDragonScream() {
          const data = {
            name: "sfxDragon_scream"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxWinDragonBallShow() {
          const data = {
            name: "sfxShow_win_dragon_ball_put"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxWinDragonBallHide() {
          const data = {
            name: "sfxHide_win_dragon_ball_put"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        stopSfxJackpotCoin() {
          if (this.coinLoopId) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_SOUND, this.coinLoopId.soundID);
            this.coinLoopId.soundID = 0;
          }
        }

        playNewSfxWarning() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_EFFECT);
          const isEnableSFX = gfDataStore.instance.getIsEnableSFX();
          const isEnableBGM = gfDataStore.instance.getIsEnableBGM();

          if (isEnableSFX) {
            const effectVolume = gfDataStore.instance.getCurrentSFXVolume();
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, effectVolume * 0.5);
          }

          if (isEnableBGM) {
            const effectVolume = gfDataStore.instance.getCurrentBGMVolume();
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, effectVolume * 0.5);
          }

          this.playSfxDragonScream();
        }

        playSfxWarning() {
          const data = {
            name: "sfxWarning"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        playSfxJackpotExplode() {
          const data = {
            name: "sfxJackpot_explode"
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonJackpotWinPopup.ts", ['cc', './gfCutSceneJackpotWin.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfDragonEvent.ts'], function (exports) {
  var cclegacy, isValid, _decorator, gfCutSceneJackpotWin, SetZIndex, registerEvent, gfBaseConfig, gfDragonEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      isValid = module.isValid;
      _decorator = module._decorator;
    }, function (module) {
      gfCutSceneJackpotWin = module.gfCutSceneJackpotWin;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1209cTvFSNE5rzeau2KFyBh", "gfDragonJackpotWinPopup", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDragonJackpotWinPopup = exports('gfDragonJackpotWinPopup', (_dec = ccclass('gfDragonJackpotWinPopup'), _dec(_class = class gfDragonJackpotWinPopup extends gfCutSceneJackpotWin {
        onLoad() {
          super.onLoad();
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.POPUP);
          registerEvent(gfDragonEvent.DRAGON.WARNING, this.onDragonWarning, this);
        }

        onDragonWarning() {
          if (isValid(this.node)) {
            this.hide();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonNetworkController.ts", ['cc', './gfBossNetworkController.ts', './gfEventEmitter.ts', './gfNetworkParser.ts', './gfDragonNetworkEvent.ts', './gfNetworkGameEvent.ts', './gfBaseEvents.ts', './gfDragonEvent.ts'], function (exports) {
  var cclegacy, _decorator, gfBossNetworkController, gfEventEmitter, gfNetworkParser, gfDragonNetworkEvent, gfNetworkGameEvent, gfBaseEvents, gfDragonEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossNetworkController = module.gfBossNetworkController;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfDragonNetworkEvent = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ad013WDtGVIR61WmcFs34oJ", "gfDragonNetworkController", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDragonNetworkController = exports('gfDragonNetworkController', (_dec = ccclass('gfDragonNetworkController'), _dec(_class = class gfDragonNetworkController extends gfBossNetworkController {
        constructor(...args) {
          super(...args);
          this._onUpdateGameJackpot = null;
          this._onDragonWarning = null;
          this._onDragonEnd = null;
          this._onDropItem = null;
        }

        initEvents() {
          this._onUpdateGameJackpot = this.onUpdateGameJackpot.bind(this);
          this._onDragonEnd = this.onDragonEnd.bind(this);
          this._onDropItem = this.onDropItem.bind(this);
          this._onDragonWarning = this.onDragonWarning.bind(this);
          gfNetworkParser.instance.registerEvent(gfDragonNetworkEvent.GAME_DRAGON_WARNING, this._onDragonWarning);
          gfNetworkParser.instance.registerEvent(gfDragonNetworkEvent.GAME_DRAGON_END, this._onDragonEnd);
          gfNetworkParser.instance.registerEvent(gfDragonNetworkEvent.GAME_DRAGON_BALL_DROPPED, this._onDropItem);
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this._onUpdateGameJackpot);
        }

        onUpdateGameJackpot(data) {
          // gfDataStore.instance.setCurrentRoomJackpotValue(data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_JACKPOT_INFO, data.amount);
        }

        onDragonWarning() {
          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.WARNING);
        }

        onDragonEnd(data) {
          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.ON_END, data);
        }

        onDropItem(data) {
          gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.ON_BALL_DROPPED, data);
        }

        removeEvents() {
          gfNetworkParser.instance.removeEvent(gfDragonNetworkEvent.GAME_DRAGON_WARNING, this._onDragonWarning);
          gfNetworkParser.instance.removeEvent(gfDragonNetworkEvent.GAME_DRAGON_END, this._onDragonEnd);
          gfNetworkParser.instance.removeEvent(gfDragonNetworkEvent.GAME_DRAGON_BALL_DROPPED, this._onDropItem);
          gfNetworkParser.instance.removeEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this._onUpdateGameJackpot);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonNetworkEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a4d5fVxiclEu7p99eid+tdv", "gfDragonNetworkEvent", undefined);

      const gfDragonNetworkEvent = exports('default', {
        GAME_DRAGON_BALL_DROPPED: 2042,
        GAME_DRAGON_END: 2043,
        GAME_DRAGON_WARNING: 2044
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonWarning.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfDragonEvent.ts'], function (exports) {
  var cclegacy, Component, Animation, _decorator, gfEventEmitter, gfBaseEvents, registerEvent, removeEvents, gfDragonEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Animation = module.Animation;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDragonEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7ba0b2S+GNCSrOJRDOFBTPc", "gfDragonWarning", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDragonWarning = exports('gfDragonWarning', (_dec = ccclass('gfDragonWarning'), _dec(_class = class gfDragonWarning extends Component {
        onLoad() {
          this.initEvents();
          this.node.active = false;
        }

        initEvents() {
          registerEvent(gfDragonEvent.DRAGON.WARNING, this.showBossWarning, this);
        }

        showBossWarning() {
          this.node.active = true;
          gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_APPEAR);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.1,
            amplitude: 10
          });
          const animation = this.node.getComponent(Animation);
          animation.play();
          this.scheduleOnce(() => {
            this.node.active = false;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESET_VOLUME);
          }, 2);
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonWheel.ts", ['cc', './gfReferenceManager.ts', './gfEventEmitter.ts', './gfDragonEvent.ts', './gfActionHelper.ts', './gfWheel.ts'], function (exports) {
  var cclegacy, sys, _decorator, gfReferenceManager, gfEventEmitter, gfDragonEvent, stopAllActions, gfWheel;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfWheel = module.gfWheel;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5efd4pD9thKWJz2dXG+b/bu", "gfDragonWheel", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDragonWheel = exports('gfDragonWheel', (_dec = ccclass('gfDragonWheel'), _dec(_class = class gfDragonWheel extends gfWheel {
        constructor(...args) {
          super(...args);
          this._ballWaiting = 0;
        }

        onLoad() {
          super.onLoad();
        }

        setupAnimSpine() {
          this.animName.appear = "AllAppear";
          this.animName.idle = "AllIdle";
          this.animName.hide = "AllDisappear";
          this.animName.ribbonAppear = "RibbonAppear";
          this.animName.spinnerAppear = "SpinnerAppear";
          this.animName.spinnerIdle = "SpinnerIdle";
        }

        setupSkinSpine() {
          this.skinName.bigWin = "Thang";
          this.skinName.megaWin = "Thang Cuc Lon";
          this.skinName.superWin = "Thang Sieu Lon";
        }

        showAnimation(data) {
          if (data.isWonJP) {
            this.showDragonBallsJackpot(data.gold);
          } else {
            this.showDragonBalls(data.gold, data.itemCount);
          }
        }

        onBallEnter() {
          this.node.active = true;
          const {
            isMe
          } = gfReferenceManager.instance.getPlayerByIndex(this.index);
          this.curLabel = isMe ? this.lblCoin : this.lblCoinOther;
          this.resetLblCoinAngle();
          --this._ballWaiting;

          if (this._ballWaiting === 0) {
            this.spine.setAnimation(0, this.animName.ribbonAppear, false);
            this.spine.addAnimation(0, this.animName.idle, true);
            this.tweenCoin(isMe);
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.DONE_PLAYER_BIGWIN);
          }
        }

        showDragonBalls(winValue, ballCount) {
          this.node.active = true;
          this._coinValue = 0;
          stopAllActions(this.node);
          const player = gfReferenceManager.instance.getPlayerByIndex(this.index);

          if (player.isMe) {
            player.addToDisplayWallet(this.winValue);
          }

          const {
            isMe
          } = gfReferenceManager.instance.getPlayerByIndex(this.index);
          this.curLabel = isMe ? this.lblCoin : this.lblCoinOther;
          this.reset();
          this.isShowing = true;
          this._ballWaiting = ballCount;
          const skinName = this.getSkinByBallCount(ballCount);
          this.curSkin = skinName;
          this.spine.setSkin(skinName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this.winValue = winValue | 0;
          this.curLabel.string = "";
          this.spine.setAnimation(0, this.animName.spinnerAppear, false);
          this.spine.addAnimation(0, this.animName.spinnerIdle, true);
        }

        showDragonBallsJackpot(winValue) {
          this.node.active = true;
          this.curLabel = this.lblCoinOther;
          this.reset();
          this.isShowing = true;
          this.winValue = winValue | 0;
          this.curLabel.string = "";
          this.curLabel.node.active = true;
          this.playAnimSpine(this.skinName.superWin);
          this.tweenCoin(false);
        }

        getSkinByBallCount(ballCount) {
          return ballCount > 5 ? this.skinName.superWin : ballCount > 4 ? this.skinName.megaWin : this.skinName.bigWin;
        }

        onFinish() {
          super.onFinish();
          this._ballWaiting = 0;
        }

        reset() {
          super.reset();
          this._ballWaiting = 0;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDropItem.ts", ['cc'], function (exports) {
  var cclegacy, Component, tween, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      tween = module.tween;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "375b6KF4UZFf4W06JxUkYPE", "gfDropItem", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDropItem = exports('gfDropItem', (_dec = ccclass('gfDropItem'), _dec(_class = class gfDropItem extends Component {
        constructor(...args) {
          super(...args);
          this.endPosition = void 0;
          this.callBack = void 0;
          this.deskStation = void 0;
          this.listAction = void 0;
        }

        playEffect(data, callBack) {
          const {
            startPos,
            endPos,
            deskStation
          } = data;
          this.endPosition = endPos;
          this.callBack = callBack;
          this.deskStation = deskStation;
          this.node.setPosition(startPos);
          this.listAction = tween(this.node);
          this.listAction.then(this.onStart());
          this.listAction.then(this.onFly());
          this.listAction.then(this.onFinish());
          this.listAction.then(this.onAutoDestroy());
          this.listAction.start();
        }

        onStart() {
          return tween().call(() => {});
        }

        onFly() {
          return tween().to(1, {
            position: this.endPosition
          }).delay(.58);
        }

        onFinish() {
          return tween().call(() => {
            this.node.parent.removeChild(this.node);
            typeof this.callBack === 'function' && this.callBack();
          });
        }

        onAutoDestroy() {
          return tween().call(() => {
            this.node.removeFromParent();
            this.node.destroy();
          });
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDropSpecialGunFX.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDropItem.ts'], function (exports) {
  var cclegacy, tween, Animation, _decorator, gfEventEmitter, gfBaseEvents, gfDropItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      Animation = module.Animation;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDropItem = module.gfDropItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "48983JVNtxBjYuukVR/E3dx", "gfDropSpecialGunFX", undefined);

      const {
        ccclass
      } = _decorator;
      let gfDropSpecialGunFX = exports('gfDropSpecialGunFX', (_dec = ccclass("gfDropSpecialGunFX"), _dec(_class = class gfDropSpecialGunFX extends gfDropItem {
        constructor(...args) {
          super(...args);
          this.skillID = void 0;
        }

        playEffect(data, callBack) {
          const {
            angle,
            skillID
          } = data;
          this.skillID = skillID;
          this.node.angle = angle;
          super.playEffect(data, callBack);
        }

        onStart() {
          return tween().call(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);
            const anim = this.node.getComponent(Animation);
            anim == null ? void 0 : anim.play('DropGunSkillAnim');
          }).delay(1);
        }

        getSkillID() {
          return this.skillID;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfBaseEvents.ts', './gfFishManager.ts', './gfDataStore.ts', './gfEventWinWheel.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, instantiate, UITransform, isValid, gfReferenceManager, gfEventEmitter, registerEvent, removeEvents, gfBaseEvents, gfFishManager, gfDataStore, gfEventWinWheel, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      isValid = module.isValid;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventWinWheel = module.gfEventWinWheel;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "893a9lAa8lEsL6iurnP47ur", "gfEffectEvent", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEffectEvent = exports('gfEffectEvent', (_dec = ccclass('gfEffectEvent'), _dec2 = property(gfEventWinWheel), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = class gfEffectEvent extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "eventWinWheels", _descriptor, this);

          _initializerDefineProperty(this, "eventItemFX", _descriptor2, this);

          _initializerDefineProperty(this, "cutSceneJPEventPrefab", _descriptor3, this);

          this._listFXItem = [];
          this.effectLayer = null;
        }

        onLoad() {
          this.initEvents();
          this.effectLayer = this.node.getComponent('gfEffectLayer');

          for (let i = 0; i < 4; ++i) {
            this._listFXItem[i] = [];
          }
        }

        initEvents() {
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_EVENT_WIN, this.playEffectEventWin, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.REMOVE_EVENT_EFFECT_PLAYER, this.removeEventEffectOfPlayer, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_EVENT_TRAY, this.playEventTrayFX, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, this.onUpdateStatusEvent, this);
        }

        onUpdateStatusEvent(data) {
          const {
            EventStartTime,
            EventEndTime
          } = data;

          if (gfDataStore.instance.getTime() < EventStartTime || gfDataStore.instance.getTime() > EventEndTime) {
            this.resetOnExit();
          }
        }

        playEventTrayFX(data) {
          if (data.ItemID == 0) return;
          const fish = gfFishManager.instance.getFishById(data.FishID);
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          const eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (fish && player && eventTray) {
            if (player.isMe && data.GoldReward > 0) {
              player.addGoldReward(data.GoldReward);
            }

            const eventItem = instantiate(this.eventItemFX);
            if (!eventItem) return;
            const startPos = fish.getLockPositionByNodeSpace(this.node);
            const endPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(eventTray.getPositionByWorldSpace(data.ItemID));
            const dataInfo = {
              startPos,
              endPos,
              data
            };
            this.node.addChild(eventItem);

            this._listFXItem[player.index].push(eventItem);

            eventItem.playAnimation(dataInfo, () => {
              eventTray.updateTray(data.listItem);

              if (data.GoldReward > 0) {
                if (player.isMe) {
                  gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "EVENT", data);
                } else {
                  this.playEffectEventWin(data);
                }
              }
            });
          }
        }

        playEffectEventWin(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          const eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (player && eventTray) {
            if (player.isMe) {
              eventTray.reset();
              gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.cutSceneJPEventPrefab, data);
            } else {
              eventTray.reset();
              this.eventWinWheels[player.index].playAnimation(data, () => {});
            }
          }
        }

        removeEventEffectOfPlayer(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          const listFXItem = this._listFXItem[player.index];
          listFXItem.forEach(item => {
            stopAllActions(item);

            if (isValid(item)) {
              item.destroy();
            }
          });
          listFXItem.length = 0;
        }

        resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listFXItem.forEach(arr => {
            arr.forEach(item => {
              stopAllActions(item);

              if (isValid(item)) {
                item.destroy();
              }
            });
            arr.length = 0;
          });
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventWinWheels", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventItemFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneJPEventPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts', './gfPoolManager.ts', './gf3DParticle.ts', './gfDropSpecialGunFX.ts', './gfGameScheduler.ts', './gfFishManager.ts', './gfWheelController.ts', './gfDropItem.ts', './gfCustomDataType.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, instantiate, isValid, UITransform, v3, misc, tween, v2, UIOpacity, Tween, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfReferenceManager, registerEvent, getPositionInOtherNode, SetZIndex, v2Distance, randomBetween, getSkillTypeBySkillID, removeEvents, v3f, fadeIn, moveTo, bezierTo, fadeOut, stopAllActions, getRandomInt, gfPoolManager, gf3DParticle, gfDropSpecialGunFX, gfGameScheduler, gfFishManager, gfWheelController, gfDropItem, WheelType, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      isValid = module.isValid;
      UITransform = module.UITransform;
      v3 = module.v3;
      misc = module.misc;
      tween = module.tween;
      v2 = module.v2;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPositionInOtherNode = module.getPositionInOtherNode;
      SetZIndex = module.SetZIndex;
      v2Distance = module.v2Distance;
      randomBetween = module.randomBetween;
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
      removeEvents = module.removeEvents;
    }, function (module) {
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      bezierTo = module.bezierTo;
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfDropSpecialGunFX = module.gfDropSpecialGunFX;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfWheelController = module.gfWheelController;
    }, function (module) {
      gfDropItem = module.gfDropItem;
    }, function (module) {
      WheelType = module.WheelType;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec3, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "13172rHP5NI1ZQsel6vXYj6", "gfEffectLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let itemDropFX = exports('itemDropFX', (_dec = ccclass('itemDropFX'), _dec2 = property(Prefab), _dec(_class = (_class2 = class itemDropFX {
        constructor() {
          _initializerDefineProperty(this, "itemDropPrefab", _descriptor, this);

          _initializerDefineProperty(this, "SkillID", _descriptor2, this);

          _initializerDefineProperty(this, "Type", _descriptor3, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemDropPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "SkillID", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Type", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 'NORMAL';
        }
      })), _class2)) || _class));
      let gfEffectLayer = exports('gfEffectLayer', (_dec3 = ccclass('gfEffectLayer'), _dec4 = property(Prefab), _dec5 = property(gfWheelController), _dec6 = property(Prefab), _dec7 = property(itemDropFX), _dec3(_class4 = (_class5 = class gfEffectLayer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "particle3D", _descriptor4, this);

          _initializerDefineProperty(this, "wheelController", _descriptor5, this);

          _initializerDefineProperty(this, "itemBomb", _descriptor6, this);

          _initializerDefineProperty(this, "listDropGunItem", _descriptor7, this);

          this._listSkillItem = [];
          this._lisParticle = [];
          this._queueAnim = [];
          this._playingQueueAnim = false;
          this._flyingSkill = 0;
          this._listAnimReward = [];
        }

        onLoad() {
          gfReferenceManager.instance.setData({
            EffectLayer: this.node
          });
          this.initEvents();
          this._lisParticle.length = 0;
          this._listSkillItem.length = 0;
          this.getTotalFlyingItems = this.getTotalFlyingItems.bind(this);
        }

        initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.userExitBoard, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, this.playNetFX, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, this.playRewardEffect, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, this.onPlayBigWinWheelEffect, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, this.addAnimToQueueAnim, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM, this.checkQueueAnim, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_SPECIAL_FISH, this.playEffectSpecialFish, this);
          registerEvent(gfBaseEvents.GUN_SKILL.PLAY_EFFECT_RECEIVE_GUN_SKILL, this.playEffectReceiveGunSkill, this);
          registerEvent(gfBaseEvents.GUN_SKILL.PLAY_EFFECT_RECEIVE_EXTRA_BULLET_RIFLE_GUN, this.playEffectReceiveExtraBulletRifleGun, this);
          registerEvent(gfBaseEvents.GUN_SKILL.CLEAR_EFFECT_RECEIVE_GUN_SKILL, this.clearEffectReceiveGunSkill, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_CATCH_LIST_FISH, this.playEffectCatchListFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_LIST_FISH_BY_SPECIAL_FISH, this.playAnimFishDieByEffectSpecialFish, this);
        }

        playEffectReceiveExtraBulletRifleGun(data) {
          const {
            fishPos,
            DeskStation,
            skillInfo
          } = data;
          const itemPre = this.listDropGunItem.find(elm => elm.SkillID === skillInfo.SkillID && elm.Type == 'EXTRA_BULLET').itemDropPrefab;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const item = instantiate(itemPre);
          if (!isValid(item)) return;
          this.node.addChild(item);

          this._listSkillItem.push(item);

          const itemCompo = item.getComponent(gfDropItem);
          const dataInfo = {
            angle: player.gun.angle,
            endPos: getPositionInOtherNode(this.node, player.gun),
            startPos: this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos),
            deskStation: DeskStation,
            skillID: skillInfo.SkillID
          };
          itemCompo.playEffect(dataInfo, () => {
            gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.COMPLETED_RECEIVE_EXTRA_BULLET_RIFLE_GUN, {
              DeskStation,
              skillInfo
            });
          });
        }

        playEffectSpecialFish(data) {
          const {
            TotalReward,
            DeskStation,
            BulletMultiple,
            mainPoint,
            fishKind
          } = data;
          const itemBomb = instantiate(this.itemBomb);
          const startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          itemBomb.setPosition(startPos);
          SetZIndex(itemBomb, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 5
          });

          if (gfBaseConfig.instance.IsNewLogin) {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

            if (player && player.isMe) {
              player.addGoldReward(TotalReward);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, data);
            this.catchListFishEffect(data, () => {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward: TotalReward,
                bet: BulletMultiple,
                fishKind
              });
            });
          }
        }

        playAnimFishDieByEffectSpecialFish(data) {
          const {
            TotalReward,
            DeskStation,
            BulletMultiple,
            fishKind,
            SkillID
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.addGoldReward(TotalReward);
          }

          data.isSkill = SkillID != -1;
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, data);
          this.catchListFishEffect(data, () => {
            const canShowBigWin = this.wheelController.canShowBigWinWheel(player.index);

            if (canShowBigWin) {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward: TotalReward,
                bet: BulletMultiple,
                fishKind
              });
            }
          });
        }

        playEffectCatchListFish(data) {
          const {
            TotalReward,
            DeskStation,
            BulletMultiple,
            fishKind
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const canShowBigWin = this.wheelController.canShowBigWinWheel(player.index);
          this.catchListFishEffect(data, () => {
            if (canShowBigWin) {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward: TotalReward,
                bet: BulletMultiple,
                fishKind
              });
            }
          });
        }

        catchListFishEffect(dataFish, callBack) {
          const {
            DeskStation,
            BulletMultiple,
            mainPoint,
            ListFish,
            isSkill,
            SkillID,
            delayFishDie = 0,
            speedDie = 1000
          } = dataFish;
          let maxTimeDelay = 0;
          ListFish && ListFish.forEach(data => {
            const fish = gfFishManager.instance.getFishById(data.FishID);

            if (mainPoint) {
              if (fish) {
                data.timeDelay = delayFishDie + v2Distance(mainPoint, fish.node.getPosition()) / speedDie;
              } else {
                data.timeDelay = delayFishDie + 1280 / speedDie;
              }
            } else {
              data.timeDelay = 0;
            }

            maxTimeDelay = data.timeDelay > maxTimeDelay ? data.timeDelay : maxTimeDelay;
            data.SkillID = SkillID;
            data.DeskStation = DeskStation;
            data.BulletMultiple = BulletMultiple;
            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
            data.skipUpdateWallet = this.wheelController.canShowBigWinWheel(player.index);
            data.isDie = true;
            data.isSkill = isSkill;
          });
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_LIST_FISH, {
            ListFish
          });
          gfGameScheduler.scheduleOnce(() => {
            if (typeof callBack === "function") {
              callBack();
            }
          }, maxTimeDelay);
        }

        playNetFX(data) {
          const netFX = gfPoolManager.instance.getNetFX(data);

          if (netFX) {
            netFX.node.setParent(this.node);
            SetZIndex(netFX.node, gfBaseConfig.instance.TOP_Z_INDEX.NETFX);
            netFX.node.position = getPositionInOtherNode(this.node, data.bullet.node);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CREATE_ONE_NETFX, {
              netFX,
              data
            });
          }
        }

        onPlayBigWinWheelEffect(data) {
          if (!data.wheelType) {
            data.wheelType = WheelType.NORMAL;
          }

          this.wheelController.onPlayWheelEffect(data);
        }

        getRandomPositionOutScreen() {
          const {
            SceneBox
          } = gfBaseConfig.instance;
          const x = [SceneBox.Left, SceneBox.Right][randomBetween(0, 1)];
          const y = randomBetween(SceneBox.Bottom + 100, SceneBox.Top - 100);
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        }

        getRandomPositionOutScreenByGunAngle(DeskStation) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const rad = misc.degreesToRadians(player.getGunAngle());
          const x = Math.cos(rad) * 2060 + player.node.position.x;
          const y = Math.sin(rad) * 2060 + player.node.position.y;
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 1)));
        } //Effect Reward


        playRewardEffect(rewardData, isPlayLabelCoin = true) {
          if (!rewardData.GoldReward) return;
          rewardData.isPlayLabelCoin = isPlayLabelCoin;
          let {
            GoldReward,
            fishPos,
            SkillID,
            fishKind,
            skipUpdateWallet,
            isSkill,
            BulletMultiple,
            DeskStation
          } = rewardData;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else {
            const {
              ONE_SHOT_GUN
            } = gfBaseConfig.instance.SKILL_TYPE;

            if (getSkillTypeBySkillID(SkillID) == ONE_SHOT_GUN) {
              fishPos = this.getRandomPositionOutScreenByGunAngle(DeskStation);
            } else {
              fishPos = this.getRandomPositionOutScreen();
            }
          }

          const isBigWin = GoldReward >= BulletMultiple * gfBaseConfig.instance.BIG_WIN_RATIO.BIG_WIN;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const endPos = getPositionInOtherNode(this.node, player.avatar.node);
          rewardData.beganPos = fishPos;
          rewardData.endPos = endPos;
          rewardData.player = player;
          rewardData.delayTime = 0;

          if (isSkill) {
            //rewardData.skipUpdateWallet = this.wheelController.canShowBigWinWheel(player.index);
            this.playFXCatchFishBySkill(SkillID, fishPos);
            rewardData.delayTime = 0.8;
          } else if (isBigWin && !skipUpdateWallet) {
            // Play Effect when BigWin
            const canShowBigWin = this.wheelController.canShowBigWinWheel(player.index);
            rewardData.skipUpdateWallet = canShowBigWin;
            gfPoolManager.instance.createBigExplosion({
              position: fishPos
            });
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10
            });
            this.playParticleEffect(rewardData);

            if (canShowBigWin) {
              this.onPlayBigWinWheelEffect({
                player,
                GoldReward,
                bet: BulletMultiple,
                fishKind
              });
            }
          }

          this.onPlayRewardEffect(rewardData);
        }

        playFXCatchFishBySkill(SkillID, fishPos) {
          gfPoolManager.instance.createSmallExplosion({
            position: fishPos
          });
        }

        onPlayRewardEffect(data) {
          const {
            player,
            isSkill,
            delayTime,
            isPlayLabelCoin
          } = data;

          if (!isSkill) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          const animTween = tween().delay(delayTime).call(() => {
            this.playLabelCoinEffect(data);
          }).delay(isPlayLabelCoin ? 0.5 : 0).call(() => {
            this.playCoinEffect(data);

            const index = this._listAnimReward.indexOf(cloneTween);

            if (index >= 0) {
              this._listAnimReward.splice(index, 1);
            }
          });
          const cloneTween = animTween.clone(this.node).start();

          this._listAnimReward.push(cloneTween);
        }

        playLabelCoinEffect(data) {
          // Label coin effect sequence anim return duration
          const {
            beganPos,
            player,
            GoldReward,
            isPlayLabelCoin
          } = data;

          if (!isPlayLabelCoin) {
            return;
          }

          const LABEL_WIDTH = 150;
          const LABEL_HEIGHT = 25;
          const {
            Width,
            Height
          } = gfBaseConfig.instance.realSize;
          const x = Math.min(Math.max(beganPos.x, -Width / 2 - LABEL_WIDTH / 2), Width / 2 - LABEL_WIDTH / 2);
          const y = Math.min(Math.max(beganPos.y, -Height / 2 - LABEL_HEIGHT / 2), Height / 2 - LABEL_HEIGHT / 2);
          const label = gfPoolManager.instance.getLabelCoin(player.isMe);
          this.node.addChild(label.node);
          SetZIndex(label.node, gfBaseConfig.instance.TOP_Z_INDEX.COIN_LABEL);
          label.node.setPosition(x, y, 0);
          label.setString(`+${gfCurrencyCalculator.instance.formatCurrency(GoldReward, true)}`);
          label.node.scale = v3f(1.5);
          tween(label.node).to(0.2, {
            scale: v3f(1)
          }).to(0.1, {
            scale: v3f(1.5)
          }).to(0.1, {
            scale: v3f(1)
          }).delay(0.5).to(0.25, {
            scale: v3f(0)
          }).call(() => {
            label.returnPool();
          }).start();
        }

        playCoinEffect(data) {
          const {
            GoldReward,
            BulletMultiple,
            beganPos,
            endPos,
            player,
            isSkill,
            skipUpdateWallet,
            bounceAmplitude = 100
          } = data;
          const coinCount = this.calculateCoin(GoldReward, BulletMultiple);
          let duration = 0;

          for (let i = 0; i < coinCount; i++) {
            const configPoint1 = v2(beganPos.x + (beganPos.x - endPos.x) * 0.3, beganPos.y);
            const configPoint2 = v2(endPos.x, beganPos.y + (beganPos.y - endPos.y) * 0.3);

            if (player.index < 2 && beganPos.y < endPos.y) {
              configPoint2.y = endPos.y + endPos.y - beganPos.y;
            }

            const bezierConfig = [configPoint1, configPoint2, endPos];
            let xRandom = i % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
            xRandom *= i;
            const yRandom = getRandomInt(-5, 5) * 7.5 - 50;
            const coinFX = player.isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);
            this.node.addChild(coinFX.node);
            SetZIndex(coinFX.node, gfBaseConfig.instance.TOP_Z_INDEX.COIN);
            coinFX.node.setScale(v3f(0.4));
            coinFX.startAnimation();
            coinFX.node.setPosition(beganPos);
            coinFX.node.getComponent(UIOpacity).opacity = 0;
            const anim = tween(coinFX.node).then(fadeIn(0.01)).then(moveTo(0.175, beganPos.x + xRandom / 2, beganPos.y + bounceAmplitude, 0)).parallel(moveTo(0.5, beganPos.x + xRandom, beganPos.y + yRandom, 0, "bounceOut"), tween().call(() => {
              if (player.isMe && i === 0 && !isSkill) {
                gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
              }
            })).delay(0.05 * i + 0.15).then(bezierTo(1, bezierConfig, "sineIn")).call(() => {
              if (!skipUpdateWallet && i === 0 && player.isMe) {
                player.addToDisplayWallet(GoldReward);
              }

              coinFX.stopAnimation();
            }).start();

            if (i === coinCount - 1) {
              duration = anim["_finalAction"].getDuration();
            }
          }

          return duration;
        }

        playParticleEffect(data) {
          const {
            DeskStation,
            beganPos,
            GoldReward
          } = data;

          if (GoldReward === 0) {
            return;
          }

          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
          const particle = instantiate(this.particle3D).getComponent(gf3DParticle);
          particle.node.parent = this.node;
          SetZIndex(particle.node, gfBaseConfig.instance.TOP_Z_INDEX.COIN);

          this._lisParticle.push(particle.node);

          particle.node.position = v3(beganPos.x, beganPos.y, 0);
          particle.setIsMe(player.isMe);
          particle.setLifetime(0.22);
          particle.setSpawnRate(8);
          particle.setItemSpeed(450, 650);
          particle.setGravity(-200);
          particle.setSpawnInterval(0.2);
          particle.setDuration(0.25);
          particle.startAnimation();
          tween(particle.node).delay(0.65).then(fadeOut(0.4)).removeSelf().call(() => {
            particle.stopAnimation();
            stopAllActions(particle.node);
            particle.node.destroy();

            const index = this._lisParticle.indexOf(particle.node);

            if (index >= 0) {
              this._lisParticle.splice(index, 1);
            }
          }).start();
        }

        calculateCoin(GoldReward, BulletMultiple) {
          const totalMultiply = GoldReward / BulletMultiple;
          let coinCount = 0;

          if (totalMultiply < 10) {
            coinCount = 1;
          } else if (totalMultiply < 80) {
            coinCount = 3;
          } else if (totalMultiply < 150) {
            coinCount = 5;
          } else if (totalMultiply < 300) {
            coinCount = 6;
          } else {
            coinCount = 7;
          }

          return coinCount;
        }

        userExitBoard(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          this.wheelController.userExitBoard(player.index);
        }

        playEffectReceiveGunSkill(data) {
          const {
            fishPos,
            DeskStation,
            skillInfo
          } = data;
          const itemPre = this.listDropGunItem.find(elm => elm.SkillID === skillInfo.SkillID && elm.Type === 'NORMAL').itemDropPrefab;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const item = instantiate(itemPre);
          if (!isValid(item)) return;
          this.node.addChild(item);

          this._listSkillItem.push(item);

          const itemCompo = item.getComponent(gfDropSpecialGunFX);
          const dataInfo = {
            angle: player.gun.angle,
            endPos: getPositionInOtherNode(this.node, player.gun),
            startPos: this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos),
            deskStation: DeskStation,
            skillID: skillInfo.SkillID
          };
          itemCompo.playEffect(dataInfo, () => {
            gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.COMPLETED_RECEIVE_GUN_SKILL, {
              DeskStation,
              skillInfo
            });
          });
        }

        clearEffectReceiveGunSkill(deskStation) {
          if (!this._listSkillItem) return;

          const listDataDeskStation = this._listSkillItem.filter(elm => {
            if (isValid(elm) && elm.components && elm.getComponent(gfDropSpecialGunFX)) {
              return elm.getComponent(gfDropSpecialGunFX).deskStation === deskStation;
            }
          });

          if (listDataDeskStation && listDataDeskStation.length > 0) {
            listDataDeskStation.forEach(skillItem => {
              const index = this._listSkillItem.indexOf(skillItem);

              if (index >= 0) {
                Tween.stopAllByTarget(skillItem);

                if (isValid(skillItem)) {
                  skillItem.removeFromParent();
                  skillItem.destroy();
                }

                this._listSkillItem.splice(index, 1);
              }
            });
          }
        }

        getTotalFlyingItems() {
          return this._flyingSkill;
        }

        resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listSkillItem.forEach(item => {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          for (let i = 0; i <= this._listAnimReward.length; i++) {
            if (this._listAnimReward[i]) {
              this._listAnimReward[i].stop();
            }
          }

          this._listAnimReward.length = 0;
          this._listSkillItem.length = 0;

          this._lisParticle.forEach(item => {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._lisParticle.length = 0;
          this._flyingSkill = 0;
          this.wheelController.resetOnExit();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);
          this._queueAnim.length = 0;
          this._playingQueueAnim = false;
        }

        addAnimToQueueAnim(name, data) {
          const animData = {
            name: name,
            dataInfo: data
          };

          if (this._queueAnim.length == 0 && !this._playingQueueAnim) {
            this.playQueueAnim(animData);
          } else {
            this._queueAnim.push(animData);
          }
        }

        checkQueueAnim() {
          if (this._queueAnim.length > 0) {
            const data = this._queueAnim.shift();

            this.playQueueAnim(data);
          } else {
            this._playingQueueAnim = false;
          }
        }

        playQueueAnim(data) {
          this._playingQueueAnim = true;

          switch (data.name) {
            case "EVENT":
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_EVENT_WIN, data.dataInfo);
              break;

            case "JACKPOT":
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_BOSS_JACKPOT);
              break;
          }
        }

        onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        }

      }, (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "particle3D", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "wheelController", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "itemBomb", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "listDropGunItem", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLockFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Sprite, _decorator, Component, sp, UITransform, registerEvent, getPositionInOtherNode, v2Distance, getRotation, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      sp = module.sp;
      UITransform = module.UITransform;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPositionInOtherNode = module.getPositionInOtherNode;
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "92b8e7acB5GVobQJX1aITvv", "gfEffectLockFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEffectLockFish = exports('gfEffectLockFish', (_dec = ccclass('gfEffectLockFish'), _dec2 = property(Node), _dec3 = property(Sprite), _dec(_class = (_class2 = class gfEffectLockFish extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "iconTarget", _descriptor, this);

          _initializerDefineProperty(this, "iconDot", _descriptor2, this);

          this._isFollowTarget = false;
          this._animAimName = "aim";
          this._targetFish = void 0;
          this._canPlayEffect = true;
          this._startPos = void 0;
        } // LIFE-CYCLE CALLBACKS:


        onLoad() {
          this._targetFish = null;
          this.initEvents();
          this.node.active = false;
        }

        initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH, this.stopFollow, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, this.startFollow, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        }

        stopFollow() {
          this._isFollowTarget = false;
        }

        startFollow(fish, nodeGun) {
          this._targetFish = fish;
          this._startPos = getPositionInOtherNode(this.node, nodeGun);

          this._calculatorInfo();

          if (this._isFollowTarget) return;

          if (this._canPlayEffect) {
            this._canPlayEffect = false;
            this.playChangeTargetAnim();
          }

          this.node.active = true;
          this._isFollowTarget = true;
        }

        playChangeTargetAnim() {
          if (this.iconTarget && this.iconTarget.getComponent(sp.Skeleton)) {
            this.iconTarget.getComponent(sp.Skeleton).setAnimation(0, this._animAimName, false);
          }
        }

        _calculatorInfo() {
          const endPos = this._targetFish.getLockPositionByNodeSpace(this.node);

          if (!endPos) return;
          this.updateDotLine(endPos);
          this.iconTarget.setPosition(endPos);
        }

        updateDotLine(endPos) {
          const distance = v2Distance(this._startPos, endPos);
          this.iconDot.node.setPosition(this._startPos);
          this.iconDot.node.angle = getRotation(endPos, this._startPos);
          this.iconDot.node.getComponent(UITransform).width = distance;
        }

        resetOnExit() {
          this._isFollowTarget = false;
          this._targetFish = null;
          this.node.active = false;
        }

        update() {
          if (!this._isFollowTarget) {
            this.node.active = false;
            this._canPlayEffect = true;
          } else if (this._targetFish && !this._targetFish._isOutScreen && !this._targetFish.checkDie()) {
            this._calculatorInfo();
          }
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfEventTray.ts', './gfEventController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Button, registerEvent, convertSecondToTimeDay, addTimePrefix, removeEvents, gfBaseEvents, gfEventEmitter, gfLocalize, gfDataStore, gfBaseConfig, gfReferenceManager, gfEventTray, gfEventController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Button = module.Button;
    }, function (module) {
      registerEvent = module.registerEvent;
      convertSecondToTimeDay = module.convertSecondToTimeDay;
      addTimePrefix = module.addTimePrefix;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEventTray = module.gfEventTray;
    }, function (module) {
      gfEventController = module.gfEventController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "885ffKHysdKpIaMQHZpbpFW", "gfEventButton", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventButton = exports('gfEventButton', (_dec = ccclass('gfEventButton'), _dec2 = property(Label), _dec3 = property(gfEventTray), _dec(_class = (_class2 = class gfEventButton extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtEventTime", _descriptor, this);

          _initializerDefineProperty(this, "tray", _descriptor2, this);

          this._timeRemain = 0;
          this.PREFIX_TIME = [];
        }

        onLoad() {
          this.PREFIX_TIME = ["D:", "H:", "M:", "S"];
          this.node.active = false;
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExitGameRoom, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_COMING, this.onComing, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_PLAYING, this.onPlaying, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_END, this.onEnd, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_IDLE, this.onIdle, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.updatePosition, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.resetButton, this);
          registerEvent(gfBaseEvents.EVENT.UPDATE_EVENT_TIME, this.onUpdateEventTime, this);
        }

        onIdle() {
          this.setInteractableButton(false);
        }

        onComing() {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY);
          this.txtEventTime.string = gfLocalize.instance.TXT_EVENT.COMING;
          this.tray && this.tray.hide();
        }

        onPlaying(data) {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          const timeRemain = Math.floor((data.EventEndTime - gfDataStore.instance.getTime()) / 1000);
          this.updateTimer(timeRemain);

          if (data.EventDetail) {
            this.updateTray(data.EventDetail);
          }
        }

        onEnd() {
          this.resetButton();
          this.node.active = true;
          this.setInteractableButton(true);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY);
          this.txtEventTime.string = gfLocalize.instance.TXT_EVENT.END;
          this.tray && this.tray.hide();
        }

        updateTimer(timeRemain) {
          this._timeRemain = Math.floor(timeRemain);
          const formatTime = convertSecondToTimeDay(this._timeRemain);
          this.txtEventTime.string = addTimePrefix(formatTime, this.PREFIX_TIME);
          this._timeRemain--;
          this.schedule(this.startCountDown, 1);
        }

        startCountDown() {
          if (this._timeRemain < 0) {
            return;
          }

          const formatTime = convertSecondToTimeDay(this._timeRemain);
          this.txtEventTime.string = addTimePrefix(formatTime, this.PREFIX_TIME);
          this._timeRemain--;
        }

        onEventClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.SHOW_POPUP_EVENT_INFO);
        }

        updateTray(EventDetail) {
          if (!Array.isArray(EventDetail) || !this.tray) return;
          this.tray && this.tray.updateTray(EventDetail);
        }

        updatePosition() {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfInfo().DeskStation);

          if (player) {
            const pos = player.index === 0 ? gfBaseConfig.instance.POS_EVENT.LEFT : gfBaseConfig.instance.POS_EVENT.RIGHT;
            this.node.setPosition(pos);
          }
        }

        setInteractableButton(interactable) {
          this.node.getComponent(Button).interactable = interactable;
        }

        resetButton() {
          this.unscheduleAllCallbacks();
          this.txtEventTime.string = '';
          this.tray && this.tray.reset();
        }

        resetOnExitGameRoom() {
          this.resetButton();
          this.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

        onUpdateEventTime() {
          const eventData = gfEventController.instance.eventData;
          const timeRemain = Math.floor((eventData.EventEndTime - gfDataStore.instance.getTime()) / 1000);
          this.updateTimer(timeRemain);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtEventTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tray", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventController.ts", ['cc', './state-machine.min.mjs_cjs=&original=.js', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './state-machine.min.js'], function (exports) {
  var cclegacy, _decorator, gfBaseEvents, gfEventEmitter, gfDataStore, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, null, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "76b5aC7An9IlI1dm1VFd4+8", "gfEventController", undefined);

      const STATE = {
        IDLE: 'idle',
        COMING: 'coming',
        PLAYING: 'playing',
        END: 'end'
      };
      const TRANSITION = {
        GO_IDLE: 'goIdle',
        GO_COMING: 'goComing',
        GO_PLAYING: 'goPlaying',
        GO_END: 'goEnd'
      };
      const {
        ccclass,
        property
      } = _decorator;
      let gfEventController = exports('gfEventController', (_dec = ccclass('gfEventController'), _dec(_class = (_class2 = class gfEventController {
        constructor() {
          this._fsm = void 0;
          this.eventData = null;
          this.isGameShow = true;
          gfEventController.instance = this;
          this._fsm = null;
          this.initFSM();
          this.initEvents();
        }

        initFSM() {
          this._fsm = new _cjsExports({
            init: STATE.IDLE,
            observeUnchangedState: true,
            transitions: [{
              name: TRANSITION.GO_IDLE,
              from: "*",
              to: STATE.IDLE
            }, {
              name: TRANSITION.GO_COMING,
              from: "*",
              to: STATE.COMING
            }, {
              name: TRANSITION.GO_PLAYING,
              from: "*",
              to: STATE.PLAYING
            }, {
              name: TRANSITION.GO_END,
              from: "*",
              to: STATE.END
            }],
            data: {},
            methods: {
              onComing: this.onComing.bind(this),
              onPlaying: this.onPlaying.bind(this),
              onEnd: this.onEnd.bind(this),
              onIdle: this.onIdle.bind(this),

              onInvalidTransition() {//cc.warn("EVENT: Transition", transition, "from", from, "is not allowed");
              },

              onTransition() {//cc.warn("EVENT: From ", lifecycle.from, " to ", lifecycle.to);
              }

            }
          });
        }

        initEvents() {
          registerEvent(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, this.onEventStatus, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.gameHide, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.gameShow, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.goIdle, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
        }

        goIdle() {
          this._fsm.goIdle();
        }

        gameHide() {
          this.isGameShow = false;
          this.goIdle();
        }

        gameShow() {
          this.isGameShow = true;

          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.SEND_GET_EVENT_INFO);
          }
        }

        onComing() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_COMING, this.eventData);
        }

        onPlaying() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_PLAYING, this.eventData);
        }

        onEnd() {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_END, this.eventData);
        }

        onIdle() {
          this.setEventData(null);
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.EVENT_IDLE);
        }

        onEventStatus(data) {
          //if(!this.isGameShow) return;
          if (!data.EventDetail && this.isEventPlaying()) {
            if (gfDataStore.instance.getTime() > data.EventStartTime && gfDataStore.instance.getTime() < data.EventEndTime) {
              this.eventData.EventStartTime = data.EventStartTime;
              this.eventData.EventEndTime = data.EventEndTime;
              this.setEventData(this.eventData ? this.eventData : null);
              gfDataStore.instance.setSelfInfo({
                EventInfo: this.eventData
              });
              gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_TIME);
              return;
            }
          } // cc.warn('onEventStatus', data);


          this.setEventData(data ? data : null);

          if (!this.eventData) {
            console.warn('Event not started'); // this.goIdle();

            return;
          }

          gfDataStore.instance.setSelfInfo({
            EventInfo: this.eventData
          });
          const {
            EventStartTime,
            EventEndTime
          } = this.eventData;

          if (gfDataStore.instance.getTime() < EventStartTime) {
            this._fsm.goComing();
          } else if (gfDataStore.instance.getTime() > EventEndTime) {
            this._fsm.goEnd();
          } else {
            this._fsm.goPlaying();
          }
        }

        setEventData(data) {
          this.eventData = data;
        }

        getEventData() {
          return this.eventData;
        }

        updateListPlayer(data) {
          if (!this.isEventPlaying()) return;

          for (let i = 0; i < data.length; i++) {
            const userInfo = data[i];
            const eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(userInfo.DeskStation);

            if (eventTray && userInfo.EventDetail) {
              eventTray.updateTray(userInfo.EventDetail);
            }
          }
        }

        playerJoinBoard(userInfo = null) {
          if (!this.isEventPlaying()) return;
          const eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(userInfo.DeskStation);

          if (eventTray) {
            eventTray.updateTray(userInfo.EventDetail);
          }
        }

        playerLeaveBoard(data = null) {
          const eventTray = gfReferenceManager.instance.getEventTrayByDeskStation(data.DeskStation);

          if (eventTray) {
            eventTray.hide();

            if (data.DeskStation != gfDataStore.instance.getSelfDeskStation()) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.REMOVE_EVENT_EFFECT_PLAYER, data);
            }
          }
        }

        checkShowIntroEvent() {
          let canShow = true;

          if (this.isEventEnd()) {
            canShow = false;
          }

          return canShow;
        }

        isEventEnd() {
          return this._fsm.is(STATE.END);
        }

        isEventPlaying() {
          return this._fsm.is(STATE.PLAYING);
        }

        isEventComing() {
          return this._fsm.is(STATE.COMING);
        }

        refreshPage() {
          this.destroy();
        }

        destroy() {
          removeEvents(this);
          this._fsm = null;
        }

      }, _class2.instance = void 0, _class2)) || _class));
      gfEventController.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventEmitter.ts", ['cc', './events.mjs_cjs=&original=.js', './events.js'], function (exports) {
  var cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2f583X/Zc5F2JpcA+eFNRHo", "gfEventEmitter", undefined);

      class gfEventEmitter {
        constructor() {
          this._emiter = void 0;
          gfEventEmitter.instance = this;
          this._emiter = new _cjsExports();

          this._emiter.setMaxListeners(100);
        }

        emit(...args) {
          this._emiter.emit(...args);
        }

        registerEvent(event, listener) {
          this._emiter.on(event, listener);
        }

        removeEvent(event, listener) {
          this._emiter.removeListener(event, listener);
        }

        destroy() {
          this._emiter.removeAllListeners();

          this._emiter = null;
          gfEventEmitter.instance = null;
        }

      }

      exports('default', gfEventEmitter); // gfEventEmitter.instance = null;

      gfEventEmitter.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventHistory.ts", ['cc', './gfBaseHistory.ts'], function (exports) {
  var cclegacy, _decorator, GfBaseHistory;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d2ed1OKpCNCA6KvmugSfjqW", "gfEventHistory", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventHistory = exports('gfEventHistory', (_dec = ccclass('gfEventHistory'), _dec(_class = class gfEventHistory extends GfBaseHistory {
        initData(data) {
          const {
            gameId,
            url
          } = data;
          this.jpPrefix = "";
          this.gameId = gameId;
          this.url = url;
        }

        requestDataPage(page, quantity, callback, callbackErr) {
          let from = (page - 1) * quantity;
          let requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr);
        }

        formatResponseData(res) {
          if (res && res.data && res.data.items) {
            res.data = res.data.items;
          }
        }

        onRequestResponse(res) {
          this.formatResponseData(res);
          super.onRequestResponse(res);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventItemEffect.ts", ['cc', './gfActionHelper.ts'], function (exports) {
  var cclegacy, Component, tween, _decorator, scaleTo, moveTo;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      scaleTo = module.scaleTo;
      moveTo = module.moveTo;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bfc11zHkl5DBaDj4j/zg+DD", "gfEventItemEffect", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventItemEffect = exports('gfEventItemEffect', (_dec = ccclass('gfEventItemEffect'), _dec(_class = class gfEventItemEffect extends Component {
        constructor(...args) {
          super(...args);
          this.callbackFunc = void 0;
          this.listAction = void 0;
        }

        onLoad() {
          this.node['playAnimation'] = this.playAnimation.bind(this);
        }

        playAnimation(dataInfo, callback) {
          const {
            startPos
          } = dataInfo;
          this.callbackFunc = callback;
          this.node.setPosition(startPos);
          this.listAction = tween(this.node).then(this.onStart(dataInfo)).then(this.onFly(dataInfo)).then(this.onFinish(dataInfo)).start();
        }

        onStart(dataInfo) {
          return tween().then(scaleTo(0.5, 3)).delay(0.5);
        }

        onFly(dataInfo) {
          const {
            endPos
          } = dataInfo;
          return tween().parallel(tween().then(scaleTo(0.8, 1)), tween().then(moveTo(1, endPos))).delay(0.5);
        }

        onFinish(dataInfo) {
          return tween().call(() => {
            if (this.callbackFunc && typeof this.callbackFunc === 'function') {
              this.callbackFunc();
            }

            this.node.destroy();
          });
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventTray.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, SpriteFrame, _decorator, Component, Sprite, instantiate, UITransform, convertAssetArrayToObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4a884517WZGQ7yo8DY9f/pi", "gfEventTray", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventTray = exports('gfEventTray', (_dec = ccclass('gfEventTray'), _dec2 = property(Node), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = class gfEventTray extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listItem", _descriptor, this);

          _initializerDefineProperty(this, "listIcon", _descriptor2, this);

          this.assetIcon = void 0;
        }

        onLoad() {
          this.node.active = false;
          this.assetIcon = convertAssetArrayToObject(this.listIcon);
        }

        updateTray(listItem = []) {
          if (!Array.isArray(listItem)) return;
          this.reset();
          listItem.forEach(itemId => {
            this.listItem[itemId - 1].getComponent(Sprite).spriteFrame = this.assetIcon[itemId - 1 + "_pick"];
          });
        }

        hide() {
          this.node.active = false;
        }

        reset() {
          this.node.active = true;
          this.listItem.forEach((item, index) => {
            item.getComponent(Sprite).spriteFrame = this.assetIcon[index + "_normal"];
          });
        }

        cloneListItem() {
          const listItemClone = [];
          this.listItem.forEach(item => {
            listItemClone.push(instantiate(item));
          });
          return listItemClone;
        }

        getPositionByWorldSpace(itemID) {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(this.listItem[itemID - 1].position);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventTrayController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfEventTray.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, gfDataStore, registerEvent, removeEvents, gfReferenceManager, gfBaseEvents, gfEventTray;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventTray = module.gfEventTray;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "67264raaYBFSbBVl0wcfbxQ", "gfEventTrayController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventTrayController = exports('gfEventTrayController', (_dec = ccclass('gfEventTrayController'), _dec2 = property(gfEventTray), _dec(_class = (_class2 = class gfEventTrayController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listEventTray", _descriptor, this);
        }

        onLoad() {
          gfReferenceManager.instance.setData({
            EventTrayLayer: this.node
          });
          this.node['getEventTrayByDeskStation'] = this.getEventTrayByDeskStation.bind(this);
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.EVENT_TRAY_LAYER.RESET_EVENT_TRAY, this.resetAllEventTray, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_COMING, this.onEventComing, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_PLAYING, this.onEventPlaying, this);
          registerEvent(gfBaseEvents.EVENT.EVENT_END, this.onEventEnd, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllEventTray, this);
        }

        onEventComing() {
          this.listEventTray.forEach((eventTray, index) => {
            const player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player && player.isActive()) {
              eventTray.hide();
            }
          });
        }

        onEventEnd() {
          this.listEventTray.forEach((eventTray, index) => {
            const player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player && player.isActive()) {
              eventTray.hide();
            }
          });
        }

        onEventPlaying() {
          this.listEventTray.forEach((eventTray, index) => {
            const player = gfReferenceManager.instance.getPlayerByIndex(index);

            if (player) {
              eventTray.reset();
            }
          });
        }

        getEventTrayByDeskStation(deskStation) {
          if (!this.listEventTray) return null;
          let index = deskStation;

          if (gfDataStore.instance.getSelfDeskStation() >= 2) {
            index = [2, 3, 0, 1][deskStation];
          }

          return this.listEventTray[index];
        }

        hideEventTray(DeskStation) {
          const eventTray = this.getEventTrayByDeskStation(DeskStation);

          if (eventTray) {
            eventTray.hide();
          }
        }

        resetEventTray(DeskStation) {
          const eventTray = this.getEventTrayByDeskStation(DeskStation);

          if (eventTray) {
            eventTray.reset();
          }
        }

        hideAllEventTray() {
          this.listEventTray.forEach(eventTray => {
            eventTray.hide();
          });
        }

        resetAllEventTray() {
          this.listEventTray.forEach(eventTray => {
            eventTray.reset();
          });
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listEventTray", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventWinWheel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, tween, registerEvent, removeEvents, gfBaseEvents, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d5ff4RiX5REGYOZpdr6u4vw", "gfEventWinWheel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfEventWinWheel = exports('gfEventWinWheel', (_dec = ccclass('gfEventWinWheel'), _dec2 = property(Node), _dec(_class = (_class2 = class gfEventWinWheel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtCoin", _descriptor, this);

          this.CONFIG_TIME = null;
          this.winValue = 0;
          this.callbackFunc = null;
        }

        onLoad() {
          this.initEvents();
          this.CONFIG_TIME = {
            START: 0.2,
            IDLE: 4,
            END: 0.2
          };
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        }

        playAnimation(content, callback) {
          this.node.active = true;
          this.resetWheel();
          this.callbackFunc = callback;
          this.winValue = content.GoldReward;
          tween(this.node).call(() => {
            this.animStart();
          }).delay(this.CONFIG_TIME.START).call(() => {
            this.animIdle();
          }).delay(this.CONFIG_TIME.IDLE).call(() => {
            this.animEnd();
          }).start();
        }

        animStart() {}

        animIdle() {
          this.txtCoin.active = true;
          this.txtCoin.onUpdateValue(this.winValue, (this.CONFIG_TIME.IDLE - 1) * 1000);
        }

        animEnd() {
          this.txtCoin.active = false;
          stopAllActions(this.node);
          tween(this.node).delay(this.CONFIG_TIME.END).call(() => {
            if (this.callbackFunc && typeof this.callbackFunc === 'function') {
              this.callbackFunc();
            }

            this.resetOnExit();
          }).start();
        }

        resetWheel() {
          if (this.txtCoin.resetValue) {
            this.txtCoin.resetValue();
          }

          this.txtCoin.active = false;
          stopAllActions(this.node);
        }

        resetOnExit() {
          this.resetWheel();
          this.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionAnimationClip.ts", ['cc', './gfNode.ts'], function (exports) {
  var cclegacy, Animation, _decorator, gfNode;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      _decorator = module._decorator;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d40a0zIbJ9HuYHRHJ9tAM4K", "gfExplosionAnimationClip", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfExplosionAnimationClip = exports('gfExplosionAnimationClip', (_dec = ccclass('gfExplosionAnimationClip'), _dec(_class = class gfExplosionAnimationClip extends gfNode {
        onEnable() {
          let animation = this.node.getComponent(Animation);

          if (animation) {
            animation.play();
          }
        }

        onFinished() {
          this.returnPool();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, sp, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e09b0R5llpCqJtPjP0RA4as", "gfExplosionSpine", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfExplosionSpine = exports('gfExplosionSpine', (_dec = ccclass('gfExplosionSpine'), _dec(_class = (_class2 = class gfExplosionSpine extends gfNode {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "animationName", _descriptor, this);
        }

        onEnable() {
          this.scheduleOnce(() => {
            const spine = this.node.getComponent(sp.Skeleton);
            spine.setAnimation(0, this.animationName, false);
            spine.setCompleteListener(() => {
              this.returnPool();
            });
          }, 0);
        }

        returnPool() {
          this.unscheduleAllCallbacks();
          super.returnPool();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "animation";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExtraNodePoolAssets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCustomDataType.ts', './gfPoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, gfPoolSpriteAssetExist, gfPoolSpriteAsset, gfPoolSpineAssetExist, gfPoolSpineAsset, gfAnimationFXAssetExist, gfAnimationFXAsset, gfPoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfPoolSpriteAssetExist = module.gfPoolSpriteAssetExist;
      gfPoolSpriteAsset = module.gfPoolSpriteAsset;
      gfPoolSpineAssetExist = module.gfPoolSpineAssetExist;
      gfPoolSpineAsset = module.gfPoolSpineAsset;
      gfAnimationFXAssetExist = module.gfAnimationFXAssetExist;
      gfAnimationFXAsset = module.gfAnimationFXAsset;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "c589bIR2GxK146v8Btmn1Qj", "gfExtraNodePoolAssets", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfExtraNodePoolAsset = exports('default', (_dec = ccclass('gfExtraNodePoolAsset'), _dec2 = property(gfPoolSpriteAssetExist), _dec3 = property(gfPoolSpriteAsset), _dec4 = property(gfPoolSpineAssetExist), _dec5 = property(gfPoolSpineAsset), _dec6 = property(gfAnimationFXAssetExist), _dec7 = property(gfAnimationFXAsset), _dec(_class = (_class2 = class gfExtraNodePoolAsset extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "arrExtraPoolSpriteAsset", _descriptor, this); //Add more sprite


          _initializerDefineProperty(this, "arrNewPoolSpriteConfig", _descriptor2, this); //Add new sprite


          _initializerDefineProperty(this, "arrExtraPoolSpineAsset", _descriptor3, this); //Add more spine


          _initializerDefineProperty(this, "arrNewPoolSpineConfig", _descriptor4, this); //Add new spine


          _initializerDefineProperty(this, "arrExtraPoolAnimClipAsset", _descriptor5, this); // Add more animation clip


          _initializerDefineProperty(this, "arrNewPoolAnimClipConfig", _descriptor6, this);
        } // Add new animation clip


        getArrExtraPoolSpriteAsset() {
          return this.arrExtraPoolSpriteAsset;
        }

        getArrNewPoolSpriteConfig() {
          return this.arrNewPoolSpriteConfig;
        }

        getArrExtraPoolSpineAsset() {
          return this.arrExtraPoolSpineAsset;
        }

        getArrNewPoolSpineConfig() {
          return this.arrNewPoolSpineConfig;
        }

        getArrExtraPoolAnimClipAsset() {
          return this.arrExtraPoolAnimClipAsset;
        }

        getArrNewPoolAnimClipConfig() {
          return this.arrNewPoolAnimClipConfig;
        }

        addAllExtraPool() {
          this.addExtraSpriteAsset();
          this.addExtraSpineAsset();
          this.addExtraAnimClipAsset();
          this.addNewSpriteConfig();
          this.addNewSpineConfig();
          this.addNewAnimClipConfig();
        }

        removeAllExtraPool() {
          this.removeExtraSpriteAsset();
          this.removeExtraSpineAsset();
          this.removeExtraAnimClipAsset();
          this.removeNewSpriteConfig();
          this.removeNewSpineConfig();
          this.removeNewAnimClipConfig();
        }

        addExtraSpriteAsset() {
          //Update sprite to pool
          const length = this.arrExtraPoolSpriteAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.updatePoolData(this.arrExtraPoolSpriteAsset[i]);
          }
        }

        addNewSpriteConfig() {
          //Add new sprite pool and asset
          const length = this.arrNewPoolSpriteConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.createNewPool(this.arrNewPoolSpriteConfig[i]);
          }
        }

        addExtraSpineAsset() {
          //Update spine to pool
          const length = this.arrExtraPoolSpineAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.updatePoolData(this.arrExtraPoolSpineAsset[i]);
          }
        }

        addNewSpineConfig() {
          //Add new spine pool and asset
          const length = this.arrNewPoolSpineConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.createNewPool(this.arrNewPoolSpineConfig[i]);
          }
        }

        addExtraAnimClipAsset() {
          //Update animation clip to pool
          const length = this.arrExtraPoolAnimClipAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.updatePoolData(this.arrExtraPoolAnimClipAsset[i]);
          }
        }

        addNewAnimClipConfig() {
          //Add new animation clip pool and asset
          const length = this.arrNewPoolAnimClipConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.createNewPool(this.arrNewPoolAnimClipConfig[i]);
          }
        }

        removeExtraSpriteAsset() {
          //Remove only sprite
          const length = this.arrExtraPoolSpriteAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removeRoomAsset(this.arrExtraPoolSpriteAsset[i]);
          }
        }

        removeNewSpriteConfig() {
          //Remove node pool and sprite
          const length = this.arrNewPoolSpriteConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removePool(this.arrNewPoolSpriteConfig[i]);
          }
        }

        removeExtraSpineAsset() {
          //Remove only spine
          const length = this.arrExtraPoolSpineAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removeRoomAsset(this.arrExtraPoolSpineAsset[i]);
          }
        }

        removeNewSpineConfig() {
          //Remove node pool and spine
          const length = this.arrNewPoolSpineConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removePool(this.arrNewPoolSpineConfig[i]);
          }
        }

        removeExtraAnimClipAsset() {
          //Remove only animation clip
          const length = this.arrExtraPoolAnimClipAsset.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removeRoomAsset(this.arrExtraPoolAnimClipAsset[i]);
          }
        }

        removeNewAnimClipConfig() {
          //Remove node pool and animation clip
          const length = this.arrNewPoolAnimClipConfig.length;

          for (let i = 0; i < length; i++) {
            gfPoolManager.instance.removePool(this.arrNewPoolAnimClipConfig[i]);
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrExtraPoolSpriteAsset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "arrNewPoolSpriteConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "arrExtraPoolSpineAsset", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "arrNewPoolSpineConfig", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "arrExtraPoolAnimClipAsset", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "arrNewPoolAnimClipConfig", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExtraWheelContainer.ts", ['cc', './gfReferenceManager.ts', './gfEffectLayer.ts', './gfUtilities.ts', './gfBaseEvents.ts', './gfWheelContainer.ts'], function (exports) {
  var cclegacy, _decorator, gfReferenceManager, gfEffectLayer, registerEvent, removeEvents, gfBaseEvents, gfWheelContainer;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfWheelContainer = module.gfWheelContainer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b39d21kE2tH6J+J8hejaCQT", "gfExtraWheelContainer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfExtraWheelContainer = exports('gfExtraWheelContainer', (_dec = ccclass('gfExtraWheelContainer'), _dec(_class = class gfExtraWheelContainer extends gfWheelContainer {
        constructor(...args) {
          super(...args);
          this.isExtra = true;
        }

        onLoad() {
          this.addToWheelController();
          this.initEvents();
        }

        addToWheelController() {
          const effectLayer = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          const wheelController = effectLayer.wheelController;
          wheelController.addExtraWheel(this);
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onExitGameRoom, this);
        }

        onExitGameRoom() {
          removeEvents(this);
          this.node.removeFromParent();
          this.node.destroy();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupData.ts", ['cc', './gfDataStore.ts'], function (exports) {
  var cclegacy, gfDataStore;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "acc16eEHr9LFqics3/l2pIb", "gfFishGroupData", undefined);

      class gfFishGroupData {
        constructor() {
          this.buildTick = void 0;
          this.fishIndex = void 0;
          this.listFish = void 0;
          this.ParadeKind = void 0;
          this.customZIndex = -1;
          this.timeSkipped = 0;
          this.flipCoord = 1;
        }

        destroy() {
          gfFishGroupData.instance = null;
        }

        _initData(data) {
          this.buildTick = data.buildTick;
          this.timeSkipped = data.timeSkipped || 0;
          this.flipCoord = gfDataStore.instance.getSelfDeskStation() > 1 ? -1 : 1;
          this.fishIndex = 0;
          this.listFish = data.ListFish;
          this.ParadeKind = data.ParadeKind;
          this.customZIndex = -1;
        }

        _makeFishData(data) {
          if (!data || data.FishKind < 0) return null;
          data.TimeFreeze = (data.TimeFreeze || 0) / 1000 / 2;
          data.isFishGroup = true;
          data.buildTick = this.buildTick;
          data.isResume = this.timeSkipped != 0;

          if (this.customZIndex > -1) {
            data.zIndex = this.customZIndex;
          }

          return data;
        }

        _getFishData() {
          return this._makeFishData(this.listFish[this.fishIndex]);
        }

        _updateCustomZIndex(zIndex) {
          this.customZIndex = zIndex;
        }

        static initData(data) {
          if (!gfFishGroupData.instance) {
            gfFishGroupData.instance = new gfFishGroupData();
          }

          gfFishGroupData.instance._initData(data);
        }

        static getFishData() {
          return gfFishGroupData.instance._getFishData();
        }

        static getNextFishData() {
          const data = this.getFishData();
          this.incIndex();
          return data;
        }

        static incIndex() {
          ++gfFishGroupData.instance.fishIndex;
        }

        static isFlipped() {
          return gfFishGroupData.instance.flipCoord < 0;
        }

        static get flipCoord() {
          return gfFishGroupData.instance.flipCoord;
        }

        static get timeSkipped() {
          return gfFishGroupData.instance.timeSkipped;
        }

        static updateCustomZIndex(zIndex) {
          gfFishGroupData.instance._updateCustomZIndex(zIndex);
        }

      }

      exports('default', gfFishGroupData);
      gfFishGroupData.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupHelper.ts", ['cc', './gfFishManager.ts', './gfGameScheduler.ts', './gfFishGroupData.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfFishMoveActions.ts', './gfDataStore.ts', './gfFishUpdateAngle.ts', './gfFishUpdateOutScreen.ts'], function (exports) {
  var cclegacy, v2, _decorator, tween, Vec2, gfFishManager, gfGameScheduler, gfFishGroupData, gfBaseConfig, v2Distance, FishMoveActions, FISH_ACTION, gfDataStore, gfFishUpdateAngle, gfFishUpdateOutScreen;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
      tween = module.tween;
      Vec2 = module.Vec2;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishUpdateAngle = module.gfFishUpdateAngle;
    }, function (module) {
      gfFishUpdateOutScreen = module.gfFishUpdateOutScreen;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "5ed8cyl4MlMQagcLlHz1XTa", "gfFishGroupHelper", undefined);

      const OutScreenPos = v2(-1000, -1000);
      const {
        ccclass
      } = _decorator;
      let FishGroupHelper = exports('default', (_dec = ccclass('FishGroupHelper'), _dec(_class = (_class2 = class FishGroupHelper {
        constructor() {
          this.fishDelay = 0;
          this.fishDelay = 0;
        }

        static get instance() {
          if (!this._instance) {
            this._instance = new FishGroupHelper();
          }

          return this._instance;
        }

        resetDelayCounting() {
          this.fishDelay = 0;
        }

        _getDelayTime() {
          return ++this.fishDelay / 100;
        }

        static initFishGroupData(data) {
          FishGroupHelper.instance.resetDelayCounting();
          data.timeSkipped = (gfDataStore.instance.getTime() - data.buildTick) / 1000 - this.FISH_START_DELAY;
          gfFishGroupData.initData(data);
        }

        static createFishWithDelay(data) {
          const delay = this.getDelayTime();

          if (!data.isResume) {
            gfGameScheduler.scheduleOnce(() => {
              this.createAndRunFish(data, delay);
            }, delay);
          } else {
            this.createAndRunFish(data);
          }
        }

        static getDelayTime() {
          return FishGroupHelper.instance._getDelayTime();
        }

        static createAndRunFish(data, delay = -1) {
          const fish = gfFishManager.instance.createFishWithData(data);
          if (!fish) return;
          fish.moveAction = tween(fish.node);
          const moveAction = data.moveAction.getActions();
          const position = data.moveAction.getStartPositionV3();
          fish.node.angle = data.moveAction.getStartAngle();

          if (delay > -1) {
            var _fish$getComponent, _fish$getComponent2;

            fish.node.setPosition(OutScreenPos.x, OutScreenPos.y, position.z);
            fish.setDie(true);
            (_fish$getComponent = fish.getComponent(gfFishUpdateAngle)) == null ? void 0 : _fish$getComponent.setDie(true);
            (_fish$getComponent2 = fish.getComponent(gfFishUpdateOutScreen)) == null ? void 0 : _fish$getComponent2.setDie(true);
            fish.moveAction.delay(this.FISH_START_DELAY - delay).call(() => {
              var _fish$getComponent3, _fish$getComponent4;

              fish.node.setPosition(position);
              fish.setDie(false);
              (_fish$getComponent3 = fish.getComponent(gfFishUpdateAngle)) == null ? void 0 : _fish$getComponent3.setDie(false);
              (_fish$getComponent4 = fish.getComponent(gfFishUpdateOutScreen)) == null ? void 0 : _fish$getComponent4.setDie(false);
            }).then(moveAction).call(() => {
              fish.onDie();
            }).start();
          } else {
            fish.node.setPosition(position);
            fish.moveAction.then(moveAction).call(() => {
              fish.onDie();
            }).start();
          }
        }

        static createFishLine(fishCount, yCoord, space, speed, xOffset = 0) {
          const {
            AppSize
          } = gfBaseConfig.instance;
          let LEFT = -200;
          let RIGHT = AppSize.Width + 200;

          if (gfFishGroupData.isFlipped()) {
            [LEFT, RIGHT] = [RIGHT, LEFT];
            yCoord = AppSize.Height - yCoord;
          }

          const distance = Math.abs(RIGHT - LEFT) + fishCount * space - xOffset;

          for (let i = 0; i < fishCount; ++i) {
            const startX = LEFT - (i * space - xOffset) * gfFishGroupData.flipCoord;
            this.createSimpleMovingFish(v2(startX, yCoord), v2(startX + distance * gfFishGroupData.flipCoord, yCoord), 0, speed);
          }
        }

        static createSimpleMovingFish(startPos, destPos, baseDelay, speed) {
          const timeSkipped = gfFishGroupData.timeSkipped;
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          const distance = v2Distance(destPos, startPos);
          const baseMoveTime = distance / speed;
          const direction = destPos.x < startPos.x ? -1 : 1;
          const distanceHaveMove = speed * timeSkipped;
          startPos = new Vec2(startPos.x + distanceHaveMove * direction, startPos.y);
          data.moveAction = new FishMoveActions(startPos);
          data.moveAction.appendAction(FISH_ACTION.Delay, baseDelay);
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime - timeSkipped,
            x: destPos.x,
            y: destPos.y
          });
          FishGroupHelper.createFishWithDelay(data);
        }

        static convertFlipCoordinate(point) {
          if (gfFishGroupData.isFlipped()) {
            const {
              AppSize
            } = gfBaseConfig.instance;
            return v2(AppSize.Width - point.x, AppSize.Height - point.y);
          }

          return point;
        }

      }, _class2.FISH_START_DELAY = 4, _class2._instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupMgr.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Component, _decorator, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5c64eKpjJFHLQ7FVr7G13D", "gfFishGroupMgr", undefined);

      const {
        ccclass
      } = _decorator;
      let gfFishGroupMgr = exports('default', (_dec = ccclass('gfFishGroupMgr'), _dec(_class = class gfFishGroupMgr extends Component {
        onLoad() {
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.createFishGroup, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, this.resumeFishGroup, this);
        }

        resumeFishGroup(data) {
          if (data.ParadeKind >= 0) {
            this.createFishGroup({
              ListFish: data.ListParadeFish,
              ParadeKind: data.ParadeKind,
              buildTick: data.TimeBuildFishParade
            });
          }
        }

        createFishGroup(data) {}

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts', './utils.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, gfReferenceManager, convertAssetArrayToObject, gfEventEmitter, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fe4e8FoSmVLkbx8Xyl0v6et", "gfFishLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfFishLayer = exports('default', (_dec = ccclass('gfFishLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = class gfFishLayer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listPrefabFish", _descriptor, this);

          this.fishObjects = {};
        }

        onLoad() {
          gfReferenceManager.instance.setData({
            FishLayer: this.node
          });

          if (this.listPrefabFish) {
            this.fishObjects = convertAssetArrayToObject(this.listPrefabFish);
          }

          this.node['getPrefabFishByKind'] = this.getPrefabFishByKind.bind(this); // turn on debug physic
          // PhysicsSystem2D.instance.enable = true;
          // PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All;
          // this.scheduleOnce(this.createFishGroupTest, 2); 
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.FISH_LOG, this.fishLog, this);
        }

        createFishGroupTest() {
          const fishCount = [270];
          const fishKind = [2];
          const ParadeKind = 0;
          const ListFish = [];
          let index = 0;

          for (let i = 0; i < fishCount.length; ++i) {
            for (let j = 0; j < fishCount[i]; ++j) {
              ListFish.push({
                FishID: ++index,
                FishKind: fishKind[i]
              });
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, {
            ParadeKind,
            ListFish
          });
        }

        getPrefabFishByKind(fishKind) {
          return this.fishObjects[fishKind];
        }

        fishLog(meta = 'fishLog') {// const fishLogEvent = new CustomEvent('FISH_LOG', true);
          // fishLogEvent.setUserData({meta});
          // this.node.dispatchEvent(fishLogEvent);
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPrefabFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishManager.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfPoolManager.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfBaseFish.ts', './gfGameScheduler.ts', './gfLuckyFish.ts', './gfFishLayer.ts', './gfBossController.ts'], function (exports) {
  var Intersection2D, instantiate, warn, cclegacy, gfEventEmitter, gfBaseEvents, registerEvent, randomBetween, removeEvents, gfBaseConfig, gfDataStore, gfPoolManager, gfReferenceManager, gfNodePoolConfig, gfBaseFish, gfGameScheduler, GfLuckyFish, gfFishLayer, gfBossController;
  return {
    setters: [function (module) {
      Intersection2D = module.Intersection2D;
      instantiate = module.instantiate;
      warn = module.warn;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      randomBetween = module.randomBetween;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      GfLuckyFish = module.GfLuckyFish;
    }, function (module) {
      gfFishLayer = module.default;
    }, function (module) {
      gfBossController = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3b21c8WzdJmK92C9W5kija", "gfFishManager", undefined);

      class gfFishManager {
        constructor() {
          this.listFish = void 0;
          gfFishManager.instance = this;
          this.listFish = [];
          this.initEvent();
        }

        initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH, this.createListFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.catchFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.updateRoomData, this);
          registerEvent(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this.removeFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.GAME_LAYER.MOVE_OUT_ALL_FISHES, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.gameHide, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_LIST_FISH, this.catchListFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, this.setDieListFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, this.chooseFishByPoint, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.onScreenResize, this);
        }

        gameHide() {
          this.removeAll(); //@TODO: handle other logic on hide game here
        }

        createListFish(data) {
          for (let i = 0; i < data.length; ++i) {
            data[i].isResume = data.isResume;
            const fish = this.createFishWithData(data[i]);

            if (fish) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_ONE_FISH, {
                fish,
                fishData: data[i]
              });
            }
          }
        }

        setDieListFish(data) {
          const {
            ListFish
          } = data;
          ListFish && ListFish.forEach(fishDieInfo => {
            const fish = this.getFishById(fishDieInfo.FishID);
            fish && fish.setDie(true);
          });
        }

        catchListFish(data) {
          const {
            ListFish
          } = data;
          ListFish && ListFish.forEach(fishInfo => {
            gfGameScheduler.scheduleOnce(() => {
              this.catchFish(fishInfo);
            }, fishInfo.timeDelay || 0);
          });
        }

        catchFish(data) {
          if (!data.isDie) return;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && !data.isSkill && data.GoldReward) {
            player.addGoldReward(data.GoldReward);
          }

          const fish = this.getFishById(data.FishID);

          if (fish) {
            fish.onCatch(data);

            if (player && data.listItem) {
              const dataCatch = {
                listItem: data.listItem,
                DeskStation: data.DeskStation,
                isMe: player.isMe,
                Fish: fish,
                skipUpdateWallet: data.skipUpdateWallet
              };
              this.processItemSkill(dataCatch);
            }
          } else {
            if (player && player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, data);
            }
          }
        }

        processItemSkill(data) {
          // handle in each module, if have no module then do nothing
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PROCESS_ITEM_SKILLS, data);
        }

        updateRoomData(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, data);

          if (data.ListFish && data.ListFish.length > 0) {
            data.ListFish.isResume = true;
            this.createListFish(data.ListFish);
          }
        }

        getListFish() {
          return this.listFish;
        }

        getFishById(id) {
          for (let i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].getId() === id) {
              return this.listFish[i];
            }
          }

          return null;
        }

        moveOutAllFishes() {
          for (let i = this.listFish.length - 1; i >= 0; --i) {
            this.listFish[i].moveOut();
          }
        }

        getFishByType(type, ignoreFishID = null) {
          const listFish = [];

          for (let i = 0; i < this.listFish.length; ++i) {
            const fish = this.listFish[i];

            if (fish.getKind() === type && fish.isAvailable() && fish.getId() !== ignoreFishID) {
              listFish.push(this.listFish[i]);
            }
          }

          if (listFish.length > 0) {
            return listFish[randomBetween(0, listFish.length - 1)];
          }

          return null;
        }

        getMinimumFishKind(ignoreKind) {
          let minFishKind = 9999;

          for (let i = 0; i < this.listFish.length; ++i) {
            const fish = this.listFish[i];

            if (fish.isAvailable() // && fish.checkMultiplier() === 1
            && !gfBaseConfig.instance.IsSpecialFish(fish.getKind()) && fish.getKind() !== ignoreKind && fish.getKind() < minFishKind) {
              minFishKind = fish.getKind();
            }
          }

          return minFishKind;
        }

        getFishForTargetAll(data) {
          let {
            lockFishKind,
            lockFish
          } = data;

          if (lockFishKind > -1) {
            const oldFishId = lockFish ? lockFish.getId() : null;
            const fish = this.getFishByType(lockFishKind, oldFishId);

            if (fish) {
              return fish;
            }
          }

          lockFishKind = this.getMinimumFishKind(lockFishKind);
          return this.getFishByType(lockFishKind);
        }

        chooseFishByPoint(point) {
          let fish = this.getFishByPoint(point);
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.ON_AFTER_CHOOSE_FISH, fish);
        }

        getFishByPoint(point) {
          let fishResult = null;

          for (let i = 0; i < this.listFish.length; ++i) {
            const fish = this.listFish[i];

            if (fish && fish.isAvailable()) {
              const boxList = fish.getListBox();

              if (boxList) {
                for (let j = 0; j < boxList.length; ++j) {
                  if (boxList[j].worldPoints && Intersection2D.pointInPolygon(point, boxList[j].worldPoints)) {
                    if (!fishResult || fishResult && fish.getZIndex() > fishResult.getZIndex()) {
                      fishResult = fish;
                    }
                  }
                }
              }
            }
          }

          return fishResult;
        }

        createFishWithData(data) {
          var _gfBossController$ins;

          let fish;
          const fishLayer = gfReferenceManager.instance.getNodeFishLayer();
          const componentFishLayer = fishLayer.getComponent(gfFishLayer);
          const prefabFish = componentFishLayer.getPrefabFishByKind(parseInt(data.FishKind));

          if ((_gfBossController$ins = gfBossController.instance) != null && _gfBossController$ins.isBossKind(data.FishKind)) {
            fish = gfBossController.instance.createBoss(data);
          } else if (prefabFish) {
            // Create by prefab
            const nodeFish = instantiate(prefabFish);
            nodeFish.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish = nodeFish.getComponent(gfBaseFish);
            fish.initFishData(data);
          } else {
            // Create by pool
            fish = gfPoolManager.instance.getFishWithData(data);
          }

          if (fish) {
            this.listFish.push(fish);
            return fish;
          }

          return null;
        }
        /*
        ****** findFishForAutoBot ******
        ** Priority Dragon -> MiniBoss -> LuckyFish -> NormalFish
        ** Config priority Dragon and MiniBoss saving in GameConfig.instance.PRIORITY_FISH
        */


        findFishForAutoBot() {
          if (gfDataStore.instance.getSelfInfo().isLockGun) {
            return null;
          }

          let fish;
          /** kiểm tra xem boss có trên màn hình và cắm máy có đang bật nó không để ưu tiên target boss **/

          fish = this.getSpecialFishForAutoBot();

          if (!fish) {
            fish = this.getLuckyFishInScreen();
          }

          if (!fish) {
            fish = this.getRandomFishForAutoBot();
          }

          return fish;
        }

        getSpecialFishForAutoBot() {
          let fish = null;

          for (let index = 0; index < gfBaseConfig.instance.PRIORITY_FISH.length; index++) {
            const fishKind = gfBaseConfig.instance.PRIORITY_FISH[index.toString()];

            if (gfDataStore.instance.getBotSetting().fishKindArr.indexOf(fishKind) >= 0) {
              fish = this.getFishByType(fishKind);
              if (fish) return fish;
            }
          }

          return null;
        }

        getRandomFishForAutoBot() {
          const arrayFish = gfDataStore.instance.getBotSetting().fishKindArr;
          let fish = null;
          let currFish = null;
          this.listFish = this.listFish.sort(() => Math.random() - 0.5);

          for (let i = 0; i < this.listFish.length; i++) {
            fish = this.listFish[i];

            if (fish.isAvailable() && arrayFish.indexOf(fish.getKind()) >= 0) {
              currFish = fish;
              break;
            }
          }

          return currFish;
        }

        getLuckyFishInScreen() {
          const arrayFishFind = gfDataStore.instance.getBotSetting().fishKindArr;

          for (let i = 0; i < this.listFish.length; i++) {
            var _fish$getComponent;

            const fish = this.listFish[i];

            if (((_fish$getComponent = fish.getComponent(GfLuckyFish)) == null ? void 0 : _fish$getComponent.getMultiplier()) > 1) {
              if (!fish.isAvailable() || arrayFishFind.indexOf(fish.getKind()) < 0) {
                return null;
              }

              return fish;
            }
          }

          return null;
        }

        onScreenResize() {
          for (let i = 0; i < this.listFish.length; ++i) {
            this.listFish[i].onScreenResize();
          }
        }

        removeFish(id) {
          const fish = this.getFishById(id);

          if (!fish) {
            warn(`FISH NOT FOUND!!! ${id}`);
            return false;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_EXTRA_EFFECT_ON_FISH, fish);
          this.listFish.splice(this.listFish.indexOf(fish), 1);
          return true;
        }

        removeAll() {
          for (let i = this.listFish.length - 1; i >= 0; i--) {
            const fish = this.listFish[i];

            if (!gfNodePoolConfig.instance.checkFishPoolByKind(fish.getKind())) {
              fish.onDie(true);
            }
          }

          this.listFish.length = 0;
        }

        destroy() {
          removeEvents(this);
          this.removeAll();
          gfFishManager.instance = null;
        }

      }

      exports('default', gfFishManager);
      gfFishManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishMoveActions.ts", ['cc', './gfActionHelper.ts', './gfFishGroupData.ts'], function (exports) {
  var cclegacy, v2, tween, v3, error, misc, gfBezierBy, gfBezierLengthBy, gfCircleBy, gfMoveByDistance, gfMoveBy, gfMoveTo, rotateTo, moveBySpring, scaleTo, gfFishGroupData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      tween = module.tween;
      v3 = module.v3;
      error = module.error;
      misc = module.misc;
    }, function (module) {
      gfBezierBy = module.gfBezierBy;
      gfBezierLengthBy = module.gfBezierLengthBy;
      gfCircleBy = module.gfCircleBy;
      gfMoveByDistance = module.gfMoveByDistance;
      gfMoveBy = module.gfMoveBy;
      gfMoveTo = module.gfMoveTo;
      rotateTo = module.rotateTo;
      moveBySpring = module.moveBySpring;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfFishGroupData = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4259czfmdNJr5sMWVhHKYwG", "gfFishMoveActions", undefined);

      let FISH_ACTION = exports('FISH_ACTION', /*#__PURE__*/function (FISH_ACTION) {
        FISH_ACTION[FISH_ACTION["Delay"] = 0] = "Delay";
        FISH_ACTION[FISH_ACTION["gfBezierBy"] = 1] = "gfBezierBy";
        FISH_ACTION[FISH_ACTION["MoveBy"] = 2] = "MoveBy";
        FISH_ACTION[FISH_ACTION["CircleBy"] = 3] = "CircleBy";
        FISH_ACTION[FISH_ACTION["MoveByDistance"] = 4] = "MoveByDistance";
        FISH_ACTION[FISH_ACTION["RotateTo"] = 5] = "RotateTo";
        FISH_ACTION[FISH_ACTION["MoveTo"] = 6] = "MoveTo";
        FISH_ACTION[FISH_ACTION["MoveSpring"] = 7] = "MoveSpring";
        FISH_ACTION[FISH_ACTION["ScaleTo"] = 8] = "ScaleTo";
        FISH_ACTION[FISH_ACTION["gfBezierLengthBy"] = 9] = "gfBezierLengthBy";
        return FISH_ACTION;
      }({}));

      class FishMoveActions {
        constructor(startPosition, angle = 0, timeSkipped = 0) {
          this.timeSkipped = void 0;
          this.moveAction = void 0;
          this.startPosition = void 0;
          this.startAngle = void 0;
          this.timeSkipped = timeSkipped ? timeSkipped : gfFishGroupData.timeSkipped;
          this.moveAction = [];
          this.startPosition = v2(startPosition);

          if (this.timeSkipped < 0) {
            const time = -this.timeSkipped;
            this.timeSkipped = 0;
            this.appendDelay({
              time
            });
          }

          this.startAngle = angle;
        }

        getActions() {
          const actionChain = tween();

          if (this.moveAction.length > 0) {
            for (let i = 0; i < this.moveAction.length; ++i) {
              actionChain.then(this.moveAction[i]);
            }

            return actionChain;
          }

          return actionChain.delay(0);
        }

        getStartPosition() {
          return this.startPosition;
        }

        getStartPositionV3() {
          return v3(this.startPosition.x, this.startPosition.y, 0);
        }

        getStartAngle() {
          return this.startAngle;
        }

        appendAction(name, prop) {
          switch (name) {
            case FISH_ACTION.Delay:
              this.appendDelay(prop);
              break;

            case FISH_ACTION.gfBezierBy:
              this.appendGfBezierBy(prop);
              break;

            case FISH_ACTION.CircleBy:
              this.appendCircleBy(prop);
              break;

            case FISH_ACTION.MoveByDistance:
              this.appendMoveByDistance(prop);
              break;

            case FISH_ACTION.MoveBy:
              this.appendMoveBy(prop);
              break;

            case FISH_ACTION.MoveTo:
              this.appendMoveTo(prop);
              break;

            case FISH_ACTION.RotateTo:
              this.appendRotateTo(prop);
              break;

            case FISH_ACTION.MoveSpring:
              this.appendMoveSprings(prop);
              break;

            case FISH_ACTION.ScaleTo:
              this.appendScaleTo(prop);
              break;

            case FISH_ACTION.gfBezierLengthBy:
              this.appendGfBezierLengthBy(prop);
              break;

            default:
              error('Invalid action');
          }
        }

        appendDelay(prop) {
          const {
            time
          } = prop;

          if (this.timeSkipped >= time) {
            this.timeSkipped -= time;
          } else {
            this.moveAction.push(tween().delay(time - this.timeSkipped));
            this.timeSkipped = 0;
          }
        }

        appendGfBezierBy(prop) {
          const {
            time,
            points
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(points.pop());
          } else {
            this.moveAction.push(gfBezierBy(time - this.timeSkipped, points, this.timeSkipped));
            this.timeSkipped = 0;
          }
        }

        appendGfBezierLengthBy(prop) {
          const {
            time,
            points
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(points.pop());
          } else {
            this.moveAction.push(gfBezierLengthBy(time - this.timeSkipped, points, this.timeSkipped));
            this.timeSkipped = 0;
          }
        }

        appendCircleBy(prop) {
          const {
            time,
            center,
            radius,
            angle
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            const baseAngle = Math.atan2(this.startPosition.y - center.y, this.startPosition.x - center.x);
            const radian = baseAngle + angle * Math.PI / 180;
            const x = radius * Math.cos(radian);
            const y = radius * Math.sin(radian);
            this.startPosition = v2(x + center.x, y + center.y);
            this.startAngle += misc.radiansToDegrees(radian);
          } else {
            this.moveAction.push(gfCircleBy(time - this.timeSkipped, center, radius, angle, this.timeSkipped));
            this.timeSkipped = 0;
          }
        }

        appendMoveByDistance(prop) {
          const {
            time,
            distance
          } = prop;
          const angle = misc.degreesToRadians(this.startAngle);

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            const vDelta = v2(distance * Math.cos(angle), distance * Math.sin(angle));
            this.startPosition = this.startPosition.add(vDelta);
          } else {
            this.moveAction.push(gfMoveByDistance(time - this.timeSkipped, distance, this.timeSkipped));
            this.timeSkipped = 0;
          }
        }

        appendMoveBy(prop) {
          const {
            time,
            x,
            y,
            motion
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(v2(x, y));
          } else {
            const action = gfMoveBy(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        }

        appendMoveTo(prop) {
          const {
            time,
            x,
            y,
            motion
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.set(x, y);
          } else {
            const action = gfMoveTo(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        }

        appendRotateTo(prop) {
          const {
            time,
            angle
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(rotateTo(0, angle));
            this.startAngle = angle;
          } else {
            this.moveAction.push(rotateTo(time - this.timeSkipped, angle));
            this.timeSkipped = 0;
          }
        }

        appendMoveSprings(prop) {
          const {
            time,
            x,
            y
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(moveBySpring(prop));
            this.startPosition = this.startPosition.add(v2(x, y));
          } else {
            this.moveAction.push(moveBySpring(prop));
            this.timeSkipped = 0;
          }
        }

        appendScaleTo(prop) {
          const {
            time,
            scaleX,
            scaleY
          } = prop;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(scaleTo(0, scaleX, scaleY));
          } else {
            this.moveAction.push(scaleTo(time - this.timeSkipped, scaleX, scaleY));
            this.timeSkipped = 0;
          }
        }

      }

      exports('FishMoveActions', FishMoveActions);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishUpdateAngle.ts", ['cc', './gfUtilities.ts'], function (exports) {
  var cclegacy, Component, Vec3, _decorator, getRotation;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
    }, function (module) {
      getRotation = module.getRotation;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fd39dkYERhH+a2p9c4OhNwF", "gfFishUpdateAngle", undefined);

      const {
        ccclass
      } = _decorator;
      let gfFishUpdateAngle = exports('gfFishUpdateAngle', (_dec = ccclass('gfFishUpdateAngle'), _dec(_class = class gfFishUpdateAngle extends Component {
        constructor(...args) {
          super(...args);
          this._lastPos = null;
          this._skipRotate = false;
          this._skipFlipY = false;
          this._isDie = false;
        }

        init(data) {
          this._skipFlipY = data.skipFlipY ? data.skipFlipY : false;
          this._skipRotate = data.skipRotate;
          this._isDie = false;
        }

        setDie(value = true) {
          this._isDie = value;
          this._lastPos = null;
        }

        update(dt) {
          if (this._isDie) {
            return;
          }

          this.updateAngle();
        }

        updateAngle() {
          if (this._lastPos) {
            const curP = this.node.getPosition();
            const baseScaleX = Math.abs(this.node.scale.x);

            if (this._lastPos.x !== curP.x || this._lastPos.y !== curP.y) {
              if (this._skipRotate) {
                this.node.setScale(new Vec3(this._lastPos.x > curP.x ? -baseScaleX : baseScaleX, this.node.scale.y, this.node.scale.z));
              } else {
                const angle = getRotation(curP, this._lastPos);
                this.updateFlipY(angle);
                this.node.angle = angle;
              }
            }
          }

          this._lastPos = this.node.getPosition();
        }

        updateFlipY(angle) {
          if (this._skipFlipY) return;
          const baseScaleY = Math.abs(this.node.scale.y);
          this.node.setScale(this.node.scale.x, angle > 90 || angle < -90 ? -baseScaleY : baseScaleY, this.node.scale.z);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishUpdateOutScreen.ts", ['cc', './gfUtilities.ts', './utils.ts'], function (exports) {
  var cclegacy, Component, v2, misc, _decorator, isPointInScreen, setOpacity;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      v2 = module.v2;
      misc = module.misc;
      _decorator = module._decorator;
    }, function (module) {
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "63708nPTiFLQbo3El2kFqDw", "gfFishUpdateOutScreen", undefined);

      const {
        ccclass
      } = _decorator;
      let gfFishUpdateOutScreen = exports('gfFishUpdateOutScreen', (_dec = ccclass('gfFishUpdateOutScreen'), _dec(_class = class gfFishUpdateOutScreen extends Component {
        constructor(...args) {
          super(...args);
          this._isOutScreen = void 0;
          this._maxWidth = void 0;
          this._offsetX = void 0;
          this.visibleWidth = 0;
          this._isDie = true;
        }

        onEnable() {
          this._isDie = false;
          this._isOutScreen = true;
        }

        updateVisibleSize(visibleSize, maxWidth, offsetX) {
          this._maxWidth = maxWidth;
          this._offsetX = offsetX;

          if (visibleSize) {
            this.visibleWidth = visibleSize.x;
          } else {
            this.visibleWidth = this._maxWidth + this._offsetX;
          }
        }

        update(dt) {
          if (this._isDie) {
            return;
          }

          this.updateOutScreen();
        }

        updateOutScreen() {
          if (isPointInScreen(this.node.getPosition())) {
            this._isOutScreen = false;
            setOpacity(this.node, 255);
          } else {
            const wLeftCenter = this.convertToRelativePoint(v2(-this._maxWidth / 2 + this._offsetX, 0));
            const wRightCenter = this.convertToRelativePoint(v2(this._maxWidth / 2 + this._offsetX, 0));
            this._isOutScreen = !(isPointInScreen(wLeftCenter) || isPointInScreen(wRightCenter));

            if (this._isOutScreen) {
              this.updateOpacity();
            } else {
              setOpacity(this.node, 255);
            }
          }
        }

        convertToRelativePoint(point) {
          const radian = misc.degreesToRadians(this.node.angle);
          const x = this.node.position.x + point.x * Math.cos(radian) - point.y * Math.sin(radian);
          const y = this.node.position.y + point.x * Math.sin(radian) + point.y * Math.cos(radian);
          return v2(x, y);
        }

        updateOpacity() {
          if (this._isDie) return;
          const leftPoint = v2(-this.visibleWidth / 2, 0);
          const rightPoint = v2(this.visibleWidth / 2, 0);
          const wLeftCenter = this.convertToRelativePoint(leftPoint);
          const wRightCenter = this.convertToRelativePoint(rightPoint);
          const outScreen = !(isPointInScreen(wLeftCenter, 100) || isPointInScreen(wRightCenter, 100));
          setOpacity(this.node, outScreen ? 0 : 255);
        }

        setDie(value = true) {
          this._isDie = value;
        }

        isOutScreen() {
          return this._isOutScreen;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameLayer.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './utils.ts', './gfFishManager.ts', './gfMainFSM.ts', './gfActionHelper.ts', './gfGameScheduler.ts', './gfLayerComponent.ts', './gfAutoFireController.ts', './gfMainController.ts'], function (exports) {
  var cclegacy, tween, Tween, _decorator, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, registerEvent, getRotation, removeEvents, getPostionInOtherNode, gfFishManager, gfMainFSM, stopAllActions, moveTo, gfGameScheduler, gfLayerComponent, gfAutoFireController, gfMainController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      Tween = module.Tween;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }, function (module) {
      gfAutoFireController = module.gfAutoFireController;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2a83a9h2WJEPJCdDX+zBaLY", "gfGameLayer", undefined);

      const lodash = globalThis._;
      const {
        ccclass
      } = _decorator;
      let GfGameLayer = exports('GfGameLayer', (_dec = ccclass('GfGameLayer'), _dec(_class = class GfGameLayer extends gfLayerComponent {
        constructor() {
          super();
          this.startCallback = void 0;
          this.isLobbyLayer = false;
        }

        onEnable() {
          this.onShowGame();
          super.onEnable();
        }

        onShowGame() {
          gfReferenceManager.instance.setData({
            CurrentScene: this.node
          });
          gfReferenceManager.instance.setData({
            GameLayer: this.node
          });
          gfDataStore.instance.setDataStore({
            currentSceneName: gfMainController.instance.getGameSceneName()
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, false);

          if (!gfMainFSM.instance.isStateExit()) {
            if (this.startCallback) {
              this.startCallback();
              this.startCallback = null;
            }

            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, true);
            gfDataStore.instance.setDataStore({
              timeHide: null
            });
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME, true);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EVENT_JOIN_GAME);
            gfGameScheduler.initInstance();
          }
        }

        initEvents() {
          super.initEvents();
          registerEvent(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, this.sendDataPlayerFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, this.onOtherPlayerFire, this);
          registerEvent(gfBaseEvents.COMMON.SHAKE_SCREEN, this.shakeScreen, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
        }

        onOtherPlayerFire(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (player && player.index > 1) data.Angle += 180;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, data);
        }

        _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        }

        sendDataPlayerFire(data) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player && player.checkUpdateGunByWallet()) {
            const outData = this.calculateDataPlayerFire(data);
            const cloneData = lodash.cloneDeep(outData);

            if (!gfDataStore.instance.isReachMaxNumBullet()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, outData);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, cloneData);
          }
        }

        calculateDataPlayerFire(data) {
          const {
            point,
            lockFishID
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
          const fish = gfFishManager.instance.getFishById(lockFishID);
          const startPos = getPostionInOtherNode(this.node, player.gun);
          const fireType = gfAutoFireController.instance.getTargetState();
          let angle = 0;

          if (fish) {
            const endPos = fish.getLockPositionByNodeSpace(this.node);
            angle = getRotation(endPos, startPos);
          } else {
            angle = getRotation(point, player.gun.worldPosition);
          }

          angle = this._updateAngle(angle);
          let outData = {
            BulletMultiple: player._gunValue,
            BulletID: Date.now(),
            Angle: angle,
            DeskStation: gfDataStore.instance.getSelfDeskStation(),
            isMe: true,
            LockedFishID: lockFishID,
            FireType: fireType
          };

          if (gfDataStore.instance.isHoldingRifleGunSkill()) {
            outData["SkillID"] = gfDataStore.instance.getCurrentSkill();
          }

          return outData;
        }

        shakeScreen({
          timeOneStep,
          amplitude,
          countStep = 4,
          shakeStyle = gfBaseConfig.instance.SHAKE_SCREEN_STYLE.VERTICAL
        }) {
          this.node.setPosition(0, 0, 0);
          stopAllActions(this.node);
          const action = tween(this.node);

          for (let i = 0; i < countStep; i++) {
            this.setupAnimShake(action, timeOneStep, amplitude, shakeStyle);
          }

          action.then(moveTo(timeOneStep, 0, 0, 0));
          action.start();
        }

        setupAnimShake(arrAnim, timeOneStep, amplitude, shakeStyle) {
          const {
            SHAKE_SCREEN_STYLE
          } = gfBaseConfig.instance;

          switch (shakeStyle) {
            case SHAKE_SCREEN_STYLE.VERTICAL:
              arrAnim.then(moveTo(timeOneStep, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.HORIZONTAL:
              arrAnim.then(moveTo(timeOneStep, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, -amplitude, 0));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_1:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_2:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.FULL:
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, -amplitude));
              break;
          }
        }

        resetOnExit() {
          Tween.stopAllByTarget(this.node);
        }

        onDestroy() {
          this.resetOnExit();
          removeEvents(this);

          if (this.isLoadByPrefab) {
            if (!gfMainFSM.instance.isStateExit() && !gfMainFSM.instance.isStateLobby() && !gfMainFSM.instance.isStateLoginGameRoom()) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
            }
          } else if (!gfMainFSM.instance.isStateLoginLobby() && gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }
        }

        onBtnExitClicked(evt) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameScene.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "09f86jcVa5Oj6Hi8QbGDdmG", "gfGameScene", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfGameScene = exports('gfGameScene', (_dec = ccclass('gfGameScene'), _dec(_class = class gfGameScene extends Component {
        onLoad() {
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.ADD_GAME_LAYER_TO_GAME_SCENE, this.node);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameScheduler.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var director, Scheduler, cclegacy, registerEvent, removeEvents, gfBaseEvents;
  return {
    setters: [function (module) {
      director = module.director;
      Scheduler = module.Scheduler;
      cclegacy = module.cclegacy;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06790qDH8VFEI905Hc7qs9a", "gfGameScheduler", undefined);

      class gfGameScheduler {
        static get instance() {
          if (!this._instance) {
            return null;
          }

          return this._instance;
        }

        static initInstance() {
          if (!this._instance) {
            this._instance = new gfGameScheduler();
          }
        }

        constructor() {
          this.id = void 0;
          this.uuid = void 0;
          this._scheduler = void 0;
          this.id = this.uuid = 'CCFactory';
          this._scheduler = director.getScheduler();
          Scheduler.enableForTarget(this);
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this._unScheduleAll, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this._unScheduleAll, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this._unScheduleAll, this);
        }

        _schedule(callback, interval, repeat, delay, paused = false) {
          this._scheduler.schedule(callback, this, interval, repeat, delay, paused);
        }

        _scheduleOnce(callback, delay) {
          this._scheduler.schedule(callback, this, 0, 0, delay, false);
        }

        _unScheduleAll() {
          this._scheduler.unscheduleAllForTarget(this);
        }

        _unschedule(callback) {
          this._scheduler.unschedule(callback, this);
        }

        _destroy() {
          removeEvents(this);

          this._unScheduleAll();

          this._scheduler = null;
        }

        static schedule(callback, interval, repeat, delay, paused = false) {
          gfGameScheduler.instance._schedule(callback, interval, repeat, delay, paused);
        }

        static scheduleOnce(callback, delay) {
          gfGameScheduler.instance._scheduleOnce(callback, delay);
        }

        static unschedule(callback) {
          gfGameScheduler.instance._unschedule(callback);
        }

        static unscheduleAllCallbacks() {
          gfGameScheduler.instance._unScheduleAll();
        }

        static destroy() {
          if (gfGameScheduler.instance) {
            gfGameScheduler.instance._destroy();

            gfGameScheduler._instance = null;
          }
        }

      }

      exports('default', gfGameScheduler);
      gfGameScheduler._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGeneralInitialization.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfNetworkParser.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfMainFSM.ts', './gfMainController.ts', './gfReferenceManager.ts', './gfLocalize.ts', './gfFishManager.ts', './gfPoolManager.ts', './gfNodePoolConfig.ts', './gfAutoFireController.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, JsonAsset, Prefab, _decorator, Component, gfEventEmitter, gfNetworkParser, gfBaseConfig, gfDataStore, gfMainFSM, gfMainController, gfReferenceManager, gfLocalize, gfFishManager, gfPoolManager, gfNodePoolConfig, gfAutoFireController, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfAutoFireController = module.gfAutoFireController;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9afa670LGtOabO/XrL9kVuZ", "gfGeneralInitialization", undefined);

      const {
        ccclass,
        property
      } = _decorator; // import {gfEventController} from "../Components/Event/gfEventController";

      let gfGeneralInitialization = exports('gfGeneralInitialization', (_dec = ccclass('gfGeneralInitialization'), _dec2 = property(JsonAsset), _dec3 = property(JsonAsset), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = class gfGeneralInitialization extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "jsonGameVersion", _descriptor, this);

          _initializerDefineProperty(this, "jsonLocalize", _descriptor2, this);

          _initializerDefineProperty(this, "gameObjectPrefabs", _descriptor3, this);

          _initializerDefineProperty(this, "nodePoolAssetPrefab", _descriptor4, this);
        }

        onLoad() {
          this.initInstances();

          if (this.jsonGameVersion) {
            gfBaseConfig.instance.GameVersion = this.jsonGameVersion.json.version;
          }
        }

        initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          } //Init Datastore


          new gfDataStore(); //Init ReferenceManager

          new gfReferenceManager(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new gfMainController(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new gfFishManager();
          new gfPoolManager(this.gameObjectPrefabs);
          new gfNodePoolConfig(this.nodePoolAssetPrefab);
          new gfAutoFireController();
          new gfCurrencyCalculator(); // new gfEventController();
        }

        loginGame() {
          gfMainController.instance.initToken();
          gfDataStore.instance.setDataStore({
            "currentSceneName": gfBaseConfig.instance.SceneName.Lobby
          });
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonGameVersion", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGunSkillController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfBaseConfig.ts', './utils.ts', './gfDataStore.ts', './gfFishManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, instantiate, isValid, warn, gfEventEmitter, gfBaseEvents, registerEvent, getSkillTypeBySkillID, mergeTwoObject, removeEvents, gfReferenceManager, gfBaseConfig, convertAssetArrayToObject, gfDataStore, gfFishManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      isValid = module.isValid;
      warn = module.warn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
      mergeTwoObject = module.mergeTwoObject;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "cf7b6/NqZFLR7A8yyH+aUu+", "gfGunSkillController", undefined);

      const lodash = globalThis._;
      const {
        ccclass,
        property
      } = _decorator;
      let gfGunSkillController = exports('gfGunSkillController', (_dec = ccclass('gfGunSkillController'), _dec2 = property(Prefab), _dec(_class = (_class2 = class gfGunSkillController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "gunSkillPrefab", _descriptor, this);

          this._listGunSkillNode = [];
          this.gunSkillAssets = null;
        }

        onLoad() {
          for (let i = 0; i < 4; i++) {
            this._listGunSkillNode[i] = {};
          }

          this.initEvents();
        }

        initMapAssets() {
          this.gunSkillAssets = convertAssetArrayToObject(this.gunSkillPrefab);
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.AFTER_LOAD_SCENE_GAME, this.afterLoadSceneGame, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.beforeCloseScene, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.playerCatchFish, this);
          registerEvent(gfBaseEvents.GUN_SKILL.RECEIVE_SKILL, this.onReceiveGunSkill, this);
          registerEvent(gfBaseEvents.GUN_SKILL.COMPLETED_RECEIVE_GUN_SKILL, this.onCompletedReceiveGunSkill, this);
          registerEvent(gfBaseEvents.GUN_SKILL.COMPLETED_RECEIVE_EXTRA_BULLET_RIFLE_GUN, this.onCompletedReceiveExtraBulletRifleGun, this);
          registerEvent(gfBaseEvents.GUN_SKILL.MY_PLAYER_SEND_FIRE_GUN_SKILL, this.myPlayerSendFireGunSkill, this);
          registerEvent(gfBaseEvents.GUN_SKILL.CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, this.catchFishByOneShotGunSkill, this);
          registerEvent(gfBaseEvents.GUN_SKILL.PLAYER_FIRE_RIFLE_GUN_SKILL, this.fireRifleGun, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.beforeCloseScene, this);
          registerEvent(gfBaseEvents.GAME_LAYER.PROMOTION_GUN_EXPIRED, this.onPromotionGunExpired, this);
        }

        onPromotionGunExpired(data) {
          const {
            DeskStation
          } = data;
          const gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, gfBaseConfig.instance.SKILL_CONFIG.PROMOTION_GUN.SkillID);
          const SkillID = this.getNextGunSkillID(DeskStation);

          if (gunSkillNode && SkillID === gunSkillNode.getSkillID()) {
            this.clearSkillData(DeskStation, gfBaseConfig.instance.SKILL_CONFIG.PROMOTION_GUN.SkillID);
            gunSkillNode.hide(false, () => {
              const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

              if (player.isMe) {
                gfDataStore.instance.setCurrentSkill(null);
                gfDataStore.instance.setLockGun(false);
                gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
                player.lockBet(false);
              }

              this.checkNextGunSkill(DeskStation);
            });
          }
        }

        afterLoadSceneGame() {
          this.initMapAssets();

          for (let i = 0; i < 4; i++) {
            const player = gfReferenceManager.instance.getPlayerByIndex(i);
            Object.keys(this.gunSkillAssets).forEach(key => {
              const gunPrefab = this.gunSkillAssets[key];
              const gunNode = instantiate(gunPrefab);
              gunNode.parent = player.gun;
              const SkillID = parseInt(key.replace('GunSkill', ''));
              gunNode.getComponent('gfBaseGunSkill').init({
                SkillID
              });
              this._listGunSkillNode[i][key] = gunNode;
            });
          }
        }

        beforeCloseScene() {
          for (let i = 0; i < 4; i++) {
            Object.keys(this._listGunSkillNode[i]).forEach(key => {
              const gunNode = this._listGunSkillNode[i][key];
              if (isValid(gunNode)) gunNode.destroyGun();
            });
            this.playerActiveNormalGun(i, true);
            this._listGunSkillNode[i] = {};
          }
        }

        updateListPlayer(data) {
          for (let i = 0; i < data.length; i++) {
            const userInfo = data[i];
            this.playerJoinBoard(userInfo);
          }
        }

        playerJoinBoard(userInfo = null) {
          if (!userInfo) return;
          const isMe = userInfo.DeskStation === gfDataStore.instance.getSelfDeskStation();
          let {
            DeskStation,
            skillInfo
          } = userInfo;
          this.hideGunSkillNodeByDeskStation(DeskStation);
          this.initGunSkillData(DeskStation, skillInfo);
          const SkillID = this.getNextGunSkillID(DeskStation);

          if (SkillID) {
            this.playerChangeGunSkill({
              DeskStation: userInfo.DeskStation,
              SkillID,
              isResume: true
            });

            if (!isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.CLEAR_EFFECT_RECEIVE_GUN_SKILL, DeskStation);
            } else {
              const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
              player.effectIsMe.active = false;
            }
          } else {
            if (isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
            }

            this.playerActiveNormalGun(DeskStation, true);
          }
        }

        playerLeaveBoard(data = null) {
          this.hideGunSkillNodeByDeskStation(data.DeskStation);
        }

        playerCatchFish(data) {
          let {
            skillInfo,
            DeskStation,
            FishID
          } = data;
          if (!skillInfo) return;
          skillInfo.forEach(item => {
            const {
              SkillID,
              IsActive,
              extraBullet
            } = item;
            const {
              RIFLE_GUN
            } = gfBaseConfig.instance.SKILL_TYPE;

            if (!IsActive && getSkillTypeBySkillID(SkillID) === RIFLE_GUN) {
              if (extraBullet) {
                const fish = gfFishManager.instance.getFishById(FishID);

                if (fish) {
                  const fishPos = fish.getLockPositionByWorldSpace();
                  this.onReceiveExtraBulletRifleGun({
                    DeskStation,
                    skillInfo: item,
                    fishPos
                  });
                }
              }

              this.catchFishByRifleGunSkill(item, DeskStation);
            }
          });
        }

        onReceiveExtraBulletRifleGun(data) {
          const {
            DeskStation,
            skillInfo
          } = data;
          const skillType = getSkillTypeBySkillID(skillInfo.SkillID);
          const {
            RIFLE_GUN
          } = gfBaseConfig.instance.SKILL_TYPE;
          if (skillType != RIFLE_GUN) return;
          this.addExtraBulletGunSkillData(DeskStation, skillInfo);
          gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.PLAY_EFFECT_RECEIVE_EXTRA_BULLET_RIFLE_GUN, data);
        }

        onCompletedReceiveExtraBulletRifleGun(data) {
          const {
            DeskStation,
            skillInfo
          } = data;
          const {
            SkillID,
            extraBullet
          } = skillInfo;
          const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, SkillID);
          if (!gunSkillItem) return;
          gunSkillItem.BulletRemainDisplay = gunSkillItem.BulletRemainDisplay + extraBullet;
          const gunNodeActive = this.getGunSkillNodeActiveByDeskStation(DeskStation);

          if (gunNodeActive) {
            const currentSKillIDActive = gunNodeActive.getSkillID();

            if (currentSKillIDActive == SkillID) {
              const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

              if (player.isMe) {
                const nextSkillID = this.getNextGunSkillID(DeskStation);

                if (gunSkillItem.BulletRemainDisplay > 0 && nextSkillID === SkillID) {
                  gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
                }
              }

              gunNodeActive.updateBulletRemain(gunSkillItem.BulletRemainDisplay);
            }
          }
        }

        onReceiveGunSkill(data) {
          // fishPos, DeskStation, skillInfo]
          const {
            DeskStation,
            skillInfo
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const skillType = getSkillTypeBySkillID(skillInfo.SkillID);
          const {
            ONE_SHOT_GUN,
            RIFLE_GUN
          } = gfBaseConfig.instance.SKILL_TYPE;
          if (skillType != ONE_SHOT_GUN && skillType != RIFLE_GUN) return;
          this.addGunSkillData(DeskStation, skillInfo);

          if (player && player.isMe) {
            player.lockBet(true);
            gfDataStore.instance.setLockGun(true);
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.PLAY_EFFECT_RECEIVE_GUN_SKILL, data);
        }

        onCompletedReceiveGunSkill(data) {
          const {
            DeskStation,
            skillInfo
          } = data;
          const SkillID = this.getNextGunSkillID(DeskStation);

          if (SkillID) {
            const gunNodeActive = this.getGunSkillNodeActiveByDeskStation(DeskStation);

            if (gunNodeActive) {
              const currentSKillIDActive = gunNodeActive.getSkillID();

              if (currentSKillIDActive != SkillID) {
                gunNodeActive.hide(true);
                this.playerChangeGunSkill({
                  DeskStation,
                  SkillID: skillInfo.SkillID,
                  isResume: false
                });
              }
            } else {
              this.playerChangeGunSkill({
                DeskStation,
                SkillID: skillInfo.SkillID,
                isResume: false
              });
            }
          } else {
            this.playerActiveNormalGun(DeskStation, true);
          }
        }

        myPlayerSendFireGunSkill() {
          const myDeskStation = gfDataStore.instance.getSelfDeskStation();
          const player = gfReferenceManager.instance.getPlayerByDeskStation(myDeskStation);

          if (player && player.isMe) {
            const gunSkillNode = this.getGunSkillNodeBySkillID(myDeskStation, gfDataStore.instance.getCurrentSkill());
            gunSkillNode && gunSkillNode.sendFireGun();
          }
        }

        catchFishByOneShotGunSkill(data) {
          const {
            DeskStation,
            TotalReward
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.SET_DIE_LIST_FISH, data);

          if (player.isMe) {
            player.addGoldReward(TotalReward);
          }

          this.fireOneShotGun(data);
        }

        fireOneShotGun(data) {
          const {
            DeskStation,
            SkillID
          } = data;
          const gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, SkillID);
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (gunSkillNode) {
            if (!gunSkillNode.isActive()) {
              if (!player.isMe) {
                gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.CLEAR_EFFECT_RECEIVE_GUN_SKILL, DeskStation);
              }

              this.playerChangeGunSkill({
                DeskStation,
                SkillID,
                isResume: true
              });
            }

            gunSkillNode.gunFire(data, () => {
              gunSkillNode.hide(false, () => {
                if (player.isMe) {
                  gfDataStore.instance.setLockGun(false);
                  gfDataStore.instance.setCurrentSkill(null);
                  gfDataStore.instance.setDataStore({
                    listCatchLaser: []
                  });
                  gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
                  player.lockBet(false);
                }

                this.checkNextGunSkill(DeskStation);
              });
            });
            this.reduceGunSkillData(DeskStation, SkillID);
          } else {
            warn("Gun not found", SkillID);
          }
        }

        fireRifleGun(data) {
          const {
            DeskStation,
            SkillID
          } = data;
          const gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, SkillID);

          if (gunSkillNode) {
            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
            if (gfDataStore.instance.isReachMaxNumBullet()) return;

            if (!gunSkillNode.isActive()) {
              if (!player.isMe) {
                gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.CLEAR_EFFECT_RECEIVE_GUN_SKILL, DeskStation);
              }

              this.playerChangeGunSkill({
                DeskStation,
                SkillID,
                isResume: true
              });
            }

            gunSkillNode.gunFire(data, () => {});
            player.rotateGunByLockFish(data);
          } else {
            warn("Gun not found", SkillID);
          }
        }

        catchFishByRifleGunSkill(SkillData, DeskStation) {
          const {
            SkillID
          } = SkillData;
          const gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, SkillID);
          const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, SkillID);

          if (gunSkillNode && gunSkillItem) {
            SkillData.BulletRemain = SkillData.BulletRemain || 0;

            if (gunSkillItem.BulletRemain > SkillData.BulletRemain) {
              this.reduceGunSkillData(DeskStation, SkillID);
            } else {
              gunSkillItem.BulletRemain = SkillData.BulletRemain;
              gunSkillItem.BulletRemainDisplay = SkillData.BulletRemain;
            }

            const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

            if (player.isMe && gunSkillItem.BulletRemainDisplay <= 0) {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE);
            }

            gunSkillNode.updateBulletRemain(gunSkillItem.BulletRemainDisplay);

            if (this.checkExpireGunSkill(DeskStation, SkillID)) {
              if (player.isMe) {
                gfDataStore.instance.setLockGun(true);
                gfDataStore.instance.setCurrentSkill(null);
                gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
                gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE);
              }

              gunSkillNode.hide(false, () => {
                if (player.isMe) {
                  gfDataStore.instance.setLockGun(false);
                  gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
                  player.lockBet(false);
                }

                this.checkNextGunSkill(DeskStation);
              });
            }
          }
        }

        initGunSkillData(DeskStation, skillInfo) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          listGunSkillData[DeskStation] = [];

          if (!Array.isArray(skillInfo)) {
            if (!skillInfo) return;

            if (!skillInfo.BulletRemain) {
              skillInfo.BulletRemain = 1;
            }

            skillInfo = [skillInfo];
          }

          skillInfo.forEach(skillItem => {
            this.addGunSkillData(DeskStation, skillItem);
          });
          return listGunSkillData[DeskStation];
        }

        addGunSkillData(DeskStation, skillItem) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          const {
            SkillID,
            BulletRemain,
            BulletMultiple
          } = skillItem;
          const indexGunSkillData = this.findIndexGunSkillDataBySkillID(DeskStation, SkillID);
          let objData = {
            SkillID: SkillID,
            BulletMultiple: BulletMultiple,
            BulletRemain: BulletRemain,
            BulletRemainDisplay: BulletRemain,
            SkillType: getSkillTypeBySkillID(SkillID)
          };
          objData = mergeTwoObject(objData, skillItem);

          if (indexGunSkillData >= 0) {
            listGunSkillData[DeskStation][indexGunSkillData] = objData;
          } else {
            listGunSkillData[DeskStation].push(objData);
          }

          return objData;
        }

        addExtraBulletGunSkillData(DeskStation, skillItem) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          const {
            SkillID,
            extraBullet
          } = skillItem;
          const indexGunSkillData = this.findIndexGunSkillDataBySkillID(DeskStation, SkillID);
          const objData = lodash.cloneDeep(listGunSkillData[DeskStation][indexGunSkillData]);
          objData.BulletRemain = objData.BulletRemain + extraBullet;
          listGunSkillData[DeskStation][indexGunSkillData] = objData;
          return objData;
        }

        reduceGunSkillData(DeskStation, SkillID) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          const SkillType = getSkillTypeBySkillID(SkillID);
          const {
            ONE_SHOT_GUN,
            RIFLE_GUN
          } = gfBaseConfig.instance.SKILL_TYPE;
          const indexGunSkillData = this.findIndexGunSkillDataBySkillID(DeskStation, SkillID);
          if (indexGunSkillData < 0) return;

          if (SkillType === ONE_SHOT_GUN) {
            listGunSkillData[DeskStation].splice(indexGunSkillData, 1);
          }

          if (SkillType === RIFLE_GUN) {
            const gunSkillData = listGunSkillData[DeskStation][indexGunSkillData];

            if (gunSkillData.BulletRemain > 0) {
              gunSkillData.BulletRemain -= 1;
              gunSkillData.BulletRemainDisplay -= 1;
            }

            if (gunSkillData.BulletRemain <= 0) {
              listGunSkillData[DeskStation].splice(indexGunSkillData, 1);
            } else {
              listGunSkillData[DeskStation][indexGunSkillData] = gunSkillData;
            }
          }
        }

        clearSkillData(deskStation, SkillID) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          const indexSkill = this.findIndexGunSkillDataBySkillID(deskStation, SkillID);

          if (indexSkill >= 0) {
            listGunSkillData[deskStation].splice(indexSkill, 1);
          }
        }

        checkExpireGunSkill(DeskStation, SkillID) {
          let isExpired = true;
          const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, SkillID);

          if (gunSkillItem) {
            isExpired = false;
          }

          return isExpired;
        }

        checkNextGunSkill(DeskStation) {
          const SkillID = this.getNextGunSkillID(DeskStation);

          if (SkillID) {
            const {
              PROMOTION_GUN
            } = gfBaseConfig.instance.SKILL_CONFIG;
            const gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, PROMOTION_GUN.SkillID);
            this.playerChangeGunSkill({
              DeskStation,
              SkillID,
              isResume: SkillID === PROMOTION_GUN.SkillID && !!gunSkillNode
            });
          } else {
            this.playerActiveNormalGun(DeskStation, true);
          }
        }

        getNextGunSkillID(DeskStation, forceBySkillID = false) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          const PRIORITY_GUN_SKILL = gfBaseConfig.instance.PRIORITY_GUN_SKILL;
          const gunSkillData = listGunSkillData[DeskStation];
          if (!gunSkillData || !gunSkillData.length) return null;

          if (forceBySkillID) {
            const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, forceBySkillID);

            if (gunSkillItem) {
              return gunSkillItem.SkillID;
            }
          }

          for (let i = 0; i < PRIORITY_GUN_SKILL.length; i++) {
            const SkillID = PRIORITY_GUN_SKILL[i];
            const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, SkillID);

            if (gunSkillItem) {
              return gunSkillItem.SkillID;
            }
          }

          return null;
        }

        playerChangeGunSkill(data) {
          const {
            DeskStation,
            SkillID
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          if (!player) return;

          if (player) {
            this.hideGunSkillNodeByDeskStation(DeskStation);
            let gunSkillNode = this.getGunSkillNodeBySkillID(DeskStation, SkillID);
            const gunSkillItem = this.findGunSkillDataBySkillID(DeskStation, SkillID);
            data.gunData = gunSkillItem;

            if (gunSkillNode && gunSkillItem) {
              if (!gunSkillNode.isActive()) {
                this.playerActiveNormalGun(DeskStation, false);

                if (player.isMe) {
                  gfDataStore.instance.setLockGun(true);
                  gfDataStore.instance.setCurrentSkill(SkillID);
                  gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE);
                  player.lockBet(true);
                }

                gunSkillNode.show(data);
              }
            } else {
              this.playerActiveNormalGun(DeskStation, true);
            }
          }
        }

        playerActiveNormalGun(DeskStation, active) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          player.activeNormalGun(active);
        }

        getGunSkillNodeBySkillID(DeskStation, SkillID) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          if (!player) return;
          const gunSkillNode = this._listGunSkillNode[player.index]["GunSkill" + SkillID];
          return gunSkillNode;
        }

        hideGunSkillNodeByDeskStation(DeskStation) {
          const gunNodeActive = this.getGunSkillNodeActiveByDeskStation(DeskStation);

          if (gunNodeActive) {
            gunNodeActive.hide(true);
          }
        }

        getGunSkillNodeActiveByDeskStation(DeskStation) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          if (!player) return;
          let gunNodeActive = null;
          Object.keys(this._listGunSkillNode[player.index]).forEach(key => {
            const gunNode = this._listGunSkillNode[player.index][key];

            if (gunNode.isActive()) {
              gunNodeActive = gunNode;
            }
          });
          return gunNodeActive;
        }

        findIndexGunSkillDataBySkillID(DeskStation, SkillID) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          return listGunSkillData[DeskStation].findIndex(SkillItem => SkillItem.SkillID === SkillID);
        }

        findGunSkillDataBySkillID(DeskStation, SkillID) {
          const listGunSkillData = gfDataStore.instance.getListSkillSkillData();
          return listGunSkillData[DeskStation][this.findIndexGunSkillDataBySkillID(DeskStation, SkillID)];
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gunSkillPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfHUDController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfEventEmitter.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, ToggleContainer, SpriteAtlas, _decorator, Component, v3, Sprite, tween, Toggle, registerEvent, removeEvents, gfEventEmitter, gfReferenceManager, gfBaseEvents, stopAllActions, scaleTo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      ToggleContainer = module.ToggleContainer;
      SpriteAtlas = module.SpriteAtlas;
      _decorator = module._decorator;
      Component = module.Component;
      v3 = module.v3;
      Sprite = module.Sprite;
      tween = module.tween;
      Toggle = module.Toggle;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "3ff23aTV/5GFp1JKx+v1hhp", "gfHUDController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfHUDController = exports('gfHUDController', (_dec = ccclass('gfHUDController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(ToggleContainer), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(SpriteAtlas), _dec(_class = (_class2 = class gfHUDController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "fxActive", _descriptor, this);

          _initializerDefineProperty(this, "fishNotifyImg", _descriptor2, this);

          _initializerDefineProperty(this, "toggleTarget", _descriptor3, this);

          _initializerDefineProperty(this, "toggleIdle", _descriptor4, this);

          _initializerDefineProperty(this, "toggleAutoFire", _descriptor5, this);

          _initializerDefineProperty(this, "toggleTargetOne", _descriptor6, this);

          _initializerDefineProperty(this, "toggleTargetAll", _descriptor7, this);

          _initializerDefineProperty(this, "listFishNotify", _descriptor8, this);

          this._scaleFactor = 0.6;
        }

        onLoad() {
          gfReferenceManager.instance.setData({
            HUDLayer: this.node
          });
          this.toggleIdle.position = v3(Number.MAX_SAFE_INTEGER);
          this.initEvents();
          this.extendInit();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_LOCK_FISH_IMAGE, this.updateLockFishImg, this);
          registerEvent(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, this.toggleHUD, this);
          registerEvent(gfBaseEvents.GAME_LAYER.STOP_HUD_TOGGLE_TARGET, this.stopTarget, this);
          registerEvent(gfBaseEvents.AUTO_FIRE_CONTROLLER.RESET_LOCK_FISH_TARGET, this.stopLockFish, this);
          registerEvent(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_TARGET_ONE, this.showFXActiveTargetOne, this);
          registerEvent(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_TARGET_ALL, this.showFXActiveTargetAll, this);
          registerEvent(gfBaseEvents.HUD_CONTROLLER.SHOW_FX_ACTIVE_AUTO_FIRE, this.showFXActiveAutoFire, this);
        }

        extendInit() {}

        onToggleClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
        }

        onTogglePress(toggle, data) {
          this.fishNotifyImg.active = false;
          const toggleCheck = toggle.isChecked;

          if (toggleCheck) {
            const walletValid = this.isWalletValid();

            if (walletValid) {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.CHANGE_AUTO_FIRE_BY_STATE, data);
            }
          }
        }

        onToggleIdle() {
          this.toggleIdle.position = v3(Number.MAX_SAFE_INTEGER);
          this.stopLockFish();
          gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
        }

        isWalletValid() {
          const player = gfReferenceManager.instance.getSelfPlayer();
          return player.checkUpdateGunByWallet() || player.checkUpdateGunByRealWallet();
        }

        hideFXActive() {
          this.fxActive.active = false;
        }

        showFXActiveTargetOne() {
          this.fxActive.active = true;
          this.fxActive.position = this.toggleTargetOne.position;
          this.toggleIdle.position = this.toggleTargetOne.position;
        }

        showFXActiveTargetAll() {
          this.fxActive.active = true;
          this.fxActive.position = this.toggleTargetAll.position;
          this.toggleIdle.position = this.toggleTargetAll.position;
        }

        showFXActiveAutoFire() {
          this.fxActive.active = true;
          this.fxActive.position = this.toggleAutoFire.position;
          this.toggleIdle.position = this.toggleAutoFire.position;
        }

        resetToggleUI() {//@TODO: handle extra UI adjustment here
        }

        updateLockFishImg(fishKind = 0) {
          if (!this.listFishNotify) return;
          const fishImg = this.listFishNotify.getSpriteFrame(fishKind.toString());

          if (!fishImg) {
            console.warn('Invalid fishkind:', fishKind); //Force use image of fishKind 0 for invalid fish kind
            //this.updateLockFishImg();

            return;
          }

          this.fishNotifyImg.active = true;
          this.fishNotifyImg.getComponent(Sprite).spriteFrame = this.listFishNotify.getSpriteFrame(fishKind.toString());
          stopAllActions(this.fishNotifyImg);
          this.fishNotifyImg.scale = v3(this._scaleFactor);
          tween(this.fishNotifyImg).sequence(scaleTo(0, this._scaleFactor, this._scaleFactor), scaleTo(0.1, this._scaleFactor + 0.5, this._scaleFactor + 0.5), scaleTo(0.1, this._scaleFactor, this._scaleFactor)).start();
        }

        toggleHUD(interactable = true) {
          this.toggleTarget.toggleItems.forEach(toggle => {
            toggle.interactable = interactable;
          });
        }

        stopTarget() {
          this.toggleIdle.getComponent(Toggle).isChecked = true; //Move toggle idle out screen

          this.toggleIdle.position = v3(Number.MAX_SAFE_INTEGER);
          this.toggleHUD(true);
          this.hideFXActive();
          this.resetToggleUI();
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
        }

        stopLockFish() {
          this.fishNotifyImg.active = false;
          this.hideFXActive();
        }

        resetOnExit() {
          this.stopTarget();
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fxActive", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fishNotifyImg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "toggleTarget", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleIdle", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "toggleAutoFire", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toggleTargetOne", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "toggleTargetAll", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listFishNotify", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotBossInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './animateNumberLabel.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Node, _decorator, Component, Tween, AnimateNumberLabel, gfBaseEvents, registerEvent, removeEvents, gfEventEmitter, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6d1d2Z7MzRN4pmdE/lytPTx", "gfJackpotBossInfo", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfJackpotBossInfo = exports('default', (_dec = ccclass('gfJackpotBossInfo'), _dec2 = property(sp.Skeleton), _dec3 = property(Node), _dec(_class = (_class2 = class gfJackpotBossInfo extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "jackpotAnim", _descriptor, this);

          _initializerDefineProperty(this, "txtValue", _descriptor2, this);
        }

        onLoad() {
          this.initEvents();

          if (this.node.active) {
            const amount = gfDataStore.instance.getJackpotValue();

            if (this.txtValue.getComponent(AnimateNumberLabel).currentValue === undefined) {
              this.txtValue.getComponent(AnimateNumberLabel).currentValue = amount;
            }

            this.onUpdateRoomJackpot(amount);
          }
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_JACKPOT_INFO, this.onUpdateRoomJackpot, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, this.onShowJackpotInfo, this);
        }

        onShowJackpotInfo({
          isShow,
          amount
        }) {
          this.node.active = isShow;

          if (isShow && amount) {
            if (this.txtValue.getComponent(AnimateNumberLabel).currentValue === undefined) {
              this.txtValue.getComponent(AnimateNumberLabel).currentValue = amount;
            }

            this.onUpdateRoomJackpot(amount);
          }
        }

        onBossWarning() {}

        onJPHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        }

        onUpdateRoomJackpot(amount, time = 3000) {
          if (amount && this.node.active) {
            this.txtValue.getComponent(AnimateNumberLabel).onUpdateValue(+amount, time);
          }
        }

        resetOnExit() {
          if (this.node.active) {
            Tween.stopAllByTarget(this.txtValue);
          }
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtValue", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotDragonInfo.ts", ['cc', './gfJackpotBossInfo.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfActionHelper.ts', './gfDragonEvent.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, Tween, tween, _decorator, gfJackpotBossInfo, gfBaseEvents, gfEventEmitter, fadeOut, fadeIn, gfDragonEvent, registerEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      gfJackpotBossInfo = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      gfDragonEvent = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "99d0edK00RBYqEKv+RjnhFw", "gfJackpotDragonInfo", undefined);

      const {
        ccclass
      } = _decorator;
      let gfJackpotDragonInfo = exports('gfJackpotDragonInfo', (_dec = ccclass('gfJackpotDragonInfo'), _dec(_class = class gfJackpotDragonInfo extends gfJackpotBossInfo {
        initEvents() {
          super.initEvents();
          registerEvent(gfDragonEvent.DRAGON.WARNING, this.onBossWarning, this);
        }

        onBossWarning() {
          Tween.stopAllByTarget(this.txtValue);
          tween(this.txtValue).then(fadeOut(0.25)).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.SOUND.DRAGON_APPEAR);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            this.jackpotAnim.setAnimation(0, "animation", false);
            this.jackpotAnim.setCompleteListener(() => {
              tween(this.txtValue).then(fadeIn(0.25)).start();
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESET_VOLUME);
              this.jackpotAnim.setAnimation(0, "idel", true);
              this.jackpotAnim.setCompleteListener(() => {});
            });
          }).start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotStarFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseConfig.ts', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfDragonEvent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, v3, Node, _decorator, Component, tween, UITransform, Tween, SetZIndex, getPositionInOtherNode, gfBaseConfig, setOpacity, rotateBy, fadeIn, scaleTo, fadeOut, gfEventEmitter, gfDragonEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
      UITransform = module.UITransform;
      Tween = module.Tween;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      getPositionInOtherNode = module.getPositionInOtherNode;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDragonEvent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f935b1BFJJNPYQSvK9UgTCj", "gfJackpotStarFX", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const BallStarPos = [v3(0, 193), v3(153, 120), v3(189, -43), v3(85, -174), v3(-83, -174), v3(-187, -43), v3(-151, 120)];
      let gfJackpotStarFX = exports('gfJackpotStarFX', (_dec = ccclass('gfJackpotStarFX'), _dec2 = property(Node), _dec(_class = (_class2 = class gfJackpotStarFX extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "image", _descriptor, this);
        }

        onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.POPUP);
        }

        playAnimation(ballListArr) {
          const ballList = [...ballListArr];
          const scaleTime = 1.25;
          const fadeDelay = 0.5;
          const glowDelay = 1.65;
          const scaleDelay = 0.15;
          const rotateTime = scaleTime + fadeDelay + glowDelay + scaleDelay;
          const ballFlyTime = 0.15; // fly to star

          const flyAwayTime = 0.2; // fly out of screen

          setOpacity(this.image, 0);
          ballList.forEach((ball, i) => {
            ball.node.position = getPositionInOtherNode(this.node, ball.node);
            ball.node.parent = this.node;
            ball.moveToJackpotStar({
              delay: ballFlyTime * i,
              position: BallStarPos[i]
            });
          });
          tween(this.node).delay(1 + ballFlyTime * 7).parallel(rotateBy(rotateTime, 720), tween().then(tween().delay(fadeDelay).call(() => {
            tween(this.image).then(fadeIn(0.5)).start();
          }).delay(glowDelay).parallel(scaleTo(scaleTime, 0.4), tween().delay(1).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.BIG_EXPLOSION, this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          }).delay(0.3)).call(() => {
            ballList.forEach(ball => {
              ball.flyAway(flyAwayTime);
            });
            tween(this.image).then(fadeOut(0.5)).start();
          }).delay(scaleDelay).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.SHOW_JACKPOT_WINAMOUNT);
          }).delay(0.75).call(() => {
            gfEventEmitter.instance.emit(gfDragonEvent.DRAGON.DONE_JACKPOT_STAR);
          }).removeSelf())).start();
        }

        onDestroy() {
          Tween.stopAllByTarget(this.node);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLaserBox.ts", ['cc', './gfDataStore.ts', './gfBaseFish.ts'], function (exports) {
  var cclegacy, Component, Collider2D, Contact2DType, BoxCollider2D, Intersection2D, _decorator, gfDataStore, gfBaseFish;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aa2f0CyUTFG/6Q7yGad+K5y", "gfLaserBox", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLaserBox = exports('gfLaserBox', (_dec = ccclass('gfLaserBox'), _dec(_class = class gfLaserBox extends Component {
        onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.getComponent(Collider2D).on(Contact2DType.END_CONTACT, this.onCollisionExit, this);
        }

        onCollisionEnter(self, other, contact) {
          const listCatchLaser = gfDataStore.instance.getListCatchLaser();
          const fish = other.getComponent(gfBaseFish);

          if (fish) {
            const index = this.getIndexInList(fish.getId());

            if (index === -1) {
              listCatchLaser.push(fish.getId());
            }
          }
        }

        onCollisionExit(self, other, contact) {
          const listCatchLaser = gfDataStore.instance.getListCatchLaser();
          const fish = other.getComponent(gfBaseFish);

          if (fish) {
            const index = this.getIndexInList(fish.getId());

            if (index > -1) {
              if (this.isAllOtherBoxesOut(other, self)) {
                listCatchLaser.splice(index, 1);
              }
            }
          }
        }

        isAllOtherBoxesOut(other, self) {
          if (!self.world) return true;
          const boxes = other.getComponents(BoxCollider2D);

          for (let i = 0; i < boxes.length; ++i) {
            if (boxes[i].world && boxes[i] != other) {
              if (Intersection2D.polygonPolygon(boxes[i].world.points, self.world.points)) {
                return false;
              }
            }
          }

          return true;
        }

        getIndexInList(fishID) {
          const listCatchLaser = gfDataStore.instance.getListCatchLaser();

          for (let i = 0; i < listCatchLaser.length; i++) {
            if (listCatchLaser[i] === fishID) return i;
          }

          return -1;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLaserGun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfOneShotGunSkill.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Label, sp, tween, Tween, gfOneShotGunSkill, gfEventEmitter, gfBaseEvents, gfReferenceManager, SetZIndex, stopAllActions, v3f, getPostionInOtherNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Label = module.Label;
      sp = module.sp;
      tween = module.tween;
      Tween = module.Tween;
    }, function (module) {
      gfOneShotGunSkill = module.gfOneShotGunSkill;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      v3f = module.v3f;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "c5e54IXvq5A7aU1qylfTzf8", "gfLaserGun", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLaserGun = exports('gfLaserGun', (_dec = ccclass('gfLaserGun'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class gfLaserGun extends gfOneShotGunSkill {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodeEffect", _descriptor, this);

          _initializerDefineProperty(this, "nodeCountDown", _descriptor2, this);

          _initializerDefineProperty(this, "nodeTitle", _descriptor3, this);

          this._timeOut = 30;
        }

        init(data) {
          super.init(data);
          this.nodeTitle.parent = this.node.parent.parent;
          this.nodeTitle.active = false;
          SetZIndex(this.nodeTitle, 100);
          this.nodeCountDown.parent = this.node.parent.parent;
          this.nodeCountDown.active = false;
          SetZIndex(this.nodeCountDown, 101);
          this.nodeCountDown.getComponent(Label).string = this._timeOut.toString();
          this.nodeEffect.active = false;
        }

        sendFireGun() {
          super.sendFireGun();
          this.hideNodeCountDown();
        }

        gunFire(data, callback) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return;

          if (player.index > 1) {
            data.Angle += 180;
          }

          if (this._isMe) {
            player.effectIsMe.active = false;
          } else {
            this._nodeParent.angle = data.Angle ? data.Angle : 0;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.FIRE_LASER);
          data.mainPoint = getPostionInOtherNode(gfReferenceManager.instance.getNodeFishLayer(), player.gun);
          data.isSkill = true;
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_CATCH_LIST_FISH, data);
          this.nodeEffect.active = true;
          this.hideNodeCountDown();
          stopAllActions(this.nodeEffect);
          const spine = this.nodeEffect.getComponent(sp.Skeleton);
          spine.setAnimation(0, 'Shoot', false);
          const duration = spine.findAnimation('Shoot').duration;
          tween(spine).delay(duration).call(() => {
            this.onAfterGunFire(callback);
          }).start();
        }

        playAnimationShow(data, callback) {
          if (this._isMe) {
            this.nodeEffect.active = true;
            const spine = this.nodeEffect.getComponent(sp.Skeleton);
            spine.setAnimation(0, 'Aim', true);
            this.showNodeTitle();
            this.showNodeCountDown();
          }

          callback();
        }

        showNodeTitle() {
          this.nodeTitle.active = true;
          SetZIndex(this.nodeTitle, 100);
          Tween.stopAllByTarget(this.nodeTitle);
          tween(this.nodeTitle).to(0, {
            scale: v3f(0)
          }).to(0.7, {
            scale: v3f(1)
          }).call(() => {
            tween(this.nodeTitle).to(0.4, {
              scale: v3f(0.9)
            }, {
              easing: 'sineIn'
            }).to(0.4, {
              scale: v3f(1.1)
            }, {
              easing: 'sineOut'
            }).union().repeatForever().start();
          }).start();
        }

        showNodeCountDown() {
          this.nodeCountDown.parent = this.node.parent.parent;
          SetZIndex(this.nodeCountDown, 101);
          let countDown = this._timeOut;
          this.nodeCountDown.active = true;
          Tween.stopAllByTarget(this.nodeCountDown);
          this.nodeCountDown.getComponent(Label).string = countDown.toString();
          tween(this.nodeCountDown).delay(1).call(() => {
            countDown--;

            if (countDown <= 0) {
              this.hideNodeCountDown();
              this.sendFireGun();
            } else {
              this.nodeCountDown.getComponent(Label).string = countDown.toString();
            }
          }).union().repeat(this._timeOut).start();
        }

        hideNodeCountDown() {
          if (this.nodeTitle) {
            Tween.stopAllByTarget(this.nodeTitle);
            this.nodeTitle.active = false;
          }

          if (this.nodeCountDown) {
            Tween.stopAllByTarget(this.nodeCountDown);
            this.nodeCountDown.active = false;
            this.nodeCountDown.getComponent(Label).string = "0";
          }
        }

        playAnimationHide(forceHide = false, callback) {
          this.hideNodeCountDown();

          if (callback && typeof callback === 'function') {
            callback();
          }
        }

        resetChildNodeParent() {
          this.nodeCountDown.parent = this.node;
          this.nodeTitle.parent = this.node;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeCountDown", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLayerComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfReferenceManager.ts', './gfBaseConfig.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, gfBaseEvents, gfReferenceManager, gfBaseConfig, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2baefi6XKhKSZIzyov49Qds", "gfLayerComponent", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLayerComponent = exports('gfLayerComponent', (_dec = ccclass('gfLayerComponent'), _dec2 = property(Label), _dec(_class = (_class2 = class gfLayerComponent extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtVersion", _descriptor, this);

          this.startCallback = void 0;
          this.isLobbyLayer = false;
          this.isLoadByPrefab = false;
        }

        onLoad() {
          gfReferenceManager.instance.setData({
            CurrentScene: this.node
          });
          this.isLoadByPrefab = gfBaseConfig.instance.LoadGameByPrefab;
          this.initEvents();

          if (this.txtVersion) {
            this.txtVersion.string = gfBaseConfig.instance.GameVersion;
          }
        }

        onEnable() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.INIT_SCENE, this.node);
        }

        start() {
          if (this.startCallback) {
            this.startCallback();
            this.startCallback = null;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT);
        }

        initEvents() {//** init Events here */
        }

        setStartCallback(callback) {
          this.startCallback = callback;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtVersion", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadAllInOne.ts", ['cc', './gfAssetBundle.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfAssetBundle;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b0efdkL4uZFUJJxjiy3YE3X", "gfLoadAllInOne", undefined);

      const {
        ccclass
      } = _decorator;
      let GfLoadAllInOne = exports('GfLoadAllInOne', (_dec = ccclass('GfLoadAllInOne'), _dec(_class = class GfLoadAllInOne extends Component {
        onLoad() {}

        releaseAllAssets() {
          //this.node.removeAllChildren();
          gfAssetBundle.instance.destroy();
        }

        onDestroy() {
          this.releaseAllAssets();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadGameByPrefabs.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingScene.ts', './gameCommonUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, instantiate, gfLoadingScene, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "7a48ekGgQRHo4B2Q39iQQjS", "gfLoadGameByPrefabs", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfLoadGameByPrefab = exports('GfLoadGameByPrefab', (_dec = ccclass('GfLoadGameByPrefab'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec(_class = (_class2 = class GfLoadGameByPrefab extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "persistNodeContainer", _descriptor, this);

          _initializerDefineProperty(this, "Loading", _descriptor2, this);

          _initializerDefineProperty(this, "GameNormal", _descriptor3, this);

          _initializerDefineProperty(this, "GameVIP", _descriptor4, this);

          _initializerDefineProperty(this, "Lobby", _descriptor5, this);
        }

        onLoad() {
          const loadingNode = instantiate(this.Loading);
          loadingNode.getComponent(gfLoadingScene).setGameAndLobbyPrefab(this.GameNormal, this.GameVIP, this.Lobby, this.persistNodeContainer);
          this.node.addChild(loadingNode);
          gameCommonUtils.handleReleaseBundle();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "persistNodeContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Loading", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "GameNormal", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "GameVIP", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Lobby", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gfMainFSM.ts', './gfBaseConfig.ts', './gfMainController.ts', './gfReferenceManager.ts', './gameCommonUtils.ts', './gfAssetBundle.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, ProgressBar, Node, _decorator, Component, sys, instantiate, tween, assetManager, director, Prefab, error, UITransform, loadConfigAsync, gfMainFSM, gfBaseConfig, gfMainController, gfReferenceManager, gameCommonUtils, gfAssetBundle, registerLoadHowl, unregisterLoadHowl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      instantiate = module.instantiate;
      tween = module.tween;
      assetManager = module.assetManager;
      director = module.director;
      Prefab = module.Prefab;
      error = module.error;
      UITransform = module.UITransform;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      registerLoadHowl = module.registerLoadHowl;
      unregisterLoadHowl = module.unregisterLoadHowl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "10321Y4ew9IiqXDfRUMG3rZ", "gfLoadingScene", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLoadingScene = exports('gfLoadingScene', (_dec = ccclass('gfLoadingScene'), _dec2 = property(ProgressBar), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class gfLoadingScene extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "isLoadByBundle", _descriptor, this);

          _initializerDefineProperty(this, "processBar", _descriptor2, this);

          _initializerDefineProperty(this, "loadingGlow", _descriptor3, this);

          _initializerDefineProperty(this, "homeBtn", _descriptor4, this);

          this.persistNodeName = 'PersisNodeContainer';
          this.MaxStep = 3;
          this.listSceneName = [];
          this.persistNodePrefab = null;
          this.isLoadByPrefab = false;
          this._targetPercent = 0;
          this._speed = 0;
          this._currentProgress = 0;
          this.usingLoadHowl = false;
          this._isLoadingDone = false;
          this._isSwitchScene = false;
        }

        onLoad() {
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();
          this.initGameConfig();
          this.initAssetBundle();

          if (sys.isBrowser) {
            if (LOGIN_IFRAME && globalThis.Howler) {
              registerLoadHowl();
              this.usingLoadHowl = true;
            }
          }

          if (this.isLoadByPrefab) {
            this.loadGameByPrefab();
          } else if (this.isLoadByBundle) {
            this.loadGameByBundle();
          } else {
            this.setUpListSceneToLoad();
            this.preloadScene(0);
          }

          this.setEnableHomeButton(!LOGIN_IFRAME);
        }

        ExitGame() {
          var _MainFSM$instance;

          (_MainFSM$instance = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance._fsm.goExitGame();
          gameCommonUtils.handleFlowOutGame();
        }

        initGameConfig() {
          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          }
        }

        initAssetBundle() {
          if (!gfAssetBundle.instance) {
            new gfAssetBundle();
          }
        }

        setEnableHomeButton(isActive = false) {
          if (this.homeBtn) {
            this.homeBtn.active = false;
            this.homeBtn.off('click');
            this.homeBtn.on('click', () => {
              this.ExitGame();
            });
            this.scheduleOnce(() => {
              this.homeBtn.active = isActive;
            }, 10);
          }
        }

        setGameAndLobbyPrefab(gameNormalPrefab, gameVIPPrefab, lobbyPrefab, persistNodePrefab) {
          this.initGameConfig();
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Game1] = gameNormalPrefab;
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Game2] = gameVIPPrefab;
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Lobby] = lobbyPrefab;
          this.persistNodePrefab = persistNodePrefab;
          this.isLoadByPrefab = true;
        }

        loadGameByPrefab() {
          gfBaseConfig.instance.MainGameNode = this.node.parent;
          gfBaseConfig.instance.LoadGameByPrefab = true;
          let persistNode = instantiate(this.persistNodePrefab);
          this.node.parent.addChild(persistNode);
          this.MaxStep = 1;
          tween(this.node).to(1, null, {
            onUpdate: (target, ratio) => {
              this.updateLoadingProgress(0, ratio);
            }
          }).call(() => {
            this._isLoadingDone = true;
          }).start();
        }

        loadGameByBundle() {
          gfBaseConfig.instance.MainGameNode = this.node.parent;
          gfBaseConfig.instance.LoadGameByPrefab = true;
          gfAssetBundle.instance.GameBundle = assetManager.getBundle(gfBaseConfig.instance.BundleName);

          if (!gfAssetBundle.instance.GameBundle) {
            assetManager.loadBundle(gfBaseConfig.instance.BundleName, (err, bundle) => {
              if (err) ;else {
                gfAssetBundle.instance.GameBundle = bundle;
                this.loadAssetsData();
              }
            });
          } else {
            this.loadAssetsData();
          }
        }

        setUpListSceneToLoad() {
          for (const name in gfBaseConfig.instance.SceneName) {
            if (gfBaseConfig.instance.SceneName[name]) {
              this.listSceneName.push(name);
            }
          }
        }

        preloadScene(indexScene = 0) {
          const sceneName = gfBaseConfig.instance.SceneName[this.listSceneName[indexScene]];
          const totalScene = this.listSceneName.length;
          this.MaxStep = totalScene;
          director.preloadScene(sceneName, (completedCount, totalCount, item) => {
            this.updateLoadingProgress(indexScene, completedCount / totalCount);
          }, error => {
            if (error) {
              this.ExitGame();
            } else {
              if (gfMainFSM.instance.isStateExit()) return;
              indexScene++;

              if (indexScene != totalScene) {
                this.preloadScene(indexScene);
              } else {
                this._isLoadingDone = true;
              }
            }
          });
        }

        loadAssetsData() {
          if (!gfAssetBundle.instance.GameBundle) return;

          for (const name in gfBaseConfig.instance.SceneName) {
            if (gfBaseConfig.instance.SceneName[name]) {
              this.listSceneName.push(name);
            }
          }

          const totalScene = this.listSceneName.length;
          this.MaxStep = totalScene + 1; // add 1 for persistent node. 

          gfAssetBundle.instance.GameBundle.load(this.persistNodeName, Prefab, (finished, total, item) => {
            let percent = finished / total;
            this.updateLoadingProgress(0, percent);
          }, (error, assets) => {
            if (error) {
              this.ExitGame();
              return;
            }

            const persistNode = instantiate(assets);
            this.node.parent.addChild(persistNode);
            if (this.homeBtn) this.homeBtn.active = false;
            this.unscheduleAllCallbacks();
            this.loadSceneBundle(0);
          });
        }

        loadSceneBundle(sceneIndex) {
          let lstScene = this.listSceneName.concat();
          gfAssetBundle.instance.GameBundle.load('./Scenes/' + gfBaseConfig.instance.SceneName[lstScene[sceneIndex]], Prefab, (finished, total, item) => {
            let percent = finished / total;
            this.updateLoadingProgress(sceneIndex + 1, percent);
          }, (err, prefab) => {
            if (err) {
              error(err);
              this.ExitGame();
              return;
            }

            gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName[lstScene[sceneIndex]]] = prefab;

            if (sceneIndex < lstScene.length - 1) {
              this.loadSceneBundle(sceneIndex + 1);
            } else {
              this._isLoadingDone = true;
            }
          });
        }

        updateLoadingProgress(step, currentPercent) {
          let percent = (step + currentPercent) / this.MaxStep;

          if (percent <= this._currentProgress) {
            this._speed = 0;
            return;
          }

          this._targetPercent = percent;
          this._speed = (percent - this._currentProgress) / ((1.0 - percent) * 3 + 0.1);
        }

        update(dt) {
          if (this._currentProgress < 1.0) {
            this._currentProgress += this._speed * dt;
            this.updateLoadingProgressDisplay();
          } else if (this._isLoadingDone && !this._isSwitchScene) {
            var _ReferenceManager$ins;

            (_ReferenceManager$ins = gfReferenceManager.instance) == null ? void 0 : _ReferenceManager$ins.setData({
              CurrentScene: this.node
            });
            gfMainController.instance.initToken();
            this._isSwitchScene = true;
          }
        }

        updateLoadingProgressDisplay() {
          this.processBar.progress = Number(this._currentProgress.toFixed(3));
          if (this.processBar.progress > 1.0) this.processBar.progress = 1.0;

          if (this.loadingGlow) {
            const currentPosGlow = this.loadingGlow.getPosition();
            const newPosX = Math.max(currentPosGlow.x, this.processBar.getComponent(UITransform).width * this.processBar.progress);
            this.loadingGlow.setPosition(newPosX, currentPosGlow.y, 0);
          }
        }

        onDestroy() {
          if (this.usingLoadHowl) {
            unregisterLoadHowl();
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLoadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "processBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadingGlow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingTransition.ts", ['cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  var cclegacy, Component, tween, _decorator, setOpacity, gfBaseEvents, delay, fadeOut, call, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "64cbaM1vRdJnq2EqYQ2YxOz", "gfLoadingTransition", undefined);

      const {
        ccclass
      } = _decorator;
      let GfLoadingTransition = exports('GfLoadingTransition', (_dec = ccclass('GfLoadingTransition'), _dec(_class = class GfLoadingTransition extends Component {
        constructor(...args) {
          super(...args); // LIFE-CYCLE CALLBACKS:

          this.startTime = null;
        }

        onLoad() {
          setOpacity(this.node, 0);
          this.startTime = Date.now();
          registerEvent(gfBaseEvents.COMMON.LOADING_TRANSITION, this.transition, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        }

        transition() {
          gfDataStore.instance.setDataStore({
            "isPlayingLoadingTransition": true
          });
          setOpacity(this.node, 255);
          let delayTime = Date.now() - this.startTime > 1 ? 0.25 : 1;
          let tweenTransition = tween(this.node);
          tweenTransition.then(delay(delayTime));
          tweenTransition.then(fadeOut(0.5));
          tweenTransition.then(call(() => {
            gfDataStore.instance.setDataStore({
              "isPlayingLoadingTransition": false
            });
            removeEvents(this);
            this.node.destroy();
          }));
          tweenTransition.start();
        }

        refreshPage() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLobbyLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfMainFSM.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfNetworkParser.ts', './gameCommonUtils.ts', './loadConfigAsync.ts', './gfUtilities.ts', './animateNumberLabel.ts', './gfLayerComponent.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Label, Sprite, SpriteAtlas, _decorator, log, warn, gfDataStore, gfEventEmitter, gfMainFSM, gfBaseConfig, gfBaseEvents, gfNetworkParser, gameCommonUtils, loadConfigAsync, registerEvent, removeEvents, formatUserName, AnimateNumberLabel, gfLayerComponent, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      _decorator = module._decorator;
      log = module.log;
      warn = module.warn;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      formatUserName = module.formatUserName;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "24e87bN5TRKIZg3pbMUlK0r", "gfLobbyLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLobbyLayer = exports('gfLobbyLayer', (_dec = ccclass('gfLobbyLayer'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(SpriteAtlas), _dec(_class = (_class2 = class gfLobbyLayer extends gfLayerComponent {
        constructor() {
          super();

          _initializerDefineProperty(this, "txtJackpot", _descriptor, this);

          _initializerDefineProperty(this, "btnBack", _descriptor2, this);

          _initializerDefineProperty(this, "txtUserName", _descriptor3, this);

          _initializerDefineProperty(this, "txtWallet", _descriptor4, this);

          _initializerDefineProperty(this, "avatarSprite", _descriptor5, this);

          _initializerDefineProperty(this, "avatarAtlas", _descriptor6, this);

          this.delaySoundClick = 0.1;
          this.isLobbyLayer = true;
        }

        onLoad() {
          gfDataStore.instance.setDataStore({
            currentSceneName: gfBaseConfig.instance.SceneName.Lobby
          });
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();

          if (LOGIN_IFRAME) {
            this.btnBack.active = gameCommonUtils.checkConditionCloseGameIframe();
          } else {
            this.btnBack.active = true;
          }

          super.onLoad();
        }

        setStartCallback(callback) {
          this.startCallback = callback;
        }

        start() {
          super.start();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY, true);
          this.updateJackpotInfo();
        }

        initEvents() {
          super.initEvents();
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO, this.onUpdateInfo, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, this.onUpdateLobbyWallet, this);
          registerEvent(gfBaseEvents.COMMON.UPDATE_JACKPOT, this.updateJackpotInfo, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_ON_SHOW, this.onUpdateLobbyResume, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.ON_PLAY_NOW, this.onPlayNow, this);
        }

        onPlayNow(roomKind) {
          this.onRoomClick(null, roomKind);
        }

        onDestroy() {
          removeEvents(this);
          if (this.isLoadByPrefab) ;else if (!gfMainFSM.instance.isStateLoadGame() && !!gfEventEmitter.instance && !gfMainFSM.instance.isStateWaitExit()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }
        }

        onUpdateLobbyResume(data) {
          this.onUpdateLobbyWallet(data.Wallet);
        }

        onBtnJPHistoryClick() {
          log("::LobbyLayer:: onBtnJPHistoryClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        }

        onBtnInfoClick() {
          log("::LobbyLayer:: onBtnInfoClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
        }

        onBtnSettingClick() {
          log("::LobbyLayer:: onBtnSettingClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          this.scheduleOnce(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }, 0);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING);
        }

        onBtnBackClick() {
          log("::LobbyLayer:: onBtnBackClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.scheduleOnce(() => {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }, this.delaySoundClick); // gameCommonUtils.handleCloseGameIframe();
        }

        onRoomNormalClick() {
          log("::LobbyLayer:: onRoomNormalClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.Normal
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.Normal);
        }

        onRoomVipClick() {
          log("::LobbyLayer:: onRoomVipClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.VIP
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.VIP);
        }

        onRoomClick(event, roomKind) {
          log("::LobbyLayer:: onRoomClick", roomKind);
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfDataStore.instance.setDataStore({
            currentRoom: roomKind
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, roomKind);
        }

        onUpdateInfo() {
          const selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.Version) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_GAME_VERSION, selfInfo.Version);
          }

          this.txtUserName.string = formatUserName(selfInfo.Username);
          this.txtWallet.string = gfCurrencyCalculator.instance.formatCurrency(selfInfo.Wallet);

          if (this.avatarAtlas) {
            let frameAvatar = this.avatarAtlas.getSpriteFrame(selfInfo.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatarSprite.spriteFrame = frameAvatar;
          }

          if (selfInfo && selfInfo.EventInfo) {
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, selfInfo.EventInfo);
          }
        }

        onUpdateLobbyWallet(data) {
          this.txtWallet.string = gfCurrencyCalculator.instance.formatCurrency(data);
          this.txtWallet.updateRenderData(true);
        }

        updateJackpotInfo(amount) {
          if (!amount) {
            amount = gfDataStore.instance.getJackpotValue();
          }

          if (!this.txtJackpot) {
            //warn('Cant find node txtJackpot')
            return;
          }

          if (!this.txtJackpot.active) {
            return;
          }

          if (this.txtJackpot.getComponent(AnimateNumberLabel).currentValue === undefined) {
            this.txtJackpot.getComponent(AnimateNumberLabel).currentValue = +amount;
          }

          this.txtJackpot.onUpdateValue(+amount, 3000);
          this.txtJackpot.getComponent(Label).updateRenderData(true);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtJackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txtWallet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatarSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizationLoader.ts", ['cc', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, Component, assetManager, error, deserialize, _decorator, log, gfAssetLangController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      assetManager = module.assetManager;
      error = module.error;
      deserialize = module.deserialize;
      _decorator = module._decorator;
      log = module.log;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9750b98PHpF1pE+7TM1ikMO", "gfLocalizationLoader", undefined);

      const {
        ccclass
      } = _decorator;
      const lodash = _;
      const File_ = {
        Version: 0,
        Context: 0,
        SharedUuids: 1,
        SharedStrings: 2,
        SharedClasses: 3,
        SharedMasks: 4,
        Instances: 5,
        InstanceTypes: 6,
        Refs: 7,
        DependObjs: 8,
        DependKeys: 9,
        DependUuidIndices: 10,
        ARRAY_LENGTH: 11
      };
      let gfLocalizationLoader = exports('gfLocalizationLoader', (_dec = ccclass('gfLocalizationLoader'), _dec(_class = class gfLocalizationLoader extends Component {
        constructor(...args) {
          super(...args);
          this.cacheAsset = void 0;
        }

        onLoad() {
          this.cacheAsset = [];
          this.overrideSceneLoadingProcess();
        }

        overrideSceneLoadingProcess() {
          assetManager.parser.register('import', this.downloadUuid.bind(this));
        }

        downloadUuid(a, b, c) {
          if (this.isSceneLocal(a)) {
            a = this.DownLoadUuidOnLocal(a);
          } else if (this.iSceneBuild(a)) {
            a = this.DownloadUuidOnBuild(a);
          }

          return assetManager.parser.parseImport(a, b, c);
        }

        isSceneLocal(json) {
          var SCENE_ID = 'cc.Scene';
          var PREFAB_ID = 'cc.Prefab';
          return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
        }

        iSceneBuild(json) {
          var SCENE_ID = 'scene';
          var PREFAB_ID = 'root';
          return json[File_.SharedStrings] && json[File_.SharedStrings].indexOf(SCENE_ID) > -1 || json[File_.SharedStrings] && json[File_.SharedStrings].indexOf(PREFAB_ID) > -1;
        }

        DownLoadUuidOnLocal(json) {
          let handleJSONScene = function (arr) {
            for (let i = 0; i < arr.length; ++i) {
              if (!arr[i]['_components'] || !arr[i]['_components'].length) continue;
              let idxConfig = arr[i]['_components'].findIndex(component => arr[component['__id__']]['nodeID']);
              idxConfig = idxConfig > -1 ? arr[i]['_components'][idxConfig]['__id__'] : idxConfig;
              if (idxConfig === -1) continue;
              let config = gfAssetLangController.instance.getConfigByID(arr[idxConfig]['nodeID']);

              if (!config) {
                log('Config', arr[idxConfig]['nodeID'], 'not found in current language');
                continue;
              }

              let _compIDx = arr[i]['_components'].findIndex(elm => arr[elm['__id__']]['__type__'] === config.Type);

              _compIDx = _compIDx > -1 ? arr[i]['_components'][_compIDx]['__id__'] : _compIDx;

              if (_compIDx <= -1) {
                log("cannot find " + config.Type + "in node " + arr[idxConfig]['nodeID']);
                continue;
              }

              modifyComp(arr[_compIDx], config);
              if (config.Type !== 'cc.Button') continue;
              if (!arr[_compIDx] || !arr[_compIDx]['_target']) continue;
              let idxNode = arr[_compIDx] && arr[_compIDx]['_target']['__id__'];
              if (!arr[idxNode]['_components']) continue;
              let idxSprite = arr[idxNode]['_components'].findIndex(elm => arr[elm['__id__']]['__type__'] === 'cc.Sprite');
              idxSprite = idxSprite > -1 ? arr[i]['_components'][idxSprite]['__id__'] : idxSprite;
              modifyComp(arr[idxSprite], {
                Type: "cc.Sprite",
                assetUuid: config.assetUuid ? config.assetUuid._normalSprite : null
              });
            }

            return arr;
          };

          let modifyComp = function (comp, config) {
            switch (config.Type) {
              case 'cc.Sprite':
                if (config.assetUuid) {
                  const haveCache = this.cacheAsset.find(child => {
                    return child.id === comp.node['__id__'] && child.value === comp['_spriteFrame']['__uuid__'];
                  });

                  if (!haveCache) {
                    this.cacheAsset.push({
                      id: comp.node['__id__'],
                      object: comp['_spriteFrame'],
                      value: comp['_spriteFrame']['__uuid__']
                    });
                  }

                  comp['_spriteFrame']['__uuid__'] = config.assetUuid;
                }

                break;

              case 'cc.Label':
                if (config.assetUuid) {
                  if (!comp['_font']) {
                    comp['_font'] = {
                      '__uuid__': ''
                    };
                  }

                  const haveCache = this.cacheAsset.find(child => {
                    return child.id === comp.node['__id__'] && child.value === comp['_font']['__uuid__'];
                  });

                  if (!haveCache) {
                    this.cacheAsset.push({
                      id: comp.node['__id__'],
                      object: comp['_font'],
                      value: comp['_font']['__uuid__']
                    });
                  }

                  comp['_font']['__uuid__'] = config.assetUuid;
                }

                break;

              case 'sp.Skeleton':
                if (config.assetUuid) {
                  if (!comp['_skeletonData']) {
                    comp['_skeletonData'] = {
                      '__uuid__': ''
                    };
                  }

                  const haveCache = this.cacheAsset.find(child => {
                    return child.id === comp.node['__id__'] && child.value === comp['_skeletonData']['__uuid__'];
                  });

                  if (!haveCache) {
                    this.cacheAsset.push({
                      id: comp.node['__id__'],
                      object: comp['_skeletonData'],
                      value: comp['_skeletonData']['__uuid__']
                    });
                  }

                  comp['_skeletonData']['__uuid__'] = config.assetUuid;
                }

                break;

              case 'cc.Button':
                let assetButton = config.assetUuid;
                const haveCache = this.cacheAsset.find(child => {
                  return child.id === comp['_target'];
                });
                let data = {
                  id: comp['_target'],
                  subComp: []
                };

                if (assetButton && assetButton._disabledSprite) {
                  if (!haveCache) {
                    data.subComp.push({
                      object: comp['_disabledSprite'],
                      value: comp['_disabledSprite']['__uuid__']
                    });
                  }

                  comp['_disabledSprite']['__uuid__'] = assetButton._disabledSprite;
                }

                if (assetButton && assetButton._hoverSprite) {
                  if (!haveCache) {
                    data.subComp.push({
                      object: comp['_hoverSprite'],
                      value: comp['_hoverSprite']['__uuid__']
                    });
                  }

                  comp['_hoverSprite']['__uuid__'] = assetButton._hoverSprite;
                }

                if (assetButton && assetButton._normalSprite) {
                  if (!haveCache) {
                    data.subComp.push({
                      object: comp['_normalSprite'],
                      value: comp['_normalSprite']['__uuid__']
                    });
                  }

                  comp['_normalSprite']['__uuid__'] = assetButton._normalSprite;
                }

                if (assetButton && assetButton._pressedSprite) {
                  if (!haveCache) {
                    data.subComp.push({
                      object: comp['_pressedSprite'],
                      value: comp['_pressedSprite']['__uuid__']
                    });
                  }

                  comp['_pressedSprite']['__uuid__'] = assetButton._pressedSprite;
                }

                if (!haveCache) {
                  this.cacheAsset.push(data);
                }

                break;

              default:
                error('Type not supported:', config.Type);
                break;
            }

            return comp;
          }.bind(this);

          return handleJSONScene(json);
        }

        DownloadUuidOnBuild(a) {
          let data = lodash.cloneDeep(a);
          const tdInfo = deserialize.Details.pool.get();
          deserialize(a, tdInfo);

          let handleJSONScene = function (Info, data) {
            const arr = Info.uuidObjList;

            for (let i = 0; i < arr.length; ++i) {
              if (!arr[i]['node']) continue;
              if (!arr[i]['node']['_components']) continue;
              if (arr[i]['node']['_components'].findIndex(elm => elm['nodeID']) === -1) continue;
              let idxConfig = arr[i]['node']['_components'].findIndex(elm => elm['nodeID']);
              let config = gfAssetLangController.instance.getConfigByID(arr[i]['node']['_components'][idxConfig]['nodeID']);

              if (!config) {
                log('Config', arr[i]['nodeID'], 'not found in current language');
                continue;
              }

              modifyComp(i, config, data, Info);
            }

            return data;
          };

          let modifyComp = function (id, config, data, Info) {
            switch (config.Type) {
              case 'cc.Sprite':
                if (config.assetUuid) {
                  const index = getIndexUuidIndices(id, data);
                  data[File_.SharedUuids][index] = config.assetUuid;
                }

                break;

              case 'cc.Label':
                if (config.assetUuid) {
                  const index = getIndexUuidIndices(id, data);
                  data[File_.SharedUuids][index] = config.assetUuid;
                }

                break;

              case 'sp.Skeleton':
                if (config.assetUuid) {
                  const index = getIndexUuidIndices(id, data);
                  data[File_.SharedUuids][index] = config.assetUuid;
                }

                break;

              case 'cc.Button':
                const key = Info.uuidPropList[id] == '_spriteFrame' ? '_normalSprite' : Info.uuidPropList[id];

                if (config.assetUuid[key]) {
                  const index = getIndexUuidIndices(id, data);
                  data[File_.SharedUuids][index] = config.assetUuid[key];
                }

                break;

              default:
                error('Type not supported:', config.Type);
                break;
            }
          }.bind(this);

          let getIndexUuidIndices = function (index, data) {
            const value = data[File_.DependUuidIndices][index];
            const countDepend = data[File_.DependUuidIndices].filter(element => element == value).length;

            if (countDepend == 1) {
              return value;
            }

            const newIndex = data[File_.SharedUuids].length + 1;
            data[File_.DependUuidIndices][index] = newIndex;
            return newIndex;
          };

          data = handleJSONScene(tdInfo, data);
          return data;
        }

        onDestroy() {
          this.cacheAsset.forEach(item => {
            if (item.subComp) {
              item.subComp.forEach(subChild => {
                subChild.object['__uuid__'] = subChild.value;
                subChild.value = "";
              });
            } else {
              item.object['__uuid__'] = item.value;
              item.value = "";
            }
          });
          this.cacheAsset.length = 0;
          assetManager.parser.register('import', assetManager.parser.parseImport);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalize.ts", ['cc'], function (exports) {
  var log, warn, cclegacy;
  return {
    setters: [function (module) {
      log = module.log;
      warn = module.warn;
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "30f18qQbtpKMLZJevACOyOw", "gfLocalize", undefined);

      class gfLocalize {
        constructor() {
          gfLocalize.instance = this;
          log('::Init Localization::');
        }

        initLocalizeConfig(jsonLocalize) {
          const localize = jsonLocalize;

          if (!localize) {
            warn('Localize file failed');
            return;
          } // this._localize = {};


          for (let key in localize) {
            gfLocalize.instance[key] = localize[key];
          }
        }

        destroy() {
          gfLocalize.instance = null;
        }

      }

      exports('default', gfLocalize);
      gfLocalize.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeAsset.ts", ['cc', './gfLocalizeNodeAsset.ts', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, UITransform, v3, _decorator, gfLocalizeNodeAsset, gfAssetLangController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      v3 = module.v3;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalizeNodeAsset = module.gfLocalizeNodeAsset;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "28e8fycEldPwo0KdrNZxibi", "gfLocalizeAsset", undefined);

      const {
        ccclass
      } = _decorator;
      let gfLocalizeAsset = exports('gfLocalizeAsset', (_dec = ccclass('gfLocalizeAsset'), _dec(_class = class gfLocalizeAsset extends gfLocalizeNodeAsset {
        onLoad() {
          if (gfAssetLangController.instance) {
            this.applyTransform();
            this.initOptions();
          }
        }

        applyTransform() {
          const config = gfAssetLangController.instance.getConfigByID(this.nodeID);
          if (!config) return;
          const {
            Transform,
            Type
          } = config;

          if (Transform) {
            for (let property in Transform) {
              if (property === 'UITransform' && Type !== 'sp.Skeleton') {
                // due to spine not change size
                const nodeComp = this.node.getComponent(UITransform);
                const {
                  contentSize,
                  anchorPoint
                } = Transform[property];

                if (contentSize) {
                  nodeComp.setContentSize(contentSize.width, contentSize.height);
                }

                if (anchorPoint) {
                  nodeComp.setAnchorPoint(anchorPoint.x, anchorPoint.y);
                }

                continue;
              }

              this.node[property] = this.isAngle(property) ? Transform[property] : v3(Transform[property].x, Transform[property].y, Transform[property].z);
            }
          }
        }

        initOptions() {}

        isAngle(property) {
          return property === 'angle';
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeButton.ts", ['cc', './gfLocalizeAsset.ts'], function (exports) {
  var cclegacy, _decorator, gfLocalizeAsset;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalizeAsset = module.gfLocalizeAsset;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5d9fb6K4QRLa6WNIIlC/weo", "gfLocalizeButton", undefined);

      const {
        ccclass
      } = _decorator;
      let gfLocalizeButton = exports('gfLocalizeButton', (_dec = ccclass('gfLocalizeButton'), _dec(_class = class gfLocalizeButton extends gfLocalizeAsset {
        initOptions() {}

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeLabel.ts", ['cc', './gfLocalizeAsset.ts', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, Label, _decorator, gfLocalizeAsset, gfAssetLangController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalizeAsset = module.gfLocalizeAsset;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fd7d3HRSo9Ptrxkyc83av+/", "gfLocalizeLabel", undefined);

      const {
        ccclass
      } = _decorator;
      let gfLocalizeLabel = exports('gfLocalizeLabel', (_dec = ccclass('gfLocalizeLabel'), _dec(_class = class gfLocalizeLabel extends gfLocalizeAsset {
        initOptions() {
          const config = gfAssetLangController.instance.getConfigByID(this.nodeID);
          if (!config) return;
          const {
            Option
          } = config;
          if (!Option) return;
          const lblComp = this.node.getComponent(Label);

          for (let property in Option) {
            lblComp[property] = Option[property];
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeNodeAsset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1ea68UK3BJN3ayoPBrdIekf", "gfLocalizeNodeAsset", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLocalizeNodeAsset = exports('gfLocalizeNodeAsset', (_dec = ccclass('gfLocalizeNodeAsset'), _dec(_class = (_class2 = class gfLocalizeNodeAsset extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodeID", _descriptor, this);
        }

        getNodeId() {
          return this.nodeID;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeID", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeSpine.ts", ['cc', './gfLocalizeAsset.ts', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, sp, _decorator, gfLocalizeAsset, gfAssetLangController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalizeAsset = module.gfLocalizeAsset;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "824e8XP8dFN06Y8DU9/l2YE", "gfLocalizeSpine", undefined);

      const {
        ccclass
      } = _decorator;
      let gfLocalizeSpine = exports('gfLocalizeSpine', (_dec = ccclass('gfLocalizeSpine'), _dec(_class = class gfLocalizeSpine extends gfLocalizeAsset {
        initOptions() {
          const config = gfAssetLangController.instance.getConfigByID(this.nodeID);
          if (!config) return;
          const {
            DefaultAnimation,
            IsLoop,
            PremultiplyAlpha,
            EnableBatch,
            AnimationCacheMode
          } = config['Option'];
          const nodeComp = this.node.getComponent(sp.Skeleton);

          if (AnimationCacheMode !== undefined) {
            nodeComp.setAnimationCacheMode(AnimationCacheMode);
          }

          if (DefaultAnimation) {
            nodeComp['defaultAnimation'] = DefaultAnimation;
            nodeComp.setAnimation(0, DefaultAnimation, !!IsLoop);
          }

          nodeComp.premultipliedAlpha = !!PremultiplyAlpha;
          nodeComp.enableBatch = !!EnableBatch;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalizeSprite.ts", ['cc', './gfLocalizeAsset.ts', './gfAssetLangController.ts'], function (exports) {
  var cclegacy, Sprite, _decorator, gfLocalizeAsset, gfAssetLangController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalizeAsset = module.gfLocalizeAsset;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4b7dc89Y4ZFJLZ8nYRHYbGB", "gfLocalizeSprite", undefined);

      const {
        ccclass
      } = _decorator;
      let gfLocalizeSprite = exports('gfLocalizeSprite', (_dec = ccclass('gfLocalizeSprite'), _dec(_class = class gfLocalizeSprite extends gfLocalizeAsset {
        initOptions() {
          const config = gfAssetLangController.instance.getConfigByID(this.nodeID);

          if (config && config.Option) {
            Object.keys(config.Option).forEach(key => {
              this.node.getComponent(Sprite)[key] && (this.node.getComponent(Sprite)[key] = config.Option[key]);
            });
          } //@ts-ignore


          this.node.getComponent(Sprite)._applySpriteSize(); //@ts-ignore


          this.node.getComponent(Sprite)._applySpriteFrame();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './utils.ts', './gfActionHelper.ts', './gfNode.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, tween, v3, Tween, gfBaseEvents, gfEventEmitter, setOpacity, rotateBy, fadeIn, stopAllActions, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
      Tween = module.Tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "0b23deizqlFKZkw3Wpjbkmk", "gfLuckyEffect", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfLuckyEffect = exports('default', (_dec = ccclass('gfLuckyEffect'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = class gfLuckyEffect extends gfNode {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "circle1Node", _descriptor, this);

          _initializerDefineProperty(this, "numberNode", _descriptor2, this);

          _initializerDefineProperty(this, "multiNode", _descriptor3, this);

          _initializerDefineProperty(this, "iconGlow", _descriptor4, this);

          _initializerDefineProperty(this, "pinNode", _descriptor5, this);

          this.rotateTime = 3;
        }

        initData(data) {
          for (let i = 0; i < this.multiNode.length; ++i) {
            this.multiNode[i].setScale(1, 1, 1);
          }

          tween(this.circle1Node).by(this.rotateTime, {
            angle: 360 * 4
          }).repeatForever().start();
          this.playEffect(data);
        }

        playEffect(data) {
          let multiplier = data.Multiplier;
          const result = multiplier - 2;
          const showTime = 0.5;
          const fadeTime = 0.2;
          this.iconGlow.active = true;
          setOpacity(this.iconGlow, 0);
          this.numberNode.angle = result * 90;
          tween(this.numberNode).parallel(tween().then(rotateBy(this.rotateTime, -360 * 3, "cubicOut")), tween().then(fadeIn(this.rotateTime, "cubicOut"))).start();
          tween(this.pinNode).then(fadeIn(0.5)).start();
          tween(this.node).to(showTime, {
            scale: v3(1, 1, 1)
          }).delay(this.rotateTime - showTime).call(() => {
            tween(this.multiNode[result]).delay(fadeTime).to(showTime, {
              scale: v3(1.5, 1.5, 1)
            }).call(() => {
              tween(this.node).to(showTime + fadeTime, {
                scale: v3(0, 0, 1)
              }).call(() => {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_LUCKY_EFFECT_DONE, data);
                this.returnPool();
              }).start();
            }).start();
          }).start();
        }

        update() {
          this.multiNode.forEach(element => {
            element.angle = -this.numberNode.angle;
          });
        }

        reuse(poolMng) {
          super.reuse(poolMng);
        }

        unuse() {
          this.unscheduleAllCallbacks();
          setOpacity(this.numberNode, 0);
          Tween.stopAllByTarget(this.circle1Node);
          this.circle1Node.setScale(1, 1, 1);
          this.circle1Node.setPosition(0, 0, 0);
          setOpacity(this.circle1Node, 255);
          setOpacity(this.pinNode, 255);
          stopAllActions(this.node);

          for (let i = 0; i < this.multiNode.length; ++i) {
            stopAllActions(this.multiNode[i]);
          }

          super.unuse();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "circle1Node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "numberNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "multiNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "iconGlow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "pinNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, BoxCollider2D, Vec3, Sprite, Color, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      BoxCollider2D = module.BoxCollider2D;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Color = module.Color;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "305ddiA5gZAI7Kz+hXQuWzN", "gfLuckyFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfLuckyFish = exports('GfLuckyFish', (_dec = ccclass('GfLuckyFish'), _dec2 = property(Node), _dec(_class = (_class2 = class GfLuckyFish extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "luckyEffect", _descriptor, this);

          this._multiplier = 1;
        }

        initLuckyEffect(data) {
          const {
            multiplier
          } = data;
          this._multiplier = multiplier;

          if (this.luckyEffect) {
            this.luckyEffect.active = this._multiplier > 1;
            const scaleSize = Math.min(2, this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x / 50);
            this.luckyEffect.setScale(new Vec3(scaleSize, scaleSize, 1));
            this.luckyEffect.getComponent(Sprite).color = Color.WHITE;
          }
        }

        onPlayEffectWinLuckfyFishInCatchFish(data) {
          if (this._multiplier > 1) {
            this.luckyEffect.active = false;
            data.Multiplier = this._multiplier;
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.LUCKY_EFFECT_FISH, data);
          }
        }

        getMultiplier() {
          return this._multiplier;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "luckyEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainController.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './gfNetworkParser.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfMainFSM.ts', './gfDataStore.ts', './mock.ts', './loadConfigAsync.ts', './serviceRest.ts', './gameCommonUtils.ts', './gfAssetBundle.ts', './gfLayerComponent.ts', './gfOverrideEngine.ts'], function (exports) {
  var sys, game, Game, director, Director, warn, log, instantiate, cclegacy, gfEventEmitter, gfBaseEvents, gfNetworkGameEvent, gfNetworkParser, addHtmlCursor, registerEvent, removeEvents, removeCursorInHtml, gfBaseConfig, gfMainFSM, gfDataStore, mock, loadConfigAsync, apiObject, gameCommonUtils, gfAssetBundle, gfLayerComponent, gfOverrideEngine;
  return {
    setters: [function (module) {
      sys = module.sys;
      game = module.game;
      Game = module.Game;
      director = module.director;
      Director = module.Director;
      warn = module.warn;
      log = module.log;
      instantiate = module.instantiate;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      addHtmlCursor = module.addHtmlCursor;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      removeCursorInHtml = module.removeCursorInHtml;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      mock = module.mock;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      gfLayerComponent = module.gfLayerComponent;
    }, function (module) {
      gfOverrideEngine = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2615edDXbRNUYD1XT4g99wj", "gfMainController", undefined);

      const {
        getUrlParam,
        handleCloseGameIframe,
        handleFlowOutGame
      } = gameCommonUtils;

      class gfMainController {
        constructor() {
          this._onHideGameBinding = void 0;
          this._onShowGameBinding = void 0;
          this._onBeforeSceneChange = void 0;
          this.isLoadingLobbyScene = void 0;
          this.needLoadGameScene = void 0;
          this._isGameHide = void 0;
          this._timeHide = null;
          this._timeOutDupLogin = void 0;
          this._onUpdateJackpot = void 0;
          gfMainController.instance = this; // EMIT FUNC

          this._onHideGameBinding = this.onHideGame.bind(this);
          this._onShowGameBinding = this.onShowGame.bind(this);
          this._onBeforeSceneChange = this.onBeforeSceneChange.bind(this);
          this.initEvents();
          this.initGame();
          this.initSentry();
          new gfOverrideEngine();
        }

        initSentry() {
          loadConfigAsync.setUpSentry();

          if (typeof globalThis.Sentry !== 'undefined') {
            globalThis.Sentry.configureScope(function (scope) {
              scope.setExtra("gameVersion", gfBaseConfig.instance.GameVersion);
            });
          }
        }

        initToken() {
          const CONFIG = loadConfigAsync.getConfig();
          const {
            LOGIN_IFRAME,
            URL_TOKEN,
            USER_TOKEN,
            DEV_ENV,
            TOKEN_VALUE,
            FISH_CLIENT_TYPE,
            IS_FINISHED_REMOTE,
            TOKEN,
            API_URL,
            IS_PRODUCTION
          } = CONFIG;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(() => {
              this.initToken();
            }, 100);
            return;
          }

          gfBaseConfig.instance.IsDevMode = DEV_ENV != null && DEV_ENV == true;
          gfBaseConfig.instance.IPMaster = CONFIG[gfBaseConfig.instance.IPMasterName];
          let token = '';
          let clientType = '1';
          let environmentType = '';
          let hasCode = gfBaseConfig.instance.HasCode;

          if (LOGIN_IFRAME) {
            gfBaseConfig.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : gfBaseConfig.instance.GameId;
            environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.IFRAME}`;
          }

          if (LOGIN_IFRAME && getUrlParam('version')) {
            gfBaseConfig.instance.RoomVersion = getUrlParam('version');
          } else if (IS_PRODUCTION) {
            if (sys.isNative) {
              environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.NATIVE_APP}`;
            } else {
              environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.WEB_APP}`;
            }

            gfBaseConfig.instance.RoomVersion = gfBaseConfig.instance.ProdVersion ? gfBaseConfig.instance.ProdVersion : gfBaseConfig.instance.RoomVersion;
          }

          if (LOGIN_IFRAME && getUrlParam('clientType')) {
            clientType = getUrlParam('clientType');
          } else if (FISH_CLIENT_TYPE) {
            clientType = FISH_CLIENT_TYPE;
          } else {
            clientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : clientType;
          }

          if (!gfBaseConfig.instance.IsDevMode) {
            if (TOKEN) {
              token = TOKEN;
            } else if (!sys.isNative && LOGIN_IFRAME) {
              if (URL_TOKEN) {
                token = getUrlParam(URL_TOKEN);
              }
            } else {
              if (typeof window !== 'undefined' && typeof window["__Game_Bridge"] !== 'undefined' && typeof window["__Game_Bridge"].getUSS === 'function') {
                token = window["__Game_Bridge"].getUSS();
              } else {
                token = sys.localStorage.getItem(USER_TOKEN);
              }

              if (!token && TOKEN_VALUE) {
                token = TOKEN_VALUE;
              }
            }

            gfBaseConfig.instance.userToken = token;

            if (gfBaseConfig.instance.IsNewLogin) {
              token += `|${clientType}`;
            } else {
              token += `|${gfBaseConfig.instance.RoomVersion}` + `|${clientType}` + `|${environmentType}` + `|${hasCode}`;
            }

            console.log('token4Master', token);
            gfBaseConfig.instance.token4Master = token;

            gfMainFSM.instance._fsm.goLoginLobby();
          } else {
            // const { userText, pwText } = require('mock');
            const dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            }; // const serviceRest = require('serviceRest');

            apiObject.post({
              url: 'auth/login',
              apiUrl: API_URL,
              data: dataPost,
              callback: ({
                data
              }) => {
                gfBaseConfig.instance.token4Master = data.data.token + clientType;

                gfMainFSM.instance._fsm.goLoginLobby();
              }
            });
          }
        }

        initGame() {
          this._isGameHide = true; // Trick to handle bug from hideGame on LoadingScene

          addHtmlCursor();
        }

        initEvents() {
          // NETWORK EVENT
          this._onUpdateJackpot = this.onUpdateJackpot.bind(this);
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.NETWORK_EVENT, this.onNetworkState.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_LOGIN, this.onLoginLobby.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, this.onJoinGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LOGIN, this.onLoginGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_JACKPOT, this.onUpdateJackpot.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_UPDATE_MY_GOLD, this.onUpdateLobbyWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_GET_BOT_SETTING, this.onGetBotSetting.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_FIRE, this.onUserFire.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH, this.onCreateListFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH, this.onCatchFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, this.onCatchFishByOneShotGunSkill.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH_GROUP_NEW, this.onCreateFishGroup.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ROOM_DATA, this.onDataJoinRoom.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LISTUSER_BOARD, this.onListUserOnBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this._onUpdateJackpot);
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_ENTER_BOARD, this.onPlayerEnterBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_KICK, this.onGameKick.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_EXIT, this.onPlayerExitBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_WALLET, this.onPlayerUpdateWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CHANGE_ROUND, this.onGameChangeRound.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LIST_ITEM, this.onUpdateListItem.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_UPDATE_EVENT_STATUS, this.onUpdateEventStatus.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_EVENT_STATUS, this.onUpdateEventStatus.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_EVENT_TRAY, this.onUpdateEventTray.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_ON_SHOW, this.onUpdateLobbyOnShow.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_QUICK_JOIN_ROOM, this.onQuickJoinRespond.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PROMOTION_GUN_END, this.onPromotionGunEnded.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PROMOTION_GUN_END_OTHER_ROOM, this.onPromotionGunEndedOtherRoom.bind(this)); // EMIT EVENT

          registerEvent(gfBaseEvents.COMMON.GO_LOBBY, this.goLobby, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.bulletCollideFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, this.sendGunFire, this);
          registerEvent(gfBaseEvents.GUN_SKILL.ON_SEND_FIRE_ONE_SHOT_GUN_SKILL, this.sendFireOneShotGunSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_FIRE_DRILL, this.sendFireDrill, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
          registerEvent(gfBaseEvents.POPUP.GET_BOT_SETTING, this.sendGetBotSetting, this);
          registerEvent(gfBaseEvents.POPUP.SET_BOT_SETTING, this.sendSetBotSetting, this);
          registerEvent(gfBaseEvents.EVENT.SEND_GET_EVENT_INFO, this.sendGetEventInfo, this);
          registerEvent(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, this.onShowGameLayer, this);
          registerEvent(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER, this.sendExitGameServer, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, this.sendGetRoomInfo, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_MASTER, this.connectMaster, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_GAME, this.connectGame, this);
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_QUICK_JOIN_ROOM, this.sendQuickHunt, this);
          game.on(Game.EVENT_HIDE, this._onHideGameBinding);
          game.on(Game.EVENT_SHOW, this._onShowGameBinding);
          director.on(Director.EVENT_BEFORE_SCENE_LOADING, this._onBeforeSceneChange);
          director.on('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);

          if (!sys.isNative) {
            window.addEventListener('beforeunload', this.onCloseTab.bind(this));
          }
        }

        onBeforeSceneChange() {
          if (!gfEventEmitter.instance) {
            return;
          }

          if (gfMainFSM.instance.isStateLobby() || gfMainFSM.instance.isStateGameRoom()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }
        }

        handleDuplicatedLogin() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
        }

        onCloseTab() {
          if (gfDataStore.instance && gfBaseConfig.instance) {
            if (this.isGameScene()) {
              this.sendRegisterExit();
            }
          }
        }

        sendRegisterExit() {
          gfNetworkParser.instance.sendRegisterExit();
        } // NETWORK FUNCTION


        onNetworkState(data) {
          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            warn('game already destroyed or either not initialized');
          }

          const {
            EventID,
            EventData
          } = data;
          const selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, data);
          const eventData = {
            customMsg: EventID,
            code: EventData.code
          };

          switch (EventID) {
            case gfNetworkGameEvent.PINGPONG:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_PING, data.EventData.data);
              break;

            case gfNetworkGameEvent.NETWORK_CONNECT:
              if (gfMainFSM.instance.isStateLoginGameRoom() || gfMainFSM.instance.isStateGameRoom()) {
                // Emitter.instance.emit(EventCode.POPUP.CLOSE_ALL);
                gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
              } else if (gfBaseConfig.instance.IsNewLogin) {
                let loginData = this.getLoginLobbyData();
                gfNetworkParser.instance.sendLoginLobby(loginData);
              } else {
                this.onLoginLobbyFurther();
                const language = gfDataStore.instance.getMLMCInfo().lang;
                gfNetworkParser.instance.sendLoginLobby({
                  Language: language
                });
              }

              break;

            case gfNetworkGameEvent.NETWORK_WAITING:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
              break;

            case gfNetworkGameEvent.NETWORK_ERROR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_ERROR);
              break;

            case gfNetworkGameEvent.NETWORK_CLOSE:
              /** Show close socket hay làm gì đó* */
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, eventData);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.PAUSE_AUTO_FIRE);
              break;

            case gfNetworkGameEvent.NETWORK_DIE:
              /** Show popup refesh* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, eventData);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.PAUSE_AUTO_FIRE);
              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              if (this.isGameScene()) {
                this.goLobby();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
                /** Show popup login fail* */

                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, eventData);
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              /** Show popup thiết bị khác* */
              const {
                LOGIN_IFRAME
              } = loadConfigAsync.getConfig();

              if (LOGIN_IFRAME === true) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, eventData);
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              }

              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.onReconnect();
              break;

            case gfNetworkGameEvent.SERVER_MAINTAIN:
              /** Show popup server bảo trì**/
              eventData.customMsg = gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN;
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, eventData);
              break;
          }
        }

        onReconnect() {
          const selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.HIDE_ALL_CUT_SCENE);

          if (gfMainFSM.instance.isStateLoginGameRoom() || gfMainFSM.instance.isStateGameRoom()) {
            gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
          } else {
            if (gfBaseConfig.instance.IsNewLogin) {
              let loginData = this.getLoginLobbyData();
              gfNetworkParser.instance.sendLoginLobby(loginData);
            } else {
              this.onLoginLobbyFurther();
            }
          }
        }

        onLoginLobbyFurther() {
          if (!gfBaseConfig.instance.HasCode) return;
          const CONFIG = loadConfigAsync.getConfig();
          const {
            URL_CODE
          } = CONFIG;
          const language = gfDataStore.instance.getMLMCInfo().lang;
          const dataLoginLobby = {
            PromotionCode: null,
            Language: language
          };
          dataLoginLobby.PromotionCode = getUrlParam(URL_CODE) || '';
          gfNetworkParser.instance.sendLobbyLoginInfo(dataLoginLobby);
        }

        goLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);

          gfMainFSM.instance._fsm.goLoginLobby();
        }

        onLoginLobby(data) {
          data.DeskId = null;
          gfDataStore.instance.setPromotionInfo(data.PromotionInfo);
          gfDataStore.instance.setSelfInfo(data);
          gfDataStore.instance.updateDeltaTime(data.ServerTime);

          if (!this.isValidCurrency()) {
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.INVALID_CURRENCY);

            gfMainFSM.instance._fsm.goWaitExit();

            return;
          }

          if (data.BetConfig) {
            gfDataStore.instance.listJackpotBet = globalThis._(data.BetConfig).values().join('-');
          }

          if (!data.isUserInGame) {
            if (gfDataStore.instance.getCurrentSceneName() !== gfBaseConfig.instance.SceneName.Lobby) {
              this.loadScene(gfBaseConfig.instance.SceneName.Lobby, () => {
                var _Emitter$instance, _MainFSM$instance;

                (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);
                (_MainFSM$instance = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance._fsm.goLobby();
              });
            } else {
              var _MainFSM$instance2;

              if ((_MainFSM$instance2 = gfMainFSM.instance) != null && _MainFSM$instance2._fsm.can('goLobby')) {
                var _MainFSM$instance3;

                (_MainFSM$instance3 = gfMainFSM.instance) == null ? void 0 : _MainFSM$instance3._fsm.goLobby();
              } else {
                var _Emitter$instance2, _Emitter$instance3;

                (_Emitter$instance2 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance2.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO);
                (_Emitter$instance3 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance3.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, gfDataStore.instance.getJackpotValue());
              }
            }
          }
        }

        onJoinGame(data) {
          if (gfMainFSM.instance.isStateWaitExit()) {
            return;
          }

          gfBaseConfig.instance.parseJoinGame(data);

          if (data.KindID) {
            gfDataStore.instance.setCurrentRoom(data.KindID);
          }

          this.loadGameScene();
        }

        loadGameScene() {
          const sceneName = this.getGameSceneName();
          const currentScene = gfDataStore.instance.getCurrentSceneName();

          if (!this.isGameScene() || currentScene !== sceneName) {
            gfMainFSM.instance._fsm.goLoadGame();

            if (currentScene === gfBaseConfig.instance.SceneName.Lobby) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, false, true);
            }

            this.loadScene(sceneName, () => {
              log('::LOAD GAME SCENE SUCCESSFULLY::');

              if (gfMainFSM.instance.isStateWaitExit()) {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              } else if (this.checkNeedRefresh()) {
                handleFlowOutGame();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.AFTER_LOAD_SCENE_GAME);
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);

                gfMainFSM.instance._fsm.goLoginGameRoom();
              }
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);

            gfMainFSM.instance._fsm.goLoginGameRoom();
          }
        }

        isGameScene() {
          if (gfDataStore.instance) {
            const currentScene = gfDataStore.instance.getCurrentSceneName();
            const strCompare = "Game";
            if (currentScene) return currentScene.includes(strCompare);
          }

          return false;
        }

        checkNeedRefresh() {
          return !gfEventEmitter || !gfEventEmitter.instance;
        }

        onLoginGame(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfDataStore.instance.parseLoginGame(data);

          if (data.Version) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_GAME_VERSION, data.Version);
          }

          gfMainFSM.instance._fsm.goGameRoom();
        }

        onSystemMessage(data) {
          const {
            Code,
            message
          } = data;
          data.code = Code;

          if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING, true);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.INVALID_CURRENCY) {
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.INVALID_CURRENCY);
          } else if (Code > 0) {
            if (Code == gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
          } else if (message) {
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, message);
          }
        }

        onUpdateLobbyWallet(data) {
          gfDataStore.instance.setSelfInfo({
            Wallet: data.Wallet
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, data.Wallet);
        }

        onUpdateLobbyOnShow(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_ON_SHOW, data);
        }

        onGetBotSetting(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.UPDATE_BOT_SETTING, data);
        }

        sendGetBotSetting(roomKind) {
          gfNetworkParser.instance.getBotSetting(roomKind);
        }

        sendSetBotSetting(data) {
          const {
            arrFkd,
            duration,
            roomKind
          } = data;
          gfNetworkParser.instance.setBotSetting(arrFkd, duration, roomKind);
        } // sendStopBot() {
        //     NetworkParser.instance.stopBot();
        // }
        // {"DeskStation":0,"Angle":29.43551555743798,"BulletMultiple":1000,"LockedFishID":0}


        onUserFire(data) {
          if (data.DeskStation == gfDataStore.instance.getSelfDeskStation()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, data);
        }

        onUpdateListItem(data) {
          for (let i = 0; i < data.listItem.length; i++) {
            gfDataStore.instance.setListItemSkillByData(data.listItem[i]);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM);
        }

        onCreateListFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH, data);
        }

        onCatchFish(data) {
          if (!gfBaseConfig.instance.IsNewLogin) {
            data.isDie = data.FishID > 0;
          }

          if (data.skillInfo && !Array.isArray(data.skillInfo)) {
            data.skillInfo = [data.skillInfo];
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH, data);
        }

        onCatchFishByOneShotGunSkill(data) {
          if (!gfBaseConfig.instance.IsNewLogin) {
            const {
              SkillID
            } = data;
            const {
              ONE_SHOT_GUN,
              FISH_BOOM
            } = gfBaseConfig.instance.SKILL_CONFIG;

            if (SkillID === ONE_SHOT_GUN.SkillID) {
              data.fishKind = gfBaseConfig.instance.FISH_KIND.LASER_CRAB;
              gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, data);
            } else if (SkillID === FISH_BOOM.SkillID) {
              data.fishKind = gfBaseConfig.instance.FISH_KIND.BOMB;
              gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_LIST_FISH_BY_SPECIAL_FISH, data);
            }
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, data);
          }
        }

        onCreateFishGroup(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, data);
          data.isFishGroupToNormal = false;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.FISH_LOG, gfBaseConfig.instance.FISH_LOG_CONFIG.FISH_GROUP + " - " + data.ParadeKind);
        }

        onDataJoinRoom(data) {
          log("onDataJoinRoom", data);
        }

        onListUserOnBoard(data) {
          if (this._isGameHide) {
            this.onHideGame();
            return;
          }

          const {
            ServerTime,
            EventInfo,
            RoomData,
            ListUser
          } = data;
          gfDataStore.instance.updateDeltaTime(ServerTime);

          if (EventInfo) {
            console.log('Game Event!');
            gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, EventInfo);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM);

          if (RoomData) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, RoomData); // PopupController.instance.onJoinGame();
          }

          if (ListUser) {
            gfDataStore.instance.setSelfInfo({
              isReadyToPlay: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, ListUser);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND);
        }

        onUpdateJackpot(data) {
          gfDataStore.instance.setDataStore({
            jackpotValue: data.amount
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, data.amount);
        }

        onPlayerEnterBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, data);
        }

        onPlayerExitBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, data);

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
            gfDataStore.instance.setSelfInfo({
              DeskId: null
            });

            gfMainFSM.instance._fsm.goLoginLobby();
          }
        }

        onPlayerUpdateWallet(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, data);
        }

        onNotify(data) {
          if (!gfDataStore.instance.getCurrentSceneName()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        }

        onGameChangeRound(data) {
          data.isFishGroupToNormal = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
        } // EMIT FUNCTION
        //= ===============================


        onShowGameLayer(isShow = false) {
          if (isShow) {
            this.onShowGame();
          } else {
            this.onHideGame();
          }
        }

        onShowGame() {
          if (gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);
          }

          this._isGameHide = false;

          if (gfDataStore.instance) {
            gfDataStore.instance.setDataStore({
              timeHide: Date.now() - this._timeHide
            });
          }

          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            log("GAME SHOW");
            gfNetworkParser.instance.sendGetLobbyOnShow();
          } else if (this.isGameScene()) {
            log("GAME SHOW");
            gfNetworkParser.instance.notifyShowGame();
          }

          director.emit("EVENT_CLIENT2_RECONNECT");
        }

        onHideGame() {
          if (gfDataStore.instance) {
            gfDataStore.instance.setSelfInfo({
              isReadyToPlay: false
            });
          }

          this._isGameHide = true;
          this._timeHide = Date.now();

          if (gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_HIDE);
          }

          if (gfNetworkParser.instance) {
            log("GAME HIDE");
            gfNetworkParser.instance.sendIdleMessage();
          }
        }

        removeCurrentScene() {
          const currentNode = gfBaseConfig.instance.MainGameNode.children[1];
          currentNode.removeFromParent();
          const isLoadingScene = !currentNode.getComponent(gfLayerComponent);
          log('destroy: ' + currentNode.name);
          currentNode.destroy();

          if (isLoadingScene) {
            gfAssetBundle.instance.releaseLoadingAssets();
          }
        }

        loadScene(sceneName, callback) {
          if (gfBaseConfig.instance.LoadGameByPrefab) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE);
            const newNode = instantiate(gfBaseConfig.instance.ScenePrefabs[sceneName]);

            if (newNode) {
              let mainComponent = newNode.getComponent(gfLayerComponent);

              const createSceneCallback = () => {
                mainComponent.setStartCallback(callback);
                newNode.parent = gfBaseConfig.instance.MainGameNode;
                newNode.setSiblingIndex(0);
                this.removeCurrentScene();
              };

              if (!mainComponent.isLobbyLayer) {
                if (gfDataStore.instance.getCurrentRoom() != gfBaseConfig.instance.RoomKind.Normal) {
                  gfAssetBundle.instance.loadVipRoomAssets(createSceneCallback);
                } else {
                  gfAssetBundle.instance.releaseVipRoomAssets();
                }
              }

              if (mainComponent.isLobbyLayer || gfDataStore.instance.getCurrentRoom() == gfBaseConfig.instance.RoomKind.Normal) {
                createSceneCallback();
              }
            } else {
              warn('Fail to run scene ' + sceneName);
              handleFlowOutGame();
            }
          } else {
            director.preloadScene(sceneName, () => {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE);
              director.loadScene(sceneName, err => {
                if (err) {
                  warn(err.message, err.stack);
                  handleFlowOutGame();
                } else {
                  this._isGameHide = false;

                  if (callback && typeof callback === 'function') {
                    var _Emitter$instance4;

                    (_Emitter$instance4 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance4.emit(gfBaseEvents.COMMON.SCENE_LOAD_DONE);
                    callback();
                  }
                }
              });
            });
          }
        }

        refreshPage() {
          var _gfMainController$ins;

          if (gfMainFSM.instance.isStateLoadGame()) {
            gfMainFSM.instance._fsm.goWaitExit();

            return;
          }

          this.onCloseTab();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH);

          if (this.isGameScene()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME);
          gfNetworkParser.instance.cleanup(); // Todo: Stop all sound

          gfMainFSM.instance._fsm.goExitGame();

          (_gfMainController$ins = gfMainController.instance) == null ? void 0 : _gfMainController$ins.destroy();
          this.destroy();
        }

        destroy() {
          gfOverrideEngine.instance.restoreToDefaults();
          removeEvents(this);
          removeCursorInHtml();
          game.off(Game.EVENT_HIDE, this._onHideGameBinding);
          game.off(Game.EVENT_SHOW, this._onShowGameBinding);
          director.off(Director.EVENT_BEFORE_SCENE_LOADING, this._onBeforeSceneChange);
          director.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          handleCloseGameIframe();
        }

        sendExitGameServer() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfNetworkParser.instance.sendExitGameServer();
        }

        connectMaster() {
          gfNetworkParser.instance.connectMaster(gfBaseConfig.instance.IPMaster, gfBaseConfig.instance.token4Master);
        }

        connectGame() {
          gfNetworkParser.instance.connectGame(gfBaseConfig.instance.IPGame, gfBaseConfig.instance.token4Game);
        }

        sendGetRoomInfo(roomKind) {
          gfNetworkParser.instance.sendGetInfoGameRoom(roomKind);
        }

        sendGunFire(data) {
          gfNetworkParser.instance.sendGunFire(data);
        }

        sendFireOneShotGunSkill(data) {
          if (gfDataStore.instance.getIsReadyToPlay()) {
            gfNetworkParser.instance.sendCatchFishSkill(data);
          }
        }

        sendFireDrill(data) {
          gfNetworkParser.instance.sendCatchFishSkill(data);
        }

        bulletCollideFish(data) {
          if (data.isMe) {
            const {
              FishID,
              BulletMultiple,
              BulletID,
              FireType,
              SkillID
            } = data;
            let dataSend = {
              FishID,
              BulletID,
              FireType,
              SkillID
            };

            if (gfBaseConfig.instance.IsNewLogin) {
              dataSend.BulletMultiple = BulletMultiple;
            } else {
              dataSend.Multiple = BulletMultiple;
            }

            gfNetworkParser.instance.sendCatchFish(dataSend);
          }
        }

        onDestroy() {
          director.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          this.refreshPage();
        }

        onGameKick() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_ACTION); // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
        }

        sendGetEventInfo() {
          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            gfNetworkParser.instance.sendGetLobbyEventInfo();
          } else {
            console.warn('Invalid scene');
          }
        }

        onUpdateEventStatus(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EVENT.UPDATE_EVENT_STATUS, data);
        }

        onUpdateEventTray(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_EVENT_TRAY, data);
        }

        getGameSceneName() {
          if (gfDataStore.instance && gfBaseConfig.instance) {
            const prefix = "Game";
            const currentRoom = gfDataStore.instance.getCurrentRoom();
            const prefixCurrentRoom = prefix + currentRoom.toString();
            return gfBaseConfig.instance.SceneName[prefixCurrentRoom];
          }

          return null;
        }

        getLoginLobbyData() {
          let content = {
            environmentType: "",
            roomVersion: "",
            PromotionCode: "",
            Language: "vi"
          };
          const CONFIG = loadConfigAsync.getConfig();
          const {
            LOGIN_IFRAME,
            IS_PRODUCTION,
            URL_CODE
          } = CONFIG;

          if (LOGIN_IFRAME && getUrlParam('version')) {
            gfBaseConfig.instance.RoomVersion = `${getUrlParam('version')}`;
          } else if (IS_PRODUCTION) {
            gfBaseConfig.instance.RoomVersion = gfBaseConfig.instance.ProductVersion ? gfBaseConfig.instance.ProductVersion : gfBaseConfig.instance.RoomVersion;
          }

          if (LOGIN_IFRAME) {
            gfBaseConfig.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : gfBaseConfig.instance.GameId;
            gfBaseConfig.instance.ClientType = getUrlParam('clientType') ? getUrlParam('clientType') : gfBaseConfig.instance.ClientType;
            content.environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.IFRAME}`;
          } else {
            if (sys.isNative) {
              content.environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.NATIVE_APP}`;
            } else {
              content.environmentType = `${gfBaseConfig.instance.ENVIRONMENT_CONFIG.WEB_APP}`;
            }
          }

          content.roomVersion = gfBaseConfig.instance.RoomVersion;
          content.PromotionCode = getUrlParam(URL_CODE) || '';
          content.Language = gfDataStore.instance.getMLMCInfo().lang;
          return content;
        }

        isValidCurrency() {
          const userCurrency = gfDataStore.instance.getUserTypeOfCurrency();
          const lstCurrencyConfig = Object.keys(gfBaseConfig.instance.CURRENCY_CONFIG);
          let isValid = false;
          lstCurrencyConfig.forEach(cf => {
            if (gfBaseConfig.instance.CURRENCY_CONFIG[cf].ACRONYM === userCurrency) {
              isValid = true;
            }
          });
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();

          if (isValid && LOGIN_IFRAME) {
            let paramCurrency = getUrlParam('c');

            if (paramCurrency) {
              isValid = userCurrency === paramCurrency.toUpperCase();
            }
          }

          return isValid;
        }

        sendQuickHunt() {
          gfNetworkParser.instance.sendGameQuickJoinRoom();
        }

        onQuickJoinRespond() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_TRANSITION, true);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLEAR_TIMEOUT_SHOW_POPUP_NETWORK_DIE);
        }

        onPromotionGunEnded(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PROMOTION_GUN_EXPIRED, data);
        }

        onPromotionGunEndedOtherRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PROMOTION_GUN_EXPIRED_OTHER_ROOM);
        }

      }

      exports('default', gfMainController);
      gfMainController.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainFSM.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfNetworkParser.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfFishManager.ts', './gfLocalize.ts', './gfPoolManager.ts', './state-machine.min.mjs_cjs=&original=.js', './gfReferenceManager.ts', './gfGameScheduler.ts', './gfAssetLangController.ts', './state-machine.min.js'], function (exports) {
  var warn, cclegacy, showFullScreenButton, gfBaseEvents, gfNetworkParser, gfEventEmitter, gfBaseConfig, gfDataStore, gfFishManager, gfLocalize, gfPoolManager, gfReferenceManager, gfGameScheduler, gfAssetLangController, _cjsExports;

  return {
    setters: [function (module) {
      warn = module.warn;
      cclegacy = module.cclegacy;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, null, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfAssetLangController = module.gfAssetLangController;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f16aegHwhlABYtKLVhZWvKi", "gfMainFSM", undefined);

      const TRANSITION = {
        GO_LOGIN_LOBBY: 'goLoginLobby',
        GO_LOBBY: 'goLobby',
        GO_LOGIN_GAME_ROOM: 'goLoginGameRoom',
        GO_GAME_ROOM: 'goGameRoom',
        GO_EXIT_GAME: 'goExitGame',
        GO_LOAD_GAME: 'goLoadGame',
        GO_WAIT_EXIT: "goWaitExit"
      };
      const STATE = {
        START: 'start',
        LOGIN_LOBBY: 'loginLobby',
        LOBBY: 'lobby',
        LOAD_GAME: 'loadGame',
        LOGIN_GAME_ROOM: 'loginGameRoom',
        GAME_ROOM: 'gameRoom',
        WAIT_EXIT: 'waitExit',
        EXIT_GAME: 'exitGame'
      };

      class gfMainFSM {
        constructor() {
          this._fsm = void 0;
          gfMainFSM.instance = this;
          this._fsm = null;
          this.initStateMachine();
          this.initEvents();
        }

        initEvents() {}

        initStateMachine() {
          this._fsm = new _cjsExports({
            init: STATE.START,
            transitions: [{
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.START,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOBBY,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOBBY,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOBBY
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOAD_GAME,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_EXIT_GAME,
              from: "*",
              to: STATE.EXIT_GAME
            }, {
              name: TRANSITION.GO_WAIT_EXIT,
              from: STATE.LOAD_GAME,
              to: STATE.WAIT_EXIT
            }, {
              name: TRANSITION.GO_WAIT_EXIT,
              from: STATE.LOGIN_LOBBY,
              to: STATE.WAIT_EXIT
            }],
            methods: {
              onLoginLobby: this.onLoginLobby.bind(this),
              onLobby: this.onLobby.bind(this),
              onLoginGameRoom: this.onLoginGameRoom.bind(this),
              onGameRoom: this.onGameRoom.bind(this),
              onLeaveGameRoom: this.onLeaveGameRoom.bind(this),
              onExitGame: this.onExitGame.bind(this),

              onInvalidTransition(transition, from) {
                warn("Transition", transition, "from", from, "is not allowed");
              },

              onTransition() {// cc.warn("From ", lifecycle.from, " to ", lifecycle.to);
              }

            }
          });
        }

        onLoginLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_MASTER);
        }

        onLobby() {
          gfDataStore.instance.clearSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO); // Emitter.instance.emit(EventCode.COMMON.UPDATE_JACKPOT, DataStore.instance.getJackpotValue());

          showFullScreenButton(gfBaseConfig.instance.isLandscapeGame);
        }

        onLoginGameRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_GAME);
        }

        onGameRoom() {
          showFullScreenButton(false);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_TABLE_ID); // Emitter.instance.emit(EventCode.GAME_LAYER.UPDATE_JACKPOT_INFO);
        }

        onLeaveGameRoom() {// GameInfo.instance.clearGameInfo();
          // if (!GameInfo.instance.listZombieOutRoom)
          //     Emitter.instance.emit(EventCode.COMMON.EXIT_GAME_ROOM);
        } // Exit Game to Portal


        onExitGame() {
          var _Emitter$instance, _Emitter$instance2, _FishManager$instance, _Localize$instance, _NetworkParser$instan, _GameConfig$instance, _DataStore$instance, _gfReferenceManager$i, _PoolManager$instance, _gfAssetLangControlle;

          (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE);
          gfGameScheduler.destroy();
          (_Emitter$instance2 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance2.destroy();
          (_FishManager$instance = gfFishManager.instance) == null ? void 0 : _FishManager$instance.destroy();
          (_Localize$instance = gfLocalize.instance) == null ? void 0 : _Localize$instance.destroy();
          (_NetworkParser$instan = gfNetworkParser.instance) == null ? void 0 : _NetworkParser$instan.destroy();
          (_GameConfig$instance = gfBaseConfig.instance) == null ? void 0 : _GameConfig$instance.destroy();
          (_DataStore$instance = gfDataStore.instance) == null ? void 0 : _DataStore$instance.destroy();
          (_gfReferenceManager$i = gfReferenceManager.instance) == null ? void 0 : _gfReferenceManager$i.destroy();
          (_PoolManager$instance = gfPoolManager.instance) == null ? void 0 : _PoolManager$instance.destroy();
          (_gfAssetLangControlle = gfAssetLangController.instance) == null ? void 0 : _gfAssetLangControlle.destroy();
        }

        destroy() {
          gfMainFSM.instance = null;
        }

        isStateLobby() {
          return this._fsm.state === STATE.LOBBY;
        }

        isStateLoadGame() {
          return this._fsm.state === STATE.LOAD_GAME;
        }

        isStateLoginGameRoom() {
          return this._fsm.state === STATE.LOGIN_GAME_ROOM;
        }

        isStateLoginLobby() {
          return this._fsm.state === STATE.LOGIN_LOBBY;
        }

        isStateWaitExit() {
          return this._fsm.state === STATE.WAIT_EXIT;
        }

        isStateExit() {
          return this._fsm.state === STATE.EXIT_GAME;
        }

        isStateGameRoom() {
          return this._fsm.state === STATE.GAME_ROOM;
        }

      }

      exports('default', gfMainFSM);
      gfMainFSM.instance = void 0;
      gfMainFSM.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBoss.ts", ['cc', './gfBossBase.ts', './gfDataStore.ts', './gfBaseConfig.ts'], function (exports) {
  var cclegacy, UITransform, _decorator, gfBossBase, gfDataStore, gfBaseConfig;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      gfBossBase = module.gfBossBase;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fb874fqUGRGVZe72HE8cS3h", "gfMiniBoss", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBoss = exports('gfMiniBoss', (_dec = ccclass('gfMiniBoss'), _dec(_class = class gfMiniBoss extends gfBossBase {
        constructor(...args) {
          super(...args);
          this._timeSpent = 0;
          this._speed = 50;
          this._FishKind = 33;
        }

        onLoad() {
          this.node.active = false;
          this.setBossKind(33);
        }

        initFishData(data) {
          this.node.active = true;
          super.initFishData(data);
          this.startMove();
        }

        initFishState() {
          super.initFishState();
          const {
            Height
          } = gfBaseConfig.instance.AppSize;
          const x = -this.node.getComponent(UITransform).width / 2;
          this.node.setPosition(x, Height / 2, 1);
        }

        updateTimeSpend() {
          this._timeSpent = Math.max(0, (gfDataStore.instance.getTime() - this._buildTick) / 1000);
        }

        startMove(timeSpent = this._timeSpent) {
          var _this$bossAnim, _this$bossAnim2;

          (_this$bossAnim = this.bossAnim) == null ? void 0 : _this$bossAnim.updateAnimation(timeSpent);
          (_this$bossAnim2 = this.bossAnim) == null ? void 0 : _this$bossAnim2.setAnimation(0, 'animation', true);
        }

        update(dt) {
          if (this.checkDie()) return;
          let x = this._speed * dt;
          x += this.node.position.x;
          this.node.setPosition(x, this.node.position.y, 1);
          const {
            width
          } = this.getComponent(UITransform);

          if (x - width / 2 > gfBaseConfig.instance.AppSize.Width) {
            this.onDie();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossAssetsManager.ts", ['cc', './gfBossAssetsManager.ts', './gfMiniBossConfig.ts'], function (exports) {
  var cclegacy, _decorator, gfBossAssetsManager, gfMiniBossConfig;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossAssetsManager = module.gfBossAssetsManager;
    }, function (module) {
      gfMiniBossConfig = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fdc4de1ERNAN5PEL/dUtEP2", "gfMiniBossAssetsManager", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBossAssetsManager = exports('gfMiniBossAssetsManager', (_dec = ccclass('gfMiniBossAssetsManager'), _dec(_class = class gfMiniBossAssetsManager extends gfBossAssetsManager {
        mergeConfig() {
          gfMiniBossConfig.instance = new gfMiniBossConfig();
          gfMiniBossConfig.instance.bossKind = this.bossData.bossKind;
          gfMiniBossConfig.instance.mergeToBaseConfig();
        }

        removeConfig() {
          if (gfMiniBossConfig.instance) {
            gfMiniBossConfig.instance.destroy();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossConfig.ts", ['cc', './gfBossConfig.ts'], function (exports) {
  var cclegacy, _decorator, gfBossConfig;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossConfig = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "90c53XJ7s1JhpewL5wjFuvn", "gfMiniBossConfig", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBossConfig = exports('default', (_dec = ccclass('gfMiniBossConfig'), _dec(_class = (_class2 = class gfMiniBossConfig extends gfBossConfig {
        constructor() {
          super();
          this.BOSS_BACKGROUND_CONFIG = void 0;
          this.NOTIFY_TYPE = void 0;
          this.ASSETS_NAME = void 0;
          gfMiniBossConfig.instance = this;
          this.BOSS_CONFIG = {
            MINI_BOSS: this.bossKind
          };
          this.PRIORITY_FISH = [this.bossKind];
          this.NOTIFY_TYPE = {
            MESSAGE_KILL_MINIBOSS: 5,
            MESSAGE_DROP_ITEM_MINIBOSS: 6
          };
          this.NOTIFY_CONFIG = {
            [this.NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS]: {
              userName: 0,
              fishKind: 1,
              goldReward: 3,
              itemID: 2,
              multiple: 4
            },
            [this.NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS]: {
              userName: 0,
              fishKind: 1,
              itemID: 2,
              goldReward: 3,
              multiple: 4
            }
          };
          this.ASSETS_NAME = {
            ITEM: 'MiniBossItem'
          };
        }

        mergeToBaseConfig() {
          super.mergeToBaseConfig(this);
        }

      }, _class2.instance = null, _class2)) || _class));
      gfMiniBossConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossEffectLayer.ts", ['cc', './gfBossEffectLayer.ts', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, _decorator, gfBossEffectLayer, registerEvent, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossEffectLayer = module.gfBossEffectLayer;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9d986kT6ZFESbOsa+t2r14L", "gfMiniBossEffectLayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBossEffectLayer = exports('gfMiniBossEffectLayer', (_dec = ccclass('gfMiniBossEffectLayer'), _dec(_class = class gfMiniBossEffectLayer extends gfBossEffectLayer {
        constructor(...args) {
          super(...args);
          this.offsetY = 50;
        }

        initEvents() {
          super.initEvents();
          registerEvent(gfBaseEvents.BOSS.DROP_ITEM, this.onDropItem, this);
        }

        onDropItem(data) {
          /**
          //@todo: cheat code: get miniBoss, get player
          */
          // get in fishManager
          // const miniBoss = gfBossController.instance?.getBossByKind(gfBaseConfig.instance.BOSS_CONFIG['MINI_BOSS']);
          // const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          // if(!miniBoss || !miniBoss.node.active || !player) return;
          // const item = gfPoolManager.instance.getExtraAsset(gfMiniBossConfig.instance.ASSETS_NAME.ITEM, data.ItemLevel) as gfBossItem;
          // item.node.setParent(this.topEffectLayer);
          // const startPos = getPostionInOtherNode(this.topEffectLayer, miniBoss.node);
          // const endPos = getPostionInOtherNode(this.topEffectLayer, player.node);
          // const sign = data.DeskStation > 1 && !player.isMe ? -1 : 1;
          // endPos.y += this.offsetY * sign;
          // item.playAnimation({
          //     startPos,
          //     endPos
          // });
          // this.listItem.push(item);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cc1d490hpFFcr1D7lCA05Ud", "gfMiniBossEvent", undefined);

      const gfMiniBossEvents = exports('default', {
        EFFECT_LAYER: {
          MINIBOSS_SMASH: "MINIBOSS_SMASH",
          MINIBOSS_DROP_ITEM: "MINIBOSS_DROP_ITEM",
          MINIBOSS_CRITICAL: "MINIBOSS_CRITICAL",
          MINIBOSS_DROP_GEM: "MINIBOSS_DROP_GEM",
          MINIBOSS_DROP_FIN: "MINIBOSS_DROP_FIN"
        },
        SOUND: {
          MINIBOSS_DEAD: "MINIBOSS_DEAD",
          MINIBOSS_HIT: "MINIBOSS_HIT"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossExtraSound.ts", ['cc', './gfBossExtraSound.ts', './gfMiniBossEvent.ts', './gfUtilities.ts', './gfDataStore.ts', './gfMiniBossConfig.ts'], function (exports) {
  var cclegacy, _decorator, gfBossExtraSound, gfMiniBossEvents, registerEvent, gfDataStore, gfMiniBossConfig;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossExtraSound = module.gfBossExtraSound;
    }, function (module) {
      gfMiniBossEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfMiniBossConfig = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ce449KhSdxG1b1XJ6ZSB/44", "gfMiniBossExtraSound", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBossSoundController = exports('gfMiniBossSoundController', (_dec = ccclass('gfMiniBossSoundController'), _dec(_class = class gfMiniBossSoundController extends gfBossExtraSound {
        initExtraEvents() {
          registerEvent(gfMiniBossEvents.EFFECT_LAYER.MINIBOSS_SMASH, this.playSfxMiniBossSmash, this);
          registerEvent(gfMiniBossEvents.SOUND.MINIBOSS_DEAD, this.playSfxMiniBossDead, this);
          registerEvent(gfMiniBossEvents.SOUND.MINIBOSS_HIT, this.playSfxMiniBossHit, this);
        }

        playBossBackGroundMusic(data, init = false) {
          if (gfDataStore.instance.getCurBGMusic() === data && !init && this.getCurrentMusicIsPlaying()) return;

          switch (data) {
            case gfMiniBossConfig.instance.BOSS_BACKGROUND_CONFIG:
              this.playFishBGM("bgmMiniboss", true);
              break;
          }
        }

        playSfxMiniBossDead() {
          this.playFishSFX("sfxMiniboss_dead");
        }

        playSfxMiniBossSmash() {
          this.playFishSFX("sfxMiniboss_stomp");
        }

        playSfxMiniBossHit() {
          const LENGTH_SFX_MINI_BOSS_DAME = 3;
          const rand = Math.floor(Math.random() * LENGTH_SFX_MINI_BOSS_DAME);
          this.playFishSFX(`sfxMiniboss_takedame${rand}`);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBossItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, Label, _decorator, Color, gfBossItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Label = module.Label;
      _decorator = module._decorator;
      Color = module.Color;
    }, function (module) {
      gfBossItem = module.gfBossItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "45529S5DqRDIIX+19TKyub1", "gfMiniBossItem", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfMiniBossItem = exports('gfMiniBossItem', (_dec = ccclass('gfMiniBossItem'), _dec2 = property(Sprite), _dec3 = property(Label), _dec(_class = (_class2 = class gfMiniBossItem extends gfBossItem {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "itemSpite", _descriptor, this);

          _initializerDefineProperty(this, "lblDisplay", _descriptor2, this);
        }

        initAssets(config) {
          if (this.itemSpite && config.asset) {
            this.itemSpite.spriteFrame = config.asset;
            const color = config.kind === 1 ? new Color(219, 119, 10, 255) : new Color(10, 177, 219, 255);
            this.itemSpite.color = color;
          }

          if (this.lblDisplay) {
            this.lblDisplay.string = 'item ' + config.kind;
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemSpite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lblDisplay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossNetworkController.ts", ['cc', './gfBossNetworkController.ts'], function (exports) {
  var cclegacy, warn, _decorator, gfBossNetworkController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      _decorator = module._decorator;
    }, function (module) {
      gfBossNetworkController = module.gfBossNetworkController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "071914ZuSJF4YR/U5PCA6sR", "gfMiniBossNetworkController", undefined);

      const {
        ccclass
      } = _decorator;
      let gfMiniBossNetworkController = exports('gfMiniBossNetworkController', (_dec = ccclass('gfMiniBossNetworkController'), _dec(_class = class gfMiniBossNetworkController extends gfBossNetworkController {
        initEvents() {
          warn('Mini Boss init Network Events');
        }

        removeEvents() {
          warn('Mini Boss remove Network Events');
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfModuleBig.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        (function (GLOBAL) {
          var Big,
              DP = 20,
              RM = 1,
              MAX_DP = 1E6,
              MAX_POWER = 1E6,
              NE = -7,
              PE = 21,
              STRICT = false,
              NAME = '[big.js] ',
              INVALID = NAME + 'Invalid ',
              INVALID_DP = INVALID + 'decimal places',
              INVALID_RM = INVALID + 'rounding mode',
              DIV_BY_ZERO = NAME + 'Division by zero',
              P = {},
              UNDEFINED = void 0,
              NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

          function _Big_() {
            function Big(n) {
              var x = this;
              if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

              if (n instanceof Big) {
                x.s = n.s;
                x.e = n.e;
                x.c = n.c.slice();
              } else {
                if (typeof n !== 'string') {
                  if (Big.strict === true && typeof n !== 'bigint') {
                    throw TypeError(INVALID + 'value');
                  }

                  n = n === 0 && 1 / n < 0 ? '-0' : String(n);
                }

                parse(x, n);
              }

              x.constructor = Big;
            }

            Big.prototype = P;
            Big.DP = DP;
            Big.RM = RM;
            Big.NE = NE;
            Big.PE = PE;
            Big.strict = STRICT;
            Big.roundDown = 0;
            Big.roundHalfUp = 1;
            Big.roundHalfEven = 2;
            Big.roundUp = 3;
            return Big;
          }

          function parse(x, n) {
            var e, i, nl;

            if (!NUMERIC.test(n)) {
              throw Error(INVALID + 'number');
            }

            x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;
            if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

            if ((i = n.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +n.slice(i + 1);
              n = n.substring(0, i);
            } else if (e < 0) {
              e = n.length;
            }

            nl = n.length;

            for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

            if (i == nl) {
              x.c = [x.e = 0];
            } else {
              for (; nl > 0 && n.charAt(--nl) == '0';);

              x.e = e - i - 1;
              x.c = [];

              for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
            }

            return x;
          }

          function round(x, sd, rm, more) {
            var xc = x.c;
            if (rm === UNDEFINED) rm = x.constructor.RM;

            if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
              throw Error(INVALID_RM);
            }

            if (sd < 1) {
              more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
              xc.length = 1;

              if (more) {
                x.e = x.e - sd + 1;
                xc[0] = 1;
              } else {
                xc[0] = x.e = 0;
              }
            } else if (sd < xc.length) {
              more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
              xc.length = sd;

              if (more) {
                for (; ++xc[--sd] > 9;) {
                  xc[sd] = 0;

                  if (sd === 0) {
                    ++x.e;
                    xc.unshift(1);
                    break;
                  }
                }
              }

              for (sd = xc.length; !xc[--sd];) xc.pop();
            }

            return x;
          }

          function stringify(x, doExponential, isNonzero) {
            var e = x.e,
                s = x.c.join(''),
                n = s.length;

            if (doExponential) {
              s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;
            } else if (e < 0) {
              for (; ++e;) s = '0' + s;

              s = '0.' + s;
            } else if (e > 0) {
              if (++e > n) {
                for (e -= n; e--;) s += '0';
              } else if (e < n) {
                s = s.slice(0, e) + '.' + s.slice(e);
              }
            } else if (n > 1) {
              s = s.charAt(0) + '.' + s.slice(1);
            }

            return x.s < 0 && isNonzero ? '-' + s : s;
          }

          P.abs = function () {
            var x = new this.constructor(this);
            x.s = 1;
            return x;
          };

          P.cmp = function (y) {
            var isneg,
                x = this,
                xc = x.c,
                yc = (y = new x.constructor(y)).c,
                i = x.s,
                j = y.s,
                k = x.e,
                l = y.e;
            if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
            if (i != j) return i;
            isneg = i < 0;
            if (k != l) return k > l ^ isneg ? 1 : -1;
            j = (k = xc.length) < (l = yc.length) ? k : l;

            for (i = -1; ++i < j;) {
              if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
            }

            return k == l ? 0 : k > l ^ isneg ? 1 : -1;
          };

          P.div = function (y) {
            var x = this,
                Big = x.constructor,
                a = x.c,
                b = (y = new Big(y)).c,
                k = x.s == y.s ? 1 : -1,
                dp = Big.DP;

            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }

            if (!b[0]) {
              throw Error(DIV_BY_ZERO);
            }

            if (!a[0]) {
              y.s = k;
              y.c = [y.e = 0];
              return y;
            }

            var bl,
                bt,
                n,
                cmp,
                ri,
                bz = b.slice(),
                ai = bl = b.length,
                al = a.length,
                r = a.slice(0, bl),
                rl = r.length,
                q = y,
                qc = q.c = [],
                qi = 0,
                p = dp + (q.e = x.e - y.e) + 1;
            q.s = k;
            k = p < 0 ? 0 : p;
            bz.unshift(0);

            for (; rl++ < bl;) r.push(0);

            do {
              for (n = 0; n < 10; n++) {
                if (bl != (rl = r.length)) {
                  cmp = bl > rl ? 1 : -1;
                } else {
                  for (ri = -1, cmp = 0; ++ri < bl;) {
                    if (b[ri] != r[ri]) {
                      cmp = b[ri] > r[ri] ? 1 : -1;
                      break;
                    }
                  }
                }

                if (cmp < 0) {
                  for (bt = rl == bl ? b : bz; rl;) {
                    if (r[--rl] < bt[rl]) {
                      ri = rl;

                      for (; ri && !r[--ri];) r[ri] = 9;

                      --r[ri];
                      r[rl] += 10;
                    }

                    r[rl] -= bt[rl];
                  }

                  for (; !r[0];) r.shift();
                } else {
                  break;
                }
              }

              qc[qi++] = cmp ? n : ++n;
              if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];
            } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

            if (!qc[0] && qi != 1) {
              qc.shift();
              q.e--;
              p--;
            }

            if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);
            return q;
          };

          P.eq = function (y) {
            return this.cmp(y) === 0;
          };

          P.gt = function (y) {
            return this.cmp(y) > 0;
          };

          P.gte = function (y) {
            return this.cmp(y) > -1;
          };

          P.lt = function (y) {
            return this.cmp(y) < 0;
          };

          P.lte = function (y) {
            return this.cmp(y) < 1;
          };

          P.minus = P.sub = function (y) {
            var i,
                j,
                t,
                xlty,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (a != b) {
              y.s = -b;
              return x.plus(y);
            }

            var xc = x.c.slice(),
                xe = x.e,
                yc = y.c,
                ye = y.e;

            if (!xc[0] || !yc[0]) {
              if (yc[0]) {
                y.s = -b;
              } else if (xc[0]) {
                y = new Big(x);
              } else {
                y.s = 1;
              }

              return y;
            }

            if (a = xe - ye) {
              if (xlty = a < 0) {
                a = -a;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }

              t.reverse();

              for (b = a; b--;) t.push(0);

              t.reverse();
            } else {
              j = ((xlty = xc.length < yc.length) ? xc : yc).length;

              for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                  xlty = xc[b] < yc[b];
                  break;
                }
              }
            }

            if (xlty) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
            }

            if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

            for (b = i; j > a;) {
              if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i];) xc[i] = 9;

                --xc[i];
                xc[j] += 10;
              }

              xc[j] -= yc[j];
            }

            for (; xc[--b] === 0;) xc.pop();

            for (; xc[0] === 0;) {
              xc.shift();
              --ye;
            }

            if (!xc[0]) {
              y.s = 1;
              xc = [ye = 0];
            }

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.mod = function (y) {
            var ygtx,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (!y.c[0]) {
              throw Error(DIV_BY_ZERO);
            }

            x.s = y.s = 1;
            ygtx = y.cmp(x) == 1;
            x.s = a;
            y.s = b;
            if (ygtx) return new Big(x);
            a = Big.DP;
            b = Big.RM;
            Big.DP = Big.RM = 0;
            x = x.div(y);
            Big.DP = a;
            Big.RM = b;
            return this.minus(x.times(y));
          };

          P.neg = function () {
            var x = new this.constructor(this);
            x.s = -x.s;
            return x;
          };

          P.plus = P.add = function (y) {
            var e,
                k,
                t,
                x = this,
                Big = x.constructor;
            y = new Big(y);

            if (x.s != y.s) {
              y.s = -y.s;
              return x.minus(y);
            }

            var xe = x.e,
                xc = x.c,
                ye = y.e,
                yc = y.c;

            if (!xc[0] || !yc[0]) {
              if (!yc[0]) {
                if (xc[0]) {
                  y = new Big(x);
                } else {
                  y.s = x.s;
                }
              }

              return y;
            }

            xc = xc.slice();

            if (e = xe - ye) {
              if (e > 0) {
                ye = xe;
                t = yc;
              } else {
                e = -e;
                t = xc;
              }

              t.reverse();

              for (; e--;) t.push(0);

              t.reverse();
            }

            if (xc.length - yc.length < 0) {
              t = yc;
              yc = xc;
              xc = t;
            }

            e = yc.length;

            for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

            if (k) {
              xc.unshift(k);
              ++ye;
            }

            for (e = xc.length; xc[--e] === 0;) xc.pop();

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.pow = function (n) {
            var x = this,
                one = new x.constructor('1'),
                y = one,
                isneg = n < 0;

            if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
              throw Error(INVALID + 'exponent');
            }

            if (isneg) n = -n;

            for (;;) {
              if (n & 1) y = y.times(x);
              n >>= 1;
              if (!n) break;
              x = x.times(x);
            }

            return isneg ? one.div(y) : y;
          };

          P.prec = function (sd, rm) {
            if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
              throw Error(INVALID + 'precision');
            }

            return round(new this.constructor(this), sd, rm);
          };

          P.round = function (dp, rm) {
            if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }
            return round(new this.constructor(this), dp + this.e + 1, rm);
          };

          P.sqrt = function () {
            var r,
                c,
                t,
                x = this,
                Big = x.constructor,
                s = x.s,
                e = x.e,
                half = new Big('0.5');
            if (!x.c[0]) return new Big(x);

            if (s < 0) {
              throw Error(NAME + 'No square root');
            }

            s = Math.sqrt(x + '');

            if (s === 0 || s === 1 / 0) {
              c = x.c.join('');
              if (!(c.length + e & 1)) c += '0';
              s = Math.sqrt(c);
              e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
              r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
            } else {
              r = new Big(s + '');
            }

            e = r.e + (Big.DP += 4);

            do {
              t = r;
              r = half.times(t.plus(x.div(t)));
            } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

            return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
          };

          P.times = P.mul = function (y) {
            var c,
                x = this,
                Big = x.constructor,
                xc = x.c,
                yc = (y = new Big(y)).c,
                a = xc.length,
                b = yc.length,
                i = x.e,
                j = y.e;
            y.s = x.s == y.s ? 1 : -1;

            if (!xc[0] || !yc[0]) {
              y.c = [y.e = 0];
              return y;
            }

            y.e = i + j;

            if (a < b) {
              c = xc;
              xc = yc;
              yc = c;
              j = a;
              a = b;
              b = j;
            }

            for (c = new Array(j = a + b); j--;) c[j] = 0;

            for (i = b; i--;) {
              b = 0;

              for (j = a + i; j > i;) {
                b = c[j] + yc[i] * xc[j - i - 1] + b;
                c[j--] = b % 10;
                b = b / 10 | 0;
              }

              c[j] = b;
            }

            if (b) ++y.e;else c.shift();

            for (i = c.length; !c[--i];) c.pop();

            y.c = c;
            return y;
          };

          P.toExponential = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), ++dp, rm);

              for (; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, true, !!n);
          };

          P.toFixed = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), dp + x.e + 1, rm);

              for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, false, !!n);
          };

          P.toJSON = P.toString = function () {
            var x = this,
                Big = x.constructor;
            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
          };

          P.toNumber = function () {
            var n = Number(stringify(this, true, true));

            if (this.constructor.strict === true && !this.eq(n.toString())) {
              throw Error(NAME + 'Imprecise conversion');
            }

            return n;
          };

          P.toPrecision = function (sd, rm) {
            var x = this,
                Big = x.constructor,
                n = x.c[0];

            if (sd !== UNDEFINED) {
              if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                throw Error(INVALID + 'precision');
              }

              x = round(new Big(x), sd, rm);

              for (; x.c.length < sd;) x.c.push(0);
            }

            return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
          };

          P.valueOf = function () {
            var x = this,
                Big = x.constructor;

            if (Big.strict === true) {
              throw Error(NAME + 'valueOf disallowed');
            }

            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
          };

          Big = _Big_();
          Big['default'] = Big.Big = Big;

          if (typeof define === 'function' && define.amd) {
            define(function () {
              return Big;
            });
          } else if (typeof module !== 'undefined' && module.exports) {
            module.exports = Big;
          } else {
            GLOBAL.Big = Big;
          }
        })(this); // #endregion ORIGINAL CODE


        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/gfMoveByFourPoints.ts", ['cc', './gfMoveByThreePoints.ts'], function (exports) {
  var cclegacy, v2, gfMoveByThreePoints;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfMoveByThreePoints = module.gfMoveByThreePoints;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e768cEfwOdKOZAvEIeoBwfM", "gfMoveByFourPoints", undefined);

      class gfMoveByFourPoints extends gfMoveByThreePoints {
        bezier(t, a, b, c, d = 0) {
          let t2 = t * t;
          let t3 = t2 * t;
          return a + (-a * 3 + t * (3 * a - a * t)) * t + (3 * b + t * (-6 * b + b * 3 * t)) * t + (c * 3 - c * 3 * t) * t2 + d * t3;
        }

        getPositionInPath(t) {
          const x = this.bezier(t, this._configPoints[0].x, this._configPoints[1].x, this._configPoints[2].x, this._configPoints[3].x);
          const y = this.bezier(t, this._configPoints[0].y, this._configPoints[1].y, this._configPoints[2].y, this._configPoints[3].y);
          return v2(x, y);
        }

      }

      exports('gfMoveByFourPoints', gfMoveByFourPoints);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMoveByPoints.ts", ['cc', './gfUtilities.ts', './utils.ts'], function (exports) {
  var cclegacy, v2, tween, roundAngle, convertToRelativePoint, isPointInScreen, setOpacity;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      tween = module.tween;
    }, function (module) {
      roundAngle = module.roundAngle;
      convertToRelativePoint = module.convertToRelativePoint;
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f26df9odb9Cp6cc1wuoBMqh", "gfMoveByPoints", undefined);

      class gfMoveByPoints {
        constructor(data) {
          this.durations = [];
          this.angles = [];
          this.currentTime = 0;
          this.realDuration = 0;
          this._configPoints = void 0;
          this._timeSpent = 0;
          this.index = 0;
          this.fracIndex = 0.0;
          this.skipRotate = false;
          this.skipFlipY = false;
          this._isOutScreen = false;
          this.VisibleScreenOffset = 200;
          this.totalPoints = 100;
          this.fragment = 1.0 / this.totalPoints;
          this.visibleData = {
            visibleWidth: 1,
            maxWidth: 2,
            offset: 0
          };
          this.inScreenTime = {
            start: -1,
            end: -1
          };
          this.visibleTime = {
            start: -1,
            end: -1
          };
          this.MinTimeRange = 0.1;
          const {
            points,
            timeSpent,
            isResume,
            skipRotate,
            skipFlipY,
            visibleData
          } = data;
          this._configPoints = points;
          this._timeSpent = isResume ? timeSpent : 0;
          this.skipRotate = skipRotate;
          this.skipFlipY = skipFlipY;
          this.visibleData = visibleData;

          if (!this.visibleData.visibleWidth) {
            this.visibleData.visibleWidth = visibleData.maxWidth + visibleData.offset;
          }
        }

        start(target) {}

        update(target, ratio) {}

        getAngle() {
          return 0;
        }

        calculatePathVisible() {}

        updateAngle(target) {
          const angle = roundAngle(this.getAngle());
          let {
            x,
            y,
            z
          } = target.scale;
          x = Math.abs(x);
          y = Math.abs(y);

          if (this.skipRotate) {
            if (angle > 90 || angle < -90) {
              x = -x;
            }
          } else {
            if (!this.skipFlipY) {
              if (angle > 90 || angle < -90) {
                y = -y;
              }
            }

            if (target.angle != angle) {
              target.angle = angle;
            }
          }

          if (target.scale.x != x || target.scale.y != y) {
            target.setScale(x, y, z);
          }
        }

        checkPointInScreen(position, pointOffset, angle, screenOffset = 0) {
          if (this.skipRotate) {
            angle = angle > 90 || angle < -90 ? 180 : 0;
          }

          const point = convertToRelativePoint(position, v2(pointOffset, 0), angle);
          return isPointInScreen(point, screenOffset);
        }

        updateOpacity(target) {
          const visible = this.currentTime > this.visibleTime.start && this.currentTime < this.visibleTime.end;
          setOpacity(target, visible ? 255 : 0);
        }

        isOutScreen() {
          return this.currentTime <= this.inScreenTime.start || this.currentTime >= this.inScreenTime.end;
        }

        getAction() {
          if (this.realDuration == 0) {
            return tween().delay(0);
          }

          return tween().to(this.realDuration, null, {
            onStart: target => {
              this.start(target);
            },
            onUpdate: (target, ratio) => {
              this.update(target, ratio);
            }
          });
        }

      }

      exports('gfMoveByPoints', gfMoveByPoints);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMoveByThreePoints.ts", ['cc', './gfUtilities.ts', './gfMoveByPoints.ts'], function (exports) {
  var cclegacy, log, v2, v2Distance, getRotation, roundAngle, gfMoveByPoints;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      v2 = module.v2;
    }, function (module) {
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
      roundAngle = module.roundAngle;
    }, function (module) {
      gfMoveByPoints = module.gfMoveByPoints;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e57323vYdNGf6/kEdRSt6UO", "gfMoveByThreePoints", undefined);

      class gfMoveByThreePoints extends gfMoveByPoints {
        constructor(data) {
          super(data);
          this.points = [];
          const {
            speed,
            points,
            timeSpent,
            isResume
          } = data;
          this.durations[0] = 0;
          this.points.push(points[0]);

          for (let i = 1; i <= this.totalPoints; i += 1) {
            this.points.push(this.getPositionInPath(i * this.fragment));
            const distance = v2Distance(this.points[i - 1], this.points[i]);
            this.durations[i] = this.durations[i - 1] + distance / speed;
            this.angles[i - 1] = getRotation(this.points[i], this.points[i - 1]);
          }

          this.angles[this.totalPoints] = this.angles[this.totalPoints - 1];
          const speedScale = isResume ? 1 : this.durations[this.totalPoints] / (this.durations[this.totalPoints] - timeSpent);
          this.realDuration = Math.max(0, this.durations[this.totalPoints] - timeSpent);

          if (speedScale > 3) {
            log(`skip create fish: speedScale-${speedScale}`, speed, points, timeSpent, isResume);
            this.realDuration = 0;
          } else {
            this.calculatePathVisible();

            if (data.target) {
              this.update(data.target, 0);
            }
          }
        }

        calculatePathVisible() {
          this.calculateStartTime();
          this.calculateEndTime();
        }

        calculateStartTime() {
          let inScreenOffsetX = this.visibleData.maxWidth / 2 + this.visibleData.offset;
          let visibleOffsetX = this.visibleData.visibleWidth / 2;
          this.inScreenTime.start = -1;
          this.visibleTime.start = -1;

          for (let i = 0; i <= this.totalPoints; ++i) {
            const position = this.getPositionInPath(i / this.totalPoints);

            if (this.inScreenTime.start < 0) {
              if (this.checkPointInScreen(position, inScreenOffsetX, this.angles[i])) {
                this.inScreenTime.start = this.durations[i];
              }
            }

            if (this.visibleTime.start < 0) {
              if (this.checkPointInScreen(position, visibleOffsetX, this.angles[i], this.VisibleScreenOffset)) {
                this.visibleTime.start = this.durations[Math.max(0, i - 1)];
              }
            }

            if (this.inScreenTime.start >= 0 && this.visibleTime.start >= 0) {
              break;
            }
          }
        }

        calculateEndTime() {
          let inScreenOffsetX = -this.visibleData.maxWidth / 2 + this.visibleData.offset;
          let visibleOffsetX = -this.visibleData.visibleWidth / 2;
          this.inScreenTime.end = -1;
          this.visibleTime.end = -1;

          for (let i = this.totalPoints; i >= 0; --i) {
            const position = this.getPositionInPath(i / this.totalPoints);

            if (this.inScreenTime.end < 0) {
              if (this.checkPointInScreen(position, inScreenOffsetX, this.angles[i])) {
                this.inScreenTime.end = this.durations[i];
              }
            }

            if (this.visibleTime.end < 0) {
              if (this.checkPointInScreen(position, visibleOffsetX, this.angles[i], this.VisibleScreenOffset)) {
                this.visibleTime.end = this.durations[Math.min(this.totalPoints, i + 1)];
              }
            }

            if (this.inScreenTime.end >= 0 && this.visibleTime.end >= 0) {
              break;
            }
          }
        }

        map(time) {
          while (this.index < this.totalPoints && this.durations[this.index + 1] < time) {
            ++this.index;
          }

          if (this.index == this.totalPoints) {
            return 1.0;
          }

          this.fracIndex = (time - this.durations[this.index]) / (this.durations[this.index + 1] - this.durations[this.index]);
          return (this.index + this.fracIndex) / this.totalPoints;
        }

        bezier(t, a, b, c) {
          return (1 - t) * (1 - t) * a + 2 * (1 - t) * t * b + t * t * c;
        }

        getPositionInPath(t) {
          const x = this.bezier(t, this._configPoints[0].x, this._configPoints[1].x, this._configPoints[2].x);
          const y = this.bezier(t, this._configPoints[0].y, this._configPoints[1].y, this._configPoints[2].y);
          return v2(x, y);
        }

        getAngle() {
          return this.angles[this.index] + this.fracIndex * roundAngle(this.angles[this.index + 1] - this.angles[this.index]);
        }

        update(target, dt) {
          this.currentTime = dt * this.realDuration + this._timeSpent;

          if (target) {
            const t = this.map(this.currentTime);
            const {
              x,
              y
            } = this.getPositionInPath(t);
            target.setPosition(x, y, target.position.z);
            this.updateAngle(target);
            this.updateOpacity(target);
          }
        }

      }

      exports('gfMoveByThreePoints', gfMoveByThreePoints);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMoveByTwoPoints.ts", ['cc', './gfUtilities.ts', './gfMoveByPoints.ts'], function (exports) {
  var cclegacy, v2, v2Distance, getRotation, gfMoveByPoints;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
    }, function (module) {
      gfMoveByPoints = module.gfMoveByPoints;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85aa1IiQrpB/INe2hffpqpW", "gfMoveByTwoPoints", undefined);

      class gfMoveByTwoPoints extends gfMoveByPoints {
        constructor(data) {
          super(data);
          this.angle = 0;
          this.pathDuration = 0;
          this.inScreen = [];
          this.visible = [];
          const {
            speed,
            points
          } = data;
          this.pathDuration = v2Distance(points[0], points[1]) / speed;
          this.realDuration = Math.max(this.pathDuration - this._timeSpent, 0);
          this.angle = getRotation(points[1], points[0]);
          this.calculatePathVisible();

          if (data.target) {
            this.updateAngle(data.target);
          }
        }

        getAngle() {
          return this.angle;
        }

        getPositionInPath(t) {
          const x = this._configPoints[0].x + t * (this._configPoints[1].x - this._configPoints[0].x);
          const y = this._configPoints[0].y + t * (this._configPoints[1].y - this._configPoints[0].y);
          return v2(x, y);
        }

        start(target) {
          this.updateAngle(target);
        }

        calculatePathVisible() {
          this.calculateStartTime();
          this.calculateEndTime();
        }

        calculateStartTime() {
          let inScreenOffsetX = this.visibleData.maxWidth / 2 + this.visibleData.offset;
          let visibleOffsetX = this.visibleData.visibleWidth / 2;
          this.inScreenTime.start = -1;
          this.visibleTime.start = -1;

          for (let t = 0; t <= 1; t += this.fragment) {
            const position = this.getPositionInPath(t);

            if (this.inScreenTime.start < 0) {
              if (this.checkPointInScreen(position, inScreenOffsetX, this.angle)) {
                this.inScreenTime.start = t * this.pathDuration;
              }
            }

            if (this.visibleTime.start < 0) {
              if (this.checkPointInScreen(position, visibleOffsetX, this.angle, this.VisibleScreenOffset)) {
                this.visibleTime.start = Math.max(0, t - this.fragment) * this.pathDuration;
              }
            }

            if (this.inScreenTime.start >= 0 && this.visibleTime.start >= 0) {
              break;
            }
          }
        }

        calculateEndTime() {
          let inScreenOffsetX = -this.visibleData.maxWidth / 2 + this.visibleData.offset;
          let visibleOffsetX = -this.visibleData.visibleWidth / 2;
          this.inScreenTime.end = -1;
          this.visibleTime.end = -1;

          for (let t = 1; t >= 0; t -= this.fragment) {
            const position = this.getPositionInPath(t);

            if (this.inScreenTime.end < 0) {
              if (this.checkPointInScreen(position, inScreenOffsetX, this.angle)) {
                this.inScreenTime.end = t * this.pathDuration;
              }
            }

            if (this.visibleTime.end < 0) {
              if (this.checkPointInScreen(position, visibleOffsetX, this.angle, this.VisibleScreenOffset)) {
                this.visibleTime.end = Math.min(1, t + this.fragment) * this.pathDuration;
              }
            }

            if (this.inScreenTime.end >= 0 && this.visibleTime.end >= 0) {
              break;
            }
          }
        }

        update(target, dt) {
          this.currentTime = dt * this.realDuration + this._timeSpent;
          const t = this.currentTime / this.pathDuration;

          if (target) {
            const {
              x,
              y
            } = this.getPositionInPath(t);
            target.setPosition(x, y, target.position.z);
            this.updateOpacity(target);
          }
        }

      }

      exports('gfMoveByTwoPoints', gfMoveByTwoPoints);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNativeSoundPlayer.ts", ['cc', './NativeSoundPlayer.ts'], function (exports) {
  var cclegacy, warn, AudioSource, log, _decorator, NativeSoundPlayer;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      AudioSource = module.AudioSource;
      log = module.log;
      _decorator = module._decorator;
    }, function (module) {
      NativeSoundPlayer = module.NativeSoundPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c480cwSwrFBiL1YqHGxbJPK", "gfNativeSoundPlayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfNativeSoundPlayer = exports('gfNativeSoundPlayer', (_dec = ccclass('gfNativeSoundPlayer'), _dec(_class = class gfNativeSoundPlayer extends NativeSoundPlayer {
        removeExtraSound(listMusic, listSfx) {
          listMusic.forEach(soundObj => {
            const musicObj = this.musicMap[soundObj.soundId];

            if (musicObj) {
              this.musicMap[soundObj.soundId] = null;
              delete this.musicMap[soundObj.soundId];
            }
          });

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          listSfx.forEach(soundObj => {
            const sfxObj = this.sfxMap[soundObj.soundId];

            if (sfxObj) {
              this.sfxMap[soundObj.soundId] = null;
              delete this.sfxMap[soundObj.soundId];
            }
          });
        }

        playSfxOneShot(id, volume, loop = false) {
          if (!this.sfxMap.hasOwnProperty(id)) {
            warn(`SOUND, playSfxOneShot: do not have sfx: ${id}`);
            return null;
          }

          const soundObj = this.sfxMap[id];
          let audioSource;

          if (!soundObj.ignoreCheckMaxChannel) {
            audioSource = this._gameNode.getComponent(AudioSource);

            if (!audioSource) {
              audioSource = this._gameNode.addComponent(AudioSource);
            }

            audioSource.playOneShot(soundObj.audioFile, volume);
          } else {
            audioSource = this._getSfxOneShotAudioSource(soundObj);
            if (typeof volume === "number") audioSource.volume = volume;
            audioSource.play();
            audioSource.loop = loop;
          }

          log(`SOUND, playSfxOneShot: ${id}`);
          return audioSource;
        }

        playMusic(id, loop, volume) {
          this.resetMusicCurrentTime();
          return super.playMusic(id, loop, volume);
        }

        resetMusicCurrentTime() {
          const currentMusic = this.getCurrentMusic();

          if (currentMusic) {
            currentMusic.currentTime = 0;
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Animation, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "46da2apzGJKgZIuAjhoYrDv", "gfNetFX", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfNetFX = exports('gfNetFX', (_dec = ccclass('gfNetFX'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class gfNetFX extends gfNode {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spine", _descriptor, this);

          this._animationName = 'player';
          this.zIndex = void 0;
        }

        start() {
          this.playAnimCatchFish();
        }

        initAssets(config) {
          this.playAnimCatchFish(config);
        }

        playAnimCatchFish(config = null) {
          if (!this.spine) {
            this.playAnimationClip();
          } else {
            if (config == null) {
              this.spine.setAnimation(0, this._animationName, false);
            } else {
              this.playSpineAnim(config);
            }
          }
        }

        playSpineAnim(config) {
          this.spine.skeletonData = config.asset;
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.setCompleteListener(() => {
            this.returnPool();
          });
        }

        playAnimationClip() {
          // returnPool() will be triggered on animation clip
          const animation = this.getComponent(Animation);
          animation.stop();
          animation.play(animation.defaultClip.name);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07553cK4r1DWor7xIE5zQx7", "gfNetworkEvent", undefined); //Contain only network event for NetworkParser and Network Socket


      const gfNetworkEvent = exports('default', {
        EVENT_NETWORK_RECONNECTED: 'network-reconnected',
        EVENT_NETWORK_CONNECTED: 'network-connected',
        EVENT_NETWORK_POOR: 'network-poor',
        EVENT_NETWORK_DIE: 'network-die',
        EVENT_AUTHEN_FAIL: 'authen-fail',
        EVENT_LOGIN_IN_OTHER_DEVICE: 'login-in-other-device',
        EVENT_NO_ACTION_LONG_TIME: 'no-action-long-time',
        EVENT_SERVER_MAINTENANCE: 'server-maintenance',
        EVENT_NEW_MESSAGE: 'new-message',
        EVENT_NETWORK_PINGPONG: 'ping-pong',
        LIST_EVENT_QUEUE: [2014]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkGameEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0a92F3NhZP05vMk5t3JiSN", "gfNetworkGameEvent", undefined);

      const gfNetworkGameEvent = exports('default', {
        LOBBY_LOGIN: 1001,
        LOBBY_MESSAGE: 1002,
        LOBBY_UPDATE_MY_GOLD: 1003,
        LOBBY_KICK: 1004,
        LOBBY_UPDATE_VIP_LEVEL: 1005,
        LOBBY_GET_ROOM_INFO: 1006,
        LOBBY_JACKPOT: 1007,
        LOBBY_NOTIFY: 1008,
        LOBBY_AUTO_JOIN_GAME: 1009,
        LOBBY_JOIN_ROOM_BY_INVITE: 1998,
        LOBBY_PING_PONG: 1999,
        LOBBY_ON_SHOW: 1005,
        LOBBY_UPDATE_EVENT_STATUS: 1010,
        LOBBY_IDLE_MESSAGE: 1011,
        LOBBY_EVENT_UPDATE_INFO: 1071,
        LOBBY_EVENT_SESSION_CHANGED: 1070,
        LOBBY_SEND_LOGIN_INFO: 1031,
        GAME_LOGIN: 2001,
        GAME_LISTUSER_BOARD: 2002,
        GAME_PLAYER_ENTER_BOARD: 2003,
        GAME_MESSAGE: 2029,
        GAME_USER_FIRE: 2005,
        GAME_CREATE_FISH: 2006,
        GAME_CATCH_FISH: 2007,
        GAME_USER_EXIT: 2008,
        GAME_CREATE_FISH_GROUP: 2009,
        GAME_FIRE_SKILL: 2011,
        GAME_UPDATE_SKILL: 2012,
        GAME_UPDATE_CLEAR_FISH: 2013,
        GAME_CATCH_FISH_BY_ONE_SHOT_GUN_SKILL: 2014,
        GAME_CREATE_FISH_BOSS: 2015,
        GAME_CREATE_FISH_CROW: 2016,
        GAME_CATCH_RED_FISH: 2017,
        GAME_UPDATE_HP_FISH_BOSS: 2018,
        GAME_KICK: 2019,
        GAME_UPDATE_BOSS_DIE: 2020,
        GAME_CREATE_ENV_OBJECT: 2021,
        GAME_CREATE_FISH_GROUP_NEW: 2022,
        GAME_DROP_ITEM: 2023,
        GAME_PLAY_GLOBAL_FX: 2024,
        GAME_STOP_GLOBAL_FX: 2025,
        GAME_CHAT_EMOTICON: 2027,
        GAME_LIST_ITEM: 2030,
        //@TODO Freezeskill - should not in base
        // GAME_SELECT_ITEM: 2031,
        GAME_UPDATE_JACKPOT: 2033,
        GAME_WIN_JACKPOT: 2034,
        GAME_ROOM_DATA: 2035,
        GAME_NOTIFY: 2036,
        GAME_UPDATE_WALLET: 2037,
        GAME_CHANGE_ROUND: 2028,
        GAME_LIST_FISH_ON_SHOW: 2038,
        GAME_UPDATE_VIP_LEVEL: 2039,
        GAME_PING_PONG: 2999,
        GAME_ACTIVE_FREEZE_GUN: 2045,
        GAME_STOP_FREEZE_GUN: 2046,
        GAME_FISH_FREEZE: 2047,
        GAME_GET_BOT_SETTING: 2048,
        GAME_SET_BOT_SETTING: 2049,
        GAME_STOP_BOT: 2050,
        GAME_FREEZE_GUN_STATE: 2051,
        GAME_IDLE_MESSAGE: 2052,
        GAME_END_FIRE_STORM: 2053,
        GAME_FIRE_STORM_CATCH_FISH: 2054,
        GAME_FIRE_STORM_DROP_ITEM: 2055,
        GAME_FIRE_STORM_ADD_BULLET: 2056,
        //missing bullet firestorm => re-add
        GAME_EVENT_SESSION_CHANGED: 2070,
        GAME_GET_EVENT_STATUS: 2071,
        GAME_MESSAGE_SERVER: 3000,
        GAME_UPDATE_EVENT_TRAY: 2053,
        GAME_UPDATE_EVENT_STATUS: 2054,
        GAME_JOIN_DESK: 3001,
        GAME_JOIN_DESK_BUT_WALLET_ERROR: 2500,
        GAME_ON_CLOSE_TAB: 2800,
        GAME_PLAYER_UPDATE_POSITION: 2056,
        GAME_WARNING_DOWN_STREAK_INFO: 2061,
        GAME_ENEMY_FIRE_BULLET: 2060,
        GAME_PLAYER_DIE: 2058,
        GAME_PLAYER_UPDATE_SHIELD: 2057,
        GAME_PLAYER_SEND_PIECE_ENERGY: 2059,
        GAME_PLAYER_IDLE_STATE: 2062,
        GAME_UPDATE_STREAK_INFO: 2063,
        GAME_QUICK_JOIN_ROOM: 2200,
        GAME_PROMOTION_GUN_END: 2100,
        GAME_PROMOTION_GUN_END_OTHER_ROOM: 2101,
        SEND_EVENT: {
          SEND_GET_INFO_GAME_ROOM: "SEND_GET_INFO_GAME_ROOM",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          SEND_IDLE_MESSAGE: "SEND_IDLE_MESSAGE",
          SEND_GET_LIST_LIST_FISH_ON_SHOW: "SEND_GET_LIST_LIST_FISH_ON_SHOW",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_CATCH_FISH: "SEND_CATCH_FISH"
        },
        NETWORK_EVENT: 'NETWORK_EVENT',
        NETWORK_WAITING: 'NETWORK_WAITING',
        NETWORK_CONNECT: 'NETWORK_CONNECT',
        NETWORK_ERROR: 'NETWORK_ERROR',
        NETWORK_CLOSE: 'NETWORK_CLOSE',
        NETWORK_POOR: 'NETWORK_POOR',
        NETWORK_DIE: 'NETWORK_DIE',
        AUTHEN_FAIL: 'AUTHEN_FAIL',
        SERVER_MAINTAIN: 'SERVER_MAINTAIN',
        LOGIN_IN_OTHER_DEVICE: 'LOGIN_IN_OTHER_DEVICE',
        NETWORK_RECONNECT: 'OUT_GAME',
        PINGPONG: 'PINGPONG',
        MSG_CODE: {
          USER_LOGGED: 101,
          NOT_ENOUGH_MONEY: 102,
          CANT_FIND_ROOM: 103,
          DUPLICATE_LOGIN: 104,
          NETWORK_ERROR: 105,
          NO_MONEY_LOBBY: 106,
          INVALID_CURRENCY: 107,
          IG_CANT_FIND_ROOM: 201,
          IN_OTHER_GAME: 202,
          ROOM_FULL: 203,
          NO_MONEY2: 204,
          NO_MONEY_IN_GAME: 205,
          IG_DUPLICATE_LOGIN: 206,
          NO_ACTION: 207,
          CHARGE_MONEY: 208,
          OWN_LASER: 209,
          NO_MONEY_IN_GAME_ONE_WALLET: 210,
          NO_MONEY_IN_LOBBY_MULTI_WALLET: 211,
          OWN_RIFLE: 212,
          WALLET_ERROR: 300,
          OWN_DRILL: 301,
          OWN_FIRESTORM: 302,
          OWN_MINI_BOSS_GUN: 304,
          ACCOUNT_OUT_OF_MONEY_PROMOTION: 303,
          SERVER_MAINTAIN: 503,
          WAITING_TIMEOUT: -1,
          WAITING_LOAD_SCENE_TIMEOUT: -2,
          NETWORK_POOR: 9001,
          NETWORK_DIE: 9002,
          DRAGON_NOT_ENOUGH_MONEY: 9003
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkKeyMap.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9ab0PXya5JDbkwJ9rRO9JX", "gfNetworkKeyMap", undefined);

      const gfNetworkKeyMap = exports('default', {
        v: "Version",
        rst: "RoundStartTime",
        iuig: "isUserInGame",
        uid: "UserID",
        nn: "Username",
        wl: "Wallet",
        lvl: "Level",
        bc: "BetConfig",
        av: "Avatar",
        code: "Code",
        aPar: "ArrayParam",
        fs: "FireSpeed",
        tgt: "TargetTime",
        isErr: "IsError",
        kind: "KindID",
        wlLim: "GoldLimit",
        url: "Server",
        tok: "Token",
        am: "amount",
        typ: "type",
        msg: "message",
        n: "Username",
        staId: "DeskStation",
        dId: "DeskId",
        bmul: "BulletMultiple",
        iInf: "itemInfo",
        pc: "percentGetItem",
        lItm: "listItem",
        id: "ID",
        skInf: "skillInfo",
        sid: "SkillID",
        x: "PosX",
        y: "PosY",
        dgbtyp: "Balls",
        ag: "Angle",
        lfid: "LockedFishID",
        fid: "FishID",
        grw: "GoldReward",
        fkd: "FishKind",
        lf: "ListFish",
        lpf: "ListParadeFish",
        pkd: "ParadeKind",
        pttl: "TimeBuildFishParade",
        eid: "EffectID",
        ttr: "TotalReward",
        inc: "InitCount",
        ttl: "timeToExpire",
        pos: "Position",
        mulier: "multiplier",
        isf: "IsForce",
        stt: "State",
        cid: "ChatID",
        r: "Result",
        w: "wonJackpot",
        wam: "WinAmount",
        idx: "IndexInGroup",
        rcode: "roomCode",
        data: "data",
        dgbTy: "Balls",
        bid: "BulletID",
        mult: "Multiple",
        skd: "SceneKind",
        isa: "IsActive",
        bt: "BuildTick",
        tr: "TimeRemain",
        tf: "TimeFreeze",
        lu: "ListUser",
        rd: "RoomData",
        trf: "IceTimeRemain",
        etf: "TimeRemainFreeze",
        rk: "RoomKind",
        ip: "PathID",
        if: "FormationID",
        prin: "ParenInfo",
        sam: "LaserMultiple",
        mnbi: "MiniBossInfo",
        iid: "ItemID",
        lbtr: "ListBuildTickRecover",
        st: "ServerTime",
        bf: "BonusFish",
        idB: "BulletID",
        tarf: "TargetFish",
        //event
        evi: "EventInfo",
        evtd: "EventDetail",
        eet: "EventEndTime",
        evst: "EventStartTime",
        lv: "ItemLevel",
        itc: "itemCount",
        bn: "bonus",
        gss: "GhostShipState",
        sput: "GhostShipSpeedUpBuildtick",
        //Godzilla
        gzls: "GodzillaState",
        tw: "TypeWin",
        //promotion gun
        cr: "CurrencyRatio",
        promf: "PromotionInfo",
        promC: "PromotionCode",
        rkProm: "roomKindPromotion",
        //3D
        skp: "skipEffect",
        bti: "BulletType",
        cf: "ClearFish",
        lg: "ListGroup",
        cg: "CountGroup",
        tgr: "TypeGroup",
        gid: "GroupID",
        sp: "StartPos",
        idp: "PathID",
        pid: "PathID",
        ifs: "IDStart",
        cfr: "CountFish",
        tdl: "DelayTimeStart",
        dtf: "DelayTimeNextFish",
        sc: "Scale",
        as: "AngleStart",
        cl: "CountLine",
        abu: "BulletAmount",
        tef: "SkillDuration",
        tad: "BonusTime",
        fwfs: "RewardMultiple",
        ipf: "FishGroup",
        ldf: "ListFishDead",
        clp: "CountLoop",
        dlt: "DelayLoopTime",
        dsi: "DrillResumeInfo",
        ifot: "ListNormalFish",
        flf: "ListFishFreeze",
        lfk: "ListFishKind",
        scf: "ScaleFish",
        ph: "BossPhase",
        lsg: "ListGiftBoss",
        tcp: "TimeChangePhase",
        clo: "Color",
        //poison flower
        ilp: "isLastPhase",
        //Drill
        psks: "performingSkills",
        //chips
        cps: "chips",
        itn: "itemChipID",
        dmgl: "damageLevel",
        mitd: "maxItemID",
        ipm: "IsPromotionMoney",
        pwl: "PromotionWallet",
        fty: "FireType",
        mbl: "MissingBullet",
        sfid: "SpecialFishID",
        hpw: "HasPromotionWallet",
        po: "PayOut",
        vip: "VipLevel",
        strInf: "StreakInfo",
        buc: "BulletCount",
        bk: "BulletKind",
        lp: "ListPosition",
        ssi: "SkillSpecialInfo",
        per: "Percent",
        tar: "Targets",
        tif: "TimeFires",
        eoid: "EnvObjectID",
        eokd: "EnvObjectKind",
        pp: "PlayerPosition",
        lenv: "ListEnvObject",
        crn: "Corner",
        si: "SkillInfo",
        shi: "Shield",
        pts: "Points",
        ssms: "SkillSpecialMilestone",
        env: "environment",
        sst: "SessionTime",
        ct: "CurrentTime",
        mt: "MaxTime",
        sdr: "StreakDrainDuration",
        bdr: "BonusDrainDuration",
        strt: "StartDrainTime",
        rmt: "RemainTime",
        prs: "Process",
        tt: "Total",
        sindx: "SessionIndex",
        srtm: "SessionRemainTime",
        sttrm: "StepRemainTime",
        tts: "TotalStep",
        stindx: "StepIndex",
        ms: "MissionStatus",
        rwd: "RewardData",
        ckd: "ChestKind",
        ife: "IsFishEvent",
        evd: "EventData",
        binf: "BoomInfo",
        mb: "MinBet",
        bp: "BonusPercent",
        ite: "ItemEnergy",
        br: "BulletRemain",
        rv: "roomVersion",
        ev: "environmentType",
        isD: "isDie",
        sta: "Status",
        ct1: "CountType1",
        ct2: "CountType2",
        iids: "listWinItem",
        irw: "itemReward",
        //Multi currency
        toc: "TypeOfCurrency",
        ubc: "UserBetConfig",
        jpif: "JackpotInfo",
        lang: "Language"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkParser.ts", ['cc', './gfNetworkEvent.ts', './gfNetworkKeyMap.ts', './gfNetworkGameEvent.ts', './gfNetworkSocket.ts', './gfCurrencyCalculator.ts', './gfBaseConfig.ts', './gfDataStore.ts'], function (exports) {
  var cclegacy, gfNetworkEvent, gfNetworkKeyMap, gfNetworkGameEvent, gfNetworkSocket, gfCurrencyCalculator, gfBaseConfig, gfDataStore;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      gfNetworkKeyMap = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkSocket = module.default;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "009ce5Y0f9PDIyDMIJdXxSo", "gfNetworkParser", undefined);

      class gfNetworkParser {
        constructor() {
          this.logtag = void 0;
          this._emitter = void 0;
          this.socket = void 0;
          gfNetworkParser.instance = this;
          this.logtag = "::gfNetworkParser::";
          this._emitter = new globalThis.EventEmitter();
          this.socket = new gfNetworkSocket({
            pingInterval: 2000,
            pingTimeout: 3000,
            reconnectionAttempts: 999999,
            reconnectionAttemptsWarning: 1,
            reconnectionAttemptsDie: 5,
            reconnectionDelay: 2000
          });

          this._handleSocketEvent();
        }
        /* Common function. */


        executeCommand(commandPayload) {
          if (this.socket == null) {
            return;
          }

          this.socket.send(commandPayload);
        }
        /* End Common function. */


        onEnterGame() {}

        onLeaveGame() {}

        onEnterDie(reason) {
          this.close(reason);
          this.cleanup();
        }

        registerEvent(event, listener) {
          this._emitter.on(event, listener);
        }

        removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        }

        connectMaster(ip, token) {
          this.socket.close('connectMaster', false, () => {
            this.socket.init(ip, encodeURIComponent(token));
          });
        }

        connectGame(ip, token) {
          this.socket.close('connectGame', false, () => {
            this.socket.init(ip, token);
          });
        }

        close(reason) {
          this.socket.close(reason);
        }

        cleanup() {
          if (!this._emitter || !this.socket) return;
          this.close('QUIT GAME!!!');
          this.socket.cleanUp();
          this.socket = null;

          this._emitter.removeAllListeners();

          this._emitter = null;
        }

        parseKeyContent(content, requestId) {
          let tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (let i = 0; i < content.length; ++i) {
              tmpContent[i] = this.parseKeyContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(key => {
              let newKey = gfNetworkKeyMap[key] || key;
              let newValue = content[key];

              if (Array.isArray(newValue)) {
                for (let i = 0; i < newValue.length; ++i) {
                  newValue[i] = this.parseKeyContent(newValue[i], requestId);
                }
              } else if (typeof newValue === 'object') newValue = this.parseKeyContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        }

        parseContent(content, requestId) {
          let updateContent = this.parseKeyContent(content, requestId);

          if (gfCurrencyCalculator && gfCurrencyCalculator.instance) {
            const updateData = this.checkSpecialResponseUpdateCurrency(updateContent, requestId);

            if (!updateData) {
              updateContent = gfCurrencyCalculator.instance.updateKeyMoneyInCurrencyData(updateContent, false);
            }
          }

          return updateContent;
        }

        checkSpecialResponseUpdateCurrency(content, requestId) {
          let updateContent = null;

          switch (requestId) {
            case gfNetworkGameEvent.LOBBY_LOGIN:
            case gfNetworkGameEvent.LOBBY_ON_SHOW:
            case gfNetworkGameEvent.GAME_LOGIN:
              {
                gfDataStore.instance.setCurrencyConfig(content);
                updateContent = content;
                break;
              }

            case gfNetworkGameEvent.LOBBY_JACKPOT:
            case gfNetworkGameEvent.GAME_UPDATE_JACKPOT:
              {
                updateContent = content;
                break;
              }

            case gfNetworkGameEvent.GAME_LISTUSER_BOARD:
              {
                const {
                  ListUser
                } = content;

                if (ListUser && ListUser.length > 0) {
                  ListUser.forEach(user => {
                    user.BulletMultiple = gfCurrencyCalculator.instance.convertMultipleToUserBetConfig(user.BulletMultiple);

                    if (gfDataStore.instance.getSelfDeskStation() !== user.DeskStation) {
                      user.Wallet = gfCurrencyCalculator.instance.convertToUserCurrency(user.Wallet);
                    }

                    if (user.skillInfo && user.skillInfo.length > 0) {
                      for (let i = 0; i < user.skillInfo.length; i++) {
                        if (user.skillInfo[i] && user.skillInfo[i].BulletMultiple) {
                          user.skillInfo[i].BulletMultiple = gfCurrencyCalculator.instance.convertMultipleToUserBetConfig(user.skillInfo[i].BulletMultiple);
                        }
                      }
                    }
                  });
                }

                updateContent = content;
                break;
              }

            case gfNetworkGameEvent.LOBBY_NOTIFY:
            case gfNetworkGameEvent.GAME_NOTIFY:
              {
                const notifyConfig = content.type && gfBaseConfig.instance.NOTIFY_CONFIG[content.type];

                if (notifyConfig) {
                  const indexOfReward = notifyConfig["goldReward"];
                  let value = content.data[indexOfReward];

                  if (typeof value === "string") {
                    value = content.data[indexOfReward].replace(/,/g, '');
                  }

                  value = gfCurrencyCalculator.instance.convertToUserCurrency(value);
                  content.data[indexOfReward] = gfCurrencyCalculator.instance.formatCurrency(value, true);
                }

                updateContent = content;
                break;
              }

            case gfNetworkGameEvent.GAME_UPDATE_WALLET:
            case gfNetworkGameEvent.LOBBY_UPDATE_MY_GOLD:
              {
                updateContent = content;
                break;
              }
          }

          return updateContent;
        }

        checkSpecialRequestUpdateCurrency(content, requestId) {
          let updateContent = null;

          switch (requestId) {
            case gfNetworkGameEvent.GAME_CATCH_FISH:
              {
                content.Multiple = gfCurrencyCalculator.instance.convertMultipleToDefaultBetConfig(content.Multiple);
                updateContent = content;
                break;
              }
          }

          return updateContent;
        }

        _handleSocketEvent() {
          this.socket.registerEvent(gfNetworkEvent.EVENT_NEW_MESSAGE, ({
            requestId,
            content
          }) => {
            content = this.parseKeyContent(content, requestId);

            this._emitter.emit(requestId, content);
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_CONNECTED, () => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_CONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_POOR, () => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_POOR,
              EventData: {
                code: gfNetworkGameEvent.MSG_CODE.NETWORK_POOR
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_DIE, () => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_DIE,
              EventData: {
                code: gfNetworkGameEvent.MSG_CODE.NETWORK_DIE
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_RECONNECTED, () => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_RECONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_AUTHEN_FAIL, code => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.AUTHEN_FAIL,
              EventData: {
                code
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_PINGPONG, data => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.PINGPONG,
              EventData: {
                data
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE, code => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE,
              EventData: {
                code
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME, () => {
            this.socket.close("EVENT_NO_ACTION_LONG_TIME");

            this._emitter.emit(gfNetworkGameEvent.GAME_KICK);
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_SERVER_MAINTENANCE, code => {
            this._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.SERVER_MAINTAIN,
              EventData: {
                code
              }
            });
          });
        }

        optimizeContent(content, requestId) {
          let tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (let i = 0; i < content.length; ++i) {
              tmpContent[i] = this.optimizeContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(key => {
              let newKey;

              if (!Object.keys(gfNetworkKeyMap).find(mapkey => gfNetworkKeyMap[mapkey] === key)) {
                newKey = key;
              } else newKey = Object.keys(gfNetworkKeyMap).find(mapkey => gfNetworkKeyMap[mapkey] === key);

              let newValue = content[key];

              if (Array.isArray(newValue)) {
                for (let i = 0; i < newValue.length; ++i) {
                  newValue[i] = this.optimizeContent(newValue[i], requestId);
                }
              } else if (typeof newValue === 'object') newValue = this.optimizeContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        }

        _buildMessage(requestId, data = undefined) {
          const updateData = this.checkSpecialRequestUpdateCurrency(data, requestId);

          if (!updateData) {
            data = gfCurrencyCalculator.instance.updateKeyMoneyInCurrencyData(data, true);
          }

          data = this.optimizeContent(data, requestId);
          return {
            requestId: requestId,
            content: data
          };
        }

        isAvailable() {
          return this.socket.isAvailable();
        } // ***************** LOBBY *****************************


        sendGetInfoGameRoom(roomKind) {
          let data = {
            KindID: roomKind
          };

          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, data);

          this.executeCommand(message);
        } /// ********  GAME *************


        sendJoinDesk(deskId) {
          let data = {
            DeskId: deskId
          };

          let message = this._buildMessage(gfNetworkGameEvent.GAME_JOIN_DESK, data);

          this.executeCommand(message);
        }

        sendGunFire(data) {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_USER_FIRE, data);

          this.executeCommand(message);
        }

        sendActiveFreezeGun() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_ACTIVE_FREEZE_GUN);

          this.executeCommand(message);
        }

        sendCatchFishSkill(data) {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, data);

          this.executeCommand(message);
        }

        sendFireSkill(Angle, Pos) {
          let data = {};
          data.Angle = Angle;
          data.x = Pos.x;
          data.y = Pos.y;

          let message = this._buildMessage(gfNetworkGameEvent.GAME_FIRE_SKILL, data);

          this.executeCommand(message);
        }

        sendCatchFish(data) {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH, data);

          this.executeCommand(message);
        }

        sendExitGameServer() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_USER_EXIT, {});

          this.executeCommand(message);
        }

        sendRegisterExit() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_ON_CLOSE_TAB, {});

          this.executeCommand(message);
        }

        sendGetLobbyOnShow() {
          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_ON_SHOW, {});

          this.executeCommand(message);
        }

        notifyShowGame() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_LIST_FISH_ON_SHOW, {});

          this.executeCommand(message);
        }

        sendIdleMessage() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_IDLE_MESSAGE, {});

          this.executeCommand(message);
        }

        getBotSetting(roomKind) {
          // cc.log('getBotSetting');
          let message = this._buildMessage(gfNetworkGameEvent.GAME_GET_BOT_SETTING, {
            RoomKind: roomKind
          });

          this.executeCommand(message);
        }

        setBotSetting(arrFkd, duration, roomKind) {
          // cc.log('setBotSetting');
          let data = {
            FishKind: arrFkd,
            timeToExpire: duration,
            RoomKind: roomKind
          };

          let message = this._buildMessage(gfNetworkGameEvent.GAME_SET_BOT_SETTING, data);

          this.executeCommand(message);
        }

        sendGetLobbyEventInfo() {
          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_UPDATE_EVENT_STATUS);

          this.executeCommand(message);
        }

        stopBot() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_STOP_BOT, {});

          this.executeCommand(message);
        }

        sendLoginLobby(content) {
          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_LOGIN, content);

          this.executeCommand(message);
        }

        sendLobbyLoginInfo(content) {
          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_SEND_LOGIN_INFO, content);

          this.executeCommand(message);
        }

        sendIdleMessageLobby() {
          let message = this._buildMessage(gfNetworkGameEvent.LOBBY_IDLE_MESSAGE);

          this.executeCommand(message);
        }

        sendGameQuickJoinRoom() {
          let message = this._buildMessage(gfNetworkGameEvent.GAME_QUICK_JOIN_ROOM);

          this.executeCommand(message);
        }

        destroy() {
          this.cleanup();
          gfNetworkParser.instance = null;
        }

      }

      exports('default', gfNetworkParser); // gfNetworkParser.instance = null;

      gfNetworkParser.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkSocket.ts", ['cc', './gfNetworkEvent.ts', './gfDataStore.ts', './XOCypher.ts', './hashKey.ts'], function (exports) {
  var log, error, cclegacy, gfNetworkEvent, gfDataStore, xorCipher, hash;
  return {
    setters: [function (module) {
      log = module.log;
      error = module.error;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      hash = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "531a6Z/e2BI1bTqNgIF5Cs0", "gfNetworkSocket", undefined);

      const STATUS_INIT = 'INIT';
      const STATUS_CONNECTED = 'CONNECTED';
      const STATUS_DISCONNECTED = 'DISCONNECTED';
      const LIVE_STATUS_INIT = 'INIT';
      const LIVE_STATUS_CONNECT = 'CONNECT';
      const LIVE_STATUS_CLOSED = 'CLOSED';

      class gfNetworkSocket {
        // private _emitter: EventEmitter;

        /**
         *
         * @param { } opt : {
         *      pingInterval,
         *      pingTimeout,
         *      reconnectionAttempts,
         *      reconnectionDelay
         *      reconnectionAttemptsWarning,
         * }
         */
        constructor(opt) {
          this._msgQueue = void 0;
          this._socket = void 0;
          this._status = void 0;
          this._liveStatus = void 0;
          this._pingInfo = void 0;
          this._reconnectInfo = void 0;
          this._hostName = void 0;
          this._token = void 0;
          this._emitter = void 0;
          this._hashKey = void 0;
          opt = opt || {};
          this._socket = null;
          this._status = STATUS_INIT;
          this._liveStatus = LIVE_STATUS_INIT;
          this._pingInfo = {
            pingInterval: opt.pingInterval || 5000,
            pingTimeout: opt.pingTimeout || 3000,
            pingIntervalId: 0,
            pongIntervalId: 0,
            lastPingTime: 0,
            delay: 0,
            isSendingPing: false
          };
          this._reconnectInfo = {
            reconnectionCount: 0,
            reconnectionAttempts: opt.reconnectionAttempts || 100,
            reconnectionDelay: opt.reconnectionDelay || 500,
            reconnectionAttemptsWarning: opt.reconnectionAttemptsWarning || 10,
            reconnectionAttemptsDie: opt.reconnectionAttemptsDie || 25,
            reconnectIntervalId: 0
          };
          this._msgQueue = [];
          this._hashKey = undefined;
          this._emitter = new globalThis.EventEmitter();
        }

        echo(str) {
          log(str + " " + gfNetworkEvent.EVENT_NETWORK_CONNECTED);
        }

        init(hostName, token) {
          this._hostName = hostName;
          this._token = token;
          this.connect();
        }

        connect() {
          this._socket = new WebSocket(this._hostName, this._token);
          this._socket.binaryType = "arraybuffer";

          this._handleConnectionEvent();

          this._liveStatus = LIVE_STATUS_CONNECT;
        }

        close(reason, isReconnect = false, callback = null) {
          if (typeof isReconnect === 'function') {
            callback = isReconnect;
            isReconnect = false;
          }

          this._changeStatus(STATUS_DISCONNECTED);

          if (this._socket) {
            this._socket.close();

            this._removeHandleConnectionEvent();

            this._socket = null;
          }

          this._cleanupTimer();

          if (!isReconnect) {
            this._liveStatus = LIVE_STATUS_CLOSED;
          }

          if (callback) {
            callback();
          }
        }

        cleanUp() {
          this._emitter.removeAllListeners();
        }

        reconnect(reason) {
          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            //Reset queue message
            this._msgQueue.length = 0;

            if (this._reconnectInfo.reconnectionCount < this._reconnectInfo.reconnectionAttempts) {
              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsWarning) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_POOR);
              }

              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsDie) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);

                this._onClose("NETWORK_DIE");
              }

              this._reconnectInfo.reconnectionCount++;
            } else {
              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);
            }

            this.connect();
          } else {
            this._cleanupTimer();
          }
        }

        send(data) {
          if (~gfNetworkEvent.LIST_EVENT_QUEUE.indexOf(data.requestId) && this._liveStatus == LIVE_STATUS_CONNECT) {
            //send fire laser
            this._ping(true);

            this._msgQueue.push(data);

            return true;
          } else if (this._status == STATUS_CONNECTED && this._socket && this._socket.readyState == WebSocket.OPEN) {
            if (data.requestId === 3001) {
              //clear queue on reconnect event
              this._msgQueue.length = 0;
            }

            this._socket.send(this._encode(data));

            return true;
          }

          return false;
        }

        registerEvent(event, listener) {
          this._emitter.on(event, listener);
        }

        removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        }

        _handleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = this._onOpen.bind(this);
            this._socket.onerror = this._onError.bind(this);
            this._socket.onmessage = this._onMessage.bind(this);
            this._socket.onclose = this._onClose.bind(this);
          }
        }

        _removeHandleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = null;
            this._socket.onerror = null;
            this._socket.onmessage = null;
            this._socket.onclose = null;
          }
        }

        _onOpen() {
          this._changeStatus(STATUS_CONNECTED);

          this._cleanupTimer();

          if (this._reconnectInfo.reconnectionCount > 0) {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_CONNECTED);
          }

          this._reconnectInfo.reconnectionCount = 0;

          this._ping();
        }

        _onError(error) {
          this._changeStatus(STATUS_DISCONNECTED);

          this.reconnect('_onError');
        }

        _onMessage(message) {
          let messageDecode = this._decode(message.data);

          const isEncrypted = this._onCheckMessageEncrypted(messageDecode);

          if (isEncrypted) {
            let strMessageDecode = undefined;

            try {
              strMessageDecode = xorCipher.decode_new(this._hashKey, messageDecode);
            } catch (error) {
              const dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                message: message,
                error: error
              };
            }

            try {
              messageDecode = JSON.parse(strMessageDecode);
            } catch (error) {
              const dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                strMessageDecode: strMessageDecode,
                message: message,
                error: error
              };
            }
          }

          log(JSON.stringify(messageDecode));

          if (messageDecode.requestId == 2001) {
            const {
              cpm,
              pek
            } = messageDecode.content;

            this._setHashKeyDecode(cpm, pek);
          }

          if (messageDecode.requestId === 3999) {
            this._pong();
          }

          if (messageDecode.requestId === 3000) {
            this._handleNetworkPacketResponse(messageDecode);
          }

          if (messageDecode.requestId === 2019) {
            //NO ACTION
            this._handleNoActionLongTime();
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NEW_MESSAGE, messageDecode);
          }
        }

        _onCheckMessageEncrypted(message) {
          if (typeof message == "object") {
            return false;
          }

          return true;
        }

        _setHashKeyDecode(method, key) {
          if (!method || !key) {
            return;
          }

          this._hashKey = hash(method, key);
        }

        _onClose(event) {
          this._changeStatus(STATUS_DISCONNECTED);

          this._cleanupTimer();

          this._removeHandleConnectionEvent();

          this._socket = null;

          if (this._liveStatus == LIVE_STATUS_CONNECT) {
            this._reconnectInfo.reconnectIntervalId = setTimeout(() => {
              this.connect();
            }, this._reconnectInfo.reconnectionDelay);
          }
        }

        _cleanupTimer() {
          clearTimeout(this._pingInfo.pingIntervalId);
          clearTimeout(this._pingInfo.pongIntervalId);
          clearTimeout(this._reconnectInfo.reconnectIntervalId);
          this._pingInfo.isSendingPing = false;
        }

        _ping(isPingImmediately = false) {
          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            let delayPing = isPingImmediately ? 0 : this._pingInfo.pingInterval;
            this._pingInfo.pingIntervalId = setTimeout(() => {
              if (!this._pingInfo.isSendingPing) {
                this._pingInfo.lastPingTime = Date.now();
                let isSendSuccess = this.send({
                  requestId: 3999,
                  content: {}
                });

                if (isSendSuccess) {
                  this._pingInfo.isSendingPing = true;
                }
              }

              clearTimeout(this._pingInfo.pongIntervalId);
              this._pingInfo.pongIntervalId = setTimeout(() => {
                if (this._status == STATUS_CONNECTED) {
                  this._changeStatus(STATUS_DISCONNECTED);
                }

                this._ping(true);

                if (this._socket) {
                  this.close('PONG TIMEOUT', true);
                }

                this.reconnect('pong timeout');
              }, this._pingInfo.pingTimeout);
            }, delayPing);
          } else {
            this._cleanupTimer();
          }
        }

        _pong() {
          clearTimeout(this._pingInfo.pongIntervalId);
          this._pingInfo.delay = Date.now() - this._pingInfo.lastPingTime;
          this._pingInfo.isSendingPing = false;

          this._ping();

          if (this._status != STATUS_CONNECTED) {
            this._changeStatus(STATUS_CONNECTED);

            if (this._reconnectInfo.reconnectionCount > 0) {
              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);

              this._reconnectInfo.reconnectionCount = 0;
            }
          }

          for (let i = 0; i < this._msgQueue.length; ++i) {
            if (this._status === STATUS_CONNECTED) {
              this._socket.send(this._encode(this._msgQueue[i]));
            }
          }

          this._msgQueue.length = 0;

          this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_PINGPONG, this._pingInfo.delay);
        }

        _handleNetworkPacketResponse({
          content
        }) {
          switch (content.code) {
            case 1:
              // Login in other device.
              this.close('EVENT_LOGIN_IN_OTHER_DEVICE', false);

              this._emitter.emit(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE, content.code);

              break;

            case 2:
              // Authen fail
              this.close('EVENT_AUTHEN_FAIL', false);

              this._emitter.emit(gfNetworkEvent.EVENT_AUTHEN_FAIL, content.code);

              break;

            case 503:
              // Maintain
              this.close('SERVER_MAINTENANCE', false);

              this._emitter.emit(gfNetworkEvent.EVENT_SERVER_MAINTENANCE, content.code);

              break;

            default:
              error(content);
              break;
          }
        }

        isAvailable() {
          return this._liveStatus !== LIVE_STATUS_CLOSED;
        }

        _changeStatus(status) {
          this._status = status;
        }

        _encode(message) {
          return globalThis.msgpack.encode(message); // return undefined;
        }

        _decode(byteData) {
          let arr = new Uint8Array(byteData);
          let buf = arr.buffer;
          return globalThis.msgpack.decode(new Uint8Array(buf)); // return undefined;
        }

        _handleNoActionLongTime() {
          this.close('EVENT_NO_ACTION_LONG_TIME');

          this._emitter.emit(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME);
        }

      }

      exports('default', gfNetworkSocket);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNode.ts", ['cc', './utils.ts'], function (exports) {
  var cclegacy, Component, Tween, v3, isValid, warn, _decorator, setOpacity;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Tween = module.Tween;
      v3 = module.v3;
      isValid = module.isValid;
      warn = module.warn;
      _decorator = module._decorator;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4488ceONJNEpowcEHtUHDRb", "gfNode", undefined);

      const {
        ccclass
      } = _decorator;
      let gfNode = exports('default', (_dec = ccclass('gfNode'), _dec(_class = class gfNode extends Component {
        constructor(...args) {
          super(...args);
          this.poolManager = void 0;
        }

        initAssets(config) {} //Called whenever object is get from Object Pool


        reuse(args) {
          this.poolManager = args[0];
          this.node.active = true;
          this.enabled = true;
        }

        setPoolManager(poolMng) {
          this.poolManager = poolMng;
        } //Called whenever object is returned to Object Pool


        unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.setOpacity(255);
          this.node.scale = v3(1, 1, 1);
          this.node.angle = 0;
        }

        returnPool() {
          if (this.poolManager) {
            this.poolManager.putObj(this.node);
          } else {
            if (isValid(this.node)) {
              this.node.destroy();
            } else {
              warn('non valid obj');
            }
          }
        }

        setOpacity(value) {
          setOpacity(this.node, value);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePool.ts", ['cc'], function (exports) {
  var NodePool, instantiate, isValid, cclegacy, log;
  return {
    setters: [function (module) {
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      isValid = module.isValid;
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3e2eRswGZIYZRgK/R5u/0m", "gfNodePool", undefined);

      const LOG = log;

      class gfNodePool extends NodePool {
        constructor(...args) {
          super(...args);
          this.objPrefab = void 0;
          this.usingNodes = void 0;
          this.maximum = 1000;
        }

        init(prefab, initCount = 5, maximum = 1000) {
          if (!this.objPrefab) {
            this.objPrefab = instantiate(prefab);
            this.usingNodes = [];
          }

          for (let i = 0; i < initCount; i++) {
            let item = instantiate(this.objPrefab);
            this.put(item);
          }

          this.maximum = maximum;
        }

        getSize() {
          return this.size();
        }

        getObj() {
          if (this.size() == 0) {
            this.put(instantiate(this.objPrefab));
          }

          const obj = this.get(this);
          this.usingNodes.push(obj);
          return obj;
        }

        clearPool() {
          this.clear();
        }

        reinit() {
          this.clear();
          this.init(this.objPrefab);
        }

        putObj(node) {
          for (let i = 0; i < this.usingNodes.length; ++i) {
            if (this.usingNodes[i].uuid == node.uuid) {
              this.usingNodes.splice(i, 1);
              break;
            }
          }

          if (this.getSize() < this.maximum) {
            this.put(node);
          } else {
            node.removeFromParent();
            node.destroy();
          }
        }

        getUsingNodeList() {
          return this.usingNodes;
        }

        returnAllToPool() {
          while (this.usingNodes.length > 0) {
            const obj = this.usingNodes.pop();

            if (isValid(obj)) {
              if (this.getSize() < this.maximum) {
                this.put(obj);
              } else {
                obj.removeFromParent();
                obj.destroy();
              }
            } else {
              LOG("return invalid object to pool!");
            }
          }
        }

        destroy() {
          this.returnAllToPool();
          this.clear();
          this.objPrefab.destroy();
          this.objPrefab = null;
        }

      }

      exports('default', gfNodePool);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolAssets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfCustomDataType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, convertAssetArrayToObject, gfBulletAsset, gfCoinAsset, gfNetFXAsset, gfSpriteFishAsset, gfSpineFishAsset, gfLabelCoinAsset;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBulletAsset = module.gfBulletAsset;
      gfCoinAsset = module.gfCoinAsset;
      gfNetFXAsset = module.gfNetFXAsset;
      gfSpriteFishAsset = module.gfSpriteFishAsset;
      gfSpineFishAsset = module.gfSpineFishAsset;
      gfLabelCoinAsset = module.gfLabelCoinAsset;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "99f8cyzQ0RHupu2CP3p0znO", "gfNodePoolAssets", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfNodePoolAssets = exports('gfNodePoolAssets', (_dec = ccclass('gfNodePoolAssets'), _dec2 = property(gfBulletAsset), _dec3 = property(gfCoinAsset), _dec4 = property(gfNetFXAsset), _dec5 = property(gfSpriteFishAsset), _dec6 = property(gfSpineFishAsset), _dec7 = property(gfLabelCoinAsset), _dec(_class = (_class2 = class gfNodePoolAssets extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bulletSprite", _descriptor, this);

          _initializerDefineProperty(this, "coin", _descriptor2, this);

          _initializerDefineProperty(this, "netFX", _descriptor3, this);

          _initializerDefineProperty(this, "fishAnimationClip", _descriptor4, this);

          _initializerDefineProperty(this, "fishSkeletonData", _descriptor5, this);

          _initializerDefineProperty(this, "labelCoin", _descriptor6, this);

          this.bulletAssets = {};
          this.netFXAssets = {};
          this.fishAnimationAssets = {};
          this.fishSkeletonAssets = {};
          this.coinAssets = {};
          this.labelCoinAssets = {};
        }

        initMapAssets() {
          this.bulletAssets = convertAssetArrayToObject(this.bulletSprite);
          this.netFXAssets = convertAssetArrayToObject(this.netFX);
          this.fishAnimationAssets = convertAssetArrayToObject(this.fishAnimationClip);
          this.fishSkeletonAssets = convertAssetArrayToObject(this.fishSkeletonData);
          this.coinAssets = convertAssetArrayToObject(this.coin);
          this.labelCoinAssets = convertAssetArrayToObject(this.labelCoin);
        }
        /**
         * func addRoomItemAssets
         * @param {*} assetName variable to store data of asset, example dragonBallAssets
         * @param {*} roomItemAssets list data asset
         */


        addRoomItemAssets(assetName, roomItemAssets) {
          if (!this[assetName]) {
            this[assetName] = {};
          }

          for (let i = 0; i < roomItemAssets.length; i++) {
            let asset = roomItemAssets[i];
            const listKey = Object.keys(this[assetName]);

            if (listKey.length > 0) {
              asset = Object.assign({}, this[assetName][listKey[0]]);
              asset._name = roomItemAssets[i]._name;
              Object.keys(asset).forEach(key => {
                if (key != '_name') {
                  asset[key] = roomItemAssets[i].asset;
                }
              });
            }

            this[assetName][asset._name] = asset;
          }
        }

        removeRoomItemAssets(assetName, roomItemAssets) {
          if (!this[assetName]) {
            return;
          }

          for (let i = 0; i < roomItemAssets.length; i++) {
            const asset = roomItemAssets[i];

            if (this[assetName][asset._name]) {
              delete this[assetName][asset._name];
            }
          }
        } //Get room asset buy kind


        getRoomItemAssets(assetName, kind) {
          const roomItemAsset = this[assetName];

          if (roomItemAsset[kind] && roomItemAsset[kind].asset) {
            return roomItemAsset[kind].asset;
          }

          return null;
        }

        getBulletSprite(kind) {
          if (this.bulletAssets[kind] && this.bulletAssets[kind].sprite) {
            return this.bulletAssets[kind].sprite;
          }

          return null;
        }

        getCoinAsset(kind) {
          if (this.coinAssets[kind] && this.coinAssets[kind].animation) {
            return this.coinAssets[kind].animation;
          }

          return null;
        }

        getLabelCoinAsset(kind) {
          if (this.labelCoinAssets[kind] && this.labelCoinAssets[kind].font) {
            return this.labelCoinAssets[kind].font;
          }

          return null;
        } // fish normal default: 0, fish special : 1 , ice gun :2 


        getNetFXAsset(kind) {
          if (this.netFXAssets[kind] && this.netFXAssets[kind].animation) {
            return this.netFXAssets[kind].animation;
          }

          return null;
        }
        /**
        * example 
        * assetName: bulletAssets
        * kind: 0,1,...
        * keyName: sprite
        */


        getAssetData(data) {
          const {
            assetName,
            kind,
            keyName
          } = data;

          if (this[assetName] && this[assetName][kind] && this[assetName][kind][keyName]) {
            return this[assetName][kind][keyName];
          }

          return null;
        }

        getFishAnimationClip(kind) {
          if (this.fishAnimationAssets[kind] && this.fishAnimationAssets[kind].animation) {
            return this.fishAnimationAssets[kind].animation;
          }

          return null;
        }

        getFishSkeletonData(kind) {
          if (this.fishSkeletonAssets[kind] && this.fishSkeletonAssets[kind].animation) {
            return this.fishSkeletonAssets[kind].animation;
          }

          return null;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bulletSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "netFX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fishAnimationClip", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fishSkeletonData", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labelCoin", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolConfig.ts", ['cc', './gfBaseConfig.ts'], function (exports) {
  var v2, Rect, instantiate, warn, cclegacy, gfBaseConfig;
  return {
    setters: [function (module) {
      v2 = module.v2;
      Rect = module.Rect;
      instantiate = module.instantiate;
      warn = module.warn;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "086502tsbxDJZAcKPwxZxWQ", "gfNodePoolConfig", undefined);

      class gfNodePoolConfig {
        constructor(listAssets) {
          this.SPRITE_FISH_KIND = [];
          this.BULLET_ICE_VALUE = [7, 7, 7, 7, 8, 8, 9];
          this.FISH_CONFIG = {};
          this.BULLET_CONFIG = {};
          this.NET_FX_CONFIG = {};
          this.COIN_CONFIG = {};
          this.BOSS_ITEM_CONFIG = {};
          this.assetHolder = void 0;
          this.initDefaultConfig();
          this.initNodePoolAssets(listAssets);
          gfNodePoolConfig.instance = this;
        }

        initDefaultConfig() {
          this.FISH_CONFIG = {
            "1": {
              speed: 100,
              zIndex: 498,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "2": {
              speed: 80,
              zIndex: 497,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "3": {
              speed: 80,
              zIndex: 496,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "4": {
              speed: 80,
              zIndex: 495,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "6": {
              speed: 40,
              zIndex: 1,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "8": {
              speed: 60,
              zIndex: 100,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 50, 30)
            },
            "10": {
              speed: 60,
              zIndex: 108,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 100, 60)
            },
            "12": {
              speed: 60,
              zIndex: 106,
              BoxCollider: new Rect(0, 0, 100, 60)
            },
            "15": {
              speed: 40,
              zIndex: 201,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 100, 60)
            },
            "18": {
              speed: 40,
              zIndex: 204,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 100, 60)
            },
            "19": {
              speed: 40,
              zIndex: 205,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 100, 60)
            },
            "21": {
              speed: 40,
              zIndex: 207,
              BoxCollider: new Rect(0, 0, 170, 110)
            },
            "22": {
              speed: 20,
              zIndex: 208,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 170, 110)
            },
            "23": {
              speed: 20,
              zIndex: 209,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 170, 110)
            },
            "24": {
              speed: 20,
              zIndex: 210,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 170, 110)
            },
            "27": {
              speed: 20,
              zIndex: 2,
              customAnimProp: {
                angle: 90
              },
              BoxCollider: new Rect(0, 0, 200, 120)
            },
            "28": {
              speed: 20,
              zIndex: 491,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 200, 120)
            },
            "29": {
              speed: 20,
              zIndex: 491,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 200, 120)
            },
            "43": {
              speed: 20,
              zIndex: 105,
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 200, 120),
              skipRotate: true
            }
          };
          this.SPRITE_FISH_KIND = [1, 2, 3, 4, 6, 8, 10, 12, 15, 18, 19, 21, 22, 23, 24, 27, 28, 29, 43];
          this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "1": {
              BoxCollider: new Rect(5, 0, 20, 22)
            },
            "2": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "3": {
              BoxCollider: new Rect(5, 0, 20, 27)
            },
            "4": {
              BoxCollider: new Rect(5, 0, 20, 67)
            },
            "5": {
              BoxCollider: new Rect(0, 0, 20, 67)
            },
            "6": {
              BoxCollider: new Rect(0, 0, 20, 91)
            },
            'gunskill2': {
              BoxCollider: new Rect(0, 0, 40, 40)
            },
            'gunskill99': {
              BoxCollider: new Rect(0, 0, 60, 80),
              SkillID: gfBaseConfig.instance.SKILL_CONFIG.PROMOTION_GUN.SkillID
            }
          };
          this.BOSS_ITEM_CONFIG = {
            "0": {
              scale: 0.3
            },
            "1": {
              scale: 0.3
            },
            "2": {
              scale: 0.3
            },
            "3": {
              scale: 0.3
            },
            "4": {
              scale: 0.3
            },
            "5": {
              scale: 0.3
            },
            "6": {
              scale: 0.4
            }
          };
          this.NET_FX_CONFIG = {};
          this.COIN_CONFIG = {};
        }

        initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent("gfNodePoolAssets");
          this.assetHolder.initMapAssets();
        }

        getAssetHolder() {
          return this.assetHolder;
        } //Add room asset to main assetHolder


        addRoomItemAssets(assetName, roomItemAssets) {
          this.assetHolder.addRoomItemAssets(assetName, roomItemAssets);
        } //Remove room asset from main assetHolder


        removeRoomItemAssets(assetName, roomItemAssets) {
          this.assetHolder.removeRoomItemAssets(assetName, roomItemAssets);
          this.initDefaultConfig();
        }

        isSpriteFish(kind) {
          return this.SPRITE_FISH_KIND.includes(kind);
        }

        checkFishPoolByKind(kind) {
          return this.FISH_CONFIG[kind] ? true : false;
        }

        getBulletConfig(kind) {
          const config = this.BULLET_CONFIG[kind];

          if (!config) {
            return null;
          }

          config.asset = this.assetHolder.getBulletSprite(kind);
          return config;
        }

        getFishConfig(kind) {
          const config = this.FISH_CONFIG[kind];

          if (!config) {
            warn("Fish kind config not found: " + kind);
            return null;
          }

          if (this.isSpriteFish(kind)) {
            config.asset = this.assetHolder.getFishAnimationClip(kind);
          } else {
            config.asset = this.assetHolder.getFishSkeletonData(kind);
          }

          if (!config.asset) {
            warn("Fish kind asset found: " + kind);
            return null;
          }

          return config;
        }

        getCoinConfig(kind) {
          const asset = this.assetHolder.getCoinAsset(kind);

          if (!this.COIN_CONFIG[kind]) {
            if (asset) {
              this.COIN_CONFIG[kind] = {};
            } else {
              // warn("Coin kind config not found: " + kind);
              if (kind != 0) {
                return this.getCoinConfig(0);
              }

              return null;
            }
          }

          const config = this.COIN_CONFIG[kind];
          config.asset = asset;
          return config;
        }

        getLabelCoinFont(kind) {
          const font = this.assetHolder.getLabelCoinAsset(kind);
          return font;
        }

        getNetFXConfig(kind) {
          const asset = this.assetHolder.getNetFXAsset(kind);

          if (!this.NET_FX_CONFIG[kind]) {
            if (asset) {
              this.NET_FX_CONFIG[kind] = {};
            } else {
              return null;
            }
          }

          const config = this.NET_FX_CONFIG[kind];
          config.asset = asset;
          return config;
        }

        getExtraConfig(assetName, kind) {
          let config = {};
          config.asset = this.assetHolder.getRoomItemAssets(assetName, kind);
          config.kind = kind;
          return config;
        }

        destroy() {
          this.assetHolder.destroy();
          this.assetHolder = null;
          gfNodePoolConfig.instance = null;
        }

      }

      exports('default', gfNodePoolConfig);
      gfNodePoolConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, SpriteAtlas, Font, BitmapFont, _decorator, Component, size, Color, Label, LabelOutline, Sprite, UITransform, Tween;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      _decorator = module._decorator;
      Component = module.Component;
      size = module.size;
      Color = module.Color;
      Label = module.Label;
      LabelOutline = module.LabelOutline;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Tween = module.Tween;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "cce78C6FSZIOKBYNeXzKYbf", "gfNotifyComponent", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfNotifyComponent = exports('GfNotifyComponent', (_dec = ccclass('GfNotifyComponent'), _dec2 = property(Node), _dec3 = property(SpriteAtlas), _dec4 = property(Font), _dec5 = property(BitmapFont), _dec(_class = (_class2 = class GfNotifyComponent extends Component {
        constructor(...args) {
          super(...args);
          this._isShow = false;
          this._lstMessage = [];

          _initializerDefineProperty(this, "contentNode", _descriptor, this);

          _initializerDefineProperty(this, "atlasFishNotify", _descriptor2, this);

          _initializerDefineProperty(this, "defaultFontSize", _descriptor3, this);

          _initializerDefineProperty(this, "defaultFont", _descriptor4, this);

          _initializerDefineProperty(this, "moneyFont", _descriptor5, this);

          this._defaultSpriteSize = size(40, 40);
        }

        onLoad() {}

        show(data) {}

        hide() {}

        play(data) {}

        validateData(data) {}

        onStackMessage() {
          if (this._lstMessage.length > 0) {
            const data = this._lstMessage.shift();

            this.play(data);
          } else {
            this.hide();
          }
        }

        createNotifyMessage(data) {
          this.contentNode.removeAllChildren();
          Object.values(data).forEach(element => {
            if (element['type'] === "label") {
              this.decorLabel(element);
            } else {
              this.decorSprite(element);
            }
          });
        }

        decorLabel(element) {
          const color = new Color("#FFFFFF"); //create node with label

          let node = new Node();
          node.parent = this.contentNode;
          node.layer = this.contentNode.layer;
          let label = node.addComponent(Label);
          label.string = element.str;

          if (element.color) {
            node.getComponent(Label).color = color.fromHEX(element.color);
          }

          label.fontSize = element.fontSize ? element.fontSize : this.defaultFontSize;

          if (element.outline) {
            let outline = node.addComponent(LabelOutline);
            outline.color = color.fromHEX(element.outline.color);
            outline.width = element.outline.width;
          }

          if (element.isMoney && this.moneyFont) {
            label.font = this.moneyFont;
          } else if (this.defaultFont) {
            label.font = this.defaultFont;
          }

          label.isBold = !!element.isBold;
          label.verticalAlign = Label.VerticalAlign.CENTER;
          label.updateRenderData(true);
        }

        decorSprite(element) {
          if (!this.atlasFishNotify) return;
          let node = new Node();
          node.parent = this.contentNode;
          node.layer = this.contentNode.layer;
          let sprite = node.addComponent(Sprite);
          sprite.spriteFrame = this.atlasFishNotify.getSpriteFrame(element.spriteFrame);
          node.getComponent(UITransform).width = this._defaultSpriteSize.width;
          node.getComponent(UITransform).height = this._defaultSpriteSize.height;
        }

        resetOnExit() {
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.contentNode); //Clear children

          this.contentNode && this.contentNode.removeAllChildren();
        }

        onBeforeSceneChange() {
          //reset notify
          Tween.stopAllByTarget(this.node); //Clear children

          this.contentNode && this.contentNode.removeAllChildren();
        }

        onAfterSceneChange() {
          this._isShow = false;

          if (this._lstMessage.length) {
            this.show(this._lstMessage.shift());
          } else {
            this.hide();
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gfUtilities.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfNotifyMessage.ts', './gfNotifyJackpot.ts', './gfNotifyStack.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, UITransform, director, Director, loadConfigAsync, SetZIndex, registerEvent, removeEvents, gfBaseEvents, gfBaseConfig, gfDataStore, GfNotifyMessage, GfNotifyJackpot, GfNotifyStack, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      director = module.director;
      Director = module.Director;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfNotifyMessage = module.GfNotifyMessage;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }, function (module) {
      GfNotifyStack = module.GfNotifyStack;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bc97fFVSShPybJtGLB45k0x", "gfNotifyController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfNotifyController = exports('default', (_dec = ccclass('GfNotifyController'), _dec2 = property(GfNotifyMessage), _dec3 = property(GfNotifyJackpot), _dec4 = property(GfNotifyStack), _dec(_class = (_class2 = class gfNotifyController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "notifyMessage", _descriptor, this);

          _initializerDefineProperty(this, "notifyJackpot", _descriptor2, this);

          _initializerDefineProperty(this, "notifyStack", _descriptor3, this);

          this.LOAD_CONFIG = null;
        }

        onLoad() {
          this.LOAD_CONFIG = loadConfigAsync.getConfig();
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.NOTIFY);
          setOpacity(this.node, 255);
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_NOTIFY, this.onNotify, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
        }

        updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        }

        onBeforeSceneChange() {
          this.notifyMessage && this.notifyMessage.onBeforeSceneChange();
          this.notifyJackpot && this.notifyJackpot.onBeforeSceneChange();
          this.notifyStack && this.notifyStack.onBeforeSceneChange();
        }

        onAfterSceneChange() {
          this.notifyMessage && this.notifyMessage.onAfterSceneChange();
          this.notifyJackpot && this.notifyJackpot.onAfterSceneChange();
          this.notifyStack && this.notifyStack.onAfterSceneChange();
        }

        onNotify(data) {
          if (!this.validateData(data)) return;

          if (gfBaseConfig.instance.NOTIFY_JACKPOT.array_type_notify_jackpot.indexOf(data.type) > -1) {
            const selfInfo = gfDataStore.instance.getSelfInfo();

            if (data.data[0] !== selfInfo.Username) {
              this.notifyJackpot.show(data);
            }
          } else if (this.notifyStack) {
            if (gfBaseConfig.instance.NOTIFY_TYPE.SYSTEM === data.type) {
              this.notifyMessage.show(data);
            } else {
              this.notifyStack.show(data);
            }
          } else {
            this.notifyMessage.show(data);
          }
        }

        validateData(data) {
          let isValid = false;
          const {
            LOGIN_IFRAME
          } = this.LOAD_CONFIG;
          const {
            ALL,
            IFRAME,
            APP
          } = gfBaseConfig.instance.NOTIFY_ENVIRONMENT_CONFIG;

          switch (data.environment) {
            case ALL:
              isValid = true;
              break;

            case IFRAME:
              if (LOGIN_IFRAME) isValid = true;
              break;

            case APP:
              if (!LOGIN_IFRAME) isValid = true;
              break;

            default:
              isValid = true;
              break;
          }

          return isValid;
        }

        refreshPage() {
          var _this$notifyJackpot, _this$notifyMessage;

          director.off(Director.EVENT_BEFORE_SCENE_LOADING, this.onBeforeSceneChange, this);
          director.off(Director.EVENT_AFTER_SCENE_LAUNCH, this.onAfterSceneChange, this);
          (_this$notifyJackpot = this.notifyJackpot) == null ? void 0 : _this$notifyJackpot.resetOnExit();
          (_this$notifyMessage = this.notifyMessage) == null ? void 0 : _this$notifyMessage.resetOnExit();

          if (this.notifyStack) {
            this.notifyStack.resetOnExit();
          }

          this.node.children.forEach(item => {
            item.destroy();
          });
          removeEvents(this);
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "notifyJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notifyStack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyItemStack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, SpriteAtlas, _decorator, Component, UITransform, v3, tween, stopAllActions, moveTo, fadeTo, formatUserName, SetZIndex, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
      fadeTo = module.fadeTo;
    }, function (module) {
      formatUserName = module.formatUserName;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a0d3aOdmJZDN71/zQ3uQY+Z", "gfNotifyItemStack", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfNotifyItemStack = exports('gfNotifyItemStack', (_dec = ccclass('gfNotifyItemStack'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(SpriteAtlas), _dec(_class = (_class2 = class gfNotifyItemStack extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "userName", _descriptor, this);

          _initializerDefineProperty(this, "winAmount", _descriptor2, this);

          _initializerDefineProperty(this, "iconImage", _descriptor3, this);

          _initializerDefineProperty(this, "atlasIconFish", _descriptor4, this);

          this._iconPrefix = "";
          this._isShow = false;
          this._index = void 0;
          this._config = void 0;
        }

        initObj(index) {
          this._index = index;
          this._config = {
            SPACING: 30,
            HEIGHT: this.node.getComponent(UITransform).height,
            WIDTH: this.node.getComponent(UITransform).width,
            TIME_MOVE: 0.25
          };
          this.reset();
          this.extendInit();
        }

        extendInit() {}

        updateData(dataInput) {
          let {
            data
          } = dataInput; // Override here

          this.userName.string = formatUserName(data.userName) + " ";
          this.winAmount.string = data.goldReward;
          this.userName.updateRenderData(true);
          this.winAmount.updateRenderData(true);
          this.iconImage.spriteFrame = this.atlasIconFish.getSpriteFrame(this._iconPrefix + data.itemKind);
        }

        moveToIndex(newIndex, lastItem = false) {
          if (!this.checkShow()) {
            stopAllActions(this.node);
            this.setIndex(newIndex);
            return;
          }

          const {
            SPACING,
            HEIGHT,
            TIME_MOVE
          } = this._config;
          const postStartY = -this._index * (SPACING + HEIGHT);
          const postEndY = -newIndex * (SPACING + HEIGHT);
          const posStart = v3(0, postStartY, 0);
          const posEnd = v3(0, postEndY, 0);
          this.setIndex(newIndex);
          stopAllActions(this.node);
          this.node.setPosition(posStart);
          this.node.active = true;
          setOpacity(this.node, 255);
          SetZIndex(this.node, 1);

          if (lastItem) {
            this._isShow = false;
            tween(this.node).parallel(moveTo(TIME_MOVE, posEnd.x, posEnd.y), fadeTo(TIME_MOVE, 1)).start();
          } else {
            tween(this.node).to(TIME_MOVE, {
              position: posEnd
            }).start();
          }
        }

        showItem(data) {
          this.setIndex(0);
          stopAllActions(this.node);
          this.node.active = true;
          SetZIndex(this.node, 2);
          this.playAnimShow(data);
        }

        playAnimShow(data) {
          const {
            WIDTH,
            TIME_MOVE
          } = this._config;
          const posStart = v3(-WIDTH, 0, 0);
          const posEnd = v3(0, 0, 0);
          setOpacity(this.node, 255);
          this.node.setPosition(posStart);
          tween(this.node).call(() => {
            this._isShow = true;
            this.updateData(data);
          }).to(TIME_MOVE, {
            position: posEnd
          }).start();
        }

        hideAfterDeltaTime({
          idleTime,
          timeMove
        }) {
          stopAllActions(this.node);
          tween(this.node).delay(idleTime).then(fadeTo(timeMove, 1)).call(() => {
            this._isShow = false;
            this.reset();
          }).start();
        }

        getIndex() {
          return this._index;
        }

        setIndex(index) {
          this._index = index;
        }

        checkShow() {
          return this._isShow;
        }

        reset() {
          stopAllActions(this.node);
          this.winAmount.string = "";
          this._isShow = false;
          this.node.active = false;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "userName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconImage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "atlasIconFish", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyJackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfNotifyComponent.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfLocalize.ts', './gfCustomDataType.ts', './gfActionHelper.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Layout, tween, GfNotifyComponent, gfBaseConfig, formatString, formatUserName, gfLocalize, gfNotifyConfig, stopAllActions, fadeIn, fadeOut, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Layout = module.Layout;
      tween = module.tween;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      formatString = module.formatString;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfNotifyConfig = module.gfNotifyConfig;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "35cacSvDjRDY7UMGG0j/89Q", "gfNotifyJackpot", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JPNotifySpineData = exports('JPNotifySpineData', (_dec = ccclass('JPNotifySpineData'), _dec2 = property(sp.SkeletonData), _dec(_class = (_class2 = class JPNotifySpineData {
        constructor() {
          _initializerDefineProperty(this, "type", _descriptor, this);

          _initializerDefineProperty(this, "static", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return -1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "static", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      let GfNotifyJackpot = exports('GfNotifyJackpot', (_dec3 = ccclass('GfNotifyJackpot'), _dec4 = property(sp.Skeleton), _dec5 = property(gfNotifyConfig), _dec3(_class4 = (_class5 = class GfNotifyJackpot extends GfNotifyComponent {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mainAnim", _descriptor3, this);

          _initializerDefineProperty(this, "notifyConfig", _descriptor4, this);

          this._type = -1;
          this._spineData = [];
        }

        onLoad() {
          super.onLoad();
          this.notifyConfig.forEach(item => {
            let spineData = item.spineData;
            spineData.type = item.type;

            this._spineData.push(spineData);
          });
        }

        show(data) {
          if (!this.validateData(data)) return;

          if (this._lstMessage.length < gfBaseConfig.instance.NOTIFY_JACKPOT.limited_stack_size) {
            this._lstMessage.push(data);
          }

          if (!this._isShow) {
            this._isShow = true;
            this.onStackMessage();
          }
        }

        onAfterSceneChange() {
          super.onAfterSceneChange();

          this._spineData.forEach(item => {
            let config = this.findConfigByType(item.type);
            config.spineData = item;
          });
        }

        play(dataInput) {
          const {
            type
          } = dataInput;
          this.node.active = true;
          stopAllActions(this.node);
          setOpacity(this.node, 255);
          stopAllActions(this.contentNode);
          setOpacity(this.contentNode, 0);
          const objMessage = JSON.parse(this.getMessageText(dataInput));
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          this.setupSpineAnim(type);
          this.playAnimation(type);
        }

        playAnimation(type) {
          const notifyConfig = this.findConfigByType(type);
          if (!notifyConfig) return;
          const tweenShowRichText = tween(this.contentNode).then(fadeIn(0.1));
          this.mainAnim.setAnimation(0, notifyConfig.animAppear, false);
          this.mainAnim.setAnimation(1, notifyConfig.animIdle, true);
          tween(this.node).delay(0.8).call(() => {
            tweenShowRichText.start();
          }).delay(3).call(() => {
            this.mainAnim.clearTrack(0);
          }).then(fadeOut(0.5)).call(() => {
            this.onStackMessage();
          }).start();
        }

        validateData(dataInput) {
          const str = this.getMessageText(dataInput);

          try {
            return !!JSON.parse(str);
          } catch (e) {
            return false;
          }
        }

        hide() {
          this._isShow = false;
          this.node.active = false;
        }

        setupSpineAnim(type) {
          if (this._type !== type) {
            this._type = type;
            let spineData = this.getNotifySkeletonDataByType(this._type);
            this.mainAnim.skeletonData = spineData && spineData.isValid ? spineData : this.mainAnim.skeletonData;
          }
        }

        getMessageText(dataInput) {
          const {
            data,
            type
          } = dataInput;
          const notifyConfig = this.findConfigByType(type);
          if (!notifyConfig) return;
          const textConfig = gfLocalize.instance[notifyConfig.languageKey];
          const {
            NOTIFY_CONFIG
          } = gfBaseConfig.instance;

          let str = globalThis._.cloneDeep(textConfig);

          const dataFormat = NOTIFY_CONFIG[type];
          str = formatString(str, [formatUserName(data[dataFormat.userName]), data[dataFormat.goldReward]]);
          str = str.replace(/'/g, '"');
          return str;
        }

        getNotifySkeletonDataByType(type) {
          const notifyConfig = this.findConfigByType(type);
          if (notifyConfig) return notifyConfig.spineData;
          return null;
        }

        findConfigByType(type) {
          for (let i = 0; i < this.notifyConfig.length; i++) {
            if (this.notifyConfig[i].type == type) return this.notifyConfig[i];
          }

          return null;
        }

      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "mainAnim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "notifyConfig", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyLockFish.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Component, UIOpacity, _decorator, registerEvent, removeEvents, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "51754JeHrtBa7Qn2SZKaoFF", "gfNotifyLockFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfNotifyLockFish = exports('gfNotifyLockFish', (_dec = ccclass('gfNotifyLockFish'), _dec(_class = class gfNotifyLockFish extends Component {
        onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH, this.showNotifyLockFish, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH, this.resetOnExit, this);
        }

        showNotifyLockFish() {
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
        }

        resetOnExit() {
          this.node.getComponent(UIOpacity).opacity = 0;
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyMessage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNotifyComponent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Tween, Vec3, tween, Layout, UITransform, gfDataStore, gfLocalize, gfBaseConfig, deepCopy, formatString, GfNotifyComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1978dkyay5KYKZ2rPUEufhY", "gfNotifyMessage", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfNotifyMessage = exports('GfNotifyMessage', (_dec = ccclass('GfNotifyMessage'), _dec(_class = (_class2 = class GfNotifyMessage extends GfNotifyComponent {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "speed", _descriptor, this);
        }

        onLoad() {}

        show(data) {
          if (!gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()] || !this.validateData(data)) return;
          this.sortDataMessage();

          if (!this._isShow) {
            this.runAnimShow();
          }
        }

        runAnimShow() {
          const position = gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()];
          this.node.setPosition(position.x, position.y);
          this._isShow = true;
          this.node.active = true;
          this.node.setScale(this.node.getScale().x, 0, 1);
          Tween.stopAllByTarget(this.node);
          const scaleShow = new Vec3(this.node.getScale().x, 1, 1);
          tween(this.node).to(0.5, {
            scale: scaleShow
          }).call(() => {
            this.onStackMessage();
          }).start();
        }

        validateData(data) {
          let json = this.getStringDataNotify(data).replace(/'/g, '"');

          try {
            let result = !!JSON.parse(json);

            if (result) {
              this._lstMessage.push(data);
            }

            return result;
          } catch (e) {
            return false;
          }
        }

        hide() {
          this._isShow = false;
          const scaleHide = new Vec3(this.node.getScale().x, 0, 1);
          tween(this.node).to(0.5, {
            scale: scaleHide
          }).call(() => {
            this.node.active = false;
          }).start();
        }

        play(data) {
          let json = this.getStringDataNotify(data).replace(/'/g, '"');
          let objMessage = JSON.parse(json);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          let dX = (this.contentNode.getComponent(UITransform).width + this.node.getComponent(UITransform).width) / 2;
          this.contentNode.setPosition(dX, this.contentNode.position.y);
          Tween.stopAllByTarget(this.contentNode);
          tween(this.node).delay(0).call(() => {
            const timer = 2 * dX / this.speed;
            const positionEndContent = new Vec3(-dX, this.contentNode.position.y, this.contentNode.position.z);
            tween(this.contentNode).to(timer, {
              position: positionEndContent
            }).delay(0.5).call(() => {
              this.onStackMessage();
            }).start();
          }).start();
        }

        getStringDataNotify(dataInput) {
          if (!gfLocalize || !gfLocalize.instance) return;
          const {
            data,
            message,
            type
          } = dataInput;
          let str = "";

          if (type >= 0) {
            const configTxtNotify = gfLocalize.instance.txtNotify;
            const {
              NOTIFY_CONFIG,
              NOTIFY_TYPE
            } = gfBaseConfig.instance;

            switch (type) {
              case NOTIFY_TYPE.MESSAGE_BIG_FISH:
                // big fish
                str = deepCopy(configTxtNotify.big_fish);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind].toString(), data[NOTIFY_CONFIG[type].multiple].toString(), data[NOTIFY_CONFIG[type].goldReward].toString()]);
                break;

              case NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL:
                // special skill
                str = deepCopy(configTxtNotify.special_skill[data[NOTIFY_CONFIG[type].subID]]);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DRAGON_BALL:
                str = deepCopy(configTxtNotify.dragon_balls);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].countBall], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS:
                str = deepCopy(configTxtNotify.kill_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS:
                str = deepCopy(configTxtNotify.drop_item_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].itemID], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_EVENT:
                str = deepCopy(configTxtNotify.event);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              default:
                // normal message
                str = deepCopy(configTxtNotify.message);
                str = formatString(str, [message]);
                break;
            }
          }

          return str;
        }

        sortDataMessage() {
          this._lstMessage.sort((a, b) => a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0);

          this._lstMessage.sort((a, b) => {
            const _a = {
              type: null,
              amount: null
            };
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = this.replaceAmountData(a);
            }

            const _b = {
              type: null,
              amount: null
            };
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = this.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });

          this._lstMessage = this._lstMessage.slice(0, gfBaseConfig.instance.NOTIFY_MESSAGE.limited_stack_size);
        }

        replaceAmountData(data) {
          const notifyConfig = gfBaseConfig.instance.NOTIFY_CONFIG[data.type];
          return Number(data.data[notifyConfig.goldReward].replace(/[^0-9.-]+/g, ""));
        }

        onBeforeSceneChange() {
          super.onBeforeSceneChange();
          this.node.setScale(this.node.getScale().x, 0, 1);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 320;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyStack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfNotifyComponent.ts', './gfNotifyItemStack.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, SpriteAtlas, Font, BitmapFont, Prefab, _decorator, instantiate, tween, warn, stopAllActions, GfNotifyComponent, gfNotifyItemStack;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      tween = module.tween;
      warn = module.warn;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }, function (module) {
      gfNotifyItemStack = module.gfNotifyItemStack;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "1ccabEZJ5ZP3JktQNMP0iu5", "gfNotifyStack", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfNotifyStack = exports('GfNotifyStack', (_dec = ccclass('GfNotifyStack'), _dec2 = property({
        type: Node,
        override: true,
        visible: false
      }), _dec3 = property({
        type: SpriteAtlas,
        override: true,
        visible: false
      }), _dec4 = property({
        override: true,
        visible: false
      }), _dec5 = property({
        type: Font,
        override: true,
        visible: false
      }), _dec6 = property({
        type: BitmapFont,
        override: true,
        visible: false
      }), _dec7 = property(Prefab), _dec(_class = (_class2 = (_class3 = class GfNotifyStack extends GfNotifyComponent {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "contentNode", _descriptor, this);

          _initializerDefineProperty(this, "atlasFishNotify", _descriptor2, this);

          _initializerDefineProperty(this, "defaultFontSize", _descriptor3, this);

          _initializerDefineProperty(this, "defaultFont", _descriptor4, this);

          _initializerDefineProperty(this, "moneyFont", _descriptor5, this);

          _initializerDefineProperty(this, "itemPrefab", _descriptor6, this);

          this._listItem = [];
        }

        onLoad() {
          super.onLoad();

          for (let i = 0; i <= GfNotifyStack.NOTIFY_CONFIG.MAX_ITEM; i++) {
            let item = instantiate(this.itemPrefab).getComponent(gfNotifyItemStack);
            item.node.setParent(this.node);
            item.initObj(i);

            this._listItem.push(item);
          }

          this.extendInit();
        }

        extendInit() {// Override here
        }

        show(data) {
          if (!this.formatData(data)) return;
          this.updateListMessage(data);
          if (this._isShow) return;
          stopAllActions(this.node);
          this._isShow = true;
          this.node.active = true;
          this.onStackMessage();
        }

        play(data) {
          const {
            IDLE_TIME
          } = GfNotifyStack.NOTIFY_CONFIG;
          stopAllActions(this.node);
          tween(this.node).call(() => {
            let mainItem = null;
            let listChildItem = [];

            this._listItem.forEach(item => {
              if (item.getIndex() == GfNotifyStack.NOTIFY_CONFIG.MAX_ITEM) {
                mainItem = item;
              } else {
                listChildItem.push(item);
              }
            });

            mainItem.showItem(data);
            this.moveDownChildItem(listChildItem);
          }).delay(IDLE_TIME).call(() => {
            this.onStackMessage();
          }).start();
        }

        moveDownChildItem(listItem = []) {
          listItem.forEach(item => {
            let currentIndex = item.getIndex();
            let lastItem = false;

            if (currentIndex == GfNotifyStack.NOTIFY_CONFIG.MAX_ITEM - 1) {
              lastItem = true;
            }

            item.moveToIndex(currentIndex + 1, lastItem);
          });
        }

        hide() {
          this._isShow = false;
          stopAllActions(this.node);
          const {
            IDLE_TIME,
            TIME_MOVE
          } = GfNotifyStack.CONFIG_HIDE;
          let countShow = 0;

          this._listItem.forEach(item => {
            if (item.checkShow()) countShow = countShow + 1;
          });

          let timeHide = 0;

          for (let i = 0; i < countShow; i++) {
            let item = this._listItem.find(obj => obj.getIndex() === i);

            const data = {
              idleTime: i === countShow - 1 ? 0 : (countShow - (i + 1)) * (IDLE_TIME + TIME_MOVE),
              timeMove: TIME_MOVE
            };
            timeHide = timeHide + data.idleTime + data.timeMove;
            item.hideAfterDeltaTime(data);
          }

          tween(this.node).delay(timeHide).call(() => {
            this.node.active = false;
          }).start();
        }

        updateListMessage(data) {
          if (this._lstMessage.length >= GfNotifyStack.NOTIFY_CONFIG.STACK_SIZE) {
            this._lstMessage.shift();
          }

          this._lstMessage.push(data);

          this.sortDataMessage(this._lstMessage);
        }

        formatData(dataInput) {
          if (dataInput.formatted) return true;
          let {
            data,
            type
          } = dataInput;
          let format = GfNotifyStack.NOTIFY_FORMAT[type];

          if (format) {
            const keys = Object.keys(format);
            let newData = {};
            keys.forEach(key => {
              newData[key] = data[format[key]];
            });
            dataInput.data = newData;
            dataInput.formatted = true;
            return true;
          }

          warn('Invalid message:', dataInput);
          return false;
        }

        sortDataMessage(lstMessage) {
          lstMessage.sort((a, b) => a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0);
          lstMessage.sort((a, b) => {
            const _a = {};
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = this.replaceAmountData(a);
            }

            const _b = {};
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = this.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });
          return lstMessage;
        }

        replaceAmountData(data) {
          return Number(data.data.goldReward.replace(/[^0-9.-]+/g, ""));
        }

        onBeforeSceneChange() {
          stopAllActions(this.node);

          this._listItem.forEach(item => {
            item.reset();
          });
        }

      }, _class3.NOTIFY_CONFIG = {
        STACK_SIZE: 25,
        IDLE_TIME: 1.5,
        TIME_MOVE: 0.25,
        MAX_ITEM: 3
      }, _class3.NOTIFY_TYPE = {
        BIG_FISH: 2,
        SPECIAL_SKILL: 3
      }, _class3.NOTIFY_FORMAT = {
        [_class3.NOTIFY_TYPE.BIG_FISH]: {
          userName: 0,
          itemKind: 1,
          goldReward: 2
        },
        [_class3.NOTIFY_TYPE.SPECIAL_SKILL]: {
          userName: 0,
          itemKind: 1,
          goldReward: 2
        }
      }, _class3.CONFIG_HIDE = {
        IDLE_TIME: 1.5,
        TIME_MOVE: 0.25
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfOneShotGunSkill.ts", ['cc', './gfBaseGunSkill.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfReferenceManager.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, _decorator, gfBaseGunSkill, gfDataStore, gfEventEmitter, gfBaseEvents, gfReferenceManager, getPositionInOtherNode;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseGunSkill = module.gfBaseGunSkill;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      getPositionInOtherNode = module.getPositionInOtherNode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7c96f2dzGRBN6WiF+t9AJ3V", "gfOneShotGunSkill", undefined);

      const {
        ccclass
      } = _decorator;
      let gfOneShotGunSkill = exports('gfOneShotGunSkill', (_dec = ccclass('gfOneShotGunSkill'), _dec(_class = class gfOneShotGunSkill extends gfBaseGunSkill {
        onAfterShow(data) {
          if (this._isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.LOCK_AUTO_FIRE);
            gfDataStore.instance.setLockGun(false);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, {
            DeskStation: data.DeskStation
          });
        }

        sendFireGun() {
          const myDeskStation = gfDataStore.instance.getSelfDeskStation();
          const player = gfReferenceManager.instance.getPlayerByDeskStation(myDeskStation);
          if (!player || !player.isMe) return;
          const listFish = gfDataStore.instance.getListCatchLaser();
          const data = {
            Angle: player.getGunAngle(),
            ListFish: listFish.length > 0 ? listFish : [-1],
            SkillID: this._skillID
          };
          gfDataStore.instance.setLockGun(true);
          gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.ON_SEND_FIRE_ONE_SHOT_GUN_SKILL, data);
        }

        gunFire(data, callback) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return;

          if (player.index > 1) {
            data.Angle += 180;
          }

          if (this._isMe) {
            player.effectIsMe.active = false;
          } else {
            this._nodeParent.angle = data.Angle ? data.Angle : 0;
          }

          data.mainPoint = getPositionInOtherNode(gfReferenceManager.instance.getNodeFishLayer(), player.gun), data.isSkill = true;
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_CATCH_LIST_FISH, data);
          this.onAfterGunFire(callback);
        }

        onAfterGunFire(callback) {
          if (callback && typeof callback === 'function') {
            callback();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfOverrideEngine.ts", ['cc', './gfCustomTiledAssembler.ts'], function (exports) {
  var cclegacy, gfCustomTiledAssembler;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfCustomTiledAssembler = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32b5eAam8dLFbjLylOHcuBP", "gfOverrideEngine", undefined);

      class gfOverrideEngine {
        constructor() {
          gfOverrideEngine.instance = this;
          this.overrideFunctions();
        }

        overrideFunctions() {
          gfCustomTiledAssembler.custom();
        }

        restoreToDefaults() {
          gfCustomTiledAssembler.restore();
        }

      }

      exports('default', gfOverrideEngine);
      gfOverrideEngine.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPersisNodeController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfNotifyController.ts', './gfPopupController.ts', './gfSoundBase.ts', './gfBaseConfig.ts', './gfCutSceneLayer.ts', './gfCommonRoomController.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, director, registerEvent, removeEvents, gfBaseEvents, gfNotifyController, gfPopupController, GfSoundBase, gfBaseConfig, gfCutSceneLayer, gfCommonRoomController, v3f;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNotifyController = module.default;
    }, function (module) {
      gfPopupController = module.default;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfCutSceneLayer = module.gfCutSceneLayer;
    }, function (module) {
      gfCommonRoomController = module.gfCommonRoomController;
    }, function (module) {
      v3f = module.v3f;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "9bcd7Izw+ZNDbm0/jweVcIp", "gfPersisNodeController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPersisNodeController = exports('GfPersisNodeController', (_dec = ccclass('GfPersisNodeController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = class GfPersisNodeController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "notifyController", _descriptor, this);

          _initializerDefineProperty(this, "popupController", _descriptor2, this);

          _initializerDefineProperty(this, "soundController", _descriptor3, this);

          _initializerDefineProperty(this, "cutSceneController", _descriptor4, this);

          _initializerDefineProperty(this, "commonRoomController", _descriptor5, this);
        }

        onLoad() {
          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            director.addPersistRootNode(this.node);
          }

          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.removePersisNode, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.onResizeCompleted, this);
        }

        removePersisNode() {
          const compNotify = this.notifyController.getComponent(gfNotifyController);
          compNotify.refreshPage();
          const compPopup = this.popupController.getComponent(gfPopupController);
          compPopup.refreshPage();
          const compCutSCeneLayer = this.cutSceneController.getComponent(gfCutSceneLayer);
          compCutSCeneLayer.refreshPage();
          const compCommonRoom = this.commonRoomController.getComponent(gfCommonRoomController);
          compCommonRoom.refreshPage();

          if (this.soundController) {
            const compSound = this.soundController.getComponent(GfSoundBase);
            compSound && compSound.refreshPage();
          }

          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            director.removePersistRootNode(this.node);
          }

          removeEvents(this);
        }

        onResizeCompleted() {
          this.node.scale = v3f(isNaN(gfBaseConfig.instance.realSize.Scale) ? 1 : gfBaseConfig.instance.realSize.Scale);
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyController", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupController", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "soundController", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneController", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "commonRoomController", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayAndDestroy.ts", ['cc'], function (exports) {
  var cclegacy, Component, sp, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      sp = module.sp;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "25430KmEBxJHY0rVIsXD4d+", "gfPlayAndDestroy", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPlayAndDestroy = exports('gfPlayAndDestroy', (_dec = ccclass('gfPlayAndDestroy'), _dec(_class = class gfPlayAndDestroy extends Component {
        onLoad() {
          const spine = this.node.getComponent(sp.Skeleton);
          spine.setCompleteListener(() => {
            this.node.removeFromParent();
            this.node.destroy();
          });
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts', './gfNetworkGameEvent.ts', './gfFishManager.ts', './gfWallet.ts', './gfBossController.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Node, Sprite, _decorator, Component, Button, Animation, Tween, tween, log, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfDataStore, gfReferenceManager, formatUserName, getBetValue, setBetValue, getPositionInOtherNode, getRotation, delay, fadeOut, call, setOpacity, gfNetworkGameEvent, gfFishManager, gfWallet, gfBossController, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      Button = module.Button;
      Animation = module.Animation;
      Tween = module.Tween;
      tween = module.tween;
      log = module.log;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      formatUserName = module.formatUserName;
      getBetValue = module.getBetValue;
      setBetValue = module.setBetValue;
      getPositionInOtherNode = module.getPositionInOtherNode;
      getRotation = module.getRotation;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfWallet = module.gfWallet;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "53ffflFBBhP7KzpIBzR/K/9", "gfPlayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPlayer = exports('gfPlayer', (_dec = ccclass('gfPlayer'), _dec2 = property(Label), _dec3 = property(gfWallet), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Sprite), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec(_class = (_class2 = class gfPlayer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtUserName", _descriptor, this);

          _initializerDefineProperty(this, "wallet", _descriptor2, this);

          _initializerDefineProperty(this, "txtBet", _descriptor3, this);

          _initializerDefineProperty(this, "gun", _descriptor4, this);

          _initializerDefineProperty(this, "avatar", _descriptor5, this);

          _initializerDefineProperty(this, "btnPlus", _descriptor6, this);

          _initializerDefineProperty(this, "btnMinus", _descriptor7, this);

          _initializerDefineProperty(this, "_gunIndex", _descriptor8, this);

          _initializerDefineProperty(this, "gunNode", _descriptor9, this);

          this._userID = null;
          this.isMe = false;
          this.DeskStation = -1;
          this.effectIsMe = null;
          this.effectMaxGun = null;
          this.waitingText = null;
          this.avatarAtlas = void 0;
          this.gunSprite = null;
          this.index = -1;
          this._gunValue = 0;
        }

        getGunIndex() {
          return this._gunIndex;
        }

        setGunIndex(gunIndex) {
          this._gunIndex = gunIndex;
        }

        initObj(data) {
          this.isMe = data.DeskStation === gfDataStore.instance.getSelfDeskStation();

          if (data.roomKindPromotion) {
            //has promotion gun in another room
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SHOW_QUICK_HUNT, this.index);
          }

          if (data.UserID === this._userID && !this.isMe) {
            this.updateData(data);
            return;
          }

          this.DeskStation = data.DeskStation;
          this._userID = data.UserID;
          this.reset();
          this.setActive(true);
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();

          if (this.isMe) {
            gfDataStore.instance.setCurrentSkill(null);
            gfDataStore.instance.setLockGun(false);
            this.effectIsMe.setPosition(this.node.getPosition());
            this.effectMaxGun.active = false;
            const {
              y,
              z
            } = this.effectMaxGun.getPosition();
            this.effectMaxGun.setPosition(this.node.position.x, y, z);

            if (data.BulletMultiple == 0) {
              data.BulletMultiple = getBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom());
            }

            if (data.listItem) {
              for (let i = 0; i < data.listItem.length; i++) {
                gfDataStore.instance.setListItemSkillByData(data.listItem[i]);
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM);
              }
            }
          }

          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          this._updateGun();

          if (this.isMe) {
            const config = gfDataStore.instance.getGunValue();
            const wallet = this.wallet.getDisplayWallet();
            const realWallet = this.wallet.getRealWallet();

            if (wallet < this._gunValue) {
              if (wallet < config[0]) {
                if (!this.checkExtraCondition()) {
                  if (realWallet < config[0] && (!data.skillInfo || data.skillInfo && data.skillInfo.length <= 0)) {
                    gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                    this.showPopupNoMoney();
                  }
                }
              } else {
                for (let index = config.length - 1; index >= 0; index--) {
                  const gunValue = config[index];

                  if (wallet >= gunValue) {
                    this._gunIndex = gfDataStore.instance.getBulletIndex(config[index]);

                    this._updateGun();
                  }
                }
              }
            }

            const timeHide = gfDataStore.instance.getTimeHide();

            if (timeHide && timeHide >= 30000 || timeHide == null) {
              this.effectIsMe.active = !gfDataStore.instance.isHoldingGunSkill();
            } else {
              this.effectIsMe.active = false;
            }

            gfDataStore.instance.setDataStore({
              timeHide: null
            });
          }
        }

        updateAvatar(data) {
          if (this.avatarAtlas) {
            let frameAvatar = this.avatarAtlas.getSpriteFrame(data.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatar.spriteFrame = frameAvatar;
          }
        }

        updateData(data) {
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();
          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          this._updateGun();
        }

        isActive() {
          return this.node.active;
        }

        toggleBtnPlusMinus() {
          if (this.btnMinus) this.btnMinus.active = this.isMe;
          if (this.btnPlus) this.btnPlus.active = this.isMe;
        } // _hideBtnPlusMinus() {
        //     if (this.btnMinus) this.btnMinus.active = false;
        //     if (this.btnPlus) this.btnPlus.active = false;
        // }


        updateGunData(gunIndex) {
          this._gunIndex = gunIndex;

          this._updateGun();
        }

        _updateGun() {
          if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = !(this._gunIndex === 0);
          if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = !(this._gunIndex === gfDataStore.instance.getTotalGun() - 1);
          this._gunValue = gfDataStore.instance.getGunValue()[this._gunIndex];
          this.txtBet.string = gfCurrencyCalculator.instance.formatCurrency(this._gunValue, true);

          this._playEffectChangeGun();
        }

        _playEffectChangeGun() {
          this._playEffectFire();
        }

        _playEffectFire(gunName) {
          const spriteGunNode = this.gun.getChildByName('SpriteGun');

          if (spriteGunNode) {
            if (!gunName) gunName = `gun${this._gunIndex + 1}`;

            if (this.gunSprite[gunName]) {
              this.gunNode.getComponent(Sprite).spriteFrame = this.gunSprite[gunName];
            } else {
              this.gunNode.getComponent(Sprite).spriteFrame = Object.values(this.gunSprite)[0];
            }

            spriteGunNode.getComponent(Animation).play();
          }
        }

        lockBet(isLock = false) {
          if (isLock) {
            if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = false;
            if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = false;
          } else {
            this._updateGun();
          }
        }

        onBtnPlus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex++;

          if (!this._checkMaxGun()) {
            this._gunIndex--;
            return;
          }

          if (this._gunIndex >= gfDataStore.instance.getTotalGun()) {
            this._gunIndex = 0;
          }

          this._updateGun();
        }

        _checkMaxGun() {
          if (gfDataStore.instance.getGunValue()[this._gunIndex] > this.wallet.getDisplayWallet()) {
            this.effectMaxGun.active = true;
            Tween.stopAllByTarget(this.effectMaxGun);
            setOpacity(this.effectMaxGun, 255);
            const fadeAction = tween(this.effectMaxGun);
            fadeAction.then(delay(1));
            fadeAction.then(fadeOut(2));
            fadeAction.then(call(() => {
              this.effectMaxGun.active = false;
            }));
            fadeAction.start();
            return false;
          }

          return true;
        }

        onBtnMinus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex--;

          if (this._gunIndex < 0) {
            this._gunIndex = gfDataStore.instance.getTotalGun() - 1;
          }

          this._updateGun();
        }

        onUserFire(data) {
          if (this.isMe) {
            if (gfDataStore.instance.isReachMaxNumBullet()) return;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.GUN_FIRE, this._gunIndex);
          }

          this.gun.angle = this.checkAngleByLockFish(data);

          if (!this.isMe) {
            this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

            this._updateGun();
          } else {
            setBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom(), data.BulletMultiple);
            if (this.effectIsMe.active) this.effectIsMe.active = false;

            if (data.LockedFishID > -1) {
              this._playEffectLockFish(data);
            }
          }

          this._playEffectFire();

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, data);
        }

        checkAngleByLockFish(data) {
          if (data.LockedFishID >= 0) {
            const fish = gfFishManager.instance.getFishById(data.LockedFishID);
            const startPos = getPositionInOtherNode(gfReferenceManager.instance.getNodeGameLayer(), this.gun);
            let angle = 0;

            if (fish) {
              const endPos = fish.getLockPositionByNodeSpace(gfReferenceManager.instance.getNodeGameLayer());
              angle = getRotation(endPos, startPos);

              if (this.index > 1) {
                angle += 360;
              }

              data.Angle = angle;
            }
          }

          return data.Angle;
        }

        onStartBot() {// if (!this.isMe) return;
          // this.lockBet(true);
          // const { isLockGun, skillLock } = DataStore.instance.getSelfInfo();
          // if (isLockGun && skillLock) {
          //     // wait for laser item fly to gun node
          // } else if (skillLock) {
          //     //this.changeGunLaser();
          // }
        }

        _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        }

        rotateGun(mousePos) {
          const angle = getRotation(mousePos, this.gun.worldPosition);
          this.gun.angle = this._updateAngle(angle);
        }

        getGunAngle() {
          return this.gun.angle;
        }

        forceUpdateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
          }

          this.wallet.forceUpdateWallet(value);
        }

        updateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
            log("REAL WALLET:" + gfCurrencyCalculator.instance.formatCurrency(value, true));
          }

          this.wallet.updateWallet(value);
        }

        addGoldReward(reward) {
          this.wallet.addGoldReward(reward);
        }

        addToDisplayWallet(amount) {
          this.wallet.addToDisplay(amount);

          if (amount > 0) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        }

        reset() {
          this.unscheduleAllCallbacks();
          let angle = 90;

          if (this.index == 2 || this.index == 3) {
            angle = -90;
          }

          this.gun.angle = angle;
        }

        resetOnExit() {
          this.unscheduleAllCallbacks();

          if (this.isMe) {
            if (this.effectIsMe.active) this.effectIsMe.active = false;
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
          }

          this.setActive(false);
          this.txtUserName.string = '';
          this.wallet.resetOnExit();
          this.txtBet.string = '';
          this._gunIndex = 0;
          this._gunValue = 0;
          this.avatar.spriteFrame = null;
          this.resetUserId();
        }

        setActive(active = true) {
          this.node.active = active;
        }

        resetUserId() {
          this._userID = null;
        }

        _playEffectLockFish(data) {
          const fish = gfFishManager.instance.getFishById(data.LockedFishID);

          if (fish) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, fish, this.gun);
          }
        }

        checkUpdateGunByWallet() {
          const config = gfDataStore.instance.getGunValue();
          const wallet = this.wallet.getDisplayWallet();
          const realWallet = this.wallet.getRealWallet();

          if (wallet < this._gunValue) {
            if (wallet < config[0]) {
              if (!this.checkExtraCondition() && !this.checkExtraConditionBoss()) {
                if (realWallet < config[0]) {
                  gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                  this.showPopupNoMoney();
                }

                return false;
              } else if (!this.checkExtraCondition() && this.checkExtraConditionBoss()) {
                return false;
              } else {
                return true;
              }
            }

            if (config[this._gunIndex] >= wallet) {
              for (let i = this._gunIndex - 1; i >= 0; --i) {
                if (config[i] <= wallet) {
                  this._gunIndex = i;
                  break;
                }
              }

              this._updateGun();
            }
          }

          return true;
        }

        checkUpdateGunByRealWallet() {
          const config = gfDataStore.instance.getGunValue();
          const realWallet = this.wallet.getRealWallet();
          return realWallet >= config[0];
        }

        checkExtraCondition() {
          if (!this.isMe) {
            return false;
          }

          if (gfDataStore.instance.getListSkillSkillData()[gfDataStore.instance.getSelfDeskStation()].length > 0) {
            return true;
          }
        }

        checkExtraConditionBoss() {
          var _gfBossController$ins;

          return (_gfBossController$ins = gfBossController.instance) == null ? void 0 : _gfBossController$ins.checkExtraCondition();
        }

        getWallet() {
          return this.wallet;
        }

        showPopupNoMoney() {
          if (!this.isMe) return;
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME);
        }

        activeNormalGun(active = true) {
          this.gunNode.active = active;
        }

        rotateGunByLockFish(data) {
          this.gun.angle = this.checkAngleByLockFish(data);
        }

        onDestroy() {
          this.unscheduleAllCallbacks();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtBet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnPlus", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnMinus", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_gunIndex", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "gunNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './utils.ts', './gfPlayer.ts', './gfBaseConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, SpriteFrame, SpriteAtlas, _decorator, Component, gfEventEmitter, gfBaseEvents, gfDataStore, gfReferenceManager, registerEvent, getSkillTypeBySkillID, removeEvents, convertAssetArrayToObject, gfPlayer, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getSkillTypeBySkillID = module.getSkillTypeBySkillID;
      removeEvents = module.removeEvents;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "37a30WpvLFGmIqvZRPer6t7", "gfPlayerLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPlayerLayer = exports('gfPlayerLayer', (_dec = ccclass('gfPlayerLayer'), _dec2 = property(gfPlayer), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec5 = property(SpriteAtlas), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = class gfPlayerLayer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listPlayer", _descriptor, this);

          _initializerDefineProperty(this, "listWaiting", _descriptor2, this);

          _initializerDefineProperty(this, "listGunSprite", _descriptor3, this);

          _initializerDefineProperty(this, "avatarAtlas", _descriptor4, this);

          _initializerDefineProperty(this, "effectIsMe", _descriptor5, this);

          _initializerDefineProperty(this, "effectMaxGun", _descriptor6, this);
        }

        onLoad() {
          this.node['getPlayerByDeskStation'] = this.getPlayerByDeskStation.bind(this);
          this.node['getPlayerByIndex'] = this.getPlayerByIndex.bind(this);
          this.initEvents();
          this.configAllPlayer();
          this.hideAllPlayer();
          gfReferenceManager.instance.setData({
            PlayerLayer: this.node
          });
        }

        initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, this.playerUpdateWallet, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.HIDE_IS_ME, this.hideIsMe, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.playerCatchFish, this);
          registerEvent(gfBaseEvents.GUN_SKILL.CATCH_FISH_BY_ONE_SHOT_GUN_SKILL, this.playerCatchFishBySkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, this.playerFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onReceiveLaser, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY, this.playerShowPopupNoMoney, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllPlayer, this);
        }

        configAllPlayer() {
          for (let i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].gunSprite = convertAssetArrayToObject(this.listGunSprite);
            this.listPlayer[i].avatarAtlas = this.avatarAtlas;
            this.listPlayer[i].waitingText = this.listWaiting[i];
            this.listPlayer[i].index = i;
            this.listPlayer[i].effectIsMe = this.effectIsMe;
            this.listPlayer[i].effectMaxGun = this.effectMaxGun;
          }
        }

        onReceiveLaser(DeskStation) {
          const player = this.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.lockBet(true);
          }
        }

        playerShowPopupNoMoney() {
          const player = this.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player) {
            player.showPopupNoMoney();
          }
        }

        updateListPlayer(data) {
          this.hideAllPlayer();

          for (let i = 0; i < data.length; i++) {
            const userInfo = data[i];
            const player = this.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              player.resetUserId();
              player.initObj(userInfo);
            }
          } //Make sure init position after init all player


          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_TUTORIAL);
        }

        playerJoinBoard(userInfo = null) {
          const player = this.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            player.initObj(userInfo);
            player.waitingText.active = false;
          }
        }

        playerLeaveBoard(data = null) {
          const player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.resetOnExit();
            player.waitingText.active = true;
          }
        }

        playerFire(data = null) {
          const player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            const {
              RIFLE_GUN
            } = gfBaseConfig.instance.SKILL_TYPE;

            if (getSkillTypeBySkillID(data.SkillID) === RIFLE_GUN) {
              gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.PLAYER_FIRE_RIFLE_GUN_SKILL, data);
            } else {
              player.onUserFire(data);
            }
          }
        }

        playerUpdateWallet(data) {
          const player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.updateWallet(data.Wallet);
          }
        }

        hideIsMe() {
          this.effectIsMe.active = false;
        }

        playerCatchFish(data) {
          const player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe) {
            if (data.Wallet || data.Wallet === 0) {
              player.updateWallet(data.Wallet);
            }
          }
        }

        playerCatchFishBySkill(data) {
          const player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe && (data.Wallet || data.Wallet === 0)) {
            player.updateWallet(data.Wallet);
          }
        }

        getPlayerByIndex(index) {
          return this.listPlayer[index];
        }

        getPlayerByDeskStation(deskStation) {
          if (!this.listPlayer) return null;
          let index = deskStation;

          if (gfDataStore.instance.getSelfDeskStation() >= 2) {
            index = [2, 3, 0, 1][deskStation];
          }

          return this.listPlayer[index];
        }

        hideAllPlayer() {
          for (let i = 0; i < this.listPlayer.length; ++i) {
            this.listPlayer[i].resetOnExit && this.listPlayer[i].resetOnExit();
            this.listPlayer[i].waitingText.active = true;
          }

          this.effectIsMe.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listWaiting", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listGunSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectIsMe", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "effectMaxGun", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPoolManager.ts", ['cc', './gfNodePool.ts', './utils.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfUtilities.ts'], function (exports) {
  var error, warn, log, cclegacy, gfNodePool, convertAssetArrayToObject, gfBaseEvents, gfDataStore, gfReferenceManager, gfNodePoolConfig, registerEvent, SetZIndex, removeEvents;
  return {
    setters: [function (module) {
      error = module.error;
      warn = module.warn;
      log = module.log;
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNodePool = module.default;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f6802Xn49FIqoYx4d/oZhco", "gfPoolManager", undefined);

      let POOL_TYPE = exports('POOL_TYPE', /*#__PURE__*/function (POOL_TYPE) {
        POOL_TYPE[POOL_TYPE["SpineFish"] = 0] = "SpineFish";
        POOL_TYPE[POOL_TYPE["SpriteFish"] = 1] = "SpriteFish";
        POOL_TYPE[POOL_TYPE["Bullet"] = 2] = "Bullet";
        POOL_TYPE[POOL_TYPE["NetFX"] = 3] = "NetFX";
        POOL_TYPE[POOL_TYPE["Coin"] = 4] = "Coin";
        POOL_TYPE[POOL_TYPE["LuckyEffect"] = 5] = "LuckyEffect";
        POOL_TYPE[POOL_TYPE["LabelCoin"] = 6] = "LabelCoin";
        POOL_TYPE[POOL_TYPE["BigExplosion"] = 7] = "BigExplosion";
        POOL_TYPE[POOL_TYPE["SmallExplosion"] = 8] = "SmallExplosion";
        POOL_TYPE[POOL_TYPE["FINAL_INDEX"] = 9] = "FINAL_INDEX";
        return POOL_TYPE;
      }({}));
      const MAIN_COMPONENT = {};

      class gfPoolManager {
        constructor(listPrefab) {
          this.listPrefab = void 0;
          this.pools = void 0;
          this.poolType = {};
          gfPoolManager.instance = this;
          this.listPrefab = convertAssetArrayToObject(listPrefab);
          this.initPools();
          this.initEvents();
          this.listPrefab = null;
          this.setupPoolType();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.returnAllObjectToPool, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.returnAllObjectToPool, this);
        }

        setupPoolType() {
          for (let i = 0; i < POOL_TYPE.FINAL_INDEX; ++i) {
            this.poolType[POOL_TYPE[i]] = i;
          }
        }

        initPools() {
          this.pools = []; //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish", "gfSpineFish", 25);
          this.initPool(POOL_TYPE.SpriteFish, "SpriteFish", "gfSpriteFish", 25);
          this.initPool(POOL_TYPE.Coin, "Coin", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet", "gfBullet", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX", "gfNetFX", 5); //this.initPool(POOL_TYPE.LuckyEffect, "LuckyEffect", "gfLuckyEffect", 1);

          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion", "gfExplosionAnimationClip", 1);
          this.initPool(POOL_TYPE.BigExplosion, "BigExplosion", "gfExplosionAnimationClip", 1);
        }

        getPoolsType() {
          return this.poolType;
        }

        getListPool() {
          return this.pools;
        }

        initPool(type, prefabName, mainComponent, count, maximum = 1000) {
          if (!this.listPrefab[prefabName]) {
            error("[PoolManager] Prefab not found: " + prefabName);
            return;
          }

          MAIN_COMPONENT[type] = mainComponent;

          if (MAIN_COMPONENT[type]) {
            this.pools[type] = new gfNodePool(MAIN_COMPONENT[type]);
          } else {
            this.pools[type] = new gfNodePool();
          }

          this.pools[type].init(this.listPrefab[prefabName], count, maximum);
        }
        /**
        * func createNewPool
        * @param {*} data {assetData, nodePoolPrefab, _assetName, _typeName}
        */


        createNewPool(data) {
          const {
            nodePoolPrefab,
            _assetName,
            _typeName
          } = data;
          let type = this.poolType[_typeName];

          if (!type) {
            //Auto add new poolType
            const poolSize = Object.keys(this.poolType).length;
            this.poolType[_typeName] = poolSize;
            type = poolSize;
          }

          if (!nodePoolPrefab) return;

          const component = nodePoolPrefab.data.getComponent('gfNode').__classname__;

          if (!component) return; //Init pool

          MAIN_COMPONENT[type] = component;
          this.pools[type] = new gfNodePool(MAIN_COMPONENT[type]);
          this.pools[type].init(nodePoolPrefab, 5); //store asset name buy pool type using when clear pool
          //store asset name buy pool type using when clear pool

          if (_assetName) {
            this.pools[type].assetName = _assetName;
            this.pools[type].componentName = component;
          } //Add spriteData or spineData  to NodePoolConfig


          this.updatePoolData(data);
        }
        /**
         * func updatePoolData
         * @param {*} data {assetData, _assetName, _typeName}
         */


        updatePoolData(data) {
          const {
            assetData,
            _assetName
          } = data; //Update spriteData data to NodePoolConfig

          if (assetData && assetData.length > 0) {
            gfNodePoolConfig.instance.addRoomItemAssets(_assetName, assetData);
          }
        } //remove pool when left room


        removePool(data) {
          const {
            _typeName
          } = data;

          if (!_typeName) {
            warn('removePool error type', _typeName);
            return;
          }

          if (this.pools[_typeName]) {
            this.pools[_typeName].destroy();
          }

          let index = this.pools.indexOf(this.pools[_typeName]);
          delete this.pools[index]; //Remove if this room item have asset data

          this.removeRoomAsset(data);
        } //remove asset when left room


        removeRoomAsset(data) {
          const {
            assetData,
            _assetName
          } = data; //Remove if this room item have asset data

          if (assetData && assetData.length > 0) {
            gfNodePoolConfig.instance.removeRoomItemAssets(_assetName, assetData);
          }
        }

        getConfigData(data) {
          return gfNodePoolConfig.instance.getAssetHolder().getAssetData(data);
        }

        getObjectByType(type) {
          if (!this.pools[type]) {
            error("this type do not init");
            return null;
          }

          return this.pools[type].getObj();
        }

        getObjectMainComponentByType(type) {
          return this.pools[type].getObj().getComponent(MAIN_COMPONENT[type]);
        }

        getFishByKind(kind) {
          const config = gfNodePoolConfig.instance.getFishConfig(kind);
          if (!config) return null;
          const fishType = gfNodePoolConfig.instance.isSpriteFish(kind) ? POOL_TYPE.SpriteFish : POOL_TYPE.SpineFish;
          const fishNode = this.getObjectByType(fishType);

          if (fishNode) {
            this.updateFishComponent(fishNode, fishType, config.customComponent);
            const fish = fishNode.getComponent(MAIN_COMPONENT[fishType]);
            fish.setPoolManager(this.pools[fishType]);
            fish.node.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish.initAssets(config);
            return fish;
          }

          return null;
        }

        updateFishComponent(fishNode, fishType, customComponent) {
          fishNode.getComponent('gfBaseFish')._destroyImmediate();

          fishNode.addComponent(customComponent ? customComponent : MAIN_COMPONENT[fishType]);
        }

        getFishWithData(data) {
          const fish = this.getFishByKind(data.FishKind);
          if (!fish) return null;
          fish.initFishData(data);
          return fish;
        }

        getNetFX(data) {
          let config = this.getNetFXConfig(data);
          if (!config) return;
          const netfx = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.data = data;
          netfx.initAssets(config);
          return netfx;
        }

        getNetFXConfig(data) {
          const {
            BulletMultiple,
            SkillID
          } = data;
          let kind = null;
          let config = null;

          if (SkillID) {
            kind = "gunskill" + SkillID;
            config = gfNodePoolConfig.instance.getNetFXConfig(kind);
          }

          if (!config) {
            kind = gfDataStore.instance.getBulletIndex(BulletMultiple);
            config = gfNodePoolConfig.instance.getNetFXConfig(kind);
          }

          return config;
        }

        getBulletConfig(data) {
          const {
            BulletMultiple,
            SkillID
          } = data;
          let kind = null;
          let config = null;

          if (SkillID) {
            kind = 'gunskill' + SkillID;
            config = gfNodePoolConfig.instance.getBulletConfig(kind);
          }

          if (!config) {
            kind = gfDataStore.instance.getBulletIndex(BulletMultiple);
            config = gfNodePoolConfig.instance.getBulletConfig(kind);
          }

          return config;
        }

        getBulletWithData(data) {
          const config = this.getBulletConfig(data);
          if (!config) return;
          const bullet = this.getObjectMainComponentByType(POOL_TYPE.Bullet);
          config.data = data;
          bullet.initAssets(config);
          bullet.initData(data);
          return bullet;
        }

        getCoin(kind) {
          const config = gfNodePoolConfig.instance.getCoinConfig(kind);
          if (!config) return null;
          const coin = this.getObjectMainComponentByType(POOL_TYPE.Coin);
          coin.initAssets(config);
          return coin;
        }

        getLabelCoin(isMe = true) {
          let kind = isMe ? 1 : 0;
          const config = gfNodePoolConfig.instance.getLabelCoinFont(kind);
          const label = this.getObjectMainComponentByType(POOL_TYPE.LabelCoin);
          label.initAssets(config);
          return label;
        }

        createSmallExplosion({
          position
        }) {
          const explosion = this.getObjectByType(POOL_TYPE.SmallExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          SetZIndex(explosion, 0);
          return explosion;
        }

        createBigExplosion({
          position
        }) {
          const explosion = this.getObjectByType(POOL_TYPE.BigExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          SetZIndex(explosion, 0);
          return explosion;
        }

        getLuckyEffectWithData(data) {
          const luckyeffect = this.getObjectMainComponentByType(POOL_TYPE.LuckyEffect);
          luckyeffect.initData(data);
          return luckyeffect;
        }

        returnAllObjectToPool() {
          this.pools.forEach((pool, i) => {
            log("return pool: " + i, "using: ", pool.usingNodes.length, "pool: ", pool.getSize());
            pool.returnAllToPool();
          });
        }

        getExtraAsset(typeName, kind) {
          const type = this.poolType[typeName];
          const {
            assetName,
            componentName
          } = this.pools[type];
          const config = gfNodePoolConfig.instance.getExtraConfig(assetName, kind);
          if (!config) return null;
          const asset = this.getObjectByType(type).getComponent(componentName);
          asset.initAssets(config);
          return asset;
        }

        destroy() {
          removeEvents(this);
          gfNodePoolConfig.instance.destroy();
          this.pools.forEach(pool => {
            pool.destroy();
          });
          gfPoolManager.instance = null;
        }

      }

      exports('default', gfPoolManager);
      gfPoolManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Vec3, Button, Tween, tween, UIOpacity, UITransform, isValid, gfBaseConfig, gfEventEmitter, gfBaseEvents, fadeIn, fadeOut, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      Button = module.Button;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      isValid = module.isValid;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "eb234Cads1Jt4N6YxakWEVU", "gfPopupBase", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupBase = exports('GfPopupBase', (_dec = ccclass('GfPopupBase'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = class GfPopupBase extends Component {
        constructor(...args) {
          super(...args);
          this.fadeSpeed = 0.1;
          this._initialized = false;

          _initializerDefineProperty(this, "popupTitle", _descriptor, this);

          _initializerDefineProperty(this, "contents", _descriptor2, this);

          _initializerDefineProperty(this, "overlay", _descriptor3, this);

          _initializerDefineProperty(this, "popupBackground", _descriptor4, this);

          _initializerDefineProperty(this, "btnClose", _descriptor5, this);

          this._callback = null;
          this._opacityShowOverlay = 150;
          this._fullScale = 1;
          this._showPosition = new Vec3(0, 0, 0);
          this._animStyleShow = null;
          this._animStyleHide = null;
        }

        onLoad() {
          this.node.setScale(0, 0, 0);
          this.node.setPosition(0, 0, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetState'] = this.onResetState.bind(this);
          this.initLanguage();
          this.initObj();
          this.initEvent();
          this.setAnimPopup();
          this.onResetState();
        }

        initObj() {
          if (this._initialized) return;

          if (this.contents == null) {
            this.contents = this.node;
          }

          if (this.btnClose) {
            this.btnClose.off(Button.EventType.CLICK);
            this.btnClose.on(Button.EventType.CLICK, () => {
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
              this.btnClose.getComponent(Button).interactable = false;
              this.onClose();
            }, this);
          }

          this._showPosition = new Vec3(this.contents.position.x, this.contents.position.y, 1);
          this._fullScale = 1;
        }

        show() {
          Tween.stopAllByTarget(this.node);

          if (this.contents) {
            Tween.stopAllByTarget(this.contents);
          }

          this.node.active = true;

          if (this.btnClose) {
            this.btnClose.getComponent(Button).interactable = true;
          }

          this.showWithEffect();
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.POPUP);
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
        }

        initLanguage() {}

        initEvent() {}

        showWithEffect() {
          let animation = tween(this.contents);
          let compOpacityContent = this.contents.getComponent(UIOpacity);

          if (!compOpacityContent) {
            compOpacityContent = this.contents.addComponent(UIOpacity);
          }

          compOpacityContent.opacity = 0;
          let hidePosition = null;

          switch (this._animStyleShow) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              this.node.setScale(1, 1, 1);
              animation.then(tween().parallel(fadeIn(0.3), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineOut"
              }).to(0.15, {
                scale: new Vec3(this._fullScale, this._fullScale, 1)
              }, {
                easing: "sineOut"
              })));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              animation.then(fadeIn(0.3));
              break;

            default:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              break;
          }

          if (animation != null && animation._actions.length > 0) {
            animation.start();
          }
        }

        hideWithEffect(animStyle) {
          let animation = tween(this.contents);
          let hidePosition = null;
          const style = animStyle || this._animStyleHide;

          switch (style) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              animation.then(tween().parallel(fadeOut(0.3), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineIn"
              }).to(0.15, {
                scale: new Vec3(this._fullScale - 0.1, this._fullScale - 0.1, 1)
              }, {
                easing: "sineIn"
              })).call(() => {
                this.node.active = false;
                this.onResetState();

                if (this._callback) {
                  this._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(this._showPosition.x, hidePosition.y, 1)
              }, {
                easing: "backIn"
              }).call(() => {
                this.node.active = false;
                this.onResetState();

                if (this._callback) {
                  this._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(hidePosition.x, this._showPosition.y, 1)
              }, {
                easing: "backIn"
              }).call(() => {
                this.node.active = false;
                this.onResetState();

                if (this._callback) {
                  this._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              animation.then(fadeOut(this.fadeSpeed).call(() => {
                this.node.active = false;
                this.onResetState();

                if (this._callback) {
                  this._callback();
                }
              }));
              break;

            default:
              this.node.active = false;
              this.onResetState();

              if (this._callback) {
                this._callback();
              }

              break;
          }

          if (animation && animation._actions.length > 0) {
            if (this.contents) {
              animation.start();
            }
          } else {
            this.node.active = false;
            this.onResetState();
          }
        }

        hide(animStyle) {
          this.hideWithEffect(animStyle);
        }

        getCallback() {
          return this._callback;
        }

        setCallback(callback) {
          this._callback = callback;
        }

        getInitialized() {
          return this._initialized;
        }

        setInitialized(isInitialized) {
          this._initialized = isInitialized;
        }

        onResetState() {
          if (!isValid(this.node)) return;

          if (this.contents) {
            if (!this.contents.getComponent(UIOpacity)) {
              this.contents.addComponent(UIOpacity);
            }

            this.contents.getComponent(UIOpacity).opacity = 255;
            this.contents.setPosition(this._showPosition);
          }

          this.node.setScale(0, 0, 0);
        }

        onClose() {
          let isHaveAnim = true;

          if (this._animStyleHide == gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT) {
            isHaveAnim = false;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, isHaveAnim);
        }

        onCloseByOverlay() {
          this.onClose();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contents", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupBackground", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfActionHelper.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfEventEmitter.ts', './gfPopupBase.ts', './gfEventController.ts', './gfDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, UIOpacity, screen, UITransform, isValid, sys, tween, SetZIndex, registerEvent, removeEvents, stopAllActions, gfBaseEvents, gfBaseConfig, gfEventEmitter, GfPopupBase, gfEventController, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      screen = module.screen;
      UITransform = module.UITransform;
      isValid = module.isValid;
      sys = module.sys;
      tween = module.tween;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfEventController = module.gfEventController;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "a5556p45EFFKboqKOEZaXM8", "gfPopupController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPopupController = exports('default', (_dec = ccclass('gfPopupController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = class gfPopupController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "popupSetting", _descriptor, this);

          _initializerDefineProperty(this, "popupHistoryJackpot", _descriptor2, this);

          _initializerDefineProperty(this, "popupInfo", _descriptor3, this);

          _initializerDefineProperty(this, "popupTutorial", _descriptor4, this);

          _initializerDefineProperty(this, "popupPrompt", _descriptor5, this);

          _initializerDefineProperty(this, "popupEventInfo", _descriptor6, this);

          _initializerDefineProperty(this, "popupPromotion", _descriptor7, this);

          _initializerDefineProperty(this, "overlay", _descriptor8, this);

          this._opacityOverlay = 0;
          this._popupQueue = [];
          this._joinedGame = false;
          this._listPopupIgnoreCloseByOverlay = [];
        }

        onLoad() {
          this.overlay.active = false;
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.POPUP);
          this.initEvents();
          this.setActiveAllPopup(true);
          this.setupPopupIgnoreCloseByOverlay();
          this.registerEventOverlay();
          this._opacityOverlay = this.overlay.getComponent(UIOpacity).opacity;
        }

        start() {
          this.setActiveAllPopup(false);
          const canvasSize = screen.windowSize;
          this.node.getComponent(UITransform).width = canvasSize.width;
          this.node.getComponent(UITransform).height = canvasSize.height;
        }

        setupPopupIgnoreCloseByOverlay() {
          this._listPopupIgnoreCloseByOverlay.push(this.popupPrompt, this.popupPromotion);
        }

        registerEventOverlay() {
          this.overlay.on(Node.EventType.TOUCH_END, () => {
            this.closePopupByOverlay();
          }, this);
        }

        closePopupByOverlay() {
          if (this._popupQueue && this._popupQueue.length > 0) {
            const currPopup = this._popupQueue[this._popupQueue.length - 1];

            if (this._listPopupIgnoreCloseByOverlay.indexOf(currPopup) > -1) {
              return;
            }

            currPopup.getComponent(GfPopupBase).onClose();
          }
        }

        removeEventOverlay() {
          if (!isValid(this.overlay)) return;
          this.overlay.off(Node.EventType.TOUCH_END);
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_ALL, this.closeAll, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_PROMPT, this.showPrompt, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_SETTING, this.showSetting, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_INFO, this.showInfo, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_TUTORIAL, this.onJoinGame, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY, this.showJPHistory, this);
          registerEvent(gfBaseEvents.POPUP.SHOW_POPUP_EVENT_INFO, this.showEventInfo, this);
          registerEvent(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT, this.checkShowPopupEvent, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, this.close, this);
          registerEvent(gfBaseEvents.POPUP.SHOW_POPUP_PROMOTION, this.showPromotion, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO, this.checkShowPriorityPopup, this);
        }

        onBeforeSceneChange() {
          this.closeAll();
        }

        onAfterSceneChange() {
          const promotionInfo = gfDataStore.instance.getPromotionInfo();

          if (!promotionInfo) {
            this.popupEventInfo && this.checkShowPopupEvent();
          } else if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Lobby) {
            this.popupPromotion && this.showPromotion(promotionInfo);
          }
        }

        updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        }

        checkShowPopupEvent() {
          if (!gfEventController || !gfEventController.instance || !gfEventController.instance.eventData) return;
          const canShowIntro = gfEventController.instance.checkShowIntroEvent();

          if (canShowIntro) {
            const showEventInfo = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO);

            if (!showEventInfo || !JSON.parse(showEventInfo)) {
              this.showEventInfo(true);
            }
          }

          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO, 'true');
        }

        setActiveAllPopup(active = true) {
          this.popupSetting && (this.popupSetting.active = active);
          this.popupHistoryJackpot && (this.popupHistoryJackpot.active = active);
          this.popupPrompt && (this.popupPrompt.active = active);
          this.popupTutorial && (this.popupTutorial.active = active);
          this.popupInfo && (this.popupInfo.active = active);
          this.popupEventInfo && (this.popupEventInfo.active = active);
          this.popupPromotion && (this.popupPromotion.active = active);
        }

        showEventInfo(data) {
          this._showPopup(this.popupEventInfo, data);
        }

        showJPHistory() {
          this._showPopup(this.popupHistoryJackpot);
        }

        showSetting() {
          this._showPopup(this.popupSetting);
        }

        showPrompt(data) {
          this._showPopup(this.popupPrompt, data);
        }

        showInfo() {
          this._showPopup(this.popupInfo);
        }

        showTutorial() {
          this._showPopup(this.popupTutorial);
        }

        showPromotion(data) {
          this._showPopup(this.popupPromotion, data);
        }

        checkShowPriorityPopup() {
          const promotionInfo = gfDataStore.instance.getPromotionInfo();

          if (!promotionInfo) {
            this.popupEventInfo && this.checkShowPopupEvent();
          } else if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Lobby) {
            this.popupPromotion && this.showPromotion(promotionInfo);
          }
        }

        _showPopup(currentPopup, data = null) {
          if (!currentPopup) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          this.onPopupQueue(currentPopup);
          currentPopup.show(data);
        }

        onJoinGame() {
          if (!this._joinedGame) {
            this._joinedGame = true;
            let llv = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + gfBaseConfig.instance.GameId);

            if (llv) {
              llv = JSON.parse(llv);

              if (!llv[gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT]) {
                this.showTutorial();
              }
            } else {
              this.showTutorial();
            }
          }
        }

        onPopupQueue(popup) {
          let isNew = false;

          if (this._popupQueue && this._popupQueue.length > 0) {
            const currPopup = this._popupQueue[this._popupQueue.length - 1];

            if (currPopup != popup) {
              this._popupQueue[this._popupQueue.length - 1].hide();

              isNew = true;
            }
          } else {
            this.overlay.active = true;
            this.overlay.getComponent(UIOpacity).opacity = 0;
            stopAllActions(this.overlay.getComponent(UIOpacity));
            tween(this.overlay.getComponent(UIOpacity)).to(0.3, {
              opacity: this._opacityOverlay
            }).start();
            isNew = true;
          }

          if (isNew) {
            this._popupQueue.push(popup);
          }
        }

        close(isHaveAnim = true) {
          const popup = this._popupQueue.pop();

          if (popup == null) {
            return;
          }

          popup.hide();

          if (this._popupQueue.length < 1) {
            if (isHaveAnim) {
              this.playFadeOutOverlay();
            } else {
              this.overlay.active = false;
            }

            return;
          }

          this._popupQueue[this._popupQueue.length - 1].show();
        }

        closeAll() {
          if (this._popupQueue.length < 1) {
            return;
          }

          for (let i = 0; i < this._popupQueue.length; i++) {
            this._popupQueue[i].hide(gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT);
          }

          this.playFadeOutOverlay();
          this._popupQueue = [];
        }

        refreshPage() {
          removeEvents(this);
          this.removeEventOverlay();
        }

        closePopupByName(popupName) {
          let popup = null;
          this._popupQueue = this._popupQueue.filter(function (child) {
            if (child.name === popupName) {
              popup = child;
            }

            return child.name !== popupName;
          });

          if (popup == null) {
            return;
          }

          popup.hide();

          if (this._popupQueue.length < 1) {
            this.playFadeOutOverlay();
            return;
          }

          this._popupQueue[this._popupQueue.length - 1].show();
        }

        playFadeOutOverlay() {
          stopAllActions(this.overlay.getComponent(UIOpacity));
          tween(this.overlay.getComponent(UIOpacity)).to(0.3, {
            opacity: 0
          }).call(() => {
            this.overlay.active = false;
          }).start();
        }

        onDestroy() {
          this.refreshPage();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupSetting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupHistoryJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "popupInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupTutorial", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "popupPrompt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "popupEventInfo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "popupPromotion", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupEventInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupBase.ts', './gfBaseHistory.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, ToggleContainer, Node, _decorator, GfPopupBase, GfBaseHistory, gfBaseConfig, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      ToggleContainer = module.ToggleContainer;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "f6324Tee55GW7idYUryXth9", "gfPopupEventInfo", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPopupEventInfo = exports('gfPopupEventInfo', (_dec = ccclass('gfPopupEventInfo'), _dec2 = property(ToggleContainer), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(GfBaseHistory), _dec(_class = (_class2 = class gfPopupEventInfo extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "toggleContainer", _descriptor, this);

          _initializerDefineProperty(this, "pageHistory", _descriptor2, this);

          _initializerDefineProperty(this, "pageInfo", _descriptor3, this);

          _initializerDefineProperty(this, "history", _descriptor4, this);

          _initializerDefineProperty(this, "eventUrl", _descriptor5, this);

          this._choiceIndex = void 0;
          this._initialized = false;
        }

        show(firstTime = false) {
          super.show();
          this._choiceIndex = firstTime ? 0 : 1;
          this.toggleContainer.toggleItems[this._choiceIndex].isChecked = true;
          this._initialized = true;
          this.updatePage(this._choiceIndex);
        }

        updatePage(index) {
          if (parseInt(index) == 1) {
            this.pageHistory.active = true;
            this.pageInfo.active = false;

            if (this._initialized) {
              this.loadEventHistory();
            }
          } else {
            this.pageHistory.active = false;
            this.pageInfo.active = true;
          }
        }

        onClick(event, index) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this._choiceIndex = parseInt(index);
          this.updatePage(index);
        }

        loadEventHistory() {
          const data = {
            gameId: gfBaseConfig.instance.GameId,
            url: this.eventUrl
          };
          this.history.openPanel(data);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggleContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageHistory", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventUrl", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPopupBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, gfBaseConfig, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "86ccdM66AJJAayV+JjIdCJn", "gfPopupInfo", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupInfo = exports('GfPopupInfo', (_dec = ccclass('GfPopupInfo'), _dec2 = property(Label), _dec(_class = (_class2 = class GfPopupInfo extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "pageIndexLabel", _descriptor, this);
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        updateTabs() {// To Do
        }

        show() {
          super.show();
          this.updateTabs();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfoPageView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupInfo.ts', './gfLocalize.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfCurrencyCalculator.ts', './gfDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, PageView, Button, Label, GfPopupInfo, gfLocalize, gfBaseEvents, gfEventEmitter, gfCurrencyCalculator, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      PageView = module.PageView;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "9614fioKR9P/5tS213bx92q", "gfPopupInfoPageView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupInfoPageView = exports('GfPopupInfoPageView', (_dec = ccclass('GfPopupInfoPageView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = class GfPopupInfoPageView extends GfPopupInfo {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "pageViewNode", _descriptor, this);

          _initializerDefineProperty(this, "btnNext", _descriptor2, this);

          _initializerDefineProperty(this, "btnBack", _descriptor3, this);

          _initializerDefineProperty(this, "title", _descriptor4, this);

          _initializerDefineProperty(this, "listTxtGoldReward", _descriptor5, this);

          this._currInfoID = 0;
          this._pageView = null;
        }

        initObj() {
          if (this.getInitialized()) {
            if (this._currInfoID > 0) {
              this.initPage();
            }

            return;
          }

          super.initObj();
          this.initPage();
        }

        initPage() {
          this._currInfoID = 0;
          this._pageView = this.pageViewNode.getComponent(PageView);

          this._pageView.node.on('page-turning', this.pageViewEvent, this);

          this._pageView.scrollToPage(this._currInfoID);

          this.activeButtons(this._currInfoID);
        }

        pageViewEvent() {
          this._currInfoID = this._pageView.getCurrentPageIndex();
          this.activeButtons(this._currInfoID);
        }

        initLanguage() {
          this.title[0] = gfLocalize.instance.popupTitle.infoHSC;
          this.title[1] = gfLocalize.instance.popupTitle.infoTNDB;
          this.title[2] = gfLocalize.instance.popupTitle.infoKN;
        }

        next() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID + 1);

          this._currInfoID++;
          this.activeButtons(this._currInfoID);
        }

        previous() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID - 1);

          this._currInfoID--;
          this.activeButtons(this._currInfoID);
        }

        activeButtons(id) {
          const {
            btnNext,
            btnBack,
            popupTitle
          } = this;

          const totalInfo = this._pageView.node.getChildByName('view').getChildByName('content').children.length;

          if (id >= totalInfo - 1) {
            id = totalInfo - 1;
            btnNext.getComponent(Button).interactable = false;
          } else {
            btnNext.getComponent(Button).interactable = true;
          }

          if (id <= 0) {
            id = 0;
            btnBack.getComponent(Button).interactable = false;
          } else {
            btnBack.getComponent(Button).interactable = true;
          }

          this._currInfoID = id;

          if (popupTitle) {
            if (popupTitle.getComponent(Label)) {
              // const textData = this.titles;
              popupTitle.getComponent(Label).string = this.title[this._currInfoID]; // textData[this.curInfoID];
            }
          }
        }

        setupJackpotDragonInfo() {
          const info = gfDataStore.instance.getJackpotDragonInfo();
          this.listTxtGoldReward.forEach((txt, index) => {
            if (info && info.length > 0) {
              txt.getComponent(Label).string = `: ${gfCurrencyCalculator.instance.formatCurrency(info[index], true)}`;
            } else {
              txt.getComponent(Label).string = `: ${gfCurrencyCalculator.instance.formatCurrency(gfDataStore.instance.getJackpotDragonInfo[index], true)}`;
            }
          });
        }

        resetInfo() {
          this._pageView.scrollToPage(0, 0.01);

          this._currInfoID = 0;
          this.activeButtons(this._currInfoID);
        }

        onClose() {
          super.onClose();
          this.resetInfo();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageViewNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "title", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [""];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listTxtGoldReward", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupJackpotHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLocalize.ts', './gfBaseConfig.ts', './gfPopupBase.ts', './gfBaseHistory.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, gfLocalize, gfBaseConfig, GfPopupBase, GfBaseHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "76e0epdjAJPD6DVl+YUvUni", "gfPopupJackpotHistory", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupJackpotHistory = exports('GfPopupJackpotHistory', (_dec = ccclass('GfPopupJackpotHistory'), _dec2 = property(GfBaseHistory), _dec3 = property(Label), _dec(_class = (_class2 = class GfPopupJackpotHistory extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "history", _descriptor, this);

          _initializerDefineProperty(this, "pageIndexLabel", _descriptor2, this);
        }

        show() {
          super.show();
          const data = this.getData();
          this.history.openPanel(data);
        }

        getData() {
          return {
            gameId: gfBaseConfig.instance.GameId,
            jpList: "GRAND",
            jpPrefix: "ktf_",
            url: "jackpothistory/fish"
          };
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        hide(animStyle) {
          super.hide(animStyle);
          this.history.closePanel();
        }

        initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.jackpotHistory);
          this.pageIndexLabel.string = gfLocalize.instance.txtPopup.txtPageIndex;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupPromotion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupBase.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseEvents.ts', './gfBaseConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Node, _decorator, Button, GfPopupBase, gfEventEmitter, gfLocalize, gfBaseEvents, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      Button = module.Button;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "438de+HRK5E3q/ibygEA7He", "gfPopupPromotion", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPopupPromotion = exports('gfPopupPromotion', (_dec = ccclass('gfPopupPromotion'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Label), _dec(_class = (_class2 = class gfPopupPromotion extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtMessage", _descriptor, this);

          _initializerDefineProperty(this, "txtPlayNow", _descriptor2, this);

          _initializerDefineProperty(this, "btnAgree", _descriptor3, this);

          _initializerDefineProperty(this, "txtBulletRemain", _descriptor4, this);

          this._roomKind = null;
        }

        onLoad() {
          super.onLoad();
          this.btnAgree.on(Button.EventType.CLICK, this.onClickAgree, this);
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        show(data) {
          if (!data) {
            return;
          }

          this.onResetState();
          this.unscheduleAllCallbacks();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.SHOW_PROMOTION_POPUP);
          const {
            BulletRemain,
            RoomKind
          } = data;
          this._roomKind = RoomKind;
          let txtPlayNow = gfLocalize.instance.txtPlayNow;
          let msg = gfLocalize.instance.txtPromotion;
          msg = msg.replace("xxx", BulletRemain);
          this.txtMessage.string = msg;
          this.txtBulletRemain.string = BulletRemain;
          this.txtPlayNow && (this.txtPlayNow.string = txtPlayNow);
          super.show();
        }

        onClickAgree() {
          this.onClose();
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.ON_PLAY_NOW, this._roomKind);
        }

        onDestroy() {
          this.btnClose && this.btnClose.off(Button.EventType.CLICK);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtPlayNow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnAgree", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txtBulletRemain", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupPrompt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupBase.ts', './gfBaseConfig.ts', './gfLocalize.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './loadConfigAsync.ts', './gameCommonUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Node, _decorator, isValid, director, log, GfPopupBase, gfBaseConfig, gfLocalize, gfEventEmitter, gfBaseEvents, gfNetworkGameEvent, loadConfigAsync, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      isValid = module.isValid;
      director = module.director;
      log = module.log;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "30ac7WFJ2lP9bxNIsxQRL3V", "gfPopupPrompt", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupPrompt = exports('GfPopupPrompt', (_dec = ccclass('GfPopupPrompt'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = class GfPopupPrompt extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtMessage", _descriptor, this);

          _initializerDefineProperty(this, "btnYes", _descriptor2, this);

          _initializerDefineProperty(this, "btnNo", _descriptor3, this);

          _initializerDefineProperty(this, "layoutBtn", _descriptor4, this);

          this._currData = null;
          this._dataCallback = null;
          this.isExitGame = false;
          this.delayCallback = 0.15;
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.notice);
        }

        show(data) {
          if (!this.txtMessage) return;

          if (data) {
            this._currData = data;
          }

          const {
            msg,
            type,
            callbacks
          } = this.onPromptHandler(this._currData);
          this.txtMessage.string = msg;
          this._dataCallback = null;
          this.layoutBtn.active = true;

          if (callbacks) {
            this._dataCallback = callbacks;
          }

          this.layoutBtn.active = true;

          switch (type) {
            case gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON:
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_REJECT_BUTTON:
              this.btnNo.active = true;
              this.btnYes.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_CLOSE_BUTTON:
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON:
              this.layoutBtn.active = false;
              break;

            default:
              this.layoutBtn.active = false;
              break;
          }

          super.show();
        }

        onConfirmClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          if (this.isExitGame) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH);
          }

          this.scheduleOnce(() => {
            this.onClose();

            if (this._dataCallback && this._dataCallback.confirmCallback) {
              this._dataCallback.confirmCallback();
            }

            this._currData = null;
          }, this.isExitGame ? this.delayCallback : 0);
        }

        onRejectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.onClose();

          if (this._dataCallback && this._dataCallback.rejectCallback) {
            this._dataCallback.rejectCallback();
          }

          this._currData = null;
        }

        onResetState() {
          if (!isValid(this.node)) return;
          super.onResetState();
          this.layoutBtn.active = true;
          this.btnNo.active = false;
          this.btnYes.active = false;
          this.btnClose.active = false;
          this.setCallback(null);
        }

        onPromptHandler(eventData) {
          const {
            customMsg,
            customType,
            customCallbacks,
            code
          } = eventData;
          const eventCode = customMsg || code || eventData;
          let msg = null;
          let type = null;
          let callbacks = null;
          const {
            LOGIN_IFRAME
          } = loadConfigAsync.getConfig();
          this.isExitGame = false;

          switch (eventCode) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_DIE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                this.isExitGame = true;
                callbacks = {
                  confirmCallback: () => {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              msg = gfLocalize.instance.NETWORK_MESSAGE.AUTHEN_FAIL;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                this.isExitGame = true;
                callbacks = {
                  confirmCallback: () => {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.LOGIN_IN_OTHER_DEVICE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

              if (gameCommonUtils.checkConditionCloseGameIframe()) {
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                this.isExitGame = true;
                callbacks = {
                  confirmCallback: () => {
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                  }
                };
              }

              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_POOR;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.INVALID_CURRENCY:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: () => {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN:
            case gfNetworkGameEvent.MSG_CODE.IG_DUPLICATE_LOGIN:
              if (!LOGIN_IFRAME) {
                director.emit("LOGIN_ANOTHER_DEVICE");
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN];
                type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
                this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;

                if (gameCommonUtils.checkConditionCloseGameIframe()) {
                  type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                  this.isExitGame = true;
                  callbacks = {
                    confirmCallback: () => {
                      gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                    }
                  };
                }
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM:
            case gfNetworkGameEvent.MSG_CODE.ROOM_FULL:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.OWN_LASER:
            case gfNetworkGameEvent.MSG_CODE.OWN_RIFLE:
              //Clear timeout for quick hunt
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLEAR_TIMEOUT_SHOW_POPUP_NETWORK_DIE);
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              msg = msg.replace("xxx", gfLocalize.instance.txtGameMode[eventData.roomCode]);
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY:
              if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: () => {
                    globalThis.ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME:
              if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: () => {
                    globalThis.ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: () => {
                    // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
                  }
                };
              }

              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER_NO_MONEY);
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_ACTION:
              this.scheduleOnce(this.goToLobby, 4);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_ACTION];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: () => {
                  this.unschedule(this.goToLobby);
                  this.goToLobby();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN:
              this.scheduleOnce(this.goRefeshPage, 2);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: () => {
                  this.unschedule(this.goRefeshPage);
                  this.goRefeshPage();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT:
              this.scheduleOnce(() => {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              }, 2);
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.WAITING_LOAD_SCENE_TIMEOUT:
              msg = gfLocalize.instance.txtPopup.txtLoadingRoom;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              this.scheduleOnce(this.handleFlowOutGame, 10);
              break;

            default:
              msg = gfLocalize.instance.MessagesSystem[eventCode] ? gfLocalize.instance.MessagesSystem[eventCode] : eventCode;
              type = customType || gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;

              if (customCallbacks) {
                callbacks = customCallbacks;
              }

          }

          const errorCode = code ? code : eventCode; //Just show error code, not show warning code

          if (errorCode && !gfBaseConfig.instance.POPUP_WARNING_CODE.includes(errorCode)) {
            msg += '\n';
            const txtError = gfLocalize.instance.txtPopup.txtError ? gfLocalize.instance.txtPopup.txtError : '';
            msg += '(' + txtError + errorCode + ')';
          }

          return {
            msg,
            type,
            callbacks
          };
        }

        goToLobby() {
          if (!gfEventEmitter.instance) {
            log("Game is destroyed");
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GO_LOBBY);
        }

        goRefeshPage() {
          if (!gfEventEmitter.instance) {
            log("Game is destroyed");
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
        }

        onCloseByOverlay() {}

        handleFlowOutGame() {//@TODO v213 call cc.loader.clear();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnYes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnNo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "layoutBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSetting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Toggle, Label, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Label = module.Label;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "a460cFL2v1C6LEQTORDEruY", "gfPopupSetting", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupSetting = exports('GfPopupSetting', (_dec = ccclass('GfPopupSetting'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class GfPopupSetting extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btnJackpotHistory", _descriptor, this);

          _initializerDefineProperty(this, "sfxCheckBox", _descriptor2, this);

          _initializerDefineProperty(this, "bgmCheckBox", _descriptor3, this);
        }

        start() {// [3]
        }

        initObj() {
          super.initObj();
          this.btnJackpotHistory.off('click');
          this.btnJackpotHistory.on('click', this.onBtnJPHistory, this);
          this.sfxCheckBox.off('toggle');
          this.bgmCheckBox.off('toggle');
          this.sfxCheckBox.on('toggle', this.onSFXCheckBoxTouch.bind(this), this);
          this.bgmCheckBox.on('toggle', this.onBGMCheckBoxTouch.bind(this), this);
          this.setInitialized(true);
        }

        show() {
          super.show();
          this.sfxCheckBox.getComponent(Toggle).setIsCheckedWithoutNotify(gfDataStore.instance.getIsEnableSFX());
          this.bgmCheckBox.getComponent(Toggle).setIsCheckedWithoutNotify(gfDataStore.instance.getIsEnableBGM());
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        }

        onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        }

        onSFXCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
        }

        onBGMCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnJackpotHistory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bgmCheckBox", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSettingSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, sys, ProgressBar, Slider, Label, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      sys = module.sys;
      ProgressBar = module.ProgressBar;
      Slider = module.Slider;
      Label = module.Label;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "8a501SMzE5PkIMcK0VBOwS7", "gfPopupSettingSlider", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopupSettingSlider = exports('GfPopupSettingSlider', (_dec = ccclass('GfPopupSettingSlider'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = class GfPopupSettingSlider extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bgmSliderNode", _descriptor, this);

          _initializerDefineProperty(this, "sfxSliderNode", _descriptor2, this);

          _initializerDefineProperty(this, "handlerBgm", _descriptor3, this);

          _initializerDefineProperty(this, "handlerSfx", _descriptor4, this);
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        initObj() {
          super.initObj();

          if (sys.isNative) {
            this.handlerBgm.off('touchend');
            this.handlerBgm.off('touchcancel');
            this.handlerSfx.off('touchend');
            this.handlerSfx.off('touchcancel');
            this.handlerBgm.on('touchend', () => {
              this.onBtnMusicClick();
            });
            this.handlerBgm.on('touchcancel', () => {
              this.onBtnMusicClick();
            });
            this.handlerSfx.on('touchend', () => {
              this.onBtnEffectClick();
            });
            this.handlerSfx.on('touchcancel', () => {
              this.onBtnEffectClick();
            });
            this.bgmSliderNode.off('touchend');
            this.bgmSliderNode.off('touchcancel');
            this.sfxSliderNode.off('touchend');
            this.sfxSliderNode.off('touchcancel');
            this.bgmSliderNode.on('touchend', () => {
              this.onBtnMusicClick();
            });
            this.bgmSliderNode.on('touchcancel', () => {
              this.onBtnMusicClick();
            });
            this.sfxSliderNode.on('touchend', () => {
              this.onBtnEffectClick();
            });
            this.sfxSliderNode.on('touchcancel', () => {
              this.onBtnEffectClick();
            });
          }

          this.setInitialized(true);
        }

        updateSlider() {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.sfxSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentBGMVolume();
          this.bgmSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentBGMVolume();
        }

        show() {
          super.show();
          this.updateSlider();
        }

        initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        }

        onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        }

        onSliderSFX(event) {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, event.progress);
          }
        }

        onSliderBGM(event) {
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, event.progress);
          }
        }

        onBtnMusicClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmSliderNode.getComponent(Slider).progress);
        }

        onBtnEffectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxSliderNode.getComponent(Slider).progress);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bgmSliderNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxSliderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "handlerBgm", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "handlerSfx", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopuptutorial.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfEventEmitter.ts', './gfLocalize.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfPopupBase.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Toggle, Label, sys, gfDataStore, gfEventEmitter, gfLocalize, gfBaseConfig, gfBaseEvents, GfPopupBase, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Label = module.Label;
      sys = module.sys;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "efab6qvrYlOVaOvEKXi+Mjk", "gfPopuptutorial", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfPopuptutorial = exports('GfPopuptutorial', (_dec = ccclass('GfPopuptutorial'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class GfPopuptutorial extends GfPopupBase {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "checkBox", _descriptor, this);

          _initializerDefineProperty(this, "txtBet", _descriptor2, this);

          this._defaultValueShow = 1000;
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        }

        initObj() {
          super.initObj();
          this.checkBox.getComponent(Toggle).isChecked = false;
          this.checkBox.on('toggle', this.onToggle, this);
        }

        show() {
          super.show();
          const betConfig = gfDataStore.instance.getUserBetConfig();
          const defaultBet = gfDataStore.instance.getDefaultBetConfig();
          const index = defaultBet.indexOf(this._defaultValueShow);

          if (this.txtBet) {
            this.txtBet.string = index > -1 ? gfCurrencyCalculator.instance.formatCurrency(betConfig[index], true) : this._defaultValueShow;
          }
        }

        initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.tutorial);
        }

        onToggle() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.save();
        }

        save() {
          if (!gfDataStore.instance || !gfBaseConfig.instance) return;
          const value = this.checkBox ? this.checkBox.getComponent(Toggle).isChecked : false;
          const llv = {
            [gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT]: value
          };
          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + gfBaseConfig.instance.GameId, JSON.stringify(llv));
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtBet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPromotionGun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfRifleGunSkill.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfUtilities.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCString, _decorator, sp, gfRifleGunSkill, stopAllActions, gfEventEmitter, gfDataStore, gfReferenceManager, gfBaseEvents, registerEvent, removeEvents, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCString = module.CCString;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfRifleGunSkill = module.gfRifleGunSkill;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "812baIEqBlCgYzv3qx0Z1f4", "gfPromotionGun", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfPromotionGun = exports('gfPromotionGun', (_dec = ccclass('gfPromotionGun'), _dec2 = property(CCString), _dec3 = property(CCString), _dec4 = property(CCString), _dec(_class = (_class2 = class gfPromotionGun extends gfRifleGunSkill {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "appear", _descriptor, this);

          _initializerDefineProperty(this, "shoot", _descriptor2, this);

          _initializerDefineProperty(this, "disappear", _descriptor3, this);

          this._player = null;
          this._mainSpine = null;
        }

        onLoad() {
          super.onLoad();
          this.node['updateBulletRemain'] = this.updateBulletRemain.bind(this);
          this.node['playEffectDisappear'] = this.playEffectDisappear.bind(this);
          this._mainSpine = this.gun.getComponent(sp.Skeleton);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        }

        resetChildNodeParent() {
          if (this.nodeBulletRemain) {
            this.nodeBulletRemain.parent = this.node;
          }
        }

        show(data) {
          const {
            DeskStation,
            gunData,
            isResume
          } = data;
          this._player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          this.node.active = true;
          this.DeskStation = DeskStation;
          const {
            SkillID,
            BulletRemain,
            BulletMultiple
          } = gunData;
          this._skillID = SkillID;
          this._isMe = DeskStation === gfDataStore.instance.getSelfDeskStation();
          this.nodeBulletRemain.active = this._isMe;

          if (this._isMe) {
            this.nodeBulletRemain.parent = this.node.parent;
          }

          this.updateBulletRemain(BulletRemain);
          this._player.gunNode.active = true;
          this._player.txtBet.string = formatMoney(BulletMultiple);
          isResume ? this.onResumeShowGunSkill() : this.onShowGunSkill();
        }

        onResumeShowGunSkill() {
          if (this._isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.RESET_LOCK_FISH_TARGET);
            gfDataStore.instance.setSelfInfo({
              isLockGun: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PROMOTION_GUN_APPEAR);
          }

          this._mainSpine.setAnimation(0, this.appear, false);

          this._mainSpine.setCompleteListener(() => {
            this._mainSpine.setCompleteListener(() => {});

            if (this._isMe) {
              gfDataStore.instance.setSelfInfo({
                isLockGun: false
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
            }
          });

          this._player.gunNode.active = false;
        }

        onShowGunSkill() {
          this._isMe && gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
          this._player.gunNode.active = false;

          this._mainSpine.setAnimation(0, this.appear, false);

          this._mainSpine.setCompleteListener(() => {
            this._mainSpine.setCompleteListener(() => {});

            this._isMe && gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
          });

          this._player.gunNode.active = false;
        }

        onAfterShow(data) {
          if (this._isMe && !data.isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, {
            DeskStation: data.DeskStation
          });
        }

        gunFire(data) {
          this._mainSpine.setCompleteListener(() => {});

          this._mainSpine.setAnimation(0, this.shoot, false);

          data.Angle = this._player.checkAngleByLockFish(data);
          this._nodeParent.angle = data.Angle;
          if (gfDataStore.instance.isReachMaxNumBullet()) return;

          if (this._isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.GUN_FIRE);

            if (this._player.effectIsMe.active) {
              this._player.effectIsMe.active = false;
            }

            if (data.LockedFishID > -1) {
              this._player._playEffectLockFish(data);
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, data);
        }

        updateBulletRemain(bulletRemain = 0) {
          super.updateBulletRemain(bulletRemain);

          if (!bulletRemain && this._isMe) {
            this.nodeBulletRemain.active = false;
            gfDataStore.instance.setLockGun(true);
          }
        }

        hideGunSkill() {
          this.node.active = false;
          this.nodeBulletRemain.parent = this.node;
          stopAllActions(this.node);
        }

        onBeforeHideGunSkill() {
          if (this._isMe) {
            gfDataStore.instance.setSelfInfo({
              isLockGun: false,
              skillLock: false
            });
          }
        }

        onAfterHideGunSkill() {
          if (!this._isMe) {
            return;
          }

          this._isMe && gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
        }

        playAnimationHide(forceHide = false, callback) {
          if (forceHide) {
            this.onBeforeHideGunSkill();
            this.hideGunSkill();
            this.onAfterHideGunSkill();
          } else {
            this.playEffectDisappear(callback);
          }
        }

        playEffectDisappear(callback) {
          if (this._isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
            gfDataStore.instance.setSelfInfo({
              isLockGun: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PROMOTION_GUN_DISAPPEAR);
          }

          this.nodeBulletRemain.active = false;

          this._mainSpine.setAnimation(0, this.disappear, false);

          this._mainSpine.setCompleteListener(() => {
            this._mainSpine.setCompleteListener(() => {});

            stopAllActions(this.node);

            if (callback && typeof callback == 'function') {
              callback();
            }

            this.onBeforeHideGunSkill();
            this.hideGunSkill();
            this.onAfterHideGunSkill();
          });
        }

        resetOnExit() {
          if (this._isMe) {
            this.hideGunSkill();
          }
        }

        onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "appear", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "Appear";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "shoot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "Shot";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "disappear", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "Disappear";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfQuickHuntBtn.ts", ['cc', './gfUtilities.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfNetworkGameEvent.ts'], function (exports) {
  var cclegacy, Component, _decorator, registerEvent, removeEvents, gfEventEmitter, gfBaseEvents, gfBaseConfig, gfNetworkGameEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "16dc7iwTlZDEJiQN+BSJzk4", "gfQuickHuntBtn", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfQuickHuntBtn = exports('gfQuickHuntBtn', (_dec = ccclass('gfQuickHuntBtn'), _dec(_class = class gfQuickHuntBtn extends Component {
        onLoad() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SHOW_QUICK_HUNT, this.updatePos, this);
          registerEvent(gfBaseEvents.POPUP.CLEAR_TIMEOUT_SHOW_POPUP_NETWORK_DIE, this.clearTimeoutPopup, this);
          registerEvent(gfBaseEvents.GAME_LAYER.PROMOTION_GUN_EXPIRED_OTHER_ROOM, this.timeOutPromotion, this);
          this.node.active = false;
        }

        timeOutPromotion() {
          this.node.active = false;
        }

        updatePos(index) {
          const pos = index === 0 ? gfBaseConfig.instance.POS_BTN_QUICK_HUNT.LEFT : gfBaseConfig.instance.POS_BTN_QUICK_HUNT.RIGHT;
          this.node.setPosition(pos);
          this.node.active = true;
        }

        onClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_QUICK_JOIN_ROOM);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          this.scheduleOnce(this.showPopupNetworkDie, 5);
        }

        clearTimeoutPopup() {
          this.unschedule(this.showPopupNetworkDie);
        }

        showPopupNetworkDie() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.SHOW_POPUP_PROMPT, gfNetworkGameEvent.NETWORK_DIE);
        }

        resetOnExit() {
          this.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfReferenceManager.ts", ['cc', './gfUtilities.ts', './gfBaseEvents.ts', './gfDataStore.ts'], function (exports) {
  var cclegacy, registerEvent, isEmpty, removeEvents, gfBaseEvents, gfDataStore;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      registerEvent = module.registerEvent;
      isEmpty = module.isEmpty;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "657249IrpRJl7jQccHifnQ9", "gfReferenceManager", undefined);

      class gfReferenceManager {
        constructor() {
          this.CurrentScene = void 0;
          this.FishLayer = void 0;
          this.PlayerLayer = void 0;
          this.HUDLayer = void 0;
          this.EffectLayer = void 0;
          this.GameLayer = void 0;
          this.BossFxNode = void 0;
          this.EventTrayLayer = void 0;
          gfReferenceManager.instance = this;
          this.CurrentScene = null;
          this.FishLayer = null;
          this.PlayerLayer = null;
          this.HUDLayer = null;
          this.EffectLayer = null;
          this.GameLayer = null;
          this.BossFxNode = null;
          this.EventTrayLayer = null;
          registerEvent(gfBaseEvents.COMMON.SET_REFERENCE_DATA, this.setData, this);
        }

        setData(data) {
          if (!isEmpty(data)) {
            Object.keys(data).forEach(key => {
              this[key] = data[key];
            });
          }
        }

        setBossFxNode(bossFxNode) {
          this.BossFxNode = bossFxNode;
        }

        getBossFxNode() {
          return this.BossFxNode;
        }

        getNodeFishLayer() {
          return this.FishLayer;
        }

        getNodeHUDLayer() {
          return this.HUDLayer;
        }

        getNodeGameLayer() {
          return this.GameLayer;
        }

        getPrefabFishByKind(fishKind) {
          const componentFishLayer = this.FishLayer.getComponent("gfFishLayer");
          const fish = componentFishLayer.getPrefabFishByKind(fishKind);
          return fish;
        }

        getPlayerByIndex(index) {
          const componentPlayerLayer = this.PlayerLayer.getComponent("gfPlayerLayer");
          return componentPlayerLayer.getPlayerByIndex(index);
        }

        getPlayerByDeskStation(deskStation) {
          const componentPlayerLayer = this.PlayerLayer.getComponent("gfPlayerLayer");
          return componentPlayerLayer.getPlayerByDeskStation(deskStation);
        }

        getSelfPlayer() {
          if (this.PlayerLayer) {
            const componentPlayerLayer = this.PlayerLayer.getComponent("gfPlayerLayer");
            return componentPlayerLayer.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
          }

          return null;
        }

        getEventTrayByDeskStation(deskStation) {
          if (this.EventTrayLayer) {
            const componentEventTrayLayer = this.EventTrayLayer.getComponent("gfEventTrayController");
            return componentEventTrayLayer.getEventTrayByDeskStation(deskStation);
          }

          return null;
        }

        getEffectLayer() {
          return this.EffectLayer;
        }

        getPlayerLayer() {
          return this.PlayerLayer;
        }

        getMidLayer() {
          return this.PlayerLayer.parent;
        }

        getEventTrayLayer() {
          return this.EventTrayLayer;
        }

        destroy() {
          removeEvents(this);
          gfReferenceManager.instance = null;
        }

      }

      exports('default', gfReferenceManager);
      gfReferenceManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeByEvent.ts", ['cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, Component, UITransform, _decorator, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d8f8e3C3IpHMpEL7vNTsyTu", "gfResizeByEvent", undefined);

      const {
        ccclass
      } = _decorator;
      let gfResizeByEvent = exports('default', (_dec = ccclass('gfResizeByEvent'), _dec(_class = class gfResizeByEvent extends Component {
        start() {
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.resizeNode, this);
        }

        resizeNode() {
          const {
            realSize
          } = gfBaseConfig.instance;
          this.node.getComponent(UITransform).width = realSize.Width;
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeWindow.ts", ['cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfDataStore.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, Component, view, macro, isValid, screen, ResolutionPolicy, math, Vec3, UITransform, _decorator, gfBaseEvents, gfEventEmitter, gfDataStore, gfBaseConfig, registerEvent, showFullScreenButton, removeEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      view = module.view;
      macro = module.macro;
      isValid = module.isValid;
      screen = module.screen;
      ResolutionPolicy = module.ResolutionPolicy;
      math = module.math;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      showFullScreenButton = module.showFullScreenButton;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5a086oFlJ5FGbrlGFR24pZv", "gfResizeWindow", undefined);

      const {
        ccclass
      } = _decorator;
      let gfResizeWindow = exports('default', (_dec = ccclass('gfResizeWindow'), _dec(_class = class gfResizeWindow extends Component {
        constructor(...args) {
          super(...args);
          this._callbackViewportResize = null;
        }

        start() {
          var _DataStore$instance;

          if ((_DataStore$instance = gfDataStore.instance) != null && _DataStore$instance.isPlayingLoadingTransition) {
            this.scheduleOnce(this.updateSceneSize, 0.25);
          } else {
            this.updateSceneSize();
          }

          view.setResizeCallback(this.updateSceneSize.bind(this));
          this._callbackViewportResize = this._updateButtonFullScreen.bind(this); //prevent resize event from common.js show button full screen

          window.addEventListener('resize', this._callbackViewportResize);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
        }

        _updateButtonFullScreen() {
          let isShow = true;

          if (gfDataStore && gfDataStore.instance) {
            isShow = gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Lobby;
          }

          this.scheduleOnce(() => showFullScreenButton(isShow));
        }

        updateSceneSize() {
          var _Emitter$instance;

          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
          if (!gfBaseConfig.instance || !gfBaseConfig.instance.realSize || !isValid(this.node)) return;
          const {
            realSize,
            AppSize,
            SceneBox
          } = gfBaseConfig.instance;
          const designResolution = view.getDesignResolutionSize();
          const designRatio = designResolution.width / designResolution.height;
          const frameSize = screen.windowSize;
          const screenRatio = frameSize.width / frameSize.height;
          const canvasSize = screen.windowSize;
          let scaleSize = 1;

          if (screenRatio < designRatio) {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_WIDTH);
            const maxScale = designResolution.width / AppSize.Width;
            const hScale = designRatio / screenRatio;
            scaleSize = Math.min(maxScale, hScale);
          } else {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_HEIGHT);
          }

          const heightScale = AppSize.Height / canvasSize.height;
          realSize.Width = math.clamp(canvasSize.width * heightScale, AppSize.Width, AppSize.MaxWidth);
          realSize.Scale = scaleSize;
          this.node.scale = Vec3.ONE.clone().multiplyScalar(scaleSize);
          SceneBox.Left = -(realSize.Width - AppSize.Width) / 2;
          SceneBox.Right = SceneBox.Left + realSize.Width;
          this.node.getComponent(UITransform).width = realSize.Width;
          (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.ON_SCREEN_RESIZE);

          this._updateButtonFullScreen();

          this.scheduleOnce(this._resizeFullScreenButton, 0.1);
        }

        _resizeFullScreenButton() {
          this.unscheduleAllCallbacks();
          const div_full_screen = document.getElementById('div_full_screen');
          const enterFullscreen = document.getElementById('enterFullscreen');
          const exitFullscreen = document.getElementById('exitFullscreen');

          if (div_full_screen) {
            if (enterFullscreen) {
              enterFullscreen.style.top = "0";
              enterFullscreen.style.left = "0";
              enterFullscreen.style.width = "100%";
              enterFullscreen.style.height = "100%";
              enterFullscreen.style.backgroundSize = "contain";
            }

            if (exitFullscreen) {
              exitFullscreen.style.top = "0";
              exitFullscreen.style.left = "0";
              exitFullscreen.style.width = "100%";
              exitFullscreen.style.height = "100%";
              exitFullscreen.style.backgroundSize = "contain";
            }

            div_full_screen.style.position = "absolute";
            div_full_screen.style.width = "30px";
            div_full_screen.style.height = "30px";

            if (window.innerWidth > window.innerHeight) {
              div_full_screen.style.top = "70%";
              div_full_screen.style.left = "10px";
            } else {
              div_full_screen.style.top = "10px";
              div_full_screen.style.left = "23%";
            }
          }
        }

        onDestroy() {
          window.removeEventListener('resize', this._callbackViewportResize);
          removeEvents(this);
        }

        refreshPage() {
          view.setResizeCallback(null);
          this.unscheduleAllCallbacks();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfRifleGunSkill.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseGunSkill.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfReferenceManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Label, gfBaseGunSkill, gfDataStore, gfEventEmitter, gfBaseEvents, SetZIndex, gfReferenceManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfBaseGunSkill = module.gfBaseGunSkill;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "276c67mDytFXIyQC4rN7WEq", "gfRifleGunSkill", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfRifleGunSkill = exports('gfRifleGunSkill', (_dec = ccclass('gfRifleGunSkill'), _dec2 = property(Node), _dec(_class = (_class2 = class gfRifleGunSkill extends gfBaseGunSkill {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodeBulletRemain", _descriptor, this);
        }

        bindAllFunctions() {
          super.bindAllFunctions();
          this.node['updateBulletRemain'] = this.updateBulletRemain.bind(this);
        }

        init(data) {
          super.init(data);
          this.nodeBulletRemain.parent = this.node.parent.parent;
          this.nodeBulletRemain.active = false;
          SetZIndex(this.nodeBulletRemain, 100);
        }

        playAnimationShow(data, callback) {
          const {
            gunData
          } = data;
          this.updateBulletRemain(gunData.BulletRemain);

          if (callback && typeof callback === 'function') {
            callback();
          }
        }

        onAfterShow(data) {
          if (this._isMe) {
            this.nodeBulletRemain.active = true;

            if (data.isResume) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_FIRE_CONTROLLER.IDLE_AUTO_FIRE);
            }

            gfDataStore.instance.setLockGun(false);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PLAYER_CHANGE_GUN, {
            DeskStation: data.DeskStation
          });
        }

        gunFire(data, callback) {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return;

          if (this._isMe) {
            player.effectIsMe.active = false;
          } else {
            this._nodeParent.angle = data.Angle;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, data);
          this.onAfterGunFire(callback);
        }

        updateBulletRemain(bulletRemain = 0) {
          if (!this.nodeBulletRemain) return;
          this.nodeBulletRemain.getComponent(Label).string = bulletRemain > 0 ? bulletRemain.toString() : '0';
        }

        resetChildNodeParent() {
          this.nodeBulletRemain.parent = this.node;
        }

        playAnimationHide(forceHide = false, callback) {
          this.nodeBulletRemain.active = false;

          if (callback && typeof callback === 'function') {
            callback();
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeBulletRemain", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfRoomController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfExtraNodePoolAssets.ts', './gfPoolManager.ts', './gfReferenceManager.ts', './CustomTypeShare.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Prefab, _decorator, Component, changeParent, gfBaseEvents, registerEvent, removeEvents, gfEventEmitter, gfExtraNodePoolAsset, gfPoolManager, gfReferenceManager, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfExtraNodePoolAsset = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "44253fSDQBFQK3iiIMbqFCr", "gfRoomController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfRoomController = exports('gfRoomController', (_dec = ccclass("gfRoomController"), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Prefab), _dec5 = property(Node), _dec6 = property(gfExtraNodePoolAsset), _dec7 = property({
        type: CustomAudioClip
      }), _dec8 = property({
        type: CustomAudioClip
      }), _dec9 = property(Node), _dec(_class = (_class2 = class gfRoomController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "jackpotInfo", _descriptor, this);

          _initializerDefineProperty(this, "warningBoss", _descriptor2, this);

          _initializerDefineProperty(this, "bossGadgetPrefab", _descriptor3, this);

          _initializerDefineProperty(this, "bossNode", _descriptor4, this);

          _initializerDefineProperty(this, "extraNodePoolAssets", _descriptor5, this);

          _initializerDefineProperty(this, "musicList", _descriptor6, this);

          _initializerDefineProperty(this, "sfxList", _descriptor7, this);

          _initializerDefineProperty(this, "bossFXNode", _descriptor8, this);
        }

        onLoad() {
          this.initEvents();
          this.setupGameRoom();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.closeScene, this); //registerEvent(EventsCode.PERSIST_ROOM.ON_AFTER_ADD_GAME_LAYER, this.setupGameRoom, this);
        }

        setupGameRoom() {
          this.addBossIntro();
          this.addJackpotInfo();
          this.addBoss();
          this.addBossFX();
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.ADD_EXTRA_SOUND, this.musicList, this.sfxList);
          gfReferenceManager.instance.setBossFxNode(this.bossFXNode);
          this.initRoomAsset();
        }

        initRoomAsset() {
          //Add new sprite pool and asset
          const newPoolSpriteData = this.extraNodePoolAssets.getArrNewPoolSpriteConfig();

          for (let i = 0; i < newPoolSpriteData.length; i++) {
            gfPoolManager.instance.createNewPool(newPoolSpriteData[i]);
          } //Update sprite to pool


          const extraPoolSpriteData = this.extraNodePoolAssets.getArrExtraPoolSpriteAsset();

          for (let i = 0; i < extraPoolSpriteData.length; i++) {
            gfPoolManager.instance.updatePoolData(extraPoolSpriteData[i]);
          } //Add new spine pool and asset


          const newPoolSpineData = this.extraNodePoolAssets.getArrNewPoolSpineConfig();

          for (let i = 0; i < newPoolSpineData.length; i++) {
            gfPoolManager.instance.createNewPool(newPoolSpineData[i]);
          } //Update spine to pool


          const extraPoolSpineData = this.extraNodePoolAssets.getArrExtraPoolSpineAsset();

          for (let i = 0; i < extraPoolSpineData.length; i++) {
            gfPoolManager.instance.updatePoolData(extraPoolSpineData[i]);
          }
        }

        addBossIntro() {
          if (!this.warningBoss) return;
          changeParent(this.warningBoss, gfReferenceManager.instance.getMidLayer());
        }

        addJackpotInfo() {
          this.jackpotInfo.active = true;
          changeParent(this.jackpotInfo, gfReferenceManager.instance.getMidLayer());
        }

        addBoss() {// gfPoolManager.instance.addBossFromNode(this.bossNode);
        }

        removeBoss() {
          gfPoolManager.instance.releaseBoss();
        }

        addBossFX() {
          changeParent(this.bossFXNode, gfReferenceManager.instance.getEffectLayer());
          this.bossFXNode.active = true;
          this.bossFXNode.setSiblingIndex(this.bossFXNode.parent.children.length);
        }

        closeScene() {
          this.removeJPInfoInRoom();
          this.removeWarningInRoom();
          this.removeSoundInRoom();
          this.removeItemInRoom();
          this.removeBossFxNode();
          this.removeBoss();
        }

        removeSoundInRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.PERSIST_ROOM.REMOVE_EXTRA_SOUND, this.musicList, this.sfxList);
        }

        removeJPInfoInRoom() {
          this.jackpotInfo.active = false;
          this.jackpotInfo.removeFromParent();
          this.jackpotInfo.destroy();
        }

        removeWarningInRoom() {
          this.warningBoss.removeFromParent();
          this.warningBoss.destroy();
        }

        removeItemInRoom() {
          //Remove node pool and sprite
          const newPoolSpriteData = this.extraNodePoolAssets.getArrNewPoolSpriteConfig();

          for (let i = 0; i < newPoolSpriteData.length; i++) {
            gfPoolManager.instance.removePool(newPoolSpriteData[i]);
          } //Remove node pool and spine


          const newPoolSpineData = this.extraNodePoolAssets.getArrNewPoolSpineConfig();

          for (let i = 0; i < newPoolSpineData.length; i++) {
            gfPoolManager.instance.removePool(newPoolSpineData[i]);
          } //Remove only sprite


          const extraPoolSpriteData = this.extraNodePoolAssets.getArrExtraPoolSpriteAsset();

          for (let i = 0; i < extraPoolSpriteData.length; i++) {
            gfPoolManager.instance.removeRoomAsset(extraPoolSpriteData[i]);
          } //Remove only spine


          const extraPoolSpineData = this.extraNodePoolAssets.getArrExtraPoolSpineAsset();

          for (let i = 0; i < extraPoolSpineData.length; i++) {
            gfPoolManager.instance.removeRoomAsset(extraPoolSpineData[i]);
          }
        }

        removeBossFxNode() {
          this.bossFXNode.active = false;
          this.bossFXNode.removeFromParent();
          this.bossFXNode.destroy();
        }

        onDestroy() {
          //this.removeSoundInRoom();
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotInfo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "warningBoss", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bossGadgetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "bossNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "extraNodePoolAssets", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "bossFXNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfRoundStartTime.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './gfNetworkParser.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, macro, loadConfigAsync, gfBaseEvents, gfNetworkGameEvent, gfNetworkParser, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      macro = module.macro;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4f1321ZRMhB/7Nw+JcANzHI", "gfRoundStartTime", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfRoundStartTime = exports('gfRoundStartTime', (_dec = ccclass('gfRoundStartTime'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = class gfRoundStartTime extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lblTime", _descriptor, this);

          this._currentTime = void 0;
        }

        onLoad() {
          const CONFIG = loadConfigAsync.getConfig();

          if (CONFIG.IS_PRODUCTION) {
            this.node.active = false;
            return;
          }

          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LISTUSER_BOARD, this.onListUserOnBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CHANGE_ROUND, this.onGameChangeRound.bind(this));
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
        }

        onListUserOnBoard(data) {
          const {
            RoomData,
            ServerTime
          } = data;
          const roundStartTime = RoomData.RoundStartTime;

          if (roundStartTime) {
            this.onShowTimeRound(roundStartTime, ServerTime);
          }
        }

        onGameChangeRound(data) {
          const roundStartTime = data.RoundStartTime;

          if (roundStartTime) {
            this.onShowTimeRound(roundStartTime, gfDataStore.instance.getTime());
          }
        }

        onShowTimeRound(RoundStartTime = 0, ServerTime = 0) {
          this._currentTime = Math.round((ServerTime - RoundStartTime) / 1000);
          this.lblTime.string = this._currentTime.toString();
          this.schedule(this.tick, 1, macro.REPEAT_FOREVER);
        }

        tick() {
          this._currentTime++;
          this.lblTime.string = this._currentTime.toString();
        }

        resetOnExit() {
          this.unscheduleAllCallbacks();
          this._currentTime = 0;
          this.lblTime.string = "";
        }

        onDestroy() {
          this.resetOnExit();
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSetOrientation.ts", ['cc'], function (exports) {
  var cclegacy, Component, view, macro, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      view = module.view;
      macro = module.macro;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fc8043iTNNPd5VcsxcT3jde", "gfSetOrientation", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfSetOrientation = exports('GfSetOrientation', (_dec = ccclass('GfSetOrientation'), _dec(_class = class GfSetOrientation extends Component {
        onLoad() {
          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSideMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Vec3, Tween, tween, gfBaseConfig, gfBaseEvents, gfEventEmitter, SetZIndex, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "aab42cuFs1K7axaNphBxV/A", "gfSideMenu", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfSideMenu = exports('GfSideMenu', (_dec = ccclass('GfSideMenu'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class GfSideMenu extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "nodeMove", _descriptor, this);

          _initializerDefineProperty(this, "frameWidth", _descriptor2, this);

          _initializerDefineProperty(this, "iconHide", _descriptor3, this);

          this.isHide = void 0;
          this.scheduleHide = null;
          this.isActionDone = true;
        }

        onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.MID_Z_INDEX.MENU);
          this.resetSideMenu();
          this.scheduleHide = this.hideSideBar.bind(this);
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
        }

        updateSceneSize() {
          this.node.setPosition(gfBaseConfig.instance.realSize.Width / 2, this.node.position.y, this.node.position.z);
        }

        onInfoClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        }

        onExitClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        }

        onSettingClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING); //PopupController.instance.showSetting();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        }

        onJPHistoryClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        }

        onBtnHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
        }

        onHideClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.hideSideBar();
        }

        hideSideBar() {
          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          let pos = new Vec3(-this.frameWidth, 0, 1);
          this.isHide = !this.isHide;
          this.iconHide.setScale(-this.iconHide.scale.x, this.iconHide.scale.y);

          if (this.isHide) {
            pos = new Vec3(5, 0, 1);
          } else {
            this.scheduleOnce(this.scheduleHide, 3);
          }

          let baseEasing = this.isHide ? "sineIn" : "sineOut";
          Tween.stopAllByTarget(this.nodeMove);
          tween(this.nodeMove).to(0.3, {
            position: pos
          }, {
            easing: baseEasing
          }).call(() => {
            this.isActionDone = true;
          }).start();
        }

        resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.iconHide.setScale(new Vec3(-1, 1, 1));
          Tween.stopAllByTarget(this.nodeMove);
          this.nodeMove.setPosition(5, 0, 1);
          this.isActionDone = true;
        }

        resetOnExit() {
          this.resetSideMenu();
          this.unscheduleAllCallbacks();
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "frameWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 90;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconHide", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSoundBase.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfDataStore.ts', './gfBaseConfig.ts', './SoundPlayerImpl.ts', './gfWebSoundPlayer.ts', './gfNativeSoundPlayer.ts'], function (exports) {
  var cclegacy, warn, game, Game, sys, log, Node, director, AudioSource, _decorator, gfBaseEvents, registerEvent, removeEvents, gfDataStore, gfBaseConfig, SoundPlayerImpl, gfWebSoundPlayer, gfNativeSoundPlayer;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      log = module.log;
      Node = module.Node;
      director = module.director;
      AudioSource = module.AudioSource;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SoundPlayerImpl = module.SoundPlayerImpl;
    }, function (module) {
      gfWebSoundPlayer = module.gfWebSoundPlayer;
    }, function (module) {
      gfNativeSoundPlayer = module.gfNativeSoundPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8ee22qaiExGPqA1k6oJTZ63", "gfSoundBase", undefined);

      const SoundStateEnum = {
        NONE: 0,
        PLAYING: 1
      };
      const {
        ccclass,
        property
      } = _decorator;
      let GfSoundBase = exports('GfSoundBase', (_dec = ccclass('GfSoundBase'), _dec(_class = class GfSoundBase extends SoundPlayerImpl {
        constructor(...args) {
          super(...args);
          this.scheduleResetVolume = null;
          this.currSoundBigwin = null;
          this.coinLoopId = null;
          this.isGameHided = false;
          this.oldCurrentTime = 0;
        }

        onLoad() {
          this.loadSoundPlayerImpl();
          this.updateMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.updateEffectVolume(gfDataStore.instance.getCurrentSFXVolume(), true);
          this.initEvents();
        }

        loadSoundPlayerImpl() {
          this._checkDuplicateAudioFile();

          this.node.setSiblingIndex(this.node.parent.children.length + 1);
          this.loadCacheConfig();

          if (this.isDebug) {
            warn("musicList", this.musicList.map(soundObj => soundObj.soundId));
            warn("sfxList", this.sfxList.map(soundObj => soundObj.soundId));
          }

          this.node.on('SET_UP_AUDIO_DATABASE', this._loadDynamicSounds.bind(this));
          game.on(Game.EVENT_HIDE, this._onEventHide, this);
          game.on(Game.EVENT_SHOW, this._onEventShow, this);
          this.isWebSound = sys.isBrowser == true && !!globalThis.Howl;

          if (this.isWebSound) {
            this._soundPlayer = new gfWebSoundPlayer();
          } else {
            this._soundPlayer = new gfNativeSoundPlayer();
          }

          this._soundPlayer.init(this.musicList, this.sfxList, this.node);

          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(this.sfxList, () => {});

            this._soundPlayer.loadMusicList(this.musicList, () => {
              this.onMusicListLoaded();
            });
          }
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.stopAllAudio, this);
          registerEvent(gfBaseEvents.SOUND.RESET_VOLUME, this.onResumeSound, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, this.playBackGroundMusic, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.updateMusicVolume, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.updateEffectVolume, this);
          registerEvent(gfBaseEvents.PERSIST_ROOM.ADD_EXTRA_SOUND, this.addExtraSound, this);
          registerEvent(gfBaseEvents.PERSIST_ROOM.REMOVE_EXTRA_SOUND, this.removeExtraSound, this);
        }

        addExtraSound(listMusic, listSfx) {
          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(listSfx, () => {});

            this._soundPlayer.loadMusicList(listMusic, () => {
              this.onMusicListLoaded();
              this.loadExtraSoundMusicComplete(listMusic);
            });
          } else {
            if (listMusic) {
              this._soundPlayer.loadDynamicSounds(listMusic);
            }

            if (listSfx) {
              this._soundPlayer.loadDynamicSounds(listSfx);
            }
          } //warn("addExtraSound", this._soundPlayer)

        }

        onMusicListLoaded() {
          if (!this.node.isValid) {
            return;
          }

          this._hasAudioContext = globalThis.Howler.ctx && globalThis.Howler.ctx.state === 'running';

          if (!this._hasAudioContext) {
            this._waitForUserGesture();
          } else {
            this._soundPlayer.skipGesture();

            if (gfDataStore.instance.getCurBGMusic()) {
              this.playBackGroundMusic(gfDataStore.instance.getCurBGMusic(), true);
            }
          }
        }

        removeExtraSound(listMusic, listSfx) {
          this._soundPlayer.removeExtraSound(listMusic, listSfx); //warn("removeExtraSound", this._soundPlayer)

        }

        loadCacheConfig() {
          const isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          const isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null || isEnableBGM != undefined ? JSON.parse(isEnableBGM.toString()) : true;
          this.isEnableSFX = isEnableSFX != null || isEnableSFX != undefined ? JSON.parse(isEnableSFX.toString()) : true;
          gfDataStore.instance.setDataStore({
            "isEnableBGM": this.isEnableBGM,
            "isEnableSFX": this.isEnableSFX
          });
          let effectVolume = 0;
          let musicVolume = 0;

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            let storeMusicVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME);

            if (storeMusicVolume != null) {
              let volume = parseFloat(storeMusicVolume);

              if (this.isEnableBGM && volume > 0) {
                musicVolume = volume;
              }
            }

            let storeEffectVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME);

            if (storeEffectVolume != null) {
              let volume = parseFloat(storeEffectVolume);

              if (this.isEnableSFX && volume > 0) {
                effectVolume = volume;
              }
            }
          }

          if (this.isEnableBGM && !musicVolume) musicVolume = 1;
          if (this.isEnableSFX && !effectVolume) effectVolume = 1;
          gfDataStore.instance.setCurrentBGMVolume(musicVolume);
          gfDataStore.instance.setCurrentSFXVolume(effectVolume);
        }

        _onEventHide() {
          this.stopAllEffects();

          super._onEventHide();

          this.isGameHided = true;
        }

        _onEventShow() {
          this.stopAllEffects();

          super._onEventShow();

          this.isGameHided = false;
        }

        _startPlayWithUserGesture(ev) {
          log(`[SoundPlayerImpl] start sound with user gesture`);
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
          globalThis.Howler.ctx.resume().then(() => {
            this._soundPlayer.resumeWithGesture();

            if (!this.isGameHided && this._soundPlayer._gamePaused) {
              this._soundPlayer._gamePaused = false;
            }
          });
        }

        playFishSFX(id, loop = false, ratio = 1) {
          const volume = gfDataStore.instance.getCurrentSFXVolume() * ratio;
          let dataSfx = null;
          dataSfx = this.playSfxOneShot(id, volume, loop);
          return dataSfx;
        }

        playFishBGM(id, loop = false, ratio = 1) {
          const volume = gfDataStore.instance.getCurrentBGMVolume() * ratio;
          const soundID = this.playMusic(id, loop, volume);
          return soundID;
        }

        getCurrentMusicIsPlaying() {
          var _this$_soundPlayer$ge, _this$_soundPlayer$ge2;

          if (this.isWebSound) return (_this$_soundPlayer$ge = this._soundPlayer.getCurrentMusic()) == null ? void 0 : _this$_soundPlayer$ge.playing();
          return (_this$_soundPlayer$ge2 = this._soundPlayer.getCurrentMusic()) == null ? void 0 : _this$_soundPlayer$ge2.playing;
        }

        updateMusicVolume(_musicVolume) {
          _musicVolume = parseFloat(_musicVolume);
          this.setMusicVolume(_musicVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME, _musicVolume.toFixed(2));
          }

          if (_musicVolume <= 0) {
            this.isEnableBGM = false;
          } else {
            this.isEnableBGM = true;
          }

          gfDataStore.instance.setIsEnableBGM(this.isEnableBGM);
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString()); // this.isEnableBGM = true; // Allways true, only set volume

          this.MUSIC_VOLUME = gfDataStore.instance.setCurrentBGMVolume(_musicVolume);
        }

        updateEffectVolume(_effectVolume, init = false) {
          _effectVolume = parseFloat(_effectVolume);
          this.setEffectVolume(_effectVolume);
          gfDataStore.instance.setCurrentSFXVolume(_effectVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME, _effectVolume.toFixed(2));
          }

          if (_effectVolume <= 0) {
            this.isEnableSFX = false;
          } else {
            this.isEnableSFX = true;
          }

          gfDataStore.instance.setIsEnableSFX(this.isEnableSFX);
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());

          if (!init && director) {
            director.emit('UPDATE_SFX_SETTING', this.isEnableSFX);
          }
        }

        playBackGroundMusic(data, init = false) {}

        onResumeSound() {
          if (!gfDataStore || !gfDataStore.instance) return;
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume());
        }

        setMusicVolume(volume) {
          volume = volume < 0 ? 0 : volume;
          this.musicVolume = volume;

          this._soundPlayer.setMusicVolume(volume);
        }

        stopSound(dataSfx) {
          if (!dataSfx) return;
          this.stopSfxOneShot(dataSfx);
        }

        getDuration(dataSfx) {
          if (!dataSfx) return 0;

          if (!this.isWebSound) {
            return dataSfx.duration;
          } else {
            return dataSfx.clip.duration();
          }
        }

        checkIsIphone() {
          return sys.OS.IOS && sys.isNative;
        }

        getPlayState(id) {
          if (id !== 0 && !id) return SoundStateEnum.NONE;
          let state = SoundStateEnum.NONE;

          if (!this.isWebSound) {
            switch (id.state) {
              case AudioSource.AudioState.PLAYING:
                state = SoundStateEnum.PLAYING;
                break;
            }
          } else {
            if (typeof id != 'number') {
              if (id.playing) state = SoundStateEnum.PLAYING;
            }
          }

          return state;
        }

        loadExtraSoundMusicComplete(listMusic) {
          listMusic.forEach(music => {
            if (this._soundPlayer.currentMusic && this._soundPlayer.currentMusic === music) {
              this._soundPlayer.musicInstance = this._soundPlayer.howlMap[this._soundPlayer.currentMusic.audioFile._uuid];

              if (this._hasAudioContext) {
                this._soundPlayer.resumeWithGesture();
              }
            }
          });
        }

        onDestroy() {
          removeEvents(this);
          super.onDestroy();
        }

        refreshPage() {
          this.stopAllAudio();
          this.destroy();
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSoundController.ts", ['cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfUtilities.ts', './gfSoundBase.ts', './gfActionHelper.ts'], function (exports) {
  var cclegacy, _decorator, gfBaseConfig, gfBaseEvents, gfDataStore, registerEvent, removeEvents, GfSoundBase, stopAllActions;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d4a44ZS5/BNTpFxh/3WVu13", "gfSoundController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfSoundController = exports('GfSoundController', (_dec = ccclass('GfSoundController'), _dec(_class = class GfSoundController extends GfSoundBase {
        initEvents() {
          super.initEvents();
          this.scheduleResetVolume = this.onResumeSound.bind(this);
          this.currSoundBigwin = null;
          registerEvent(gfBaseEvents.SOUND.GUN_FIRE, this.playSfxFire, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playSfxWaveTransition, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, this.playSfxRoundSwitch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GOLD, this.playSfxGold, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_CATCH, this.playSfxCatch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_BOMB, this.playSfxBomb, this);
          registerEvent(gfBaseEvents.SOUND.BIG_WIN, this.playSfxBigwin, this);
          registerEvent(gfBaseEvents.SOUND.MEGA_WIN, this.playSfxMegawin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_BIG_WIN, this.stopSfxBigWin, this);
          registerEvent(gfBaseEvents.SOUND.FIRE_LASER, this.playSfxFireLaser, this);
          registerEvent(gfBaseEvents.SOUND.STOP_ALL_AUDIO, this.stopAllAudio, this);
          registerEvent(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND, this.resumeSoundBackground, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER, this.playSfxGetItemLaser, this);
          registerEvent(gfBaseEvents.SOUND.CLICK_BET, this.playSFXClickBet, this);
          registerEvent(gfBaseEvents.SOUND.CLICK, this.playSfxClick, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, this.playFishSfxByName, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_MUSIC_BY_NAME, this.playFishMusic, this);
          registerEvent(gfBaseEvents.SOUND.STOP_SOUND, this.stopSound, this);
          registerEvent(gfBaseEvents.SOUND.STOP_ALL_EFFECT, this.stopAllEffects, this);
        }

        playFishSfxByName(data) {
          const {
            name,
            loop,
            ratio,
            sound,
            callBack
          } = data;

          if (sound) {
            const soundId = this.playFishSFX(name, loop, ratio);

            if (typeof callBack === "function") {
              callBack(soundId);
            }
          } else {
            this.playFishSFX(name, loop, ratio);
          }
        }

        playFishMusic(soundName, loop) {
          this.playFishBGM(soundName, loop);
        }

        resumeSoundBackground() {
          this.playBackGroundMusic(gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
        }

        playBackGroundMusic(data, init = false) {
          if (gfDataStore.instance.getCurBGMusic() === data && !init && this.getCurrentMusicIsPlaying() || this.isGameHided) return;
          this.unscheduleAllCallbacks();
          stopAllActions(this._soundPlayer._gameNode);
          this.onResumeSound();

          switch (data) {
            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              this.playFishBGM("bgmMain", true);
              break;

            default:
              if (data && typeof data === 'string') {
                this.playFishBGM(data, true);
              }

              break;
          }

          gfDataStore.instance.setCurBGMusic(data);
        }

        playSfxCatch() {
          this.playFishSFX("sfxCatch");
        }

        playSfxGold() {
          this.playFishSFX("sfxGold");
        }

        playSfxFire() {
          this.playFishSFX("sfxGun_fire");
        }

        playSfxBigwin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxBig_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        }

        playSfxMegawin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxMega_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        }

        stopSfxBigWin() {
          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
            this.currSoundBigwin = null;
          }
        }

        playSfxBomb() {
          this.playFishSFX("sfxBomb");
        }

        playSfxFireLaser() {
          this.playFishSFX("sfxFire_laser");
        }

        playSfxGetItemLaser() {
          this.playFishSFX("sfxGet_item");
        }

        playSfxRoundSwitch() {
          this.setMusicVolume(0);
          const soundSwitchRound = this.playFishSFX("sfxRound_switch");

          if (soundSwitchRound) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundSwitchRound));
          } else {
            this.onResumeSound();
          }
        }

        playSfxWaveTransition() {
          this.setMusicVolume(0);
          const soundWave = this.playFishSFX("sfxWave");

          if (soundWave) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundWave));
          } else {
            this.onResumeSound();
          }
        }

        stopAllAudio() {
          this.unscheduleAllCallbacks();
          super.stopAllAudio();
        }

        playSFXClickBet() {
          this.playSfxClick();
        }

        playSfxClick() {
          this.playFishSFX("sfxClick");
        }

        onDestroy() {
          this.stopAllAudio();
          super.onDestroy();
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpineFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Color, v3, tween, gfBaseFish, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Color = module.Color;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "047f1peYURI1KxycP6Q3Bb6", "gfSpineFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfSpineFish = exports('gfSpineFish', (_dec = ccclass('gfSpineFish'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class gfSpineFish extends gfBaseFish {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "fishAnim", _descriptor, this);

          this.NORMAL_COLOR = new Color(255, 255, 255, 255);
        }

        initAssets(config) {
          if (!this.fishAnim) {
            const fishAnim = this.node.getChildByName("mainSpine");
            this.fishAnim = fishAnim.getComponent(sp.Skeleton);
          }

          super.initAssets(config);

          if (!this.fishAnim.skeletonData || this.fishAnim.skeletonData.name != config.asset.name) {
            this.fishAnim.skeletonData = config.asset;
          }

          this.initAnimationCacheMode(config.cacheMode);
          this.fishAnim.setAnimation(0, config.AnimationName ? config.AnimationName[0] : 'animation', true);

          if (this.fishAnim && config.customAnimProp) {
            Object.assign(this.fishAnim.node, config.customAnimProp);
          }
        }

        initAnimationCacheMode(cacheMode) {
          this.fishAnim.setAnimationCacheMode(cacheMode != undefined ? cacheMode : sp.Skeleton.AnimationCacheMode.SHARED_CACHE);
        }

        playEffectDie() {
          this.fishAnim.timeScale = 2;
        }

        resetColor() {
          this.setColor(this.NORMAL_COLOR);
        }

        setColor(color) {
          stopAllActions(this.fishAnim.color);
          this.fishAnim.color = color;
        }

        changeAnimationSpeed(multiple = 0.5) {
          this.fishAnim.timeScale *= multiple;
        }

        resetAnimationSpeed() {
          this.fishAnim.timeScale = 1;
        }

        unuse() {
          super.unuse();
          this.fishAnim.node.angle = 0;
          this.fishAnim.node.scale = v3(1, 1, 1);
        }

        tweenHitColor() {
          if (!this.fishAnim || !this.fishAnim.node) return;
          const currentColor = this.fishAnim.color.g > 127 ? 127 : this.fishAnim.color.g;
          const targetColor = this.HIT_COLOR.g;
          stopAllActions(this.fishAnim.color);
          tween(this.fishAnim.color).to(0.15, {
            a: 255
          }, {
            progress: (start, end, current, ratio) => {
              const newColor = new Color(this.HIT_COLOR.r, currentColor - (currentColor - targetColor) * ratio, currentColor - (currentColor - targetColor) * ratio);
              this.fishAnim.color = newColor;
              return start + (end - start) * ratio;
            }
          }).delay(0.3).call(() => {
            if (this._isFreezed) return;
            this.tweenResetColor();
          }).start();
        }

        tweenResetColor() {
          if (!this.fishAnim || !this.fishAnim.node) return;
          tween(this.fishAnim.color).to(0.15, {
            a: 255
          }, {
            progress: (start, end, current, ratio) => {
              if (this.fishAnim) {
                this.fishAnim.color = new Color(this.HIT_COLOR.r, this.HIT_COLOR.g + 97 * ratio, this.HIT_COLOR.b + 97 * ratio);
              }

              return start + (end - start) * ratio;
            }
          }).call(() => {
            if (this.fishAnim) {
              this.fishAnim.color = this.NORMAL_COLOR;
            }
          }).start();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpriteFish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Animation, _decorator, Sprite, tween, Color, gfBaseFish, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      tween = module.tween;
      Color = module.Color;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e1abeHfbDROX5IZHc7PVztn", "gfSpriteFish", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfSpriteFish = exports('gfSpriteFish', (_dec = ccclass('gfSpriteFish'), _dec2 = property(Animation), _dec(_class = (_class2 = class gfSpriteFish extends gfBaseFish {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "fishAnim", _descriptor, this);

          this._clipName = void 0;
        }

        initAssets(config) {
          if (!this.fishAnim) {
            this.fishAnim = this.node.getChildByName('mainFish').getComponent(Animation);
          }

          super.initAssets(config);

          for (let i = 0; i < this.fishAnim.clips.length; i++) {
            this.fishAnim.removeState(this.fishAnim.clips[0].name);
          }

          this.fishAnim.clips = [config.asset];
          this.fishAnim.play(config.asset.name);
          this._clipName = this.fishAnim.clips[0].name;
        }

        playEffectDie() {
          this.fishAnim.getState(this._clipName).speed = 2;
        }

        changeAnimationSpeed(multiple = 1) {
          this.fishAnim.getState(this._clipName).speed *= multiple;
        }

        resetAnimationSpeed() {
          if (this.fishAnim.clips.length > 0) {
            this.fishAnim.getState(this._clipName).speed = 1;
          }
        }

        resetColor() {
          this.setColor(this.NORMAL_COLOR);
        }

        setColor(color) {
          const fishSprite = this.fishAnim.getComponent(Sprite);
          stopAllActions(fishSprite.color);
          fishSprite.color = color;
        }

        tweenHitColor() {
          const fishSprite = this.fishAnim.getComponent(Sprite);
          if (!this.fishAnim || !this.fishAnim.node || !fishSprite) return;
          const currentColor = fishSprite.color.g > 127 ? 127 : fishSprite.color.g;
          const targetColor = this.HIT_COLOR.g;
          stopAllActions(fishSprite.color);
          tween(fishSprite.color).to(0.15, {
            a: 255
          }, {
            progress: (start, end, current, ratio) => {
              const newColor = new Color(this.HIT_COLOR.r, currentColor - (currentColor - targetColor) * ratio, currentColor - (currentColor - targetColor) * ratio);
              fishSprite.color = newColor;
              return start + (end - start) * ratio;
            }
          }).delay(0.3).call(() => {
            if (this._isFreezed) return;
            this.tweenResetColor();
          }).start();
        }

        tweenResetColor() {
          const fishSprite = this.fishAnim.getComponent(Sprite);
          if (!this.fishAnim || !this.fishAnim.node || !fishSprite) return;
          tween(fishSprite.color).to(0.15, {
            a: 255
          }, {
            progress: (start, end, current, ratio) => {
              if (fishSprite) {
                fishSprite.color = new Color(this.HIT_COLOR.r, this.HIT_COLOR.g + 97 * ratio, this.HIT_COLOR.b + 97 * ratio);
              }

              return start + (end - start) * ratio;
            }
          }).call(() => {
            if (fishSprite) {
              fishSprite.color = this.NORMAL_COLOR;
            }
          }).start();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfTouchListener.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfUtilities.ts', './gfAutoFireController.ts'], function (exports) {
  var cclegacy, Component, Node, sys, _decorator, gfEventEmitter, gfBaseEvents, gfDataStore, gfReferenceManager, registerEvent, removeEvents, gfAutoFireController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Node = module.Node;
      sys = module.sys;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfAutoFireController = module.gfAutoFireController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c2117HIc3ROTokYWCONQBRB", "gfTouchListener", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfTouchListener = exports('gfTouchListener', (_dec = ccclass('gfTouchListener'), _dec(_class = class gfTouchListener extends Component {
        constructor(...args) {
          super(...args);
          this._userFireFunc = void 0;
          this.holdClick = void 0;
          this.actionLastTime = void 0;
        }

        onLoad() {
          this._userFireFunc = this._userFire.bind(this);
          this.holdClick = false;
          this.actionLastTime = Date.now();
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.registerTouch, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER_NO_MONEY, this.resetOnNoMoney, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.removeTouchEvent, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.resetOnNoMoney, this);
        }

        registerTouch() {
          this.node.on(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.on(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        }

        _onUserStartTouch(e) {
          this.holdClick = true;

          this._updateTouchPos(e ? e.getUILocation() : null);

          if (gfDataStore.instance.getLockGun()) return;
          const targetCondition = gfAutoFireController.instance.checkTargetOnStartTouch();
          if (targetCondition) return;

          if (this._checkValidClick()) {
            this._onUserFire('touch_start');
          }

          this.actionLastTime = Date.now();
        }

        _onUserMoveTouch(e) {
          if (gfDataStore.instance.getLockGun()) return;

          if (gfDataStore.instance.isHoldingOneShotGunSkill()) {
            this._updateTouchPos(e.getUILocation());

            const myPlayer = gfReferenceManager.instance.getSelfPlayer();

            if (myPlayer) {
              myPlayer.rotateGun(gfDataStore.instance.getMousePos());
            }
          }

          if (this.holdClick) {
            this._updateTouchPos(e.getUILocation());
          }
        }

        _onUserEndTouch() {
          this.holdClick = false;
          this.actionLastTime = Date.now();

          if (gfDataStore.instance.getLockGun() && gfDataStore.instance.isHoldingOneShotGunSkill()) {
            this.unschedule(this._userFireFunc);
            return;
          }

          this._onUserFire('touch_end');
        }

        _onUserFire(status = 'touch_start') {
          if (gfDataStore.instance.isHoldingOneShotGunSkill()) {
            if (status === 'touch_end') {
              this.scheduleOnce(() => {
                const myPlayer = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

                if (myPlayer) {
                  myPlayer.rotateGun(gfDataStore.instance.getMousePos());
                }

                gfEventEmitter.instance.emit(gfBaseEvents.GUN_SKILL.MY_PLAYER_SEND_FIRE_GUN_SKILL);
              }, 0);
            }
          } else if (status === 'touch_end') {
            this.unschedule(this._userFireFunc);
          } else {
            this._userFire();

            this.schedule(this._userFireFunc, gfDataStore.instance.FireSpeed.NORMAL);
          }
        }

        _userFire() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: gfDataStore.instance.mousePos,
            lockFishID: -1
          });
        }

        _checkValidClick() {
          const deltaTime = Date.now() - this.actionLastTime;
          return deltaTime > 40;
        }

        _updateTouchPos(pos) {
          if (!pos) return;
          gfDataStore.instance.setDataStore({
            mousePos: pos
          });
        }

        removeTouchEvent() {
          this.node.off(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.off(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.off(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        }

        resetOnNoMoney() {
          this.holdClick = false;
          this.unschedule(this._userFireFunc);
        }

        resetOnExit() {
          this.holdClick = false;
          gfDataStore.instance.setDataStore({
            mousePos: null
          });
          this.unschedule(this._userFireFunc);
        }

        onDestroy() {
          removeEvents(this);
          this.removeTouchEvent();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfUtilities.ts", ['cc', './utils.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfModuleBig.mjs_cjs=&original=.js', './gfModuleBig.js'], function (exports) {
  var cclegacy, Tween, sys, v2, math, Rect, v3, UITransform, misc, customDateFormat, toFixed, gfEventEmitter, gfBaseConfig, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      sys = module.sys;
      v2 = module.v2;
      math = module.math;
      Rect = module.Rect;
      v3 = module.v3;
      UITransform = module.UITransform;
      misc = module.misc;
    }, function (module) {
      customDateFormat = module.customDateFormat;
      toFixed = module.toFixed;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      exports({
        getAnimationsName: getAnimationsName,
        setMixAllAnims: setMixAllAnims,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "61235QIdHNH25S5n7ic6whF", "gfUtilities", undefined);

      const UTIL_CONFIG = exports('UTIL_CONFIG', {
        CURRENCY_CONFIG: null
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      Tween.prototype.setSpeed = function (speed = 1) {
        this._finalAction._speedMethod = true;

        this._finalAction.setSpeed(speed);
      };

      const SubString = exports('SubString', function (str, len) {
        return str.substr(0, len);
      });
      const v2Distance = exports('v2Distance', function (p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
      });
      const getRotation = exports('getRotation', function (p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;
      });
      const getRotationByRad = exports('getRotationByRad', function (p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x);
      });
      const randomBetween = exports('randomBetween', function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      });
      const convertSecondToTime = exports('convertSecondToTime', function (a) {
        let sec_num = parseInt(a.toString(), 10); // let hours   = Math.floor(sec_num / 3600);

        let minutes = Math.floor(sec_num / 60);
        let seconds = sec_num % 60;
        return [minutes, seconds].map(v => v < 10 ? "0" + v : v).filter((v, i) => v !== "00" || i > 0).join(":");
      });
      const ReplaceDataNotify = exports('ReplaceDataNotify', function (string, data, substr = '') {
        let strOut = string;

        for (let index = 0; index < data.length; index++) {
          strOut = strOut.replace("data.data[" + index + "]", data[index]);
        }

        if (substr != '') {
          strOut = strOut.replace("substr", substr);
        }

        return strOut;
      });
      const convertMillisecondsToTime = exports('convertMillisecondsToTime', function (duration) {
        if (typeof duration !== "number") duration = parseInt(duration);
        let milliseconds = Math.floor(duration % 1000 / 100),
            seconds = Math.floor(duration / 1000 % 60),
            minutes = Math.floor(duration / (1000 * 60) % 60),
            hours = Math.floor(duration / (1000 * 60 * 60) % 24);
        let hourString = hours < 10 ? "0" + hours : hours;
        let minuteString = minutes < 10 ? "0" + minutes : minutes;
        let secondString = seconds < 10 ? "0" + seconds : seconds;
        return hourString + ":" + minuteString + ":" + secondString + "." + milliseconds;
      });
      const isWebMobileSafari = exports('isWebMobileSafari', function () {
        if (sys.platform === sys.Platform.MOBILE_BROWSER && sys.browserType === sys.BrowserType.SAFARI) {
          if (navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") <= -1 && navigator.userAgent.indexOf("CriOS") <= -1) {
            return true;
          } else {
            return false;
          }
        }

        return false;
      });
      const isChromeiOS = exports('isChromeiOS', function () {
        if (sys.os === sys.OS.IOS && sys.platform === sys.Platform.MOBILE_BROWSER && sys.browserType === sys.BrowserType.SAFARI) {
          if (navigator.userAgent.indexOf("CriOS") > -1) {
            //Check is Chrome
            return true;
          }
        }

        return false;
      });
      const isEmpty = exports('isEmpty', function (data) {
        return data == undefined || data == null;
      });
      const formatCoin = exports('formatCoin', function (str, seperate = ",") {
        if (str == undefined || str < 0) return '0';
        seperate = seperate == null ? "," : seperate;

        if (typeof str === "number") {
          str = Math.round(str);
          str = str.toString();
        } else {
          if (typeof str == 'string') {
            let coin = parseInt(str);
            str = coin.toString();
          }
        }

        let strResult = "";
        let count = -1;
        let stringLength = str.length;

        for (let i = 0; i < stringLength; i++) {
          count++;

          if (count == 3) {
            count = 0;

            if (parseInt(str.charAt(stringLength - (i + 1)), 10).toString() != "NaN" && str.charAt(stringLength - (i + 1)) != "-") {
              strResult += seperate + str.charAt(stringLength - (i + 1));
            } else {
              strResult += str.charAt(stringLength - (i + 1));
            }
          } else {
            strResult += str.charAt(stringLength - (i + 1));
          }
        }

        let s1 = "";
        let strResultLength = strResult.length;

        for (let j = 0; j < strResultLength; j++) {
          s1 += strResult.charAt(strResultLength - (j + 1));
        }

        if (s1 == "NaN") {
          s1 = 0;
        }

        return s1.toString();
      });
      const getPointBetweenTwoPointByPercent = exports('getPointBetweenTwoPointByPercent', function (p0, p1, per) {
        let px = p0.x + (p1.x - p0.x) * per;
        let py = p0.y + (p1.y - p0.y) * per;
        return v2(px, py);
      });
      const getListPointFromThreePoint = exports('getListPointFromThreePoint', function (p1, p2, p3, tbegin) {
        let listPoints = [];

        for (let t = tbegin; t <= 1; t += 0.01) {
          let xt = (1 - t) * (1 - t) * p1.x + 2 * (1 - t) * t * p2.x + t * t * p3.x;
          let yt = (1 - t) * (1 - t) * p1.y + 2 * (1 - t) * t * p2.y + t * t * p3.y;
          listPoints.push(v2(xt, yt));
        }

        return listPoints;
      });
      const rotateAngleByCoordinate = exports('rotateAngleByCoordinate', function (cx, cy, x, y, angle) {
        let radians = Math.PI / 180 * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      const showFullScreenButton = exports('showFullScreenButton', function (isShow = true) {
        const visible = isShow ? "visible" : "hidden";
        const display = isShow ? "block" : "none";

        if (sys.os === sys.OS.ANDROID && sys.isMobile) {
          let divFullscreen = document.getElementById('div_full_screen');

          if (divFullscreen) {
            divFullscreen.style.visibility = visible;
            divFullscreen.style.display = display;
          }
        }
      });
      const addHtmlCursor = exports('addHtmlCursor', function () {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          let css = document.createElement('style');
          css.type = 'text/css';
          css.id = 'cursorId';
          let styles = 'canvas { color: #555;cursor: url(data:image/cur;base64,' + gfBaseConfig.instance.CursorBase64 + ') 16 16, default; background:#F4F4F4; display: block;  text-align: center;}';
          if (css['styleSheet']) css['styleSheet'].cssText = styles;else css.appendChild(document.createTextNode(styles));
          document.getElementsByTagName("head")[0].appendChild(css);
        }
      });
      const removeCursorInHtml = exports('removeCursorInHtml', function () {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          var _document$getElements;

          let cursorElement = document.getElementById("cursorId");
          cursorElement && ((_document$getElements = document.getElementsByTagName("head")[0]) == null ? void 0 : _document$getElements.removeChild(cursorElement));
        }
      });
      const clamp = exports('clamp', function (x, min, max) {
        return math.clamp(x, min, max);
      });
      const isArrayEqual = exports('isArrayEqual', function (x, y) {
        return globalThis._(x).xorWith(y, globalThis._.isEqual).isEmpty();
      });
      const getPointByDegrees = exports('getPointByDegrees', function (cx, cy, x, y, angle) {
        let radians = -(Math.PI / 180) * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      const registerEvent = exports('registerEvent', function (eventCode, func, main) {
        if (!main.eventMap) {
          main.eventMap = [];
        }

        const funcKey = func.bind(main);
        main.eventMap.push({
          eventCode,
          funcKey
        });

        if (gfEventEmitter.instance) {
          gfEventEmitter.instance.registerEvent(eventCode, funcKey);
        }
      });
      const removeEvents = exports('removeEvents', function (main) {
        if (!main.eventMap || !gfEventEmitter.instance) return;
        main.eventMap.forEach(e => {
          gfEventEmitter.instance.removeEvent(e.eventCode, e.funcKey);
        });
        main.eventMap.length = 0;
      });
      const autoEnum = exports('autoEnum', function (arr) {
        const res = {};

        for (let i = 0; i < arr.length; i++) {
          res[arr[i]] = i;
        }

        return res;
      });
      const getBetValue = exports('getBetValue', (gameId, roomKind) => {
        if (!gameId || !roomKind) return null;
        const KEY_STORE = 'betFish' + gameId;
        let betObject = sys.localStorage.getItem(KEY_STORE);

        if (!globalThis._.isEmpty(betObject)) {
          betObject = JSON.parse(betObject);

          if (betObject[roomKind]) {
            return betObject[roomKind];
          }
        }

        return null;
      });
      const setBetValue = exports('setBetValue', (gameId, roomKind, bulletMultiple) => {
        const KEY_STORE = 'betFish' + gameId;
        let betObject = sys.localStorage.getItem(KEY_STORE);

        if (globalThis._.isEmpty(betObject)) {
          const newObj = {
            [roomKind]: bulletMultiple
          };
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(newObj));
        } else {
          betObject = JSON.parse(betObject);
          betObject[roomKind] = bulletMultiple;
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(betObject));
        }
      });
      const formatUserName = exports('formatUserName', (userName = '', maxLength = 16, replaceText = "...") => {
        if (userName.length <= maxLength) return userName;
        return userName.slice(0, maxLength - replaceText.length + 1) + replaceText;
      });
      const isPointInScreen = exports('isPointInScreen', function (point, offset = 0) {
        const {
          SceneBox,
          realSize
        } = gfBaseConfig.instance;
        const screen = new Rect(SceneBox.Left - offset / 2, SceneBox.Bottom - offset / 2, realSize.Width + offset, realSize.Height + offset);
        return screen.contains(v2(point.x, point.y));
      });
      const formatString = exports('formatString', function (theString, argumentArray) {
        var regex = /%s/;

        var _r = function (p, c) {
          if (!p) debugger;
          return p.replace(regex, c);
        };

        return argumentArray.reduce(_r, theString);
      });
      const deepCopy = exports('deepCopy', target => {
        if (target === null) {
          return target;
        }

        if (target instanceof Date) {
          return new Date(target.getTime());
        }

        if (target instanceof Array) {
          const cp = [];
          target.forEach(v => {
            cp.push(v);
          });
          return cp.map(n => deepCopy(n));
        }

        if (typeof target === 'object' && target !== {}) {
          const cp = { ...target
          };
          Object.keys(cp).forEach(k => {
            cp[k] = deepCopy(cp[k]);
          });
          return cp;
        }

        return target;
      });
      const mergeTwoObject = exports('mergeTwoObject', (obj1, obj2) => {
        return globalThis._.merge({}, obj1, obj2);
      });
      const SetZIndex = exports('SetZIndex', function (node, index) {
        const zIndex = 'zIndex';
        if (!node.parent) return;
        node[zIndex] = index;

        for (let i = 0; i < node.parent.children.length; ++i) {
          const child = node.parent.children[i];

          if (child[zIndex] == undefined) {
            child[zIndex] = 0;
          }

          if (index <= child[zIndex] && node.uuid != child.uuid) {
            node.setSiblingIndex(child.getSiblingIndex());
            return;
          }
        }

        node.setSiblingIndex(node.parent.children.length);
      });
      const convertFishCoordinateSystem = exports('convertFishCoordinateSystem', function (points) {
        const APP_SIZE = gfBaseConfig.instance.AppSize;

        for (let i = 0; i < points.length; ++i) {
          const pointRotated = rotateAngleByCoordinate(APP_SIZE.Width / 2, APP_SIZE.Height / 2, points[i].PosX, points[i].PosY, -180);
          points[i].PosY = pointRotated.y;
          points[i].PosX = pointRotated.x;
        }
      });
      const bezier3P = exports('bezier3P', function (a, b, c, t) {
        return (1 - t) * (1 - t) * a + 2 * (1 - t) * t * b + t * t * c;
      });
      const getPositionWithTimeSpentFromThreePoint = exports('getPositionWithTimeSpentFromThreePoint', function (p1, p2, p3, timeLost, speed) {
        const totalPoints = 100;
        const durationPerUnit = 1 / totalPoints;
        let duration = 0;
        let position = v2(x(0), y(0));
        let i = 1;
        let currentPoint = position;
        let lastPoint = currentPoint;
        let lastDuration = 0;

        while (duration < timeLost && i <= totalPoints) {
          lastPoint = currentPoint;
          lastDuration = duration;
          currentPoint = v2(x(i * durationPerUnit), y(i * durationPerUnit));
          const distance = v2Distance(lastPoint, currentPoint);
          duration += distance / speed;
          ++i;
        }

        if (duration == lastDuration) {
          return v2(x(i - 1), y(i - 1));
        }

        const ratio = (timeLost - lastDuration) / (duration - lastDuration);
        const index = (i - 2 + ratio) * durationPerUnit;
        return v2(x(index), y(index));

        function x(t) {
          return bezier3P(p1.x, p2.x, p3.x, t);
        }

        function y(t) {
          return bezier3P(p1.y, p2.y, p3.y, t);
        }
      });
      const flipX = exports('flipX', function (node) {
        node.scale = v3(-node.scale.x, node.scale.y, node.scale.z);
      });
      const checkTablet = exports('checkTablet', function () {
        if (sys.isNative) {
          //Temporary remove due to engine error
          return false; // let msg = "Debug check tablet \n";
          // const dpi = jsb.device.getDevicePixelRatio();
          // msg+= "dpi by screen:" + screen.devicePixelRatio +"\n";
          // //Start debug
          // msg += "dpi:" + dpi + "\n";
          // const viewSize = screen.windowSize;
          // const xInches = viewSize.width / dpi;
          // msg += "xInches: " + xInches + " - ";
          // const yInches = viewSize.height / dpi;
          // msg += "yInches: " + yInches + "\n";
          // let diagonalInches = Math.sqrt(Math.pow(xInches, 2) + Math.pow(yInches, 2));
          // diagonalInches = Math.round(diagonalInches * 100) / 100;
          // msg+= "diagonalInches:" + diagonalInches + "\n";
          // console.error('DebugNode: \n' + msg);
          // return (diagonalInches >= 7);
        } else {
          const userAgent = navigator.userAgent.toLowerCase();
          const isTablet = /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(userAgent);
          return isTablet;
        }
      });
      const formatTimeStamp = exports('formatTimeStamp', function (ts, formatString = "#DD#/#MM# #hhhh#:#mm#:#ss#") {
        const date = new Date(ts);
        return customDateFormat(date, formatString);
      });
      const refreshButtonState = exports('refreshButtonState', function (button) {
        button.interactable = false;
        button.interactable = true;
      });
      const isTouchScreen = exports('isTouchScreen', function () {
        return navigator.maxTouchPoints > 0;
      });
      const roundAngle = exports('roundAngle', function (angle) {
        if (angle > 180) angle -= 360;
        if (angle < -180) angle += 360;
        return angle;
      });
      const convertSecondToTimeDay = exports('convertSecondToTimeDay', function (a) {
        //let sec_num = parseInt(a, 10);
        let sec_num = parseInt(a, 10);
        let days = Math.floor(sec_num / 86400);
        sec_num -= days * 86400;
        let hours = Math.floor(sec_num / 3600) % 24;
        sec_num -= hours * 3600;
        let minutes = Math.floor(sec_num / 60) % 60;
        sec_num -= minutes * 60;
        let seconds = sec_num;
        return [days, hours, minutes, seconds].map(v => v < 10 ? "0" + v : v).filter((v, i) => v !== "0" || i > 1).join(":");
      });

      const removeZero = function (str) {
        if (str.length > 1 && str.charAt(0) == "0") {
          return str.charAt(1);
        }

        return str;
      };

      const addTimePrefix = exports('addTimePrefix', function (str, arrPrefix) {
        let infos = str.split(':');

        if (infos[0] == "00" && infos[1] == "00" && infos[2] == "00") {
          str = removeZero(infos[3]) + arrPrefix[3];
        } else if (infos[0] == "00" && infos[1] == "00") {
          str = removeZero(infos[2]) + arrPrefix[2] + removeZero(infos[3]) + arrPrefix[3];
        } else if (infos[0] == "00") {
          if (infos[2] == "00") str = removeZero(infos[1]) + arrPrefix[1].replace(':', '');else str = removeZero(infos[1]) + arrPrefix[1] + removeZero(infos[2]) + arrPrefix[2].replace(':', '');
        } else {
          if (infos[2] == "00") str = removeZero(infos[0]) + arrPrefix[0] + removeZero(infos[1]) + arrPrefix[1].replace(':', '');else str = removeZero(infos[0]) + arrPrefix[0] + removeZero(infos[1]) + arrPrefix[1] + removeZero(infos[2]) + arrPrefix[2].replace(':', '');
        }

        return str;
      });
      const getPositionInOtherNode = exports('getPositionInOtherNode', function (spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        let pos = targetNode.parent.getComponent(UITransform).convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNode.getComponent(UITransform).convertToNodeSpaceAR(pos);
      });
      const getSkillTypeBySkillID = exports('getSkillTypeBySkillID', function (SkillID) {
        let skillType = null;
        Object.keys(gfBaseConfig.instance.SKILL_CONFIG).forEach(key => {
          const item = gfBaseConfig.instance.SKILL_CONFIG[key];

          if (item.SkillID == SkillID) {
            skillType = item.Type;
          }
        });
        return skillType;
      });
      const formatMoneyByCurrency = exports('formatMoneyByCurrency', (amount, decimalCount = 0, decimal = ".", thousands = ",") => {
        const {
          CENT_UNIT,
          CENT_SUFFIX,
          CURRENCY_PREFIX,
          DECIMAL_COUNT
        } = UTIL_CONFIG.CURRENCY_CONFIG;
        let prefix = CURRENCY_PREFIX || "";
        let suffix = "";

        if (isNaN(decimalCount) || decimalCount === null) {
          decimalCount = decimalCount || DECIMAL_COUNT;
        }

        if (CENT_UNIT && _cjsExports(amount).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          amount = _cjsExports(amount || 0).times(100).toNumber();
        }

        return prefix + formatCoinCurrency(amount, decimalCount, decimal, thousands) + suffix;
      });
      const formatWalletMoneyByCurrency = exports('formatWalletMoneyByCurrency', (num, digits) => {
        const {
          CENT_UNIT,
          CENT_SUFFIX,
          CURRENCY_PREFIX,
          DECIMAL_COUNT,
          TRIM_ZERO
        } = UTIL_CONFIG.CURRENCY_CONFIG;
        let prefix = CURRENCY_PREFIX || "";
        let suffix = "";

        if (isNaN(digits) || digits === null) {
          digits = DECIMAL_COUNT || 2;
        }

        let trimZero = TRIM_ZERO;

        if (CENT_UNIT && _cjsExports(num).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          num = _cjsExports(num || 0).times(100).toNumber();
        }

        return prefix + formatWallet(num, digits, trimZero) + suffix;
      });
      const formatWalletMoney = exports('formatWalletMoney', (num, digits = 2) => {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          return formatWalletMoneyByCurrency(num, digits);
        }

        return formatWallet(num, digits);
      });
      const formatMoney = exports('formatMoney', (amount, decimalCount, decimal = ".", thousands = ",") => {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          if (isNaN(decimalCount)) decimalCount = UTIL_CONFIG.CURRENCY_CONFIG.DECIMAL_COUNT;
          return formatMoneyByCurrency(amount, decimalCount, decimal, thousands);
        }

        return formatCoinCurrency(amount, decimalCount, decimal, thousands);
      });
      const formatCoinCurrency = exports('formatCoinCurrency', (amount, decimalCount = 0, decimal = ".", thousands = ",") => {
        const sign = amount < 0 ? "-" : "";
        const splitStr = toFixed(Math.abs(amount), decimalCount).split(".");
        const decimalStr = splitStr[1] || "";
        const integerArr = splitStr[0].split("");
        let index = integerArr.length;

        while ((index -= 3) > 0) {
          integerArr.splice(index, 0, thousands);
        }

        if (decimalStr) {
          integerArr.push(decimal, decimalStr);
        }

        return sign + integerArr.join("");
      });
      const formatWallet = exports('formatWallet', (num, digits, trimZero = true) => {
        if (isNaN(parseFloat(num))) return "0";
        const si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        let i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) break;
        }

        let wallet = toFixed(num / si[i].value, digits);
        if (trimZero) wallet = wallet.replace(rx, "$1");
        return wallet + si[i].symbol;
      });
      const updateSpineTime = exports('updateSpineTime', function (spine, dt) {
        const {
          tracks
        } = spine.getState();
        tracks.forEach(track => {
          if (track && !track.isComplete()) {
            track.trackTime += dt;
          }
        });
        sys.isNative ? spine.updateAnimation(0) : spine.getState().apply(spine._skeleton);
      });
      const convertToRelativePoint = exports('convertToRelativePoint', function (position, point, angle) {
        const radian = misc.degreesToRadians(angle);
        const x = position.x + point.x * Math.cos(radian) - point.y * Math.sin(radian);
        const y = position.y + point.x * Math.sin(radian) + point.y * Math.cos(radian);
        return v2(x, y);
      });

      function getAnimationsName(spine) {
        if (spine.skeletonData._skeletonJson) return Object.keys(spine.skeletonData._skeletonJson.animations);else {
          let animNames = [];

          for (let i = 0; i < spine.skeletonData._skeletonCache.animations.length; ++i) {
            animNames.push(spine.skeletonData._skeletonCache.animations[i].name);
          }

          return animNames;
        }
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime = 0.15) {
        const animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          return;
        }

        for (let i = 0; i < animNames.length; i++) {
          for (let j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      const StateMachineHistory = exports('StateMachineHistory', function (options) {
        options = options || {};

        function camelize(label) {
          if (label.length === 0) return label;
          var n,
              result,
              words = label.split(/[_-]/); // single word with first character already lowercase, return untouched

          if (words.length === 1 && words[0][0].toLowerCase() === words[0][0]) return label;
          result = words[0].toLowerCase();

          for (n = 1; n < words.length; n++) {
            result = result + words[n].charAt(0).toUpperCase() + words[n].substring(1).toLowerCase();
          }

          return result;
        }

        camelize.prepended = function (prepend, label) {
          label = camelize(label);
          return prepend + label[0].toUpperCase() + label.substring(1);
        };

        var past = camelize(options.name || options.past || 'history'),
            future = camelize(options.future || 'future'),
            clear = camelize.prepended('clear', past),
            back = camelize.prepended(past, 'back'),
            forward = camelize.prepended(past, 'forward'),
            canBack = camelize.prepended('can', back),
            canForward = camelize.prepended('can', forward),
            max = options.max;
        var plugin = {
          configure: function (config) {
            config.addTransitionLifecycleNames(back);
            config.addTransitionLifecycleNames(forward);
          },
          init: function (instance) {
            instance[past] = [];
            instance[future] = [];
          },
          lifecycle: function (instance, lifecycle) {
            if (lifecycle.event === 'onEnterState') {
              instance[past].push(lifecycle.to);
              if (max && instance[past].length > max) instance[past].shift();
              if (lifecycle.transition !== back && lifecycle.transition !== forward) instance[future].length = 0;
            }
          },
          methods: {},
          properties: {}
        };

        plugin.methods[clear] = function () {
          this[past].length = 0;
          this[future].length = 0;
        };

        plugin.properties[canBack] = {
          get: function () {
            return this[past].length > 1;
          }
        };
        plugin.properties[canForward] = {
          get: function () {
            return this[future].length > 0;
          }
        };

        plugin.methods[back] = function () {
          if (!this[canBack]) throw Error('no history');
          var from = this[past].pop(),
              to = this[past].pop();
          this[future].push(from);

          this._fsm.transit(back, from, to, []);
        };

        plugin.methods[forward] = function () {
          if (!this[canForward]) throw Error('no history');
          var from = this.state,
              to = this[future].pop();

          this._fsm.transit(forward, from, to, []);
        };

        return plugin;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfVersion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './loadConfigAsync.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color, gfBaseConfig, loadConfigAsync, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bd43ehXrhxM5olQKt0IEhEv", "gfVersion", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GfVersion = exports('GfVersion', (_dec = ccclass('GfVersion'), _dec2 = property(Label), _dec(_class = (_class2 = class GfVersion extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "versionText", _descriptor, this);
        }

        onLoad() {
          this.updateVersion();
          registerEvent(gfBaseEvents.COMMON.UPDATE_GAME_VERSION, this.updateVersion, this);
        }

        updateVersion(serverVersion = '') {
          const CONFIG = loadConfigAsync.getConfig();
          const {
            IS_PRODUCTION
          } = CONFIG;

          if (!IS_PRODUCTION) {
            this.versionText.fontSize = 40;
            this.versionText.lineHeight = 40;
            this.versionText.color = Color.WHITE;
          }

          let version = gfBaseConfig.instance.GameVersion;

          if (serverVersion) {
            version = version + '|' + serverVersion;
          }

          this.versionText.string = version;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "versionText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaitingLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfActionHelper.ts', './gfNetworkGameEvent.ts', './gfLocalize.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, UIOpacity, tween, Label, game, gfEventEmitter, gfBaseEvents, gfBaseConfig, SetZIndex, registerEvent, removeEvents, rotateBy, fadeIn, stopAllActions, fadeOut, gfNetworkGameEvent, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Label = module.Label;
      game = module.game;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "8d8a86RmJFPCo4Pf9LXTbJf", "gfWaitingLayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfWaitingLayer = exports('gfWaitingLayer', (_dec = ccclass('gfWaitingLayer'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class gfWaitingLayer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "iconWaiting", _descriptor, this);

          _initializerDefineProperty(this, "toolTip", _descriptor2, this);

          _initializerDefineProperty(this, "overlay", _descriptor3, this);

          this._opacityOverlay = 0;
        }

        onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.PERSIST_Z_INDEX.WAITING);
          this._opacityOverlay = this.overlay.getComponent(UIOpacity).opacity;
          this.hideWaiting();
          this.initEvents();
          this.runIconAction();
          this.node.active = false;
        }

        runIconAction() {
          let iconNode = this.iconWaiting.getChildByName("Icon");

          if (!iconNode) {
            iconNode = this.iconWaiting;
          }

          tween(iconNode).repeatForever(rotateBy(2, 360)).start();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_WAITING, this.showWaiting, this);
          registerEvent(gfBaseEvents.COMMON.HIDE_WAITING, this.hideWaiting, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        }

        showWaiting(needTimeoutNetwork = false, needTimeoutLoadScene = false) {
          this.resetWaiting();
          this.node.active = true;
          tween(this.node).call(() => {
            this.overlay.getComponent(UIOpacity).opacity = 0;
            this.iconWaiting.active = false;
          }).then(fadeIn(.2)).delay(0.2).call(() => {
            tween(this.overlay.getComponent(UIOpacity)).to(0.2, {
              opacity: this._opacityOverlay
            }).start();
            this.iconWaiting.active = true;
          }).start();

          if (needTimeoutNetwork) {
            tween(this.node).delay(gfBaseConfig.instance.waiting_timeout_network).call(() => {
              this.hideWaiting();

              if (gfEventEmitter.instance) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT);
              }
            }).start();
          }

          if (needTimeoutLoadScene) {
            tween(this.node).delay(gfBaseConfig.instance.waiting_timeout_load_scene).call(() => {
              this.showTooltip();
            }).call(() => {
              this.hideWaiting();

              if (gfEventEmitter.instance) {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_LOAD_SCENE_TIMEOUT);
              }
            }).start();
          }
        }

        resetWaiting() {
          this.unscheduleAllCallbacks();
          stopAllActions(this.node);
          stopAllActions(this.overlay.getComponent(UIOpacity));
          this.overlay.getComponent(UIOpacity).opacity = this._opacityOverlay;
          this.node.getComponent(UIOpacity).opacity = 0;
          this.iconWaiting.active = true;

          if (this.toolTip && this.toolTip.active) {
            this.hideTooltip();
          }
        }

        hideWaiting() {
          this.unscheduleAllCallbacks();
          stopAllActions(this.node);
          stopAllActions(this.overlay.getComponent(UIOpacity));
          tween(this.node).then(fadeOut(.2)).call(() => {
            this.node.active = false;
            this.resetWaiting();
          }).start();
        }

        showTooltip() {
          if (!this.toolTip) return;
          this.toolTip.active = true;
          this.toolTip.getComponent(UIOpacity).opacity = 0;
          this.toolTip.getComponent(Label).string = gfLocalize.instance.txtWaitingTooltip;
          stopAllActions(this.toolTip);
          tween(this.toolTip).then(fadeIn(.2)).start();
        }

        hideTooltip() {
          if (!this.toolTip) return;
          stopAllActions(this.toolTip);
          tween(this.toolTip).then(fadeOut(.2)).call(() => {
            this.toolTip.active = false;
          }).start();
        }

        refreshPage() {
          game.removePersistRootNode(this.node);
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconWaiting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toolTip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, warn, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      warn = module.warn;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "09e66uiZfZIT6s8Ofzt04fG", "gfWallet", undefined);

      const INCREASING_TIME = 0.3;
      const {
        ccclass,
        property
      } = _decorator;
      let gfWallet = exports('gfWallet', (_dec = ccclass('gfWallet'), _dec2 = property(Label), _dec(_class = (_class2 = class gfWallet extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "displayLabel", _descriptor, this);

          this._displayAmount = 0;
          this._rewardAmount = 0;
          this._targetAmount = 0;
          this._totalAmount = 0;
          this.incSpeed = 0;
        }

        forceUpdateWallet(amount) {
          this._displayAmount = amount;
          this._targetAmount = amount;
          this._rewardAmount = 0;
          this.incSpeed = 0;
          this._totalAmount = amount;
          this.updateDisplay();
        }

        updateWallet(amount) {
          if (this._targetAmount == amount) return;
          this._targetAmount = gfCurrencyCalculator.instance.minusTwoNumber(amount, this._rewardAmount);

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          } else {
            this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
          }

          this._totalAmount = amount;
          this.updateDisplay();
        }

        addToDisplay(amount) {
          const remainAmount = gfCurrencyCalculator.instance.minusTwoNumber(this._rewardAmount, amount);

          if (remainAmount < 0) {
            warn("Reward Wallet Amount is negative!", remainAmount);
          }

          this._rewardAmount = remainAmount;
          this._targetAmount = gfCurrencyCalculator.instance.plusTwoNumber(this._targetAmount, amount);

          if (this._targetAmount > this._totalAmount) {
            this._targetAmount = this._totalAmount;
          }

          this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
        }

        addGoldReward(reward) {
          this._rewardAmount = gfCurrencyCalculator.instance.plusTwoNumber(this._rewardAmount, reward);
        }

        update(dt) {
          if (this._displayAmount == this._targetAmount) return;
          this._displayAmount += this.incSpeed * dt;

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          }

          this.updateDisplay();
        }

        updateDisplay() {
          this.displayLabel.string = gfCurrencyCalculator.instance.formatCurrency(this._displayAmount > 0 ? this._displayAmount : 0);
        }

        getDisplayWallet() {
          return this._targetAmount;
        }

        getRealWallet() {
          return this._totalAmount;
        }

        resetOnExit() {
          this.displayLabel.string = '';
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "displayLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaveTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Prefab, _decorator, Component, UIOpacity, tween, v3, instantiate, Tween, gfBaseConfig, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      instantiate = module.instantiate;
      Tween = module.Tween;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d278d0jz3lMobZKknGa2Lgg", "gfWaveTransition", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const offsetX = 200;
      let GfWaveTransition = exports('GfWaveTransition', (_dec = ccclass('GfWaveTransition'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = class GfWaveTransition extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "wave", _descriptor, this);

          _initializerDefineProperty(this, "bubble", _descriptor2, this);
        }

        onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playWaveTransition, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        }

        playWaveTransition() {
          const realSize = gfBaseConfig.instance.realSize;
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
          this.schedule(this.createBubble, 0.1);
          tween(this.wave).to(4, {
            position: v3(-(realSize.Width + offsetX), 0, this.wave.position.z)
          }).call(() => {
            this.unschedule(this.createBubble);
            this.node.getComponent(UIOpacity).opacity = 0;
          }).start();
        }

        createBubble() {
          if (!this.bubble) return;
          const realSize = gfBaseConfig.instance.realSize;
          const Count = 5;

          for (let i = 0; i < Count; ++i) {
            const bubble = instantiate(this.bubble);
            bubble.parent = this.node;
            const bubblePosX = this.wave.position.x + Math.random() * 50 - 220;
            const bubblePosY = -realSize.Height / 2 + realSize.Height / Count * i + Math.random() * 100;
            bubble.setPosition(bubblePosX, bubblePosY, bubble.position.z);
          }
        }

        resetOnExit() {
          const realSize = gfBaseConfig.instance.realSize;
          this.node.getComponent(UIOpacity).opacity = 0;
          this.wave.setPosition(realSize.Width / 2 + offsetX, this.wave.position.y, this.wave.position.z);
          Tween.stopAllByTarget(this.wave);
          this.unschedule(this.createBubble);
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wave", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bubble", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWebSoundPlayer.ts", ['cc', './WebSoundPlayer.ts'], function (exports) {
  var cclegacy, warn, log, game, _decorator, WebSoundPlayer;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      log = module.log;
      game = module.game;
      _decorator = module._decorator;
    }, function (module) {
      WebSoundPlayer = module.WebSoundPlayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b43b7vbwMRFM4dsf6f+GtQk", "gfWebSoundPlayer", undefined);

      const {
        ccclass
      } = _decorator;
      let gfWebSoundPlayer = exports('gfWebSoundPlayer', (_dec = ccclass('gfWebSoundPlayer'), _dec(_class = class gfWebSoundPlayer extends WebSoundPlayer {
        removeExtraSound(listMusic, listSfx) {
          const unloadSound = soundObj => {
            const index = this._soundLoaded.findIndex(i => i == soundObj.audioFile._uuid);

            index >= 0 && this._soundLoaded.splice(index, 1);
            const howlData = this.howlMap[soundObj.audioFile._uuid];

            if (howlData && typeof howlData.unload == "function") {
              howlData.unload();
            }
          };

          listMusic.forEach(soundObj => {
            const musicObj = this.musicMap[soundObj.soundId];

            if (musicObj) {
              this.musicMap[soundObj.soundId] = null;
              delete this.musicMap[soundObj.soundId];
              unloadSound(musicObj);
            }
          });

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          listSfx.forEach(soundObj => {
            const sfxObj = this.sfxMap[soundObj.soundId];

            if (sfxObj) {
              this.sfxMap[soundObj.soundId] = null;
              delete this.sfxMap[soundObj.soundId];

              let index = this._sfxList.findIndex(i => i == sfxObj);

              index >= 0 && this._sfxList.splice(index, 1);
              unloadSound(sfxObj);
            }
          });
        }

        playMusic(id, loop = true, volume) {
          const oldMusic = this.musicInstance;
          this._isMusicPlaying = true;
          this.currentMusic = this.musicMap[id];
          this.musicInstance = this.currentMusic ? this.howlMap[this.currentMusic.audioFile._uuid] : null;

          if (!this.musicInstance) {
            warn("[WebSoundPlayer] invalid Music:", id);

            if (oldMusic && oldMusic.playing()) {
              oldMusic.stop();
            }

            return;
          }

          if (this.musicInstance === oldMusic && this.musicInstance.playing()) {
            log(`[WebSoundPlayer] duplicate play music ${id}`);
            return;
          }

          if (oldMusic && oldMusic.playing()) {
            oldMusic.stop();
          }

          this.musicInstance.loop(loop);
          this.musicInstance.volume(volume);

          if (this._hasAudioContext && !game.isPaused()) {
            this.musicInstance.play();
          }

          this._playedInitMusic = true;
          log(`[WebSoundPlayer] play music ${id}`);
        }

        resumeMusic() {
          if (this.musicInstance && this._isMusicPlaying && !this.musicInstance.playing()) {
            this.musicInstance.play();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWheel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './utils.ts', './gfCustomDataType.ts', './gfCurrencyCalculator.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Label, _decorator, Component, sys, tween, warn, v3, stopAllActions, scaleTo, gfBaseEvents, gfEventEmitter, gfBaseConfig, getPositionInOtherNode, gfReferenceManager, setOpacity, WheelType, gfCurrencyCalculator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      tween = module.tween;
      warn = module.warn;
      v3 = module.v3;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      getPositionInOtherNode = module.getPositionInOtherNode;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      WheelType = module.WheelType;
    }, function (module) {
      gfCurrencyCalculator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "162b8+3lv9A0KqVVX8DZC4N", "gfWheel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfWheel = exports('gfWheel', (_dec = ccclass('gfWheel'), _dec2 = property(sp.Skeleton), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = class gfWheel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "playByQueue", _descriptor, this);

          _initializerDefineProperty(this, "increaseTime", _descriptor2, this);

          _initializerDefineProperty(this, "spine", _descriptor3, this);

          _initializerDefineProperty(this, "lblCoin", _descriptor4, this);

          _initializerDefineProperty(this, "lblCoinOther", _descriptor5, this);

          this.skinName = {
            bigWin: "",
            superWin: "",
            megaWin: ""
          };
          this.animName = {
            appear: "",
            idle: "",
            hide: ""
          };
          this.originPos = void 0;
          this.index = 0;
          this.priority = 0;
          this.wheelType = WheelType.NORMAL;
          this.isExtra = false;
          this.curSkin = '';
          this.winValue = 0;
          this.curLabel = null;
          this.indexQueue = 0;
          this.isShowing = false;
          this.queue = [];
          this._removeDecimal = false;
          this._coinValue = 0;
        }

        get coinValue() {
          return this._coinValue;
        }

        set coinValue(value) {
          this._coinValue = value;
          this.updateLblReward();
        }

        updateLblReward() {
          if (!this.curLabel) return;
          let string = gfCurrencyCalculator.instance.formatCurrency(this.coinValue);

          if (this._removeDecimal) {
            string = string.split(".")[0];
          }

          this.curLabel.string = string;
          this.curLabel.node.angle = 0;
        }

        onLoad() {
          this.originPos = this.node.getPosition();
          this.setupAnimSpine();
          this.setupSkinSpine();
        }

        setupAnimSpine() {
          this.animName.appear = "appear";
          this.animName.idle = "idle";
          this.animName.hide = "hide";
        }

        setupSkinSpine() {
          this.skinName.bigWin = "bigWin";
          this.skinName.superWin = "superWin";
          this.skinName.megaWin = "megaWin";
        }

        showAnimation(data = null) {
          this.queue.push(data);

          if (!this.isShowing) {
            this.show(data);
          } else {
            this.updateData(data);
          }
        }

        show(data) {
          this.reset();
          this.isShowing = true;
          this.node.active = true;
          this.curLabel = data.isMe ? this.lblCoin : this.lblCoinOther;
          this.updateWinValue(data);
          const skinName = this.getSkinByBet(data.bet);
          this.playAnimSpine(skinName);
          this.tweenCoin(data.isMe);
        }

        getSkinByBet(bet) {
          let skinName = this.skinName.bigWin;

          if (this.winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER_WIN) {
            skinName = this.skinName.superWin;
          } else if (this.winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.MEGA_WIN) {
            skinName = this.skinName.megaWin;
          }

          return skinName;
        }

        playAnimSpine(skinName) {
          this.curSkin = skinName;
          this.spine.setSkin(skinName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this.spine.setAnimation(0, this.animName.appear, false);
          this.spine.addAnimation(0, this.animName.idle, true);

          const callback = () => {
            const soundEvent = skinName === this.skinName.megaWin ? gfBaseEvents.SOUND.MEGA_WIN : gfBaseEvents.SOUND.BIG_WIN;
            gfEventEmitter.instance.emit(soundEvent);
          };

          this.scheduleOnce(callback, 0.5);
        }

        tweenCoin(isMe) {
          this.resetLblCoinAngle();
          const curValue = this.coinValue;
          this._removeDecimal = this.winValue.toString().split('.')[1] === "00" || this.winValue.toString().split('.').length === 1;
          tween(this.node).to(this.increaseTime, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = curValue + ratio * (this.winValue - curValue);
            }
          }).call(() => {
            if (isMe) {
              this.tweenLblCoin();
            }
          }).delay(1).call(() => {
            this.tweenCoinFinish();
          }).start();
        }

        tweenCoinFinish() {
          if (this.playByQueue) {
            ++this.indexQueue;

            if (this.isNextWheel()) {
              const dataShow = this.queue[this.indexQueue];
              this.show(dataShow);
            } else {
              this.hideAnimation();
            }
          } else {
            this.hideAnimation();
          }
        }

        resetLblCoinAngle() {
          this.lblCoinOther.node.angle = 0;
          this.lblCoin.node.angle = 0;

          if (this.curLabel) {
            this.curLabel.node.active = true;
            stopAllActions(this.curLabel.node);
            this.curLabel.node.angle = 0;
            this.curLabel.node.setScale(1, 1, 1);
          }
        }

        tweenLblCoin() {
          stopAllActions(this.curLabel.node);
          const repeat = tween(this.curLabel.node).to(0.25, {
            angle: -10
          }).to(0.25, {
            angle: 10
          });
          tween(this.curLabel.node).repeat(5, repeat).to(0.25, {
            angle: 0
          }).start();
        }

        updateData(data) {
          if (!data.gold) {
            warn('BigWin without Gold!!!');
            return;
          }

          if (this.isShowing) {
            stopAllActions(this.node);
            this.updateWinValue(data);
            const skinName = this.getSkinByBet(data.bet);

            if (skinName !== this.curSkin) {
              this.playAnimSpine(skinName);
            }

            this.tweenCoin(data.isMe);
          } else {
            this.show(data);
          }
        }

        updateWinValue(data) {
          this.winValue = gfCurrencyCalculator.instance.plusTwoNumber(this.winValue, data.gold);
        }

        forceUpdateData(data = null) {
          stopAllActions(this.node);
          ++this.indexQueue;
          this.coinValue = this.winValue;
        }

        getOriginPos() {
          return this.originPos;
        }

        hideAnimation() {
          this.isShowing = false;
          let stepMoveOut = this.index > 1 ? -20 : 20;
          const player = gfReferenceManager.instance.getPlayerByIndex(this.index);
          let endPos = this.originPos;

          if (player) {
            endPos = getPositionInOtherNode(this.node.parent, player.gun);

            if (player.isMe) {
              player.addToDisplayWallet(this.getUpdateWalletValue());
            }
          }

          this.spine.setAnimation(0, this.animName.hide, false);
          this.playAnimHideLblCoin();
          tween(this.node).to(0.23, {
            position: v3(this.node.position.x, this.node.position.y + stepMoveOut, 0)
          }).delay(0.1).to(0.4, {
            position: endPos,
            scale: v3(0, 0, 0)
          }).call(() => {
            this.onFinish();
          }).start();
        }

        getUpdateWalletValue() {
          return this.winValue;
        }

        playAnimHideLblCoin() {
          if (this.curLabel) {
            stopAllActions(this.curLabel.node);
            tween(this.curLabel.node).then(scaleTo(0.25, 0, 0)).start();
          }
        }

        forceHideAnimation() {
          this.onFinish();
        }

        forceUpdateWallet(reward) {
          const player = gfReferenceManager.instance.getPlayerByIndex(this.index);

          if (player && player.isMe) {
            reward ? player.addToDisplayWallet(reward) : this.queue.forEach(data => player.addToDisplayWallet(data.gold));
          }
        }

        onFinish() {
          this.reset();
          this.node.active = false;
          this.indexQueue = 0;
          this.queue.length = 0;
        }

        reset() {
          stopAllActions(this.node);
          this.unscheduleAllCallbacks();
          this.resetLabels();
          this.winValue = 0;
          this.coinValue = 0;

          if (!this.originPos) {
            this.originPos = this.node.getPosition();
          }

          this.node.position = this.originPos;
          this.node.setScale(1, 1, 1);
          setOpacity(this.node, 255);
          this.isShowing = false;
        }

        resetLabels() {
          let labels = [this.lblCoin, this.lblCoinOther];
          labels.forEach(label => {
            stopAllActions(label.node);
            label.string = "";
            label.node.angle = 0;
            label.node.setScale(1, 1, 1);
            label.node.active = false;
          });
          labels.length = 0;
        }

        isActive() {
          return this.node.active;
        }

        isNextWheel() {
          return !!this.queue[this.indexQueue];
        }

        onDestroy() {
          stopAllActions(this.node);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "playByQueue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "increaseTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 2.5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lblCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lblCoinOther", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWheelAvatar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfWheel.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, sp, _decorator, tween, sys, TweenSystem, gfWheel, scaleTo, shake, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
      sys = module.sys;
      TweenSystem = module.TweenSystem;
    }, function (module) {
      gfWheel = module.gfWheel;
    }, function (module) {
      scaleTo = module.scaleTo;
      shake = module.shake;
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "0880bwoes1NJrO81C86bZJm", "gfWheelAvatar", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfWheelAvatar = exports('gfWheelAvatar', (_dec = ccclass('gfWheelAvatar'), _dec2 = property(Sprite), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = class gfWheelAvatar extends gfWheel {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "avatarFish", _descriptor, this);

          _initializerDefineProperty(this, "spineRibbon", _descriptor2, this);

          _initializerDefineProperty(this, "prefixNameAvatar", _descriptor3, this);

          this.numberWheelRemain = 0;
          this.isPlayingShowAvatar = false;
          this.oldSkin = '';
        }

        onLoad() {
          if (!this.playByQueue) {
            this.playByQueue = true;
          }

          super.onLoad();
        }

        setupAnimSpine() {
          this.animName.appear = "appear";
          this.animName.idle = "idle";
          this.animName.hide = "hide";
        }

        setupSkinSpine() {
          this.skinName.bigWin = "bigWin";
          this.skinName.superWin = "superWin";
          this.skinName.megaWin = "megaWin";
        }

        show(data) {
          this.numberWheelRemain = 0;
          super.show(data);
          this.playSpineAnimRibbon();
          this.playAnimAvatarFish(data);
        }

        playAnimAvatarFish(data) {
          this.resetAvatarFish();
          this.isPlayingShowAvatar = true;
          const {
            scale,
            sprite
          } = this.getConfigAvatarFish(data.fishKind);

          if (this.avatarFish) {
            this.avatarFish.spriteFrame = sprite;
          }

          tween(this.avatarFish.node).tag(0).then(scaleTo(0.1, 0, 0, 'backOut')).then(scaleTo(0.5, scale, scale, 'backOut')).then(shake(this.avatarFish.node.position, 0.5)).call(() => {
            this.isPlayingShowAvatar = false;
          }).start();
        }

        getConfigAvatarFish(fishKind) {
          const result = {};
          result.scale = this.getScaleAvatarFishBySkinWheel();
          result.sprite = this.avatarFish.spriteAtlas.spriteFrames[this.prefixNameAvatar + fishKind];
          return result;
        }

        getScaleAvatarFishBySkinWheel(skinName = this.curSkin) {
          let result = 0.8;

          if (skinName == this.skinName.superWin) {
            result = 0.9;
          } else if (skinName == this.skinName.megaWin) {
            result = 1;
          }

          return result;
        }

        playSpineAnimRibbon() {
          if (sys.isNative) {
            this.spineRibbon.setToSetupPose();
          }

          const skinName = this.getSkinRibbonBySkinWheel();

          if (skinName) {
            this.spineRibbon.setSkin(skinName);
          }

          if (this.oldSkin != this.curSkin) {
            this.spineRibbon.setAnimation(0, this.animName.appear, false);
          }

          this.spineRibbon.addAnimation(0, this.animName.idle, true);
        }

        getSkinRibbonBySkinWheel(skinName = this.curSkin) {
          let result = this.animName.bigWin;

          if (skinName == this.skinName.superWin) {
            result = this.animName.superWin;
          } else if (skinName == this.skinName.megaWin) {
            result = this.animName.megaWin;
          }

          return result;
        }

        hideSpineAnimRibbon() {
          this.oldSkin = "";
          this.spineRibbon.setAnimation(0, this.animName.hide, false);
        }

        hideAnimation() {
          this.hideSpineAnimRibbon();
          super.hideAnimation();
        }

        updateData(data) {
          this.numberWheelRemain++;
          const delay = this.getDelayUpdateData();
          this.forceUpdateData(data);

          const callback = () => {
            this.oldSkin = this.curSkin;
            this.numberWheelRemain--;
            super.updateData(data);
            this.playSpineAnimRibbon();
            this.playAnimAvatarFish(data);
          };

          this.scheduleOnce(callback, delay);
        }

        getDelayUpdateData() {
          let result = 0;

          if (this.isPlayingShowAvatar) {
            const actionAvtFish = TweenSystem.instance.ActionManager.getActionByTag(0, this.avatarFish.node);
            const timeRemain = actionAvtFish['_duration'] - actionAvtFish['_elapsed'];

            if (this.indexQueue < 1) {
              result = timeRemain;
            } else {
              result = timeRemain + actionAvtFish['_duration'] * this.numberWheelRemain;
            }
          }

          return Math.max(0, result);
        }

        resetAvatarFish() {
          this.isPlayingShowAvatar = false;
          stopAllActions(this.avatarFish.node);
          this.avatarFish.node.setScale(0, 0, 1);
        }

        reset() {
          super.reset();
          this.resetAvatarFish();
          this.numberWheelRemain = 0;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "avatarFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineRibbon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "prefixNameAvatar", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 'Avatar_';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWheelContainer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCustomDataType.ts', './gfReferenceManager.ts', './gfEffectLayer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, WheelType, gfReferenceManager, gfEffectLayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      WheelType = module.WheelType;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f5de7Zgm9hLVbGTdQ6AF+28", "gfWheelContainer", undefined);

      const {
        ccclass,
        property,
        type
      } = _decorator;
      let gfWheelContainer = exports('gfWheelContainer', (_dec = ccclass('gfWheelContainer'), _dec2 = type(WheelType), _dec(_class = (_class2 = class gfWheelContainer extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "priority", _descriptor, this);

          _initializerDefineProperty(this, "wheelType", _descriptor2, this);

          this.isExtra = false;
        }

        onLoad() {
          this.addToWheelController();
        }

        addToWheelController() {
          const effectLayer = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          const wheelController = effectLayer.wheelController;
          wheelController.addBigWinWheel(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "priority", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wheelType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return WheelType.NORMAL;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWheelController.ts", ['cc', './gfWheel.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfCustomDataType.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfWheel, SetZIndex, registerEvent, removeEvents, gfBaseConfig, gfBaseEvents, WheelType;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfWheel = module.gfWheel;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      WheelType = module.WheelType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5ac8fLHRpLJpVswnvPwdzl", "gfWheelController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let gfWheelController = exports('gfWheelController', (_dec = ccclass('gfWheelController'), _dec(_class = class gfWheelController extends Component {
        constructor(...args) {
          super(...args);
          this.bigWinWheels = [];
        }

        onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.MID_Z_INDEX.WHEEL);
          this.initEvents();
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onExitGameRoom, this);
        }

        addBigWinWheel(wheelContainer) {
          const wheels = wheelContainer.getComponentsInChildren(gfWheel);
          wheels == null ? void 0 : wheels.forEach((wheel, index) => {
            wheel.index = index;
            wheel.priority = wheelContainer.priority;
            wheel.node.active = false;
            wheel.wheelType = wheelContainer.wheelType;
            wheel.isExtra = !!wheelContainer.isExtra;

            if (!this.bigWinWheels[index]) {
              this.bigWinWheels[index] = [];
            }

            this.bigWinWheels[index].push(wheel);
          });
        }

        addExtraWheel(wheelContainer) {
          wheelContainer.node.setParent(this.node);
          this.addBigWinWheel(wheelContainer);
        }

        onPlayWheelEffect(data) {
          if (!data.player.isActive() || !data.GoldReward) return;
          const showData = this.convertToShowData(data);
          const wheel = this.getWheel(data.player.index, data.wheelType);
          const showingWheel = this.getShowingWheel(data.player.index);

          if (!showingWheel || showingWheel.priority == wheel.priority) {
            wheel.showAnimation(showData);
          } else if (showingWheel.priority < wheel.priority) {
            showingWheel.forceUpdateWallet();
            showingWheel.forceHideAnimation();
            wheel.showAnimation(showData);
          } else if (showingWheel.priority > wheel.priority) {
            wheel.forceUpdateWallet(showData.gold);
          }
        }

        canShowBigWinWheel(index = 0, wheelType = WheelType.NORMAL) {
          const wheel = this.getWheel(index, wheelType);
          const showingWheel = this.getShowingWheel(index);

          if (showingWheel && showingWheel.priority > wheel.priority) {
            return false;
          }

          return true;
        }

        getShowingWheel(index = 0) {
          return this.bigWinWheels[index].find(wheel => wheel.isShowing);
        }

        getWheel(index = 0, wheelType = WheelType.NORMAL) {
          return this.bigWinWheels[index].find(wheel => wheel.wheelType == wheelType);
        }

        userExitBoard(index) {
          this.bigWinWheels[index].forEach(wheel => wheel.forceHideAnimation());
        }

        resetOnExit() {
          this.unscheduleAllCallbacks();
          this.bigWinWheels.forEach(wheels => wheels.forEach(wheel => wheel.onFinish()));
        }

        convertToShowData(data) {
          const result = {
            gold: data.GoldReward,
            bet: data.bet || 0,
            isMe: data.player.isMe,
            wheelType: data.wheelType
          };

          if (data.fishKind) {
            result.fishKind = data.fishKind;
          }

          if (data.isWonJP) {
            result.isWonJP = data.isWonJP;
          }

          if (data.itemCount) {
            result.itemCount = data.itemCount;
          }

          return result;
        }

        onExitGameRoom() {
          this.bigWinWheels.forEach(wheels => {
            for (let i = wheels.length - 1; i > 0; --i) {
              if (wheels[i].isExtra) {
                wheels.splice(i, 1);
              }
            }
          });
        }

        onDestroy() {
          removeEvents(this);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWifiStatus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfReferenceManager.ts', './gfBaseEvents.ts', './gfNetworkGameEvent.ts', './gfUtilities.ts', './gfBaseConfig.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, SpriteFrame, Node, Label, Sprite, _decorator, Component, UITransform, Color, isValid, gfDataStore, gfReferenceManager, gfBaseEvents, gfNetworkGameEvent, registerEvent, removeEvents, gfBaseConfig, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      Color = module.Color;
      isValid = module.isValid;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "e6c7c1BvHRELrvHvEHN8RBF", "gfWifiStatus", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const STATUS = {
        STRONG: 0,
        MEDIUM: 1,
        WEAK: 2,
        DISCONNECT: 3
      };
      const WIFI_STATUS_AVERAGE = 5;
      let GfWifiStatus = exports('GfWifiStatus', (_dec = ccclass('GfWifiStatus'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Sprite), _dec(_class = (_class2 = class GfWifiStatus extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listSprite", _descriptor, this);

          _initializerDefineProperty(this, "ping", _descriptor2, this);

          _initializerDefineProperty(this, "labelPing", _descriptor3, this); // @property(Node)
          // protected msNode : Node = null;


          _initializerDefineProperty(this, "spriteIcon", _descriptor4, this);

          this._right = false;
          this._averagePing = 0;
          this._listTotalPing = [];
        }

        onLoad() {
          this.node.active = false;

          if (gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.initEvents();
            this.average();
          }
        }

        initEvents() {
          registerEvent(gfBaseEvents.COMMON.UPDATE_PING, this.onPingUpdate, this);
          registerEvent(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, this.onNetworkState, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.updatePositionWifi, this);
          this.labelPing.string = '0ms';
        }

        setupRight() {
          this._right = true;
          this.ping.getComponent(UITransform).anchorX = 0;
          this.ping.setPosition(-37, this.ping.position.y, this.ping.position.z); //this.msNode.setPosition(60, this.msNode.position.y, this.msNode.position.z);
        }

        onPingUpdate(ms) {
          if (!this.node.active && gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.node.active = true;
          }

          let sprite = null;
          let color = null;
          this.handlerListPing(ms);
          this.average();
          this.enableLbl(true);

          if (this._averagePing > 0 && this._averagePing < 100) {
            sprite = this.listSprite[STATUS.STRONG];
            color = Color.GREEN;
          } else if (this._averagePing >= 100 && this._averagePing < 300) {
            sprite = this.listSprite[STATUS.MEDIUM];
            color = Color.YELLOW;
          } else if (this._averagePing >= 300 && this._averagePing < 500) {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          } else {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          }

          this.labelPing.color = color;
          this.labelPing.string = this._averagePing.toString();
          this.spriteIcon.spriteFrame = sprite;
        }

        onNetworkState(data) {
          if (!isValid(this.node)) return;

          switch (data.EventID) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_CLOSE:
            case gfNetworkGameEvent.NETWORK_POOR:
            case gfNetworkGameEvent.NETWORK_DIE:
              this.spriteIcon.spriteFrame = this.listSprite[STATUS.DISCONNECT];
              this.enableLbl(false);
              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.enableLbl(true);
              this.onPingUpdate(100);
              break;
          }
        }

        updatePositionWifi() {
          const player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfInfo().DeskStation);

          if (!player) {
            return;
          }

          const pos = player.index === 0 ? gfBaseConfig.instance.POS_WIFI_STATUS.LEFT : gfBaseConfig.instance.POS_WIFI_STATUS.RIGHT;
          setOpacity(this.node, 255);
          this.node.active = true;
          this.node.setPosition(pos.x, pos.y, 1);
        }

        enableLbl(status) {
          this.ping.active =
          /*this.msNode.active =*/
          status;
        }

        average() {
          this._averagePing = Math.round(this._listTotalPing.reduce((p, c) => p + c, 0) / this._listTotalPing.length);
        }

        handlerListPing(ms) {
          this._listTotalPing.length >= WIFI_STATUS_AVERAGE && this._listTotalPing.pop();

          this._listTotalPing.push(ms);
        }

        resetOnExit() {
          this.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ping", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelPing", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spriteIcon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalConfig.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f666fZHMPZPYLzkEcEVye4i", "globalConfig", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalNetwork.ts", ['cc', './loadConfigAsync.ts', './game-network.mjs_cjs=&original=.js', './game-network.js'], function (exports) {
  var cclegacy, log, warn, sys, loadConfigAsync, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      warn = module.warn;
      sys = module.sys;
    }, function (module) {
      loadConfigAsync = module.default;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec906OpgxlOkISCFs4dK7/M", "globalNetwork", undefined);

      const network = globalThis.GameNetwork || _cjsExports;
      const {
        MessageManager,
        ServiceRest
      } = network;
      const {
        logger
      } = network.lib;
      logger && logger.updateLogger(log, log, warn);
      const messageManager = MessageManager.getInstance();

      class GlobalNetwork {
        constructor() {
          this.gamesData = {};
          this.token = null;
          this.refreshToken = null;
          this.socket = null;
          this.expectedEvent = '';
          this.expectedCommandId = '';

          this.init = (token, refreshToken = '', envId = 'portal', gameIdSocket = 'all') => {
            log("Network using V3");
            this.token = token;
            this.refreshToken = refreshToken;
            const {
              SOCKET_URL,
              API_URL
            } = loadConfigAsync.getConfig();
            const deviceInfo = {
              os: sys.os,
              osVersion: sys.osVersion,
              platform: sys.platform,
              browser: sys.browserType,
              browserVersion: sys.browserVersion,
              language: sys.language
            };
            messageManager.initSocket({
              socketUrl: SOCKET_URL,
              apiUrl: API_URL,
              urlVerifyToken: 'auth/token/login',
              env: envId,
              games: gameIdSocket,
              token,
              serviceRest: ServiceRest.getInstance('cc'),
              device: deviceInfo
            });
            loadConfigAsync.setUpSentry();
          };

          this.getToken = () => {
            return this.token;
          };

          this.setToken = token => {
            this.token = token;
          };

          this.registerGame = gameData => {
            const {
              gameId,
              gameState
            } = gameData;

            if (typeof Sentry !== 'undefined') {
              Sentry.configureScope(function (scope) {
                scope.setExtra("gameId", gameId);
              });
            }

            if (!gameState) return;
            return new gameState({
              gameData
            });
          };

          this.initGame = (gameData = {}) => {
            gameData.token = this.getToken();

            if (typeof Sentry !== 'undefined') {
              Sentry.configureScope(function (scope) {
                scope.setExtra("gameId", gameData.gameId);
              });
            }

            return gameData;
          };

          this.triggerUserLogout = () => {
            messageManager.closeAndCleanUp();
          };

          this.outGame = () => {};
        }

      }

      const globalNetwork = exports('default', new GlobalNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandleConfigFish1975.ts", ['cc', './gfNetworkParser.ts', './gfNetworkGameEvent.ts', './gfUtilities.ts', './NodePoolConfig1975.ts'], function (exports) {
  var cclegacy, Component, _decorator, gfNetworkParser, gfNetworkGameEvent, isEmpty, NodePoolConfig1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      isEmpty = module.isEmpty;
    }, function (module) {
      NodePoolConfig1975 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a0507yNqFlDFa2gWQMsHwFZ", "HandleConfigFish1975", undefined);

      const {
        ccclass
      } = _decorator;
      let HandleConfigFish1975 = exports('HandleConfigFish1975', (_dec = ccclass('HandleConfigFish1975'), _dec(_class = class HandleConfigFish1975 extends Component {
        constructor(...args) {
          super(...args);
          this.fishConfig = null;
        }

        onLoad() {
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LOGIN, this.onGameLogin.bind(this));
        }

        onGameLogin(data) {
          if (!isEmpty(data)) {
            if (data.lfc) {
              data.lfc.forEach(fish => {
                if (fish.FishKind == 44) {
                  this.handleConfigTurtle(fish);
                }
              });
              this.updateFishConfig(data.lfc);
            }
          }
        }

        updateFishConfig(data) {
          let {
            FISH_CONFIG
          } = NodePoolConfig1975.instance;

          for (let i = 0; i < data.length; i++) {
            this.fishConfig = FISH_CONFIG;
            let config = null;

            if (data[i] && this.fishConfig[data[i].FishKind]) {
              config = this.fishConfig[data[i].FishKind];
              config.zIndex = data[i].fli;
              config.speed = data[i].sf;
              config.ScaleSize = data[i].ScaleFish;
              config.skipFlipY = data[i].skf;
              config.skipRotate = data[i].skr;
              config.timeScale = data[i].ts;
            }
          }
        }

        handleConfigTurtle(data) {
          let {
            TURTLE_SLOT_MACHINE_CONFIG
          } = NodePoolConfig1975.instance;
          TURTLE_SLOT_MACHINE_CONFIG.zIndex = data.fli;
          TURTLE_SLOT_MACHINE_CONFIG.speed = data.sf;
          TURTLE_SLOT_MACHINE_CONFIG.ScaleSize = data.ScaleFish;
          TURTLE_SLOT_MACHINE_CONFIG.skipFlipY = data.skf;
          TURTLE_SLOT_MACHINE_CONFIG.skipRotate = data.skr;
          TURTLE_SLOT_MACHINE_CONFIG.timeScale = data.ts;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/hashKey.ts", ['cc', './crypto-core.ts'], function (exports) {
  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6917c03Q9dI0ZrQj5E+tge7", "hashKey", undefined);

      const hash = exports('default', (cipherMethodKey = '', message = '') => {
        if (!cipherMethodKey) {
          return '';
        }

        const upperCaseCipherMethodKey = cipherMethodKey.trim().toUpperCase();

        if (upperCaseCipherMethodKey.length < 3) {
          return '';
        }

        return CryptoJS[upperCaseCipherMethodKey](message).toString();
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UpdatePanel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, log, sys, game, UpdatePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      log = module.log;
      sys = module.sys;
      game = module.game;
    }, function (module) {
      UpdatePanel = module.UpdatePanel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "8ee7ate7OVDEph2ruFCYLQZ", "HotUpdate", undefined);

      const jsb = window.jsb;
      const {
        ccclass,
        property
      } = _decorator;
      let HotUpdate = exports('HotUpdate', (_dec = ccclass('HotUpdate'), _dec2 = property(UpdatePanel), _dec(_class = (_class2 = class HotUpdate extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "panel", _descriptor, this);

          _initializerDefineProperty(this, "manifestFileName", _descriptor2, this);

          _initializerDefineProperty(this, "storageDownloadPath", _descriptor3, this);

          _initializerDefineProperty(this, "maximumRetry", _descriptor4, this);

          _initializerDefineProperty(this, "autodownload", _descriptor5, this);

          this._updating = false;
          this._canRetry = false;
          this._storagePath = '';
          this._am = null;
          this._updateListener = null;
          this._failCount = 0;

          this.versionCompareHandle = function (versionA, versionB) {
            console.log(`JS Custom Version Compare: version A is ${versionA} version B is ${versionB}`);
            var vA = versionA.split('.');
            var vB = versionB.split('.');

            for (var i = 0; i < vA.length; ++i) {
              var a = parseInt(vA[i]);
              var b = parseInt(vB[i] || '0');

              if (a === b) {
                continue;
              } else {
                return a - b;
              }
            }

            if (vB.length > vA.length) {
              return -1;
            } else {
              return 0;
            }
          };
        }

        get IsUpdating() {
          return this._updating;
        }

        onLoad() {
          if (!jsb) {
            return;
          }

          let writablePath = jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/';
          this._storagePath = `${writablePath}${this.storageDownloadPath}`;
          console.log('Storage path for remote asset : ' + this._storagePath);
          this._am = new jsb.AssetsManager('', this._storagePath, this.versionCompareHandle); //TODO MD5 compare check

          this._am.setVerifyCallback(this._verifyFileHandle.bind(this));

          this.loadManifest();
          this.checkUpdate();
        }

        _verifyFileHandle(path, asset) {
          var compressed = asset.compressed;
          var relativePath = asset.path;
          var size = asset.size;

          if (compressed) {
            log(`Verification passed: ${relativePath}`);
            return true;
          } else {
            //TODO implement md5 content, it's too lagging
            var fileSize = jsb.fileUtils.getFileSize(path);

            if (size == fileSize) {
              log(`Verification passed: ${relativePath}`);
              return true;
            }

            log(`Verification failed: ${relativePath} ${size}/${fileSize}`);
            return false;
          }
        }

        loadManifest() {
          if (sys.isNative) {
            if (jsb.fileUtils.isFileExist(this.manifestFileName)) {
              let path = jsb.fileUtils.fullPathForFilename(this.manifestFileName);
              log(`find manifest at path ${path}`);

              this._am.loadLocalManifest(path);
            } else {
              log(`cant find manifest`);
            }
          }
        }

        loadManifestFromString(customManifestStr) {
          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log('load custom manifest');
            var manifest = new jsb.Manifest(customManifestStr, this._storagePath);

            this._am.loadLocalManifest(manifest, this._storagePath);
          }
        }

        checkUpdate() {
          if (!this._am) return;

          if (this._updating) {
            this.panel.info.string = 'Checking version';
            return;
          }

          this._updating = true;

          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log(`Failed to checkUpdate, need to load manifest first`);
          }

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            log(`Failed to load local manifest ...`);
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();
        }

        checkCb(event) {
          console.log('Code: ' + event.getEventCode());
          let hasNewVersion = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log("No local manifest file found, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log("Fail to download manifest file, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log("Already up to date with the latest remote version.");
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              log('New version found');
              hasNewVersion = true;
              this.panel.node.active = true;
              this.panel.byteProgress.progress = 0;
              break;

            default:
              return;
          }

          this._am.setEventCallback(null);

          this._checkListener = null;
          this._updating = false;

          if (hasNewVersion && this.autodownload) {
            this.hotUpdate();
          }
        }

        hotUpdate() {
          if (this._am && !this._updating) {
            this._updating = true;

            this._am.setEventCallback(this.updateCb.bind(this));

            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
              log(`Failed to load hotupdate, need load manifest first`);
            }

            this._failCount = 0;

            this._am.update();
          }
        }

        updateCb(event) {
          var doFinishJob = false;
          var failed = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log(`No local manifest file found, hot update skipped.`);
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              let percent = event.getPercent();

              if (!isNaN(percent)) {
                this.panel.byteProgress.progress = percent;
                this.panel.info.string = `Updating...${Math.floor(percent * 100)}%`;
              }

              var msg = event.getMessage();

              if (msg) {
                log(`Updated file: ${msg}`);
              }

              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log(`Fail to download manifest file, hot update skipped.`);
              failed = true;
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log(`Already up to date with the latest remote version.`);
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              log(`Update finished. ${event.getMessage()}`);
              doFinishJob = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              log(`Update failed. ${event.getMessage()}`);
              this._updating = false;
              this._canRetry = true;
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              log(`Asset update error: ${event.getAssetId()}, ${event.getMessage()}`);
              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              this.panel.info.string = event.getMessage();
              break;
          }

          if (failed) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            this._updating = false;
          }

          if (this._canRetry) {
            if (this._failCount < this.maximumRetry) {
              this._failCount += 1;
              this.retry();
            } else {
              this.panel.info.string = "Failed to update new version, restart game to try again";
            }
          }

          if (doFinishJob) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            var searchPaths = jsb.fileUtils.getSearchPaths();

            var newPaths = this._am.getLocalManifest().getSearchPaths();

            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift.apply(searchPaths, newPaths);
            localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths);
            setTimeout(() => {
              game.restart();
            }, 1000);
          }
        }

        retry() {
          if (!this._updating && this._canRetry) {
            this._canRetry = false;
            this.panel.info.string = `Retry failed Assets...`;

            this._am.downloadFailedAssets();
          }
        }

        onDestroy() {
          if (this._updateListener) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "manifestFileName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 'project.manifest';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "storageDownloadPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 'gemi-hotupdate';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maximumRetry", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "autodownload", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdateV2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, resources, JsonAsset, sys, log, game;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      sys = module.sys;
      log = module.log;
      game = module.game;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "faa1bVpuvdAFLSlAkTKzx99", "HotUpdateV2", undefined);

      const jsb = window.jsb;
      const {
        ccclass,
        property
      } = _decorator;
      let HotUpdate = exports('HotUpdate', (_dec = ccclass('HotUpdate'), _dec(_class = (_class2 = class HotUpdate extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mainHotupdate", _descriptor, this);

          this._updating = false;
          this._canRetry = false;
          this._storagePath = '';
          this._assetManager = null;
          this._checkListener = null;
          this._updateListener = null;
          this._failCount = 0;
        }

        onLoad() {
          if (this.mainHotupdate && jsb) {
            resources.load("jsons/LobbyConfig", JsonAsset, (err, json) => {
              const projectConfig = json;
              var hotupdateURL = projectConfig.json['remote-asset-url'];
              var storageFolder = projectConfig.json['remote-asset-storage'];

              if (projectConfig.json['splitPlatform']) {
                var platform = '';

                if (sys.os === sys.OS.ANDROID) {
                  platform = 'android/';
                } else if (sys.os === sys.OS.IOS) {
                  platform = 'ios/';
                }

                hotupdateURL = hotupdateURL + `${platform}`;
              }

              if (projectConfig.json['splitBundle']) {
                hotupdateURL = hotupdateURL + `lobby/`;
              }

              const manifest = {
                "packageUrl": hotupdateURL,
                "remoteManifestUrl": `${hotupdateURL}project.manifest`,
                "remoteVersionUrl": `${hotupdateURL}version.manifest`,
                "version": "0.0.0",
                "assets": {},
                "searchPaths": []
              };
              this.init(manifest, storageFolder);
              this.checkUpdate();
            });
          }
        }

        init(manifest, folder) {
          log(`Init hotupdate ${JSON.stringify(manifest)} to folder ${folder}`);

          if (!jsb) {
            return;
          }

          this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') + folder;
          log('Storage path for remote asset : ' + this._storagePath);

          var versionCompareHandle = function (versionA, versionB) {
            log("JS Custom Version Compare: version A is " + versionA + ', version B is ' + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');

            for (var i = 0; i < vA.length; ++i) {
              var a = parseInt(vA[i]);
              var b = parseInt(vB[i] || '0');

              if (a === b) {
                continue;
              } else {
                return a - b;
              }
            }

            return vB.length > vA.length ? -1 : 0;
          };

          this._assetManager = new jsb.AssetsManager('', this._storagePath, versionCompareHandle);

          this._assetManager.setVerifyCallback(this.verifyAssetFunc);

          this.node.emit('HOT_UPDATE_PROGRESS', {
            file: 0,
            byte: 0
          });
          this.loadCustomManifest(manifest);
        }

        loadManifestFromFile(url) {
          if (this._assetManager.getState() === jsb.AssetsManager.State.UNINITED) {
            log(`Load manifest from ${url}`);

            this._assetManager.loadLocalManifest(url);
          }
        }

        loadCustomManifest(manifest) {
          const manifestString = JSON.stringify(manifest);

          if (this._assetManager.getState() === jsb.AssetsManager.State.UNINITED) {
            log('Using custom manifest');
            var manifest = new jsb.Manifest(manifestString, this._storagePath);

            this._assetManager.loadLocalManifest(manifest, this._storagePath);
          }
        }

        verifyAssetFunc(path, asset) {
          var compressed = asset.compressed;
          var expectedMD5 = asset.md5;
          var relativePath = asset.path;
          var size = asset.size;

          if (compressed) {
            log(`Verification passed : ${relativePath}`);
            return true;
          } else {
            log(`Verification passed : ${relativePath} ( ${expectedMD5} )`);
            return true;
          }
        }

        checkCallback(event) {
          console.log('Code: ' + event.getEventCode());
          let newVersion = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log(`No local manifest file found, hot update skipped.`);
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log(`Fail to download manifest file, hot update skipped.`);
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log(`Already up to date with the latest remote version. Send Event Done`);
              this.node.emit('HOT_UPDATE_UP_TO_DATE');
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              log(`New version found, please try to update. ( ${Math.ceil(this._assetManager.getTotalBytes() / 1024)} kb)`);
              this.node.emit('HOT_UPDATE_PROGRESS', {
                file: 0,
                byte: 0
              });
              newVersion = true;
              break;

            default:
              return;
          }

          this._assetManager.setEventCallback(null);

          this._checkListener = null;
          this._updating = false;

          if (newVersion) {
            this.hotUpdate();
          }
        }

        updateCallback(event) {
          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log(`No local manifest file found, hot update skipped.`);
              this.node.emit('HOT_UPDATE_UP_TO_DATE');
              this.onHotupdateFailed();
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              const byteProgress = event.getPercent();
              const fileProgress = event.getPercentByFile();

              if (!isNaN(byteProgress) && !isNaN(fileProgress)) {
                this.node.emit('HOT_UPDATE_PROGRESS', {
                  file: fileProgress,
                  byte: byteProgress
                });
              }

              log(`Progress update ${fileProgress}, ${byteProgress}`);
              var msg = event.getMessage();

              if (msg) {
                log(`Updated file:  ${msg}`);
              }

              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log(`Fail to download manifest file, hot update skipped.`);
              this.onHotupdateFailed();
              this.node.emit('HOT_UPDATE_UP_TO_DATE');
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log(`Already up to date with the latest remote version.`);
              this.node.emit('HOT_UPDATE_UP_TO_DATE');
              this.onHotupdateFailed();
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              log(`Update finished. ${event.getMessage()}`);
              this.onHotupdateSuccess();
              this.node.emit('HOT_UPDATE_FINISH');
              this._updating = false;

              if (this.mainHotupdate) {
                setTimeout(() => {
                  game.restart();
                }, 1000);
              }

              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              log(`Update failed. ${event.getMessage()}`);
              this._updating = false;
              this._canRetry = true;
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              log(`Asset update error: ${event.getAssetId()}, ${event.getMessage()}`);
              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              log(event.getMessage());
              break;
          }
        }

        onHotupdateSuccess() {
          this._assetManager.setEventCallback(null);

          this._updateListener = null;
          var searchPaths = jsb.fileUtils.getSearchPaths();

          var newPaths = this._assetManager.getLocalManifest().getSearchPaths();

          log(`Add new search path ${JSON.stringify(newPaths)}`);
          Array.prototype.unshift.apply(searchPaths, newPaths);
          localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
          jsb.fileUtils.setSearchPaths(searchPaths);
        }

        onHotupdateFailed() {
          this._assetManager.setEventCallback(null);

          this._updateListener = null;
          this._updating = false;
        }

        retry() {
          if (!this._updating && this._canRetry) {
            this._canRetry = false;
            log(`Retry failed Assets...`);

            this._assetManager.downloadFailedAssets();
          }
        }

        checkUpdate() {
          if (this._updating) {
            log(`Checking or updating ...`);
            return;
          }

          if (this._assetManager.getState() === jsb.AssetsManager.State.UNINITED) {
            log(`Asseet manager is null state`);
          }

          if (!this._assetManager.getLocalManifest() || !this._assetManager.getLocalManifest().isLoaded()) {
            log(`Failed to load local manifest ...`);
            return;
          }

          this._assetManager.setEventCallback(this.checkCallback.bind(this));

          try {
            this._assetManager.checkUpdate();
          } catch (e) {
            console.log(e);
          }

          this._updating = true;
        }

        hotUpdate() {
          log('onHotupdate start');

          if (this._assetManager && !this._updating) {
            this.node.emit('HOT_UPDATE_START');

            this._assetManager.setEventCallback(this.updateCallback.bind(this));

            if (this._assetManager.getState() === jsb.AssetsManager.State.UNINITED) {
              log(`Failed to load local manifest ...`);
              return;
            }

            this._failCount = 0;

            this._assetManager.update();

            this._updating = true;
          }
        }

        onDestroy() {
          if (this._updateListener) {
            this._assetManager.setEventCallback(null);

            this._updateListener = null;
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainHotupdate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HUDController1975.ts", ['cc', './gfHUDController.ts'], function (exports) {
  var cclegacy, _decorator, gfHUDController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfHUDController = module.gfHUDController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e7aaGPuO1PKaHgnf6j22+S", "HUDController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let HUDController1975 = exports('HUDController1975', (_dec = ccclass('HUDController1975'), _dec(_class = class HUDController1975 extends gfHUDController {
        constructor(...args) {
          super(...args);
          this._scaleFactor = 1;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IndexedDB.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        class IndexedDB {
          constructor(onLoadSuccess) {
            if (cc.sys.isNative) {
              return;
            }

            if (!('indexedDB' in window)) {
              console.log('This browser doesn\'t support IndexedDB');
              return;
            }

            let request = indexedDB.open("record");

            request.onupgradeneeded = function () {
              // The database did not previously exist, so create object stores and indexes.
              let db = request.result;
              let images = db.createObjectStore("images", {
                keyPath: "id"
              });
              let idIndex = images.createIndex("by_id", "id", {
                unique: true
              });
              let idSession = images.createIndex("by_sessionId", "sessionId");
              let list_recorded = db.createObjectStore("list_recorded", {
                keyPath: "sessionId"
              });
              let sessionId = list_recorded.createIndex("sessionId", "sessionId", {
                unique: true
              });
              this.db = db;
            };

            request.onsuccess = () => {
              this.db = request.result;
              onLoadSuccess && onLoadSuccess();
              cc.log("Open IDB success!");
            };

            request.onerror = () => {
              cc.log("Open IDB error!");
            };
          }

          add(objectKey, data) {
            if (this.db) {
              let tx = this.db.transaction(objectKey, "readwrite");
              let store = tx.objectStore(objectKey);
              store.put(data);

              tx.oncomplete = function () {
                console.log("add data successfully with " + objectKey);
              };
            }
          }

          get(objectKey, indexKey, id, callback) {
            if (this.db) {
              let tx = this.db.transaction(objectKey, "readonly");
              let store = tx.objectStore(objectKey);
              let index = store.index(indexKey);
              let request = index.get(id);

              request.onsuccess = () => {
                var matching = request.result;

                if (matching !== undefined) {
                  callback && callback(matching);
                }
              };
            }
          }

          getAll(objectKey, indexKey, callback) {
            if (this.db) {
              let tx = this.db.transaction(objectKey, "readonly");
              let store = tx.objectStore(objectKey);
              let index = store.index(indexKey);
              let request = index.getAll();

              request.onsuccess = () => {
                var matching = request.result;

                if (matching !== undefined) {
                  callback && callback(matching);
                }
              };

              return request;
            }
          }

          remove(objectKey, id) {
            if (this.db) {
              let request = this.db.transaction(objectKey, "readwrite").objectStore(objectKey).delete(id);

              request.onsuccess = () => {
                console.log(id + " has been removed from your database.");
              };
            }
          }

          destroyDB() {
            if (this.db) {
              let requestClearImages = this.db.transaction("images", "readwrite").objectStore("images").clear();

              requestClearImages.onsuccess = () => {
                console.log("STORE has been removed from your database.");
              };

              let requestClearRecords = this.db.transaction("records", "readwrite").objectStore("images").clear();

              requestClearRecords.onsuccess = () => {
                console.log("STORE has been removed from your database.");
              };
            }
          }

          close() {
            if (this.db) {
              this.db.close();
              this.db;
            }
          }

        }

        module.exports = IndexedDB; // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/InitSocketComponent.ts", ['cc', './globalNetwork.ts'], function (exports) {
  var cclegacy, Component, _decorator, globalNetwork;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fe931LhyMNInZ7vvHP8UfBj", "InitSocketComponent", undefined);

      const {
        ccclass
      } = _decorator;
      let InitSocketComponent = exports('InitSocketComponent', (_dec = ccclass('InitSocketComponent'), _dec(_class = class InitSocketComponent extends Component {
        init(token) {
          globalNetwork.init(token);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/issuesRecorder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './monitorDataStore.ts', './sessionModel.ts', './screenshot.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, find, MonitorDataStore, IssueInformation, ScreenShot;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      find = module.find;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }, function (module) {
      IssueInformation = module.IssueInformation;
    }, function (module) {
      ScreenShot = module.ScreenShot;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "932c9tDzaZKi4gMBZwSSQsZ", "issuesRecorder", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const MINUTE = 60000;
      let IssuesRecorder = exports('default', (_dec = property(ScreenShot), ccclass(_class = (_class2 = class IssuesRecorder extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "screenshot", _descriptor, this);

          this.totalFrames = 120;
          this.totalFPSPerSecond = 0;
          this.totalSecondTimes = 0;
          this.counterFPSPerSecond = 0;
          this.isRecording = false;
          this.timeCounting = 0;
          this.currentFPS = 0;
          this.lastTimeRecord = 0;
        }

        get currentTime() {
          return Date.now();
        }

        get recordConfig() {
          return MonitorDataStore.instance.recordData.recordConfig;
        }

        get recordData() {
          return MonitorDataStore.instance.recordData;
        }

        startRecord() {
          this.resetRecord();
          this.isRecording = true;
        }

        stopRecord() {
          this.isRecording = false;
        }

        resetRecord() {
          this.totalFPSPerSecond = 0;
          this.totalSecondTimes = 0;
          this.counterFPSPerSecond = 0;
          this.timeCounting = 0;
          this.currentFPS = 0;
        }

        update(dt) {
          if (this.isRecording) {
            this.calculateFPS(dt);
          }
        }

        recordIssue() {
          var issue = new IssueInformation();
          var currentTime = Date.now();
          issue.time = currentTime;
          issue.FPS = this.currentFPS;
          this.screenshot.takeScreenshot(currentTime.toString());
          this.lastTimeRecord = currentTime;
          const director = this.getMainDirector();

          if (director && director['getGameMeta']) {
            issue.metaData = director['getGameMeta']();
          } else {
            issue.metaData = {
              error: 'Game not implement function get data'
            };
          }

          this.recordData.arrayIssues.push(issue);
        }

        calculateFPS(dt) {
          this.counterFPSPerSecond += 1;
          this.timeCounting += dt;

          if (this.timeCounting >= 1) {
            this.currentFPS = this.counterFPSPerSecond;
            this.totalFPSPerSecond += this.counterFPSPerSecond;
            this.totalSecondTimes++;
            this.timeCounting -= 1;
            this.counterFPSPerSecond = 0;

            if (this.validateRecordIssue()) {
              this.recordIssue();
            }
          }
        }

        validateRecordIssue() {
          var isLowFPS = this.currentFPS < this.recordConfig.targetFPS;
          var enoughFrame = this.totalFPSPerSecond >= this.totalFrames;
          var enoughTime = this.currentTime - this.lastTimeRecord >= this.recordConfig.eventTime * MINUTE;
          return isLowFPS && enoughFrame && enoughTime;
        }

        getMainDirector() {
          let result = find('Canvas').getComponentInChildren('Director');
          if (!result) result = find('Canvas').getComponentInChildren('gfMainController');
          return result;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "screenshot", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemLeviathan1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './Config1975.ts', './DataStore1975.ts', './EventsCode1975.ts', './utils2.ts', './gfReferenceManager.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Sprite, _decorator, Component, v3, tween, UITransform, gfEventEmitter, Config1975, DataStore1975, EventsCode1975, getRandomInt, gfReferenceManager, fadeOut, v3f;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      v3 = module.v3;
      tween = module.tween;
      UITransform = module.UITransform;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      v3f = module.v3f;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a4d663TubFJHZtCKTX1c2p0", "ItemLeviathan1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const ANIMATION_NAME = {
        APPEAR: "appear",
        DISAPPEAR: "disappear",
        IDLE: "idle"
      };
      const SKIN_NAME = {
        1: "item_1",
        2: "item_2",
        3: "item_3",
        4: "item_4",
        5: "jackpot"
      };
      let ItemLeviathan1975 = exports('ItemLeviathan1975', (_dec = ccclass('ItemLeviathan1975'), _dec2 = property(sp.Skeleton), _dec3 = property(Sprite), _dec(_class = (_class2 = class ItemLeviathan1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spineItem", _descriptor, this);

          _initializerDefineProperty(this, "spriteItem", _descriptor2, this);

          this.dataItem = void 0;
          this.callbackFunc = void 0;
        }

        onLoad() {
          this.node.active = false;
        }

        playAnimation(data, callback) {
          this.callbackFunc = callback;
          this.dataItem = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (!player) {
            return;
          }

          this.onStart();
        }

        onStart() {
          this.node.active = true;
          const {
            bossInfo,
            DeskStation
          } = this.dataItem;
          let positionInScene = v3(0, 0, 0);
          let positionClone = this.node.position.clone();

          if (bossInfo) {
            const durAppear = 0.5; //this.spineItem.findAnimation("appear").duration;

            const randomX = getRandomInt(30, 70);
            const randomY = getRandomInt(30, 70);
            const dir = Math.random() < 0.5 ? -1 : 1;
            positionClone.x = positionClone.x + randomX * 2 * dir;
            positionClone.y = positionClone.y - 100;
            positionInScene = this._checkPositionInScene(positionClone, 250, 250);
            this.spineItem.setSkin(SKIN_NAME[bossInfo.State]);
            this.spineItem.setAnimation(0, ANIMATION_NAME.APPEAR, false);
            this.spineItem.addAnimation(0, ANIMATION_NAME.IDLE, false);
            tween(this.node).to(durAppear / 2, {
              position: v3(this.node.position.x + randomX * dir, this.node.position.y + randomY),
              angle: -180 * dir
            }).to(durAppear / 2, {
              position: v3(this.node.position.x + randomX * 2 * dir, this.node.position.y - 100, 0),
              angle: -360 * dir
            }).by(0.1, {
              position: v3(0, 20, 0),
              angle: 15 * dir
            }).by(0.1, {
              position: v3(0, -20, 0)
            }).by(0.1, {
              position: v3(0, 20, 0)
            }).by(0.1, {
              position: v3(0, -20, 0),
              angle: -15 * dir
            }).delay(0.5).to(0.5, {
              position: positionInScene
            }).call(() => {
              if (bossInfo.State === 5 && DeskStation == DataStore1975.instance.getSelfDeskStation()) {
                this._playAnimationFinalItem();
              } else {
                this.spineItem.setAnimation(0, ANIMATION_NAME.DISAPPEAR, false);
                tween(this.node).delay(0.5).call(() => {
                  this.onFinish();
                }).delay(0.5).call(() => {
                  this.node.destroy();
                }).start();
              }
            }).start();
          } else {
            const durAppear = 0.5; //this.spineItem.findAnimation("appear").duration;

            const randomX = getRandomInt(30, 70);
            const randomY = getRandomInt(30, 70);
            const dir = Math.random() < 0.5 ? -1 : 1;
            tween(this.node).to(durAppear / 2, {
              position: v3(this.node.position.x + randomX * dir, this.node.position.y + randomY),
              angle: -180 * dir
            }).to(durAppear / 2, {
              position: v3(this.node.position.x + randomX * 2 * dir, this.node.position.y - 100, 0),
              angle: -360 * dir
            }).by(0.1, {
              position: v3(0, 20, 0),
              angle: 15 * dir
            }).by(0.1, {
              position: v3(0, -20, 0)
            }).by(0.1, {
              position: v3(0, 20, 0)
            }).by(0.1, {
              position: v3(0, -20, 0),
              angle: -15 * dir
            }).delay(0.5).call(() => {
              this.onFinish();
            }).delay(0.5).call(() => {
              this.node.destroy();
            }).start();
          }
        }

        _playAnimationFinalItem() {
          tween(this.node).delay(0.5).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.STOP_ALL_AUDIO);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_JACKPOT);
          }).to(0.5, {
            position: v3(0, 0, 0)
          }).by(0.1, {
            position: v3(0, 20, 0)
          }).by(0.1, {
            position: v3(0, -20, 0)
          }).by(0.1, {
            position: v3(0, 20, 0)
          }).by(0.1, {
            position: v3(0, -20, 0)
          }).parallel(tween().to(0.7, {
            scale: v3(5, 5, 5),
            angle: 360
          }), tween().call(() => {
            tween(this.node).then(fadeOut(0.5)).start();
          })).delay(0.7).call(() => {
            this.spineItem.setAnimation(0, ANIMATION_NAME.DISAPPEAR, false);
            this.onFinish();
          }).delay(0.5).call(() => {
            this.node.destroy();
          }).start();
        }

        onFinish() {
          if (this.callbackFunc && typeof this.callbackFunc === 'function') {
            this.dataItem.endPosReward = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3f(0));
            this.callbackFunc(this.dataItem);
          }
        }

        _checkPositionInScene(endDrop, effectWidth, effectHeight) {
          let newPos = endDrop;
          const {
            Width,
            Height
          } = Config1975.instance.realSize;
          const x = Math.min(Math.max(newPos.x, -Width / 2 + effectWidth / 2), Width / 2 - effectWidth / 2);
          const y = Math.min(Math.max(newPos.y, -Height / 2 + effectHeight / 2), Height / 2 - effectHeight / 2);
          return v3(x, y);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spriteItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemLobby.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, Button, Node, _decorator, Component, v3, Event, Color;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Button = module.Button;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      v3 = module.v3;
      Event = module.Event;
      Color = module.Color;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "5c457zj8jZGaJOoxcIw0SWf", "ItemLobby", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ItemLobby = exports('ItemLobby', (_dec = ccclass('ItemLobby'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = class ItemLobby extends Component {
        constructor(...args) {
          super(...args);
          this.gameId = null;

          _initializerDefineProperty(this, "icon", _descriptor, this);

          _initializerDefineProperty(this, "button", _descriptor2, this);

          this.config = null;

          _initializerDefineProperty(this, "jackpot", _descriptor3, this);

          _initializerDefineProperty(this, "dimColor", _descriptor4, this);
        }

        onLoad() {
          this.node.on('ENABLE_SELECTED_GAME', this.enableGame.bind(this));
          this.node.on('DISABLE_SELECTED_GAME', this.disableGame.bind(this));
          this.node.on('JACKPOT_UPDATE', this.jackpotUpdate, this);
        }

        setJackpotY(posY) {
          this.jackpot.setPosition(v3(0, posY, 0));
        }

        jackpotUpdate(data) {
          // console.log(data);
          let listJP = Object.keys(data);
          let jpName = listJP.filter(it => {
            return it.indexOf(this.gameId) > 0;
          })[0];

          if (jpName) {
            let jpData = data[jpName];
            this.jackpot.emit('UPDATE_JACKPOT', {
              JP3: jpData[3],
              JP2: jpData[2],
              JP1: jpData[1]
            });
          }
        }

        setSprite(spriteFrame) {
          this.icon.spriteFrame = spriteFrame;
        }

        setGameConfig(id, config) {
          this.gameId = id;
          this.config = config;
        }

        disableGame() {
          this.icon.active = false; // this.icon.getComponent(Sprite).color = this.dimColor;
        }

        enableGame() {
          this.icon.active = true; // this.icon.getComponent(Sprite).color = Color.WHITE;
        }

        onClick() {
          let ev = new Event('RQ_PLAY_GAME', true);
          ev['gameId'] = this.gameId;
          ev['config'] = this.config;
          this.node.dispatchEvent(ev);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotCellHistory1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseCellHistory.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Label, formatUserName, formatMoney, GfBaseCellHistory, formatTimeStamp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      formatUserName = module.formatUserName;
      formatMoney = module.formatMoney;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }, function (module) {
      formatTimeStamp = module.formatTimeStamp;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e2656dsYRJBOqEUtXgMs038", "JackpotCellHistory1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotCellHistory1975 = exports('JackpotCellHistory1975', (_dec = ccclass('JackpotCellHistory1975'), _dec2 = property(Node), _dec(_class = (_class2 = class JackpotCellHistory1975 extends GfBaseCellHistory {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "background", _descriptor, this);
        }

        updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = formatTimeStamp(data.time, "#DD#/#MM#\n#hhhh#:#mm#:#ss#");
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = formatMoney(data.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotHistory1975.ts", ['cc', './gfEventEmitter.ts', './gfBaseHistory.ts', './EventsCode1975.ts', './gfBaseCellHistory.ts', './gfActionHelper.ts', './AnimUtils.ts'], function (exports) {
  var cclegacy, Button, tween, Tween, _decorator, gfEventEmitter, GfBaseHistory, EventsCode1975, GfBaseCellHistory, call, setOpacity;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      tween = module.tween;
      Tween = module.Tween;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }, function (module) {
      call = module.call;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d398dvQUhlCjaTkarxWZG9F", "JackpotHistory1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotHistory1975 = exports('JackpotHistory1975', (_dec = ccclass('JackpotHistory1975'), _dec(_class = class JackpotHistory1975 extends GfBaseHistory {
        onNextButton() {
          this.btnBack.getComponent(Button).interactable = false;
          this.btnNext.getComponent(Button).interactable = false;
          gfEventEmitter.instance.emit(EventsCode1975.POPUP.HISTORY_BLOCK_TOUCH);
          super.onNextButton();
        }

        onPreviousButton() {
          this.btnBack.getComponent(Button).interactable = false;
          this.btnNext.getComponent(Button).interactable = false;
          gfEventEmitter.instance.emit(EventsCode1975.POPUP.HISTORY_BLOCK_TOUCH);
          super.onPreviousButton();
        }

        updateTableData(data) {
          this.table.children.forEach((child, index) => {
            if (index < data.length) {
              child.getComponent(GfBaseCellHistory).updateData(data[index]);
              child.getChildByName('background').active = index % 2 !== 0;
              child.active = true;
            } else {
              child.active = false;
            }
          });
        }

        playLoading() {
          this.noHistoryText.active = false;
          this.loading.active = true;
          setOpacity(this.loading, 0);
          tween(this.loading).delay(0.3).then(call(() => {
            setOpacity(this.loading, 255);
          })).start();
        }

        stopLoading() {
          Tween.stopAllByTarget(this.loading);
          setOpacity(this.loading, 0);
          this.loading.active = false;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotInfo1975.ts", ['cc', './gfJackpotBossInfo.ts'], function (exports) {
  var cclegacy, _decorator, gfJackpotBossInfo;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfJackpotBossInfo = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b40764OaGlErLIn0dfcxfoc", "JackpotInfo1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotInfo1975 = exports('JackpotInfo1975', (_dec = ccclass('JackpotInfo1975'), _dec(_class = class JackpotInfo1975 extends gfJackpotBossInfo {}) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWinPopup1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfCutSceneJackpotWin.ts', './EventsCode1975.ts', './gf3DParticle.ts', './gfActionHelper.ts', './animateNumberLabel.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, tween, v3, Button, gfCutSceneJackpotWin, EventsCode1975, gf3DParticle, fadeTo, stopAllActions, AnimateNumberLabel, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
      Button = module.Button;
    }, function (module) {
      gfCutSceneJackpotWin = module.gfCutSceneJackpotWin;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      fadeTo = module.fadeTo;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6c25avQySpAQrpL3m/TRZMb", "JackpotWinPopup1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotWinPopup1975 = exports('JackpotWinPopup1975', (_dec = ccclass('JackpotWinPopup1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class JackpotWinPopup1975 extends gfCutSceneJackpotWin {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mainSpine", _descriptor, this);

          this._duration = 9.65;
        }

        _tweenCoin() {
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.txtCoin.getComponent(AnimateNumberLabel).onUpdateValue(this.winValue, (this._duration - 2) * 1000);
          this.tweenCoin = tween(this).delay(this._duration - 2).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.STOP_EFFECT_JACKPOT_COIN);
          }).delay(2).call(() => {
            this.mainSpine.setAnimation(0, "disappear", false);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_JACKPOT_END);
            this.hide();
          });
          this.tweenCoin.start();
        }

        startAnimShow() {
          this.txtCoin.string = "";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(1, 1, 1));
          this.mainSpine.setAnimation(0, "appear", false);
          this.mainSpine.addAnimation(0, "idle", true);
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.blackLayer.node).delay(0.7).then(fadeTo(0.5, 180)).call(() => {
            this.particleCoin.active = true;
            this.particleCoin.getComponent(gf3DParticle).startAnimation();
          }).start();
          this.scheduleOnce(() => {
            this.winFrame.getComponent(Button).interactable = true;

            this._tweenCoin();
          }, 0.65);
        }

        quickShow() {
          if (this.coinValue === this.winValue) {
            return;
          }

          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_STOP_BOSS_JACKPOT);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_JACKPOT_END);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.STOP_EFFECT_JACKPOT_COIN);
          this.mainSpine.setAnimation(0, "disappear", false);
          this.winFrame.active = false;
          this.blackLayer.getComponent(Button).interactable = false;
          stopAllActions(this);
          this.tweenCoin.stop();
          this.txtCoin.getComponent(AnimateNumberLabel).onUpdateValue(this.winValue, 1);
          this.tweenCoin = tween(this).delay(0.1).call(() => {
            this.hide();
          }).start();
        }

        hide(forceClose = false) {
          super.hide(forceClose);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_STOP_BOSS_JACKPOT);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWinWheel1975.ts", ['cc', './gfReferenceManager.ts', './gfWheel.ts'], function (exports) {
  var cclegacy, tween, v3, sys, _decorator, gfReferenceManager, gfWheel;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      v3 = module.v3;
      sys = module.sys;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfWheel = module.gfWheel;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d951dywmn1Iap1A73etDZDx", "JackpotWinWheel1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotWinWheel1975 = exports('JackpotWinWheel1975', (_dec = ccclass('JackpotWinWheel1975'), _dec(_class = class JackpotWinWheel1975 extends gfWheel {
        constructor(...args) {
          super(...args);
          this.increaseTime = 6;
        }

        hideAnimation() {
          this.isShowing = false;
          let stepMoveOut = this.index > 1 ? -20 : 20;
          const player = gfReferenceManager.instance.getPlayerByIndex(this.index);

          if (player) {
            if (player.isMe) {
              player.addToDisplayWallet(this.getUpdateWalletValue());
            }
          }

          this.spine.setAnimation(0, this.animName.hide, false); // this.playAnimHideLblCoin();

          tween(this.node).to(0.23, {
            position: v3(this.node.position.x, this.node.position.y + stepMoveOut, 0)
          }).delay(0.1).to(0.4, {
            scale: v3(0, 0, 0)
          }).call(() => {
            this.onFinish();
          }).start();
        }

        show(data) {
          this.reset();
          this.isShowing = true;
          this.node.active = true;
          this.curLabel = data.isMe ? this.lblCoin : this.lblCoinOther;
          this.coinValue = 0;
          this.updateWinValue(data);
          const skinName = this.getSkinByBet(data.bet);
          this.playAnimSpine(skinName);
          this.tweenCoin(data.isMe);
        }

        tweenCoin(isMe) {
          this.resetLblCoinAngle();
          const curValue = this.coinValue;
          tween(this.node).delay(0.28).to(3.5, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = curValue + ratio * (this.winValue - curValue);
            }
          }).call(() => {
            if (isMe) {
              this.tweenLblCoin();
            }
          }).delay(1).call(() => {
            this.tweenCoinFinish();
          }).start();
        }

        playAnimSpine(skinName) {
          this.curSkin = skinName; // this.spine.setSkin(skinName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this.spine.setAnimation(0, this.animName.appear, false);
          this.spine.addAnimation(0, this.animName.idle, true);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/jbs_runtime_md5.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('default', jbs_runtime_md5);

      cclegacy._RF.push({}, "9f6f0JLxDpHZ51HTUGRMvQn", "jbs_runtime_md5", undefined);
      /**
       * from jsb_runtime_md5.js
       * @param data - Input data as Uint8Array
       * @returns MD5 hash string or null if invalid input
       */


      function jbs_runtime_md5(data) {
        // for test/debug
        function fflog(msg) {
          try {
            console.log(msg);
          } catch (e) {
            console.log(e);
          }
        } // convert number to (unsigned) 32 bit hex, zero filled string


        function to_zerofilled_hex(n) {
          const t1 = (n >>> 24).toString(16);
          const t2 = (n & 0x00FFFFFF).toString(16);
          return "00".substr(0, 2 - t1.length) + t1 + "000000".substr(0, 6 - t2.length) + t2;
        } // convert a 64 bit unsigned number to array of bytes. Little endian


        function int64_to_bytes(num) {
          const retval = [];

          for (let i = 0; i < 8; i++) {
            retval.push(num & 0xFF);
            num = num >>> 8;
          }

          return retval;
        } //  32 bit left-rotation


        function rol(num, places) {
          return num << places & 0xFFFFFFFF | num >>> 32 - places;
        } // The 4 MD5 functions


        function fF(b, c, d) {
          return b & c | ~b & d;
        }

        function fG(b, c, d) {
          return d & b | ~d & c;
        }

        function fH(b, c, d) {
          return b ^ c ^ d;
        }

        function fI(b, c, d) {
          return c ^ (b | ~d);
        } // pick 4 bytes at specified offset. Little-endian is assumed


        function bytes_to_int32(arr, off) {
          return arr[off + 3] << 24 | arr[off + 2] << 16 | arr[off + 1] << 8 | arr[off];
        } // convert the 4 32-bit buffers to a 128 bit hex string. (Little-endian is assumed)


        function int128le_to_hex(h3, h2, h1, h0) {
          let ra = "";
          let t = 0;
          let ta = 0;

          for (let i = 3; i >= 0; i--) {
            ta = arguments[i];
            t = ta & 0xFF;
            ta = ta >>> 8;
            t = t << 8;
            t = t | ta & 0xFF;
            ta = ta >>> 8;
            t = t << 8;
            t = t | ta & 0xFF;
            ta = ta >>> 8;
            t = t << 8;
            t = t | ta;
            ra = ra + to_zerofilled_hex(t);
          }

          return ra;
        } // check input data type and perform conversions if needed


        if (!(data instanceof Uint8Array)) {
          fflog("input data type mismatch only support Uint8Array");
          return null;
        }

        const databytes = [];

        for (let i = 0; i < data.byteLength; i++) {
          databytes.push(data[i]);
        } // save original length


        const org_len = databytes.length; // first append the "1" + 7x "0"

        databytes.push(0x80); // determine required amount of padding

        let tail = databytes.length % 64; // no room for msg length?

        if (tail > 56) {
          // pad to next 512 bit block
          for (let j = 0; j < 64 - tail; j++) {
            databytes.push(0x0);
          }

          tail = databytes.length % 64;
        }

        for (let i = 0; i < 56 - tail; i++) {
          databytes.push(0x0);
        } // message length in bits mod 512 should now be 448
        // append 64 bit, little-endian original msg length (in *bits*!)


        databytes.push(...int64_to_bytes(org_len * 8)); // initialize 4x32 bit state

        let h0 = 0x67452301;
        let h1 = 0xEFCDAB89;
        let h2 = 0x98BADCFE;
        let h3 = 0x10325476; // temp buffers

        let a = 0,
            b = 0,
            c = 0,
            d = 0;

        function _add(n1, n2) {
          return 0x0FFFFFFFF & n1 + n2;
        } // function update partial state for each run


        const updateRun = function (nf, sin32, dw32, b32) {
          const temp = d;
          d = c;
          c = b; //b = b + rol(a + (nf + (sin32 + dw32)), b32);

          b = _add(b, rol(_add(a, _add(nf, _add(sin32, dw32))), b32));
          a = temp;
        }; // Digest message


        for (let i = 0; i < databytes.length / 64; i++) {
          // initialize run
          a = h0;
          b = h1;
          c = h2;
          d = h3;
          const ptr = i * 64; // do 64 runs

          updateRun(fF(b, c, d), 0xd76aa478, bytes_to_int32(databytes, ptr), 7);
          updateRun(fF(b, c, d), 0xe8c7b756, bytes_to_int32(databytes, ptr + 4), 12);
          updateRun(fF(b, c, d), 0x242070db, bytes_to_int32(databytes, ptr + 8), 17);
          updateRun(fF(b, c, d), 0xc1bdceee, bytes_to_int32(databytes, ptr + 12), 22);
          updateRun(fF(b, c, d), 0xf57c0faf, bytes_to_int32(databytes, ptr + 16), 7);
          updateRun(fF(b, c, d), 0x4787c62a, bytes_to_int32(databytes, ptr + 20), 12);
          updateRun(fF(b, c, d), 0xa8304613, bytes_to_int32(databytes, ptr + 24), 17);
          updateRun(fF(b, c, d), 0xfd469501, bytes_to_int32(databytes, ptr + 28), 22);
          updateRun(fF(b, c, d), 0x698098d8, bytes_to_int32(databytes, ptr + 32), 7);
          updateRun(fF(b, c, d), 0x8b44f7af, bytes_to_int32(databytes, ptr + 36), 12);
          updateRun(fF(b, c, d), 0xffff5bb1, bytes_to_int32(databytes, ptr + 40), 17);
          updateRun(fF(b, c, d), 0x895cd7be, bytes_to_int32(databytes, ptr + 44), 22);
          updateRun(fF(b, c, d), 0x6b901122, bytes_to_int32(databytes, ptr + 48), 7);
          updateRun(fF(b, c, d), 0xfd987193, bytes_to_int32(databytes, ptr + 52), 12);
          updateRun(fF(b, c, d), 0xa679438e, bytes_to_int32(databytes, ptr + 56), 17);
          updateRun(fF(b, c, d), 0x49b40821, bytes_to_int32(databytes, ptr + 60), 22);
          updateRun(fG(b, c, d), 0xf61e2562, bytes_to_int32(databytes, ptr + 4), 5);
          updateRun(fG(b, c, d), 0xc040b340, bytes_to_int32(databytes, ptr + 24), 9);
          updateRun(fG(b, c, d), 0x265e5a51, bytes_to_int32(databytes, ptr + 44), 14);
          updateRun(fG(b, c, d), 0xe9b6c7aa, bytes_to_int32(databytes, ptr), 20);
          updateRun(fG(b, c, d), 0xd62f105d, bytes_to_int32(databytes, ptr + 20), 5);
          updateRun(fG(b, c, d), 0x2441453, bytes_to_int32(databytes, ptr + 40), 9);
          updateRun(fG(b, c, d), 0xd8a1e681, bytes_to_int32(databytes, ptr + 60), 14);
          updateRun(fG(b, c, d), 0xe7d3fbc8, bytes_to_int32(databytes, ptr + 16), 20);
          updateRun(fG(b, c, d), 0x21e1cde6, bytes_to_int32(databytes, ptr + 36), 5);
          updateRun(fG(b, c, d), 0xc33707d6, bytes_to_int32(databytes, ptr + 56), 9);
          updateRun(fG(b, c, d), 0xf4d50d87, bytes_to_int32(databytes, ptr + 12), 14);
          updateRun(fG(b, c, d), 0x455a14ed, bytes_to_int32(databytes, ptr + 32), 20);
          updateRun(fG(b, c, d), 0xa9e3e905, bytes_to_int32(databytes, ptr + 52), 5);
          updateRun(fG(b, c, d), 0xfcefa3f8, bytes_to_int32(databytes, ptr + 8), 9);
          updateRun(fG(b, c, d), 0x676f02d9, bytes_to_int32(databytes, ptr + 28), 14);
          updateRun(fG(b, c, d), 0x8d2a4c8a, bytes_to_int32(databytes, ptr + 48), 20);
          updateRun(fH(b, c, d), 0xfffa3942, bytes_to_int32(databytes, ptr + 20), 4);
          updateRun(fH(b, c, d), 0x8771f681, bytes_to_int32(databytes, ptr + 32), 11);
          updateRun(fH(b, c, d), 0x6d9d6122, bytes_to_int32(databytes, ptr + 44), 16);
          updateRun(fH(b, c, d), 0xfde5380c, bytes_to_int32(databytes, ptr + 56), 23);
          updateRun(fH(b, c, d), 0xa4beea44, bytes_to_int32(databytes, ptr + 4), 4);
          updateRun(fH(b, c, d), 0x4bdecfa9, bytes_to_int32(databytes, ptr + 16), 11);
          updateRun(fH(b, c, d), 0xf6bb4b60, bytes_to_int32(databytes, ptr + 28), 16);
          updateRun(fH(b, c, d), 0xbebfbc70, bytes_to_int32(databytes, ptr + 40), 23);
          updateRun(fH(b, c, d), 0x289b7ec6, bytes_to_int32(databytes, ptr + 52), 4);
          updateRun(fH(b, c, d), 0xeaa127fa, bytes_to_int32(databytes, ptr), 11);
          updateRun(fH(b, c, d), 0xd4ef3085, bytes_to_int32(databytes, ptr + 12), 16);
          updateRun(fH(b, c, d), 0x4881d05, bytes_to_int32(databytes, ptr + 24), 23);
          updateRun(fH(b, c, d), 0xd9d4d039, bytes_to_int32(databytes, ptr + 36), 4);
          updateRun(fH(b, c, d), 0xe6db99e5, bytes_to_int32(databytes, ptr + 48), 11);
          updateRun(fH(b, c, d), 0x1fa27cf8, bytes_to_int32(databytes, ptr + 60), 16);
          updateRun(fH(b, c, d), 0xc4ac5665, bytes_to_int32(databytes, ptr + 8), 23);
          updateRun(fI(b, c, d), 0xf4292244, bytes_to_int32(databytes, ptr), 6);
          updateRun(fI(b, c, d), 0x432aff97, bytes_to_int32(databytes, ptr + 28), 10);
          updateRun(fI(b, c, d), 0xab9423a7, bytes_to_int32(databytes, ptr + 56), 15);
          updateRun(fI(b, c, d), 0xfc93a039, bytes_to_int32(databytes, ptr + 20), 21);
          updateRun(fI(b, c, d), 0x655b59c3, bytes_to_int32(databytes, ptr + 48), 6);
          updateRun(fI(b, c, d), 0x8f0ccc92, bytes_to_int32(databytes, ptr + 12), 10);
          updateRun(fI(b, c, d), 0xffeff47d, bytes_to_int32(databytes, ptr + 40), 15);
          updateRun(fI(b, c, d), 0x85845dd1, bytes_to_int32(databytes, ptr + 4), 21);
          updateRun(fI(b, c, d), 0x6fa87e4f, bytes_to_int32(databytes, ptr + 32), 6);
          updateRun(fI(b, c, d), 0xfe2ce6e0, bytes_to_int32(databytes, ptr + 60), 10);
          updateRun(fI(b, c, d), 0xa3014314, bytes_to_int32(databytes, ptr + 24), 15);
          updateRun(fI(b, c, d), 0x4e0811a1, bytes_to_int32(databytes, ptr + 52), 21);
          updateRun(fI(b, c, d), 0xf7537e82, bytes_to_int32(databytes, ptr + 16), 6);
          updateRun(fI(b, c, d), 0xbd3af235, bytes_to_int32(databytes, ptr + 44), 10);
          updateRun(fI(b, c, d), 0x2ad7d2bb, bytes_to_int32(databytes, ptr + 8), 15);
          updateRun(fI(b, c, d), 0xeb86d391, bytes_to_int32(databytes, ptr + 36), 21); // update buffers

          h0 = _add(h0, a);
          h1 = _add(h1, b);
          h2 = _add(h2, c);
          h3 = _add(h3, d);
        } // Done! Convert buffers to 128 bit (LE)


        return int128le_to_hex(h3, h2, h1, h0).toLowerCase();
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JoinGameTransition1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventsCode1975.ts', './gfUtilities.ts', './gfActionHelper.ts', './utils.ts', './Config1975.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Component, UIOpacity, tween, EventsCode1975, SetZIndex, registerEvent, removeEvents, stopAllActions, setOpacity, Config1975, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c7428lNVhpCCadJwqS7XYLy", "JoinGameTransition1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JoinGameTransition1975 = exports('JoinGameTransition1975', (_dec = ccclass('JoinGameTransition1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class JoinGameTransition1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spineWaveJoinGame", _descriptor, this);

          this.nodeOpacity = null;
          this._canHide = false;
        }

        onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          SetZIndex(this.node, Config1975.instance.PERSIST_Z_INDEX.JOIN_GAME_TRANSITION);
          this.initEvents();
        }

        initEvents() {
          registerEvent(EventsCode1975.EFFECT_LAYER.PLAY_TRANSITION_JOIN_GAME, this.playTransitionJoinGame, this);
          registerEvent(EventsCode1975.COMMON.HIDE_WAITING, this.hideTransitionJoinGame, this);
        }

        playTransitionJoinGame() {
          this.resetOnExit();
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_TRAINSION_LOBBY);
          stopAllActions(this.node);
          this.scheduleOnce(() => {
            this.node.active = true;
            this.spineWaveJoinGame.node.active = true;
            setOpacity(this.node, 255);
            this.spineWaveJoinGame.setAnimation(0, 'animation', false);
            this.spineWaveJoinGame.setCompleteListener(() => {
              this.spineWaveJoinGame.setCompleteListener(() => {});

              if (this._canHide) {
                this.hideTransitionJoinGame();
              } else {
                this._canHide = true;
              }
            });
          }, 0.11);
        }

        hideTransitionJoinGame() {
          if (!this._canHide) {
            this._canHide = true;
            return;
          }

          tween(this.node).delay(1).call(() => {
            this.resetOnExit();
          }).start();
        }

        resetOnExit() {
          stopAllActions(this.node);
          this.spineWaveJoinGame.setCompleteListener(() => {});
          this.spineWaveJoinGame.clearTracks();
          this.spineWaveJoinGame.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineWaveJoinGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/keepAspectRatio.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Size, Canvas, _decorator, Component, view, find, UITransform, Vec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Size = module.Size;
      Canvas = module.Canvas;
      _decorator = module._decorator;
      Component = module.Component;
      view = module.view;
      find = module.find;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a9297PUszFFeIivVexJK7dI", "keepAspectRatio", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let keepAspectRatio = exports('keepAspectRatio', (_dec = ccclass('keepAspectRatio'), _dec2 = property(Size), _dec3 = property(Canvas), _dec(_class = (_class2 = class keepAspectRatio extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "designResolution", _descriptor, this);

          _initializerDefineProperty(this, "canvas", _descriptor2, this);
        }

        start() {
          this.registerEvent();
          this.onCanvasResize();
        }

        registerEvent() {
          view.on('canvas-resize', this.onCanvasResize.bind(this));
        }

        onCanvasResize() {
          if (!this.canvas) {
            this.canvas = find("kHelper-Canvas").getComponent(Canvas);
          }

          var scale = this.getNodeScale(this.canvas.node.getComponent(UITransform).contentSize);
          this.node.setScale(scale);
        }

        getNodeScale(canvasSize) {
          var ratioWidth = canvasSize.width / this.designResolution.width;
          var ratioHeight = canvasSize.height / this.designResolution.height;
          var scaleV3 = new Vec3();
          var scale = 1;
          scale = Math.min(ratioHeight, ratioWidth);
          scale = scale < 0.7 ? 0.7 : scale;
          scaleV3.x = scale;
          scaleV3.y = scale;
          scaleV3.z = 1;
          return scaleV3;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "designResolution", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayoutNodeInstance.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "e17d55QpGxCiprWgGmQLSDT", "LayoutNodeInstance", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LayoutNodeInstance = exports('LayoutNodeInstance', (_dec = ccclass('LayoutNodeInstance'), _dec(_class = (_class2 = class LayoutNodeInstance extends Component {
        onLoad() {
          // console.log("LayoutNodeInstance onLoad");
          if (LayoutNodeInstance.onLoadCallback != null) {
            LayoutNodeInstance.onLoadCallback(this.node);
          }
        }

      }, _class2.onLoadCallback = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeaderFish1975.ts", ['cc', './gfEventEmitter.ts', './SpineFish1975.ts', './EventsCode1975.ts', './gfActionHelper.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, tween, _decorator, gfEventEmitter, SpineFish1975, EventsCode1975, delay, call, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      SpineFish1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      delay = module.delay;
      call = module.call;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "153bdCNJQZAUrEUHroNk5aB", "LeaderFish1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LeaderFish1975 = exports('LeaderFish1975', (_dec = ccclass('LeaderFish1975'), _dec(_class = class LeaderFish1975 extends SpineFish1975 {
        constructor(...args) {
          super(...args);
          this.catchData = void 0;
        }

        onCatch(data) {
          this.catchData = data;
          const {
            ListFish,
            GoldReward
          } = data;

          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.stopAllActions();
          this.resetColor();
          this.setDie(true);
          data.TotalReward = GoldReward;

          if (ListFish && ListFish.length > 0) {
            for (let i = 0; i < ListFish.length; i++) {
              data.TotalReward += ListFish[i].GoldReward;
            }

            data.LeaderFish = this;
            data.isSmallLeaderFish = true;
            gfEventEmitter.instance.emit(EventsCode1975.LEADER_FISH.CATCH_FISH_BY_LIGHTNING_CHAIN, data);
          } else {
            super.onCatch(data);
          }
        }

        playEffectDie() {
          if (!this.catchData || !this.catchData.ListFish || this.catchData.ListFish.length == 0) {
            return;
          }

          this.moveAction = tween(this.node);
          this.fishAnim.setAnimation(0, "explode", false);
          this.moveAction.then(delay(0.1));
          this.moveAction.then(call(() => {
            const fishPosition = this.getLockPositionByWorldSpace();
            gfEventEmitter.instance.emit(EventsCode1975.LEADER_FISH.CREATE_EXPLODE_LEADER_FISH, fishPosition);
          }));
          this.moveAction.then(delay(1));
          this.moveAction.then(call(() => {
            this.catchData.fishPos = this.getLockPositionByWorldSpace();
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, this.catchData, true);
          })); // this.moveAction.then(gfFadeOutAll(0.5));

          this.moveAction.then(call(() => {
            this.onDie();
          }));
          this.moveAction.start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LetterSpacing.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, Label, warn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      warn = module.warn;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "06158ZI+yBOppfcR+STxzzA", "LetterSpacing", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LetterSpacing = exports('LetterSpacing', (_dec = ccclass('LetterSpacing'), _dec(_class = (_class2 = class LetterSpacing extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spacingX", _descriptor, this);
        }

        start() {
          let label = this.node.getComponent(Label);

          if (label) {
            label.spacingX = this.spacingX;
          } else {
            warn("do not have label to custom letter spacing");
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spacingX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Leviathan1975.ts", ['cc', './gfEventEmitter.ts', './EventsCode1975.ts', './gfBossBase.ts', './DataStore1975.ts', './gfActionHelper.ts', './Config1975.ts', './gfUtilities.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, Color, v3, BoxCollider2D, tween, UITransform, isValid, _decorator, gfEventEmitter, EventsCode1975, gfBossBase, DataStore1975, stopAllActions, fadeOut, Config1975, updateSpineTime, isPointInScreen, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      v3 = module.v3;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      UITransform = module.UITransform;
      isValid = module.isValid;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfBossBase = module.gfBossBase;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      updateSpineTime = module.updateSpineTime;
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "50a96mVxStAV6X6fWXrrbrq", "Leviathan1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const FLAG_COLOR = new Color(230, 230, 230, 255);
      const TOTAL_LIVE_TIME = 53.3;
      const BASE_TIME_SCALE = 1;
      const TIME_MOVE_IN = 2.5;
      const TIME_MOVE_OUT = 45;
      let LEVIATHAN_STATE = exports('LEVIATHAN_STATE', /*#__PURE__*/function (LEVIATHAN_STATE) {
        LEVIATHAN_STATE[LEVIATHAN_STATE["NORMAL"] = 0] = "NORMAL";
        LEVIATHAN_STATE[LEVIATHAN_STATE["DROP_1"] = 1] = "DROP_1";
        LEVIATHAN_STATE[LEVIATHAN_STATE["DROP_2"] = 2] = "DROP_2";
        LEVIATHAN_STATE[LEVIATHAN_STATE["DROP_3"] = 3] = "DROP_3";
        LEVIATHAN_STATE[LEVIATHAN_STATE["DROP_4"] = 4] = "DROP_4";
        LEVIATHAN_STATE[LEVIATHAN_STATE["JACKPOT"] = 5] = "JACKPOT";
        return LEVIATHAN_STATE;
      }({}));
      const ANIMATION_NAME = {
        APPEAR: "intro",
        PATH: "path1",
        IDLE_MIX: "mix_idle",
        DIE: "mix_die",
        ESCAPE: "animation"
      };

      var ANIM_TRACK = /*#__PURE__*/function (ANIM_TRACK) {
        ANIM_TRACK[ANIM_TRACK["MAIN"] = 0] = "MAIN";
        ANIM_TRACK[ANIM_TRACK["EFFECT"] = 1] = "EFFECT";
        return ANIM_TRACK;
      }(ANIM_TRACK || {});

      const BONE_NAME = {
        1: "bone7",
        2: "string13",
        3: "string23",
        4: "item4",
        5: "item5"
      };
      let Leviathan1975 = exports('Leviathan1975', (_dec = ccclass('Leviathan1975'), _dec(_class = class Leviathan1975 extends gfBossBase {
        constructor(...args) {
          super(...args);
          this.curState = void 0;
          this.endData = null;
          this._isLoaded = false;
          this._isOutScreen = false;
          this._timePassed = 0;
          this.head = null;
          this.tail = null;
          this.body = null;
        }

        onLoad() {
          super.onLoad();
          this.setupAnimCompleteListener();
          this.fishAnim.setEventListener((trackEntry, event) => {});
        }

        start() {
          if (!this._isLoaded) {
            this.setupBones();
          }

          this.HIT_COLOR = FLAG_COLOR;
        }

        initFishData(data) {
          const isFlip = DataStore1975.instance.getSelfDeskStation() > 1 ? -180 : 0;
          this.resetAllActions();
          this.node.active = true;
          this.node.angle = isFlip;
          this._isDie = false;
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._buildTick = data.BuildTick;
          this._initialized = true;
          this.endData = null;
          super.initFishData(data);
          this.setupBones();
          this._isDie = true;
          this.listBox.forEach(boxCollider => {
            boxCollider.enabled = false;
          });
          this.curState = data.State ? data.State : 0;
          this.fishAnim.setToSetupPose();
          const timePassed = Math.max(0, (DataStore1975.instance.getTime() - data.BuildTick) / 1000);
          this._initialized = true;
          this.playAnimAppear(data, timePassed);
          this.node.setPosition(v3(Config1975.instance.AppSize.Width / 2, Config1975.instance.AppSize.Height / 2, 0));
          this.updateZIndex(1000);
        }

        playAnimAppear(data, timePassed) {
          const durAppear = this.fishAnim.findAnimation(ANIMATION_NAME.APPEAR).duration;

          if (this.curState == LEVIATHAN_STATE.NORMAL && timePassed < durAppear) {
            const trackEntry = this.fishAnim.setAnimation(ANIM_TRACK.MAIN, ANIMATION_NAME.APPEAR, false);

            if (timePassed > 0) {
              trackEntry.animationStart = timePassed;
            }
          } else {
            this.enableCollider();
            this._isDie = false;
            const timeRemain = TOTAL_LIVE_TIME - timePassed + durAppear;
            this.fishAnim.setAnimation(ANIM_TRACK.EFFECT, ANIMATION_NAME.IDLE_MIX, true);
            this.startMoving(timeRemain);
            this.initFishState();
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.BOSS_JACKPOT);
          }
        }

        startMoving(timeRemain) {
          this.node.setPosition(Config1975.instance.AppSize.Width / 2, Config1975.instance.AppSize.Height / 2);
          this.fishAnim.timeScale = BASE_TIME_SCALE;
          const timePassed = Math.max(TOTAL_LIVE_TIME - timeRemain, 0);
          this._timePassed = timePassed;
          this.setAnimation(ANIMATION_NAME.PATH, timePassed);
        }

        setAnimation(animName, timePassed) {
          this.fishAnim.setAnimation(ANIM_TRACK.MAIN, animName, false);

          if (timePassed > 0) {
            updateSpineTime(this.fishAnim, timePassed * BASE_TIME_SCALE);

            if (this._timePassed >= TIME_MOVE_IN && this._timePassed <= TIME_MOVE_OUT) {
              this.scheduleOnce(this.checkOutScreen, 0);
            }
          }
        }

        update(dt) {
          if (this._isDie) return;
          this._timePassed += dt;

          if (this._timePassed < TIME_MOVE_IN || this._timePassed > TIME_MOVE_OUT) {
            this.checkOutScreen();
          }
        }

        setupAnimCompleteListener() {
          this.fishAnim.setCompleteListener(trackEntry => {
            if (trackEntry.animation) {
              const trackIndex = trackEntry.trackIndex;
              const animName = trackEntry.animation.name;

              if (trackIndex == ANIM_TRACK.MAIN) {
                switch (animName) {
                  case ANIMATION_NAME.APPEAR:
                    this.enableCollider();
                    this._isDie = false;
                    this.fishAnim.setAnimation(ANIM_TRACK.MAIN, ANIMATION_NAME.PATH, false);
                    this.fishAnim.setAnimation(ANIM_TRACK.EFFECT, ANIMATION_NAME.IDLE_MIX, true);
                    gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.BOSS_JACKPOT);
                    break;

                  case ANIMATION_NAME.PATH:
                    this.onDie();
                    break;
                }
              }
            }
          });
        }

        setupBones() {
          if (this._isLoaded == false) {
            this.listBox = this.node.getComponentsInChildren(BoxCollider2D);
            this._isLoaded = true;
            this.head = this.node.getChildByName('box0');
            this.tail = this.node.getChildByName('box7');
            this.body = this.node.getChildByName('box3');
          }
        }

        bossChangeState(data) {
          data.bossInfo.forEach(bossInfo => {
            let dataItem = { ...data
            };
            dataItem.bossInfo = bossInfo;

            switch (bossInfo.State) {
              case LEVIATHAN_STATE.DROP_1:
                this.fishAnim.setAttachment("item1", "empty");
                dataItem.bonus = bossInfo.GoldReward;
                this.onDropArmor(dataItem);
                break;

              case LEVIATHAN_STATE.DROP_2:
                this.fishAnim.setAttachment("item2", "empty");
                this.fishAnim.setAttachment("item6", "empty");
                dataItem.bonus = bossInfo.GoldReward;
                this.onDropArmor(dataItem);
                break;

              case LEVIATHAN_STATE.DROP_3:
                this.fishAnim.setAttachment("item3", "empty");
                this.fishAnim.setAttachment("item7", "empty");
                dataItem.bonus = bossInfo.GoldReward;
                this.onDropArmor(dataItem);
                break;

              case LEVIATHAN_STATE.DROP_4:
                this.fishAnim.setAttachment("item4", "empty");
                this.fishAnim.setAttachment("item8", "empty");
                dataItem.bonus = bossInfo.GoldReward;
                this.onDropArmor(dataItem);
                break;

              case LEVIATHAN_STATE.JACKPOT:
                this.fishAnim.setAttachment("item5", "empty"); // this.fishAnim.setAttachment("add_item5", "empty");

                this.onDropArmor(dataItem);
                this.onCatchLeviathan(dataItem);
                break;
            }
          });
        }

        onCatchLeviathan(data) {
          this.setDie(true);
          this.endData = data;
          this.playEffectDie();
        }

        playEffectDie() {
          this.unschedule(this.checkOutScreen);
          stopAllActions(this.fishAnim.node);
          const animInfo = this.fishAnim.findAnimation(ANIMATION_NAME.DIE);
          tween(this.node).call(() => {
            const mainTrack = this.fishAnim.getCurrent(0);
            tween(mainTrack).to(0.3, {
              timeScale: 0
            }).start();
            this.fishAnim.setAnimation(ANIM_TRACK.EFFECT, ANIMATION_NAME.DIE, false);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_DIE);
          }).delay(animInfo.duration * 0.35).call(() => {
            this.endData.posStartItem = this.getBonePositionInWorldSpace("item5");
            gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.EXPLOSION, this.endData);
          }).delay(animInfo.duration * 0.35).then(fadeOut(0.1)).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            this.fishAnim.timeScale = 0;
            this.fishAnim.setCompleteListener(() => {});
            this.fishAnim.clearTrack(0);
          }).delay(1.25).call(() => {
            this.onDie();
          }).start();
        }

        onDropArmor(data) {
          data.posStartItem = this.getBonePositionInWorldSpace(BONE_NAME[data.bossInfo.State]);
          gfEventEmitter.instance.emit(EventsCode1975.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.1,
            amplitude: 10
          });
          gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.DROP_ARMOR_ITEM, data);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_DROP_ITEM);
        }

        onDropBonus(data) {
          data.posStartItem = this.getBonePositionInWorldSpace("item5");
          gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.DROP_BONUS_ITEM, data);
        }

        getBonePositionInWorldSpace(name) {
          const bone = this.fishAnim.findBone(name);

          if (bone) {
            return this.fishAnim.node.getComponent(UITransform).convertToWorldSpaceAR(v3(bone.worldX, bone.worldY, 0));
          }
        }

        enableCollider(status = true) {
          this.listBox.forEach(boxCollider => {
            boxCollider.enabled = status;
          });
        }

        onDie(isResume = false) {
          this.unscheduleAllCallbacks();
          super.onDie();

          if (this.endData != null) {
            gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.CATCH_JP, this.endData);
          }

          stopAllActions(this.fishAnim);
          this.fishAnim.clearTracks();

          if (!isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        }

        onHit() {
          this.tweenHitColor();
        }

        tweenHitColor() {
          if (!this.fishAnim || !this.fishAnim.node) return;
          stopAllActions(this.fishAnim.color);
          tween(this.fishAnim.color).to(0.15, {
            r: FLAG_COLOR.r,
            b: FLAG_COLOR.b,
            g: FLAG_COLOR.g
          }).delay(0.3).call(() => {
            this.tweenResetColor();
          }).start();
        }

        tweenResetColor() {
          if (!this.fishAnim || !this.fishAnim.node) return;
          tween(this.fishAnim.color).to(0.15, {
            r: Color.WHITE.r,
            b: Color.WHITE.b,
            g: Color.WHITE.g
          }).call(() => {
            if (this.fishAnim) {
              this.fishAnim.color = Color.WHITE;
            }
          }).start();
        }

        getLockPositionByNodeSpace(node) {
          if (!isValid(this.node.parent)) return null;
          const positionList = [this.head.worldPosition, this.body.worldPosition, this.tail.worldPosition];

          for (let i = 0; i < positionList.length; ++i) {
            if (isPointInScreen(this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(positionList[i]))) {
              return node.getComponent(UITransform).convertToNodeSpaceAR(positionList[i]);
            }
          }

          this._isOutScreen = true;
          return node.getComponent(UITransform).convertToNodeSpaceAR(this.tail.worldPosition);
        }

        onEscape() {
          this._isDie = true;
          this.listBox.forEach(boxCollider => {
            boxCollider.enabled = false;
          });
          this.initFishState(); // this.fishAnim.setAnimation(ANIM_TRACK.MAIN, ANIMATION_NAME.ESCAPE, false);

          this.unscheduleAllCallbacks();
          super.onDie();
          stopAllActions(this.fishAnim);
          this.fishAnim.clearTracks();
        }

        checkOutScreen() {
          if (!this._initialized) return;
          const lastState = this._isOutScreen;
          const pointHead = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.head.worldPosition);
          const pointTail = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.tail.worldPosition);
          this._isOutScreen = !(isPointInScreen(pointHead) || isPointInScreen(pointTail));

          if (lastState && !this._isOutScreen) {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME);
          }

          return this._isOutScreen;
        }

        getListBox() {
          return this.listBox;
        }

        checkOutScene() {
          return this._isOutScreen;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeviathanAssetManager1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfReferenceManager.ts', './gfBossAssetsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, changeParent, gfReferenceManager, gfBossAssetsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBossAssetsManager = module.gfBossAssetsManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "710ceGUYFtN54vbUaYA4Moe", "LeviathanAssetManager1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LeviathanAssetManager1975 = exports('LeviathanAssetManager1975', (_dec = ccclass('LeviathanAssetManager1975'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class LeviathanAssetManager1975 extends gfBossAssetsManager {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "jackpotInfo", _descriptor, this);

          _initializerDefineProperty(this, "bossIntro", _descriptor2, this);
        }

        initBossAssetsManager() {
          this.addJackpotInfo();
          super.initBossAssetsManager();
        }

        removeBossAssetsManager() {
          super.removeBossAssetsManager();
          this.removeJPInfoInRoom();
        }

        addJackpotInfo() {
          this.jackpotInfo.active = true;
          this.bossIntro.active = false;
          changeParent(this.jackpotInfo, gfReferenceManager.instance.getMidLayer());
          changeParent(this.bossIntro, gfReferenceManager.instance.getMidLayer());
        }

        removeJPInfoInRoom() {
          this.jackpotInfo.active = false;
          this.jackpotInfo.removeFromParent();
          this.jackpotInfo.destroy();
          this.bossIntro.active = false;
          this.bossIntro.removeFromParent();
          this.bossIntro.destroy();
        }

        removeConfig() {
          this == null ? void 0 : this.destroy();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotInfo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bossIntro", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeviathanExplosion1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bd7507dEYhPmY3mGHOoX+bx", "LeviathanExplosion1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LeviathanExplosion1975 = exports('LeviathanExplosion1975', (_dec = ccclass('LeviathanExplosion1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class LeviathanExplosion1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spineItem", _descriptor, this);
        }

        playAnimation(data, callback) {}

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeviathanNetwork1975.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94b7fLXt+tEKbfTeMcces/a", "LeviathanNetwork1975", undefined);

      const LeviathanNetwork1975 = exports('default', {
        LEVIATHAN_REWARD: 2042,
        LEVIATHAN_ESCAPE: 2043,
        LEVIATHAN_WARNING: 2044
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeviathanNetworkController1975.ts", ['cc', './gfBossNetworkController.ts', './gfNetworkParser.ts', './LeviathanNetwork1975.ts', './gfEventEmitter.ts', './EventsCode1975.ts', './gfNetworkGameEvent.ts'], function (exports) {
  var cclegacy, _decorator, gfBossNetworkController, gfNetworkParser, LeviathanNetwork1975, gfEventEmitter, EventsCode1975, gfNetworkGameEvent;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBossNetworkController = module.gfBossNetworkController;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      LeviathanNetwork1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8aaf2LMf45MupUqNA3s2JWr", "LeviathanNetworkController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LeviathanNetworkController1975 = exports('LeviathanNetworkController1975', (_dec = ccclass('LeviathanNetworkController1975'), _dec(_class = class LeviathanNetworkController1975 extends gfBossNetworkController {
        constructor(...args) {
          super(...args);
          this._onRewardLeviathan = null;
          this._onLeviathanEscape = null;
          this._onLeviathanWarning = null;
          this._onUpdateGameJackpot = null;
        }

        initEvents() {
          this._onRewardLeviathan = this.onRewardLeviathan.bind(this);
          this._onLeviathanEscape = this.onLeviathanEscape.bind(this);
          this._onLeviathanWarning = this.onLeviathanWarning.bind(this);
          this._onUpdateGameJackpot = this.onUpdateGameJackpot.bind(this);
          gfNetworkParser.instance.registerEvent(LeviathanNetwork1975.LEVIATHAN_REWARD, this._onRewardLeviathan);
          gfNetworkParser.instance.registerEvent(LeviathanNetwork1975.LEVIATHAN_ESCAPE, this._onLeviathanEscape);
          gfNetworkParser.instance.registerEvent(LeviathanNetwork1975.LEVIATHAN_WARNING, this._onLeviathanWarning);
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this._onUpdateGameJackpot);
        }

        onRewardLeviathan(data) {
          gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.ON_REWARD, data);
        }

        onLeviathanEscape() {
          gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.ESCAPE);
        }

        onLeviathanWarning() {
          gfEventEmitter.instance.emit(EventsCode1975.LEVIATHAN.WARNING);
        }

        onUpdateGameJackpot(data) {
          gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.UPDATE_JACKPOT_INFO, data.amount);
        }

        removeEvents() {
          gfNetworkParser.instance.removeEvent(LeviathanNetwork1975.LEVIATHAN_REWARD, this._onRewardLeviathan);
          gfNetworkParser.instance.removeEvent(LeviathanNetwork1975.LEVIATHAN_ESCAPE, this._onLeviathanEscape);
          gfNetworkParser.instance.removeEvent(LeviathanNetwork1975.LEVIATHAN_WARNING, this._onLeviathanWarning);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LeviathanWarning1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1975.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Component, tween, gfEventEmitter, EventsCode1975, gfSetOpacityAll, gfFadeOutAll, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfSetOpacityAll = module.gfSetOpacityAll;
      gfFadeOutAll = module.gfFadeOutAll;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "63cbepEm9xGdrj9uOvjnpVT", "LeviathanWarning1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LeviathanWarning1975 = exports('LeviathanWarning1975', (_dec = ccclass('LeviathanWarning1975'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = class LeviathanWarning1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spineItem", _descriptor, this);

          _initializerDefineProperty(this, "leviathanIntro", _descriptor2, this);
        }

        onLoad() {
          this.initEvents();
          this.node.active = false;
        }

        initEvents() {
          registerEvent(EventsCode1975.LEVIATHAN.WARNING, this.showBossWarning, this);
          registerEvent(EventsCode1975.COMMON.GAME_SHOW, this.onGameShow, this);
        }

        showBossWarning() {
          this.node.active = true;
          gfEventEmitter.instance.emit(EventsCode1975.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.1,
            amplitude: 10
          });
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_BOSS_WARNING);
          const animationInfo = this.spineItem.findAnimation("animation");
          gfSetOpacityAll(this.node, 255);
          this.spineItem.setAnimation(0, animationInfo.name, false);
          this.scheduleOnce(() => {
            // this.playIntro();
            tween(this.node) // .delay(2)
            .then(gfFadeOutAll(0.5)).call(() => {
              this.node.active = false;
              gfEventEmitter.instance.emit(EventsCode1975.SOUND.RESET_VOLUME);
            }).start();
          }, animationInfo.duration);
        }

        playIntro() {
          gfEventEmitter.instance.emit(EventsCode1975.FISH_LAYER.BOSS_ON_GAME, 0);
          this.leviathanIntro.node.active = true;
          this.leviathanIntro.setAnimation(0, "intro", false);
          this.leviathanIntro.setAnimation(1, "mix_idle", true);
          this.leviathanIntro.setCompleteListener(track => {
            if (track.animation.name === "intro") {
              this.leviathanIntro.setCompleteListener(() => {});
              this.leviathanIntro.node.active = false;
            }
          });
        }

        onGameShow() {
          this.node.active = false;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "leviathanIntro", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LfishGroup09.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts'], function (exports) {
  var cclegacy, v2, _decorator, gfBaseConfig, FishGroupHelper, gfFishGroupData, FishMoveActions, FISH_ACTION;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6bd84VG81NPZ6Bm1MgcTJNH", "LfishGroup09", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LfishGroup09 = exports('default', (_dec = ccclass('LfishGroup09'), _dec(_class = class LfishGroup09 {
        static create() {
          const fishCount = [30, 16, 1, 1];
          const {
            AppSize
          } = gfBaseConfig.instance;
          const midY = AppSize.Height / 2;
          const offsetX = 200;
          const offsetX2 = 250;
          const radius1 = 250;
          const radius2 = 170;
          const center1 = v2(AppSize.Width * 0.75, midY);
          const center2 = v2(AppSize.Width * 0.25, midY);
          this.createFish9Line(fishCount[0] / 2, v2(-offsetX, midY + radius1), center1, 0.65);
          this.createFish9Line(fishCount[0] / 2, v2(AppSize.Width + offsetX, midY - radius1), center2, 0.65);
          this.createFish9Line(fishCount[1] / 2, v2(-offsetX2, midY + radius2), center1, 1.2);
          this.createFish9Line(fishCount[1] / 2, v2(AppSize.Width + offsetX2, midY - radius2), center2, 1.2);
          this.createBigFish9(v2(-offsetX, midY), center2, v2(AppSize.Width + offsetX, midY));
          this.createBigFish9(v2(AppSize.Width + offsetX, midY), center1, v2(-offsetX, midY));
        }

        static createFish9Line(fishCount, startPos, center, delay) {
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          center = FishGroupHelper.convertFlipCoordinate(center);
          const fishSpeed = 120;
          const radius = Math.abs(center.y - startPos.y);
          const circleTime = 9.75; //2 * Math.PI * radius / fishSpeed;

          const circleCount = 3;
          const moveInTime = Math.abs(center.x - startPos.x) / fishSpeed;
          const delayEach = delay;
          const dir = center.x > startPos.x ? 1 : -1;

          for (let i = 0; i < fishCount; ++i) {
            const data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            const delay = i * delayEach;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: center.x - startPos.x,
              y: 0
            });
            data.moveAction.appendAction(FISH_ACTION.CircleBy, {
              time: circleTime * circleCount,
              center,
              radius,
              angle: -360 * circleCount
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: dir * moveInTime * fishSpeed,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        }

        static createBigFish9(startPos, standPos, endPos) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          standPos = FishGroupHelper.convertFlipCoordinate(standPos);
          endPos = FishGroupHelper.convertFlipCoordinate(endPos);
          const fishSpeed = 120;
          const moveInTime = Math.abs(standPos.x - startPos.x) / fishSpeed;
          const moveOutTime = Math.abs(endPos.x - standPos.x) / fishSpeed;
          data.moveAction = new FishMoveActions(startPos, standPos.x - startPos.x > 0 ? 0 : 180);
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: standPos.x - startPos.x,
            y: 0
          });
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: 40
          });
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveOutTime,
            x: endPos.x - standPos.x,
            y: 0
          });
          FishGroupHelper.createFishWithDelay(data);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LfishGroup18.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, v2, _decorator, gfBaseConfig, FishGroupHelper, gfFishGroupData, FishMoveActions, FISH_ACTION, v2Distance;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      v2Distance = module.v2Distance;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d7f9eT1I3FJwJ8hRGlqqXEU", "LfishGroup18", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LfishGroup18 = exports('default', (_dec = ccclass('LfishGroup18'), _dec(_class = class LfishGroup18 {
        static create() {
          this.createFishLine({
            count: 23,
            moveUp: false
          });
          this.createFishLine({
            count: 23,
            moveUp: true
          });
          this.createFormationFish({
            count: 23
          });
          this.createSpringsFish({
            count: 6
          });
        }

        static createFishLine({
          count,
          moveUp
        }) {
          const distantBorder = 100;
          const flip = gfFishGroupData.isFlipped();
          const offsetX = gfBaseConfig.instance.realSize.Width / count;
          const height = gfBaseConfig.instance.AppSize.Height;
          moveUp = flip ? moveUp : !moveUp;
          const stopY = moveUp ? height - distantBorder : distantBorder;
          const endY = moveUp ? -distantBorder : height + distantBorder;

          for (let i = 0; i < count; ++i) {
            const fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            const startX = 25 + gfBaseConfig.instance.SceneBox.Left + i * offsetX;
            const startY = moveUp ? height + Math.random() * 100 : Math.random() * 100 * -1;
            const moveInTime = 3;
            const stayTime = 35;
            const moveOutTime = 3;
            let startPos = v2(startX, startY);
            const angle = endY > startY ? 90 : -90;
            const moveAction = new FishMoveActions(startPos, angle);
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveInTime,
              x: startX,
              y: stopY
            });
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveOutTime,
              x: startX,
              y: endY
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        }

        static createFormationFish({
          count
        }) {
          for (let i = 0; i < count; ++i) {
            const fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            const {
              posStart,
              posEnd
            } = this.calculatePosByPlayerIndexGroup(i);
            const speed = 90; // const timeSpent = FishGroupData.timeSkipped - fishInfo.TimeFreeze;

            const distance = v2Distance(posEnd, posStart);
            const baseMoveTime = distance / speed;
            let startPos = v2(posStart.x, posStart.y);
            const moveTime = 34;
            let moveAction = new FishMoveActions(startPos, moveTime);
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: baseMoveTime,
              x: posEnd.x,
              y: posEnd.y
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        }

        static createSpringsFish({
          count
        }) {
          const angle = [0, 60, 120, 180, 240, 300];
          const duration = 50,
                cycleIntensity = 1.45,
                speed = 1,
                radius = 130;
          const flip = !gfFishGroupData.isFlipped();

          for (let i = 0; i < count; i++) {
            const fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            const {
              posStart
            } = this.calculatePosByPlayerIndexGroup(16);
            const timeSpent = gfFishGroupData.timeSkipped - fishInfo.TimeFreeze; // let startPos = v2(posStart.x, posStart.y);

            fishInfo.skipFlipY = true;
            const config = {
              duration: duration,
              cycleIntensity: cycleIntensity,
              speed: speed,
              radius: radius,
              timeSpent: timeSpent,
              pos: v2(posStart.x + 5 * (flip ? 1 : -1), posStart.y + 10 * (flip ? 1 : -1)),
              flip: flip,
              angle: angle[i],
              time: timeSpent
            };
            const moveAction = new FishMoveActions(posStart, duration);
            moveAction.appendAction(FISH_ACTION.MoveSpring, config);
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        }

        static calculatePosByPlayerIndexGroup(indexFish) {
          const flip = !gfFishGroupData.isFlipped();
          const MaxSceneSize = 1560;
          const MaxSizeGroup = 2000;
          const FixDeltaX = 140;
          const OffsetX = [-350, -350, -200, -200, -50, -50, 100, 100, 250, 250, -300, -300, -200, -100, -100, 80, 480, 700, 800, 800, 900, 900, 950];
          const OffsetY = [190, 530, 190, 530, 190, 530, 190, 530, 190, 530, 410, 310, 360, 430, 290, 360, 360, 360, 530, 190, 480, 240, 360];
          const posStartX = flip ? OffsetX[indexFish] - MaxSceneSize : 2 * (MaxSceneSize - FixDeltaX) - OffsetX[indexFish];
          const posStartY = flip ? OffsetY[indexFish] : gfBaseConfig.instance.AppSize.Height - OffsetY[indexFish];
          const posStart = v2(posStartX, posStartY);
          const posEnd = flip ? v2(posStartX + MaxSceneSize + MaxSizeGroup, posStartY) : v2(posStartX - MaxSceneSize - MaxSizeGroup, posStartY);
          return {
            posStart,
            posEnd
          };
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LfishGroup22.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts'], function (exports) {
  var cclegacy, v2, misc, _decorator, gfBaseConfig, FishGroupHelper, gfFishGroupData, FishMoveActions, FISH_ACTION;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      misc = module.misc;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "05a9fncWdtEf5c0tYf9FQ5k", "LfishGroup22", undefined);

      const BASE_DELAY = 12.5;
      const BASE_MOVE = 6;
      const FISH_GROUP_CONFIG = {
        FISH_KIND_2: {
          count: 20,
          kind: 2
        },
        FISH_KIND_3: {
          count: 26,
          kind: 3
        },
        FISH_KIND_6: {
          count: 4,
          kind: 6
        },
        FISH_KIND_7: {
          count: 4,
          kind: 7
        },
        FISH_KIND_10: {
          count: 4,
          kind: 10
        },
        FISH_KIND_14: {
          count: 2,
          kind: 14
        }
      };
      const {
        ccclass,
        property
      } = _decorator;
      let LfishGroup22 = exports('default', (_dec = ccclass('LfishGroup22'), _dec(_class = class LfishGroup22 {
        static create() {
          Object.keys(FISH_GROUP_CONFIG).forEach(item => {
            const {
              count,
              kind
            } = FISH_GROUP_CONFIG[item];
            const funcName = "createFish" + kind;

            for (let i = 0; i < count; i++) {
              this[funcName] && this[funcName](i, kind);
            }
          });
        }

        static createFish2(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          let position, delay, radius, angle, deltaX;
          const baseMoveTime = 30;
          delay = index % 10 * 1.5;

          if (index > 9) {
            position = v2(-50, 360);
            radius = 150;
            angle = 720;
            deltaX = -radius * gfFishGroupData.flipCoord;
          } else {
            position = v2(1330, 360);
            radius = 150;
            angle = -720;
            deltaX = radius * gfFishGroupData.flipCoord;
          }

          position = FishGroupHelper.convertFlipCoordinate(position);
          data.moveAction = new FishMoveActions(v2(position.x + deltaX, position.y));
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: delay
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime,
            center: position,
            radius,
            angle
          });
          data.skipFlipY = true;
          FishGroupHelper.createFishWithDelay(data);
        }

        static createFish3(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          let position, delay, radius, angle, deltaX;
          const baseMoveTime = 31.1;
          delay = index % 13 * 1.19;

          if (index > 12) {
            position = v2(-50, 360);
            radius = 220;
            angle = 720;
            deltaX = -radius * gfFishGroupData.flipCoord;
          } else {
            position = v2(1330, 360);
            radius = 220;
            angle = -720;
            deltaX = radius * gfFishGroupData.flipCoord;
          }

          position = FishGroupHelper.convertFlipCoordinate(position);
          data.moveAction = new FishMoveActions(v2(position.x + deltaX, position.y));
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: delay
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime,
            center: position,
            radius,
            angle
          });
          data.skipFlipY = true;
          FishGroupHelper.createFishWithDelay(data);
        }

        static createFish6(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          const {
            realSize
          } = gfBaseConfig.instance;
          let position, delay, radius, angle, positionEnd, center, x, y, radian, offsetX;
          const baseMoveTime = BASE_MOVE;
          center = v2(640, 360);
          radius = 140;
          angle = 490;
          let isUp = index < 2;
          isUp = gfFishGroupData.isFlipped() ? isUp : !isUp;

          if (isUp) {
            position = v2(900, 850);
            radian = misc.degreesToRadians(140);
            offsetX = realSize.Width / 2 + 60;
          } else {
            position = v2(380, -130);
            radian = misc.degreesToRadians(-40);
            offsetX = -(realSize.Width / 2 + 60);
          }

          x = center.x + Math.cos(radian) * radius;
          y = center.y + Math.sin(radian) * radius;
          positionEnd = v2(x, y);
          delay = index % 2 * 2.5;
          data.moveAction = new FishMoveActions(position);
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: BASE_DELAY + delay
          });
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime,
            x: positionEnd.x,
            y: positionEnd.y
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime + 9,
            center: center,
            radius,
            angle
          });
          data.skipFlipY = true;
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: baseMoveTime,
            x: offsetX,
            y: 0
          });
          FishGroupHelper.createFishWithDelay(data);
        }

        static createFish7(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          const {
            realSize
          } = gfBaseConfig.instance;
          let position, delay, radius, angle, positionEnd, center, x, y, radian, offsetX;
          const baseMoveTime = BASE_MOVE - 2;
          center = v2(640, 360);
          radius = 220;
          angle = -500;
          let isUp = index < 2;
          isUp = gfFishGroupData.isFlipped() ? isUp : !isUp;

          if (isUp) {
            position = v2(380, 850);
            radian = misc.degreesToRadians(50);
            offsetX = -(realSize.Width / 2 + 150);
          } else {
            position = v2(900, -130);
            radian = misc.degreesToRadians(-130);
            offsetX = realSize.Width / 2 + 150;
          }

          x = center.x + Math.cos(radian) * radius;
          y = center.y + Math.sin(radian) * radius;
          positionEnd = v2(x, y);
          delay = index % 2 * 3;
          data.moveAction = new FishMoveActions(position);
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: BASE_DELAY + delay
          });
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime,
            x: positionEnd.x,
            y: positionEnd.y
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime + 11,
            center: center,
            radius,
            angle
          });
          data.skipFlipY = true;
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: baseMoveTime + 3,
            x: offsetX,
            y: 0
          });
          FishGroupHelper.createFishWithDelay(data);
        }

        static createFish10(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          let position, delay, radius, angle, positionEnd, center, x, y, radian, offsetX, offsetY;
          const baseMoveTime = BASE_MOVE - 2.5;
          center = v2(640, 360);
          radius = 290;
          angle = 400;
          let isUp = index < 2;
          isUp = gfFishGroupData.isFlipped() ? isUp : !isUp;

          if (isUp) {
            position = v2(540, 900);
            radian = misc.degreesToRadians(158);
            const angleOut = misc.degreesToRadians(288);
            offsetX = Math.cos(angleOut) * 500;
            offsetY = Math.sin(angleOut) * 500;
          } else {
            position = v2(740, -180);
            radian = misc.degreesToRadians(-25);
            const angleOut = misc.degreesToRadians(286);
            offsetX = -Math.cos(angleOut) * 500;
            offsetY = -Math.sin(angleOut) * 500;
          }

          x = center.x + Math.cos(radian) * radius;
          y = center.y + Math.sin(radian) * radius;
          positionEnd = v2(x, y);
          delay = index % 2 * 4;
          data.moveAction = new FishMoveActions(position);
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: BASE_DELAY + delay
          });
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime,
            x: positionEnd.x,
            y: positionEnd.y
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime + 14,
            center: center,
            radius,
            angle
          });
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: baseMoveTime + 1,
            x: offsetX,
            y: offsetY
          });
          data.skipFlipY = true;
          FishGroupHelper.createFishWithDelay(data);
        }

        static createFish14(index) {
          const data = gfFishGroupData.getNextFishData();
          if (!data) return;
          let position, delay, radius, angle, positionEnd, center, x, y, radian, offsetX, offsetY;
          const baseMoveTime = BASE_MOVE + 2;
          center = v2(640, 360);
          radius = 180;
          angle = 90;
          let isUp = index < 1;
          isUp = gfFishGroupData.isFlipped() ? isUp : !isUp;

          if (isUp) {
            position = v2(-100, 850);
            radian = misc.degreesToRadians(225);
            const angleOut = misc.degreesToRadians(315);
            offsetX = Math.cos(angleOut) * 800;
            offsetY = -Math.sin(angleOut) * 800;
          } else {
            position = v2(1380, -130);
            radian = misc.degreesToRadians(45);
            const angleOut = misc.degreesToRadians(315);
            offsetX = -Math.cos(angleOut) * 800;
            offsetY = Math.sin(angleOut) * 800;
          }

          x = center.x + Math.cos(radian) * radius;
          y = center.y + Math.sin(radian) * radius;
          positionEnd = v2(x, y);
          delay = 0;
          data.moveAction = new FishMoveActions(position);
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: delay
          });
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime,
            x: positionEnd.x,
            y: positionEnd.y
          });
          data.moveAction.appendAction(FISH_ACTION.CircleBy, {
            time: baseMoveTime / 2.5,
            center: center,
            radius,
            angle
          });
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: baseMoveTime,
            x: offsetX,
            y: offsetY
          });
          FishGroupHelper.createFishWithDelay(data);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LightningChainEffect1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfFishManager.ts', './gfUtilities.ts', './LightningEffect1975.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Prefab, _decorator, Component, tween, instantiate, gfFishManager, SetZIndex, LightningEffect1975, gfFadeOutAll, call;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
      instantiate = module.instantiate;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      LightningEffect1975 = module.LightningEffect1975;
    }, function (module) {
      gfFadeOutAll = module.gfFadeOutAll;
      call = module.call;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a1a5cv7OBFBxbYY/tfeoCJs", "LightningChainEffect1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LightningChainEffect1975 = exports('LightningChainEffect1975', (_dec = ccclass('LightningChainEffect1975'), _dec2 = property(Prefab), _dec(_class = (_class2 = class LightningChainEffect1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lightningEffect", _descriptor, this);
        }

        playAnimation(data, callBack = null) {
          const {
            FishID,
            ListFish,
            LeaderFish
          } = data;
          const chainTween = tween(this.node);
          let startPosition = gfFishManager.instance.getFishById(FishID).node.getWorldPosition();

          for (let index = 0; index < ListFish.length; index++) {
            const fishData = ListFish[index];
            const fish = gfFishManager.instance.getFishById(fishData.FishID);

            if (fish) {
              chainTween.call(() => {
                fish.stopAllActions();
                const lightning = this.createLightningEffect();
                const lightningComponent = lightning.getComponent(LightningEffect1975);
                const fishPosition = fish.node.getWorldPosition();
                const dataEffect = {
                  startPosition: startPosition,
                  endPosition: fishPosition
                };
                startPosition = fishPosition;
                lightningComponent.playAnimation(dataEffect, () => {});
              });
              chainTween.delay(0.06);
            }
          }

          chainTween.delay(1);
          chainTween.call(() => {
            LeaderFish.playEffectDie();
          });
          chainTween.delay(1);
          chainTween.call(() => {
            callBack && callBack();
          });
          chainTween.then(this.hideEffect());
          chainTween.start();
        }

        hideEffect() {
          return tween(this.node).then(gfFadeOutAll(0.5)).then(call(() => this.node.destroy()));
        }

        createLightningEffect() {
          const lightningEffect = instantiate(this.lightningEffect);
          lightningEffect.setParent(this.node);
          SetZIndex(lightningEffect, 0);
          return lightningEffect;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lightningEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LightningEffect1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Vec2, sp, _decorator, Component, Vec3, tween, getRotation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      getRotation = module.getRotation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "264bae2b1JIOr6G2VVQjNnp", "LightningEffect1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const LIGHTNING_CHAIN_SIZE = new Vec2(86, 320);
      let LightningEffect1975 = exports('LightningEffect1975', (_dec = ccclass('LightningEffect1975'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec4 = property(sp.Skeleton), _dec(_class = (_class2 = class LightningEffect1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lightningEffect", _descriptor, this);

          _initializerDefineProperty(this, "hitEffect", _descriptor2, this);

          _initializerDefineProperty(this, "stunEffect", _descriptor3, this);
        }

        playAnimation(data, callBack = null) {
          this.node.setWorldPosition(data.startPosition);
          this.lightningEffect.node.scale = new Vec3(1, 0, 1);
          const lightningTween = tween(this.lightningEffect.node).then(this.animationChain(data.startPosition, data.endPosition)).then(this.animationHit(data.startPosition, data.endPosition)).then(this.animationStun(data.startPosition, data.endPosition)).call(() => {
            callBack && callBack();
          }).start();
        }

        animationHit(startPosition, endPosition) {
          const angle = getRotation(endPosition, startPosition) + 90;
          this.hitEffect.node.active = true;
          this.hitEffect.node.scale = Vec3.ZERO;
          const duration = this.hitEffect.findAnimation("animation").duration;
          return tween(this.hitEffect.node).call(() => {
            this.hitEffect.node.scale = Vec3.ONE;
            this.hitEffect.node.setWorldPosition(endPosition);
            this.hitEffect.node.angle = angle;
            this.hitEffect.setAnimation(0, "animation", false);
          }).delay(duration).call(() => {
            this.hitEffect.node.active = false;
          });
        }

        animationStun(startPosition, endPosition) {
          const angle = getRotation(endPosition, startPosition) + 90;
          return tween(this.stunEffect.node).call(() => {
            this.stunEffect.node.active = true;
            this.stunEffect.node.scale = new Vec3(0.5, 0.5, 0.5);
            this.stunEffect.node.setWorldPosition(endPosition);
            this.stunEffect.node.angle = angle;
            this.stunEffect.setAnimation(0, "animation", true);
          });
        }

        animationChain(startPosition, endPosition) {
          const distance = Vec3.distance(startPosition, endPosition);
          const angle = getRotation(endPosition, startPosition) - 90;
          const targetScale = new Vec3(1, distance / LIGHTNING_CHAIN_SIZE.y, 1);
          const tweenAction = tween(this.lightningEffect.node).call(() => {
            this.lightningEffect.node.angle = angle;
            this.lightningEffect.node.scale = new Vec3(1, 0, 1);
            this.lightningEffect.setAnimation(0, "animation", true);
          }).to(0.06, {
            scale: targetScale
          });
          return tweenAction;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lightningEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hitEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stunEffect", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadConfigAsync.ts", ['cc', './appConfig.ts', './appConfig-debug.ts', './XOCypher.ts', './serviceRest.ts'], function (exports) {
  var cclegacy, sys, urlConstant, urlConstant$1, xorCipher, apiObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      urlConstant = module.urlConstant;
    }, function (module) {
      urlConstant$1 = module.urlConstant;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65982XRfqlJUrHV60UubZQG", "loadConfigAsync", undefined);

      const lodash = _;

      class LoadConfigAsync {
        constructor() {
          this.dataUpdate = void 0;
          this.dataUpdateProd = void 0;

          this.setUpSentry = () => {
            const {
              IS_PRODUCTION,
              IS_SHOW_STATS
            } = this.dataUpdate;

            if (typeof Sentry !== 'undefined') {
              if (IS_PRODUCTION) {
                Sentry.init({
                  dsn: 'https://32ab507534bc4befbd5e1b20e223c93d@sentry.io/1780011'
                });
              } else {
                Sentry.init({
                  dsn: 'https://b034a1c4d32e42af90071e62d2bf3290@sentry.io/2655786'
                });
              }
            }
          };

          this.dataUpdate = lodash.cloneDeep(urlConstant);
          const isDebugMode = sys.isBrowser && window.location.hostname === 'localhost';

          if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && !sys.isBrowser && !isDebugMode) {
            setTimeout(() => {
              apiObject.get({
                apiUrl: this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                url: '',
                callback: this.handleDataSuccess.bind(this),
                callbackErr: this.handleDataError.bind(this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && sys.isBrowser) {
            setTimeout(() => {
              apiObject.getRawDataWeb({
                fullURL: this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                callback: this.handleDataSuccess.bind(this),
                callbackErr: this.handleDataError.bind(this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL && sys.isBrowser && !isDebugMode) {
            setTimeout(() => {
              const domainGame = typeof domainGlobal !== 'undefined' ? domainGlobal : window.location.origin;
              apiObject.get({
                apiUrl: domainGame + this.dataUpdate.REMOTE_CONFIG_URL,
                params: {
                  t: new Date().getTime()
                },
                url: '',
                callback: this.handleDataSuccess.bind(this),
                callbackErr: this.handleDataError.bind(this)
              });
            }, 100);
          } else {
            if (sys.localStorage.getItem && sys.localStorage.getItem("enviroment") != null) {
              try {
                if (sys.localStorage.getItem("enviroment").indexOf("test") >= 0) {
                  // check appConfigDebug
                  if (urlConstant$1) {
                    this.dataUpdate = lodash.cloneDeep(urlConstant$1);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  } else {
                    this.dataUpdate = lodash.cloneDeep(urlConstant);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  }
                } else {
                  this.dataUpdate = lodash.cloneDeep(urlConstant);
                  this.dataUpdate = this.decryptData(this.dataUpdate);
                }
              } catch (e) {
                this.dataUpdate = lodash.cloneDeep(urlConstant);
                this.dataUpdate = this.decryptData(this.dataUpdate);
              }
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
              this.dataUpdate = this.decryptData(this.dataUpdate);
            }

            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        }

        handleDataSuccess(data) {
          this.dataUpdate = lodash.cloneDeep(data);
          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          sys.localStorage.setItem('appConfigLocalStore', JSON.stringify(this.dataUpdateProd));
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        }

        handleDataError() {
          let appConfigLocal = sys.localStorage.getItem('appConfigLocalStore');

          if (appConfigLocal) {
            appConfigLocal = JSON.parse(appConfigLocal);
            this.dataUpdate = lodash.cloneDeep(appConfigLocal);
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant);
          }

          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        }

        decryptData(data) {
          if (data.IS_DECODE) {
            Object.keys(data).forEach(key => {
              if (key === 'API_URL' || key === 'SOCKET_URL' || key.indexOf('IPMaster') > -1) {
                data[key] = xorCipher.decode('Không Biết Đặt Tên Gì', data[key]);
              }
            });
          }

          delete data.IS_DECODE;
          return data;
        }

        getConfig() {
          return this.dataUpdate;
        }

        replaceConfig(config) {
          Object.keys(config).forEach(it => {
            this.dataUpdate[it] = config[it];
          });
        }

        switchEnv(isProd) {
          if (isProd) {
            if (this.dataUpdateProd) {
              this.dataUpdate = lodash.cloneDeep(this.dataUpdateProd);
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
            }

            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant$1);
            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        }

      }

      const loadConfigAsync = exports('default', new LoadConfigAsync());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScene1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingScene.ts', './Config1975.ts', './AssetBundle1975.ts', './gfUtilities.ts', './EventsCode1975.ts', './gfReferenceManager.ts', './MainController1975.ts', './gfEventEmitter.ts', './gfMainController.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, sp, _decorator, tween, v3, gfLoadingScene, Config1975, AssetBundle1975, registerEvent, removeEvents, EventsCode1975, gfReferenceManager, MainController1975, gfEventEmitter, gfMainController, fadeIn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      AssetBundle1975 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      MainController1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "29a05FUDvxPqJ5HnaEYW0LX", "LoadingScene1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoadingScene1975 = exports('default', (_dec = ccclass('LoadingScene1975'), _dec2 = property(Node), _dec3 = property(sp.Skeleton), _dec4 = property(sp.Skeleton), _dec5 = property(sp.Skeleton), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = class LoadingScene1975 extends gfLoadingScene {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bg", _descriptor, this);

          _initializerDefineProperty(this, "spineAnimation", _descriptor2, this);

          _initializerDefineProperty(this, "spineAnimationLoading2", _descriptor3, this);

          _initializerDefineProperty(this, "spineAnimationLoading3", _descriptor4, this);

          this._startLoading = false;

          _initializerDefineProperty(this, "border", _descriptor5, this);

          _initializerDefineProperty(this, "bgLoading2", _descriptor6, this);

          this._isSwitchedScene = false;
        }

        onLoad() {
          super.onLoad();
          this.scheduleOnce(() => {
            this.spineAnimation.node.active = true;
            this.spineAnimationLoading2.node.active = true;
            this.spineAnimationLoading2.setAnimation(0, "animation_1", false);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_LOADING_INTRO);
            this.spineAnimation.setAnimation(0, "animation", false);
            this.spineAnimation.setCompleteListener(() => {
              this.bgLoading2.active = true;
            });
            this.spineAnimationLoading2.setCompleteListener(() => {
              this.spineAnimationLoading3.node.active = true;
              this.spineAnimationLoading3.setAnimation(0, "appear", false);
              this.spineAnimationLoading3.addAnimation(0, "idle", true);
            });
            tween(this.processBar.node).delay(5).then(fadeIn(0.5)).call(() => {// const ui = this.border.getComponent(UITransform);
              // tween(ui)
              //     .to(0.3, {width: 230})
              //     .start();
            }).delay(0.5).call(() => {
              this._startLoading = true;
            }).start();
          }, 1);
        }

        initGameConfig() {
          if (!Config1975.instance) {
            new Config1975();
          }
        }

        initAssetBundle() {
          if (!AssetBundle1975.instance) {
            new AssetBundle1975();
          }
        }

        onLoginSuccess(data) {
          tween(this.processBar.node).to(0.5, {
            scale: v3(0, 1, 1)
          }).call(() => {
            var _gfEventEmitter$insta;

            const time = this.spineAnimationLoading3.getCurrent(0).trackTime;
            (_gfEventEmitter$insta = gfEventEmitter.instance) == null ? void 0 : _gfEventEmitter$insta.emit(EventsCode1975.COMMON.LOADING_TRANSITION, () => {
              if (data.isUserInGame) {
                gfMainController.instance.loadGameScene();
              } else {
                gfMainController.instance.onLoginLobby(data);
              }
            }, time);
          }).start();
        }

        update(dt) {
          if (!this._startLoading) return;

          if (this._currentProgress < 1.0) {
            this._currentProgress += this._speed * dt;
            this.updateLoadingProgressDisplay();
          } else if (this._isLoadingDone && !this._isSwitchedScene) {
            var _gfReferenceManager$i;

            (_gfReferenceManager$i = gfReferenceManager.instance) == null ? void 0 : _gfReferenceManager$i.setData({
              CurrentScene: this.node
            });
            registerEvent(EventsCode1975.LOGIN.LOGIN_SUCCESS, this.onLoginSuccess, this);
            MainController1975.instance.initToken();
            this._isSwitchedScene = true;
          }
        }

        setGameAndLobbyPrefab(gameNormalPrefab, gameVIPPrefab, lobbyPrefab, persistNodePrefab) {
          this.initGameConfig();
          Config1975.instance.ScenePrefabs[Config1975.instance.SceneName.Game1] = gameNormalPrefab;
          Config1975.instance.ScenePrefabs[Config1975.instance.SceneName.Game2] = gameVIPPrefab;
          Config1975.instance.ScenePrefabs[Config1975.instance.SceneName.Lobby] = lobbyPrefab;
          this.persistNodePrefab = persistNodePrefab;
          this.isLoadByPrefab = true;
        }

        onDestroy() {
          removeEvents(this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineAnimation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spineAnimationLoading2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spineAnimationLoading3", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "border", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bgLoading2", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScreen.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, ProgressBar, _decorator, Component, sys, director, assetManager, settings, error, tween, Prefab, instantiate, loadConfigAsync, gameCommonUtils, registerLoadHowl, setOpacity, unregisterLoadHowl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      director = module.director;
      assetManager = module.assetManager;
      settings = module.settings;
      error = module.error;
      tween = module.tween;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      registerLoadHowl = module.registerLoadHowl;
      setOpacity = module.setOpacity;
      unregisterLoadHowl = module.unregisterLoadHowl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "01f22w8LoVFq5YVtgEK6Ozg", "LoadingScreen", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoadingScreen = exports('LoadingScreen', (_dec = ccclass('LoadingScreen'), _dec2 = property({
        visible: function () {
          return this.loadByBundle;
        }
      }), _dec3 = property({
        visible: function () {
          return this.loadByBundle;
        }
      }), _dec4 = property({
        type: Node,
        visible: function () {
          return this.loadByBundle;
        }
      }), _dec5 = property({
        visible: function () {
          return !this.loadByBundle;
        }
      }), _dec6 = property({
        visible: function () {
          return !this.loadByBundle;
        }
      }), _dec7 = property({
        visible: function () {
          return !this.loadByBundle;
        }
      }), _dec8 = property(ProgressBar), _dec9 = property(Node), _dec(_class = (_class2 = class LoadingScreen extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "loadByBundle", _descriptor, this);

          _initializerDefineProperty(this, "bundlePath", _descriptor2, this);

          _initializerDefineProperty(this, "bundleMainScene", _descriptor3, this);

          _initializerDefineProperty(this, "gameHolder", _descriptor4, this);

          _initializerDefineProperty(this, "sceneName", _descriptor5, this);

          _initializerDefineProperty(this, "sdSceneName", _descriptor6, this);

          _initializerDefineProperty(this, "sceneNameIframe", _descriptor7, this);

          _initializerDefineProperty(this, "sceneNameHistory", _descriptor8, this);

          _initializerDefineProperty(this, "progressBar", _descriptor9, this);

          _initializerDefineProperty(this, "homeBtn", _descriptor10, this);

          this.preloadGameScene = false;
          this.preloadGamePrefab = false;
          this.switchGameScene = false;
          this.isBackToLobby = false;
          this.gameBundle = null;
          this.gameNode = null;
          this._loadedPrefab = [];
          this.usingLoadHowl = false;
          this.totalPercent = 0;
          this.eventId = null;
          this.updatedScene = '';
          this.tweenFullProgress = void 0;
          this.loadHistory = false;
        }

        get CurrentProgress() {
          return this.progressBar.progress;
        }

        set CurrentProgress(value) {
          if (this.progressBar && this.progressBar.progress != value) {
            this.progressBar.progress = value;
          }
        }

        onLoad() {
          if (this.sceneName === '') return;
          this.updatedScene = this.sceneName;
          this.loadHistory = false;
          this.startLoadingPipeline();
        }

        startLoadingPipeline() {
          const {
            IS_FINISHED_REMOTE
          } = loadConfigAsync.getConfig();

          if (IS_FINISHED_REMOTE) {
            this.redirectSceneName();
            this.addHomeEvent();
            this.startLoadScene();
          } else {
            setTimeout(() => {
              this.startLoadingPipeline();
            }, 100);
          }
        }

        redirectSceneName() {
          if (sys.isBrowser) {
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);
            const history = urlParams.get('history');

            if (this.sceneNameHistory && history == 'true') {
              this.updatedScene = this.sceneNameHistory;
              this.loadHistory = true;
            } else if (this.sceneNameIframe) {
              this.updatedScene = this.sceneNameIframe;
            }

            const extName = director.getScene().name.split('-');
            let extSceneName = null;

            if (extName.length > 1) {
              extSceneName = extName[1];
            }

            if (extSceneName) {
              let redirectScene = `${this.updatedScene}-${extSceneName}`;
              this.sceneName = redirectScene;

              if (assetManager.main.getSceneInfo(redirectScene)) {
                this.updatedScene = redirectScene;
              }
            }

            if (LOGIN_IFRAME && globalThis.Howler) {
              registerLoadHowl();
              this.usingLoadHowl = true;
            }

            if (window) {
              window.addEventListener('onHideSplashScreen', this.onHideSplashScreen.bind(this));
            }

            if (LOGIN_IFRAME && this.loadByBundle) {
              let language = null;

              if (CC_DEV) {
                language = urlParams.get('l');

                if (CC_PREVIEW) {
                  const sceneName = gameCommonUtils.getSceneName();

                  if (sceneName.lastIndexOf('-') >= 0) {
                    language = sceneName.substring(sceneName.lastIndexOf('-') + 1);
                  }
                }
              } else {
                language = settings._settings.folderLanguage;
              }

              this.bundlePath = language && language !== 'vi' && language !== 'VI' ? `${this.bundlePath}_${language.toUpperCase()}` : this.bundlePath;
            }
          }

          if (sys.isMobile && this.sdSceneName) {
            this.updatedScene = this.sdSceneName;
          }
        }

        addHomeEvent() {
          if (this.homeBtn) {
            this.homeBtn.active = false;
            const {
              LOGIN_IFRAME
            } = loadConfigAsync.getConfig();

            if (!LOGIN_IFRAME) {
              this.scheduleOnce(() => {
                this.homeBtn.active = true;
                this.homeBtn.off('click');
                this.homeBtn.on('click', () => {
                  if (this.isBackToLobby) return; //TODO: implement KtekEventHandler
                  // let eventHandler = this.node.getComponent("KtekEventHandler");
                  // if( eventHandler ){
                  //     eventHandler.getInstance().sendToUs("clear_cache", {
                  //         scene: sceneName
                  //     });
                  // }

                  gameCommonUtils.handleCloseGameIframe();
                  this.isBackToLobby = true;
                });
              }, 10);
            }
          }
        }

        startLoadScene() {
          this.node.active = true;
          setOpacity(this.node, 255);

          if (this.loadByBundle && !this.loadHistory) {
            this.loadGameBundle();
          } else {
            this.preloadScene();
          }
        }

        onHideSplashScreen() {
          this.progressBar.progress = 0;
        }

        preloadScene() {
          this.preloadGameScene = true;
          const bundle = assetManager.bundles.find(bundle => !!bundle.getSceneInfo(this.updatedScene));

          if (bundle) {
            bundle.loadScene(this.updatedScene, {}, (finishCount, totalCount) => {
              if (totalCount > 0) {
                this.totalPercent = finishCount / totalCount;
              }
            }, (error, scene) => {
              if (error) {
                gameCommonUtils.handleFlowOutGame();
              } else {
                if (!this.isBackToLobby) {
                  const delay = this.progressBar.progress >= 1 ? 0.1 : 0.5;
                  this.setProgressFull(delay, () => {
                    director.runScene(scene);
                  });
                }
              }
            });
          }
        }

        loadGameBundle() {
          this.gameBundle = assetManager.getBundle(this.bundlePath);

          if (!this.gameBundle) {
            assetManager.loadBundle(this.bundlePath, (err, bundle) => {
              if (err) {
                error(`Error while loading bundle with path: BundleLobby`);
              } else {
                this.gameBundle = bundle;
                this.preloadGamePrefab = true;
                this.loadGamePrefab(bundle, this.bundleMainScene, this.eventId);
              }
            });
          } else {
            this.preloadGamePrefab = true;
            this.loadGamePrefab(this.gameBundle, this.bundleMainScene, this.eventId);
          }
        }

        setProgressFull(delay, callback) {
          if (this.tweenFullProgress) this.tweenFullProgress.stop();
          this.tweenFullProgress = tween(this);
          this.tweenFullProgress.to(delay, {
            CurrentProgress: 1
          }, {
            easing: "sineIn"
          }).call(() => {
            callback && callback();
            this.tweenFullProgress = null;
          }).start();
        }

        update(dt) {
          if (this.preloadGameScene) {
            let percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (percent > 0 && !this.tweenFullProgress) {
              this.progressBar.progress += percent;
            }
          } else if (this.preloadGamePrefab) {
            let percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (percent > 0) {
              this.progressBar.progress += percent;
            }

            if (this.progressBar.progress > 0.99 && this.gameNode && !this.switchGameScene) {
              this.switchGameScene = true;
              this.loadGameNode();
            }
          }
        }

        loadGamePrefab(bundle, mainPrefabName, eventId = '') {
          this.eventId = eventId;
          bundle.loadDir('', Prefab, (finish, total, item) => {
            this.totalPercent = finish / total;
          }, (error, assets) => {
            if (error) {
              gameCommonUtils.handleFlowOutGame();
              return;
            }

            let mainPrefab = null;
            assets.forEach(prefab => {
              prefab.addRef();

              if (prefab.data.name == mainPrefabName) {
                mainPrefab = prefab;
              }
            });
            this._loadedPrefab = assets;

            if (mainPrefab) {
              this.gameNode = instantiate(mainPrefab);
            }
          });
        }

        loadGameNode() {
          if (this.gameNode && this.gameHolder) {
            let director = this.gameNode.getComponent('Director');
            if (director && director.setEventId) director.setEventId(this.eventId);
            this.gameNode.parent = this.gameHolder;
            if (this.homeBtn) this.homeBtn.active = false;
            this.node.active = false;
            this.unscheduleAllCallbacks();
          }
        }

        setEventId(id) {
          this.eventId = id;
        }

        onDestroy() {
          this.unscheduleAllCallbacks();
          if (this.tweenFullProgress) this.tweenFullProgress.stop();
          this.tweenFullProgress = null;

          if (this.usingLoadHowl) {
            unregisterLoadHowl();
          }

          if (this.loadByBundle && this.gameBundle) {
            this._loadedPrefab.forEach(prefab => {
              prefab.decRef(true);
            });

            this._loadedPrefab = null;
            assetManager.removeBundle(this.gameBundle);

            if (sys.isNative) {
              sys.garbageCollect();
            }
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundlePath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bundleMainScene", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gameHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sceneName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sdSceneName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameIframe", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingTransition1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLoadingTransition.ts', './EventsCode1975.ts', './utils.ts', './gfDataStore.ts', './gfUtilities.ts', './gfEventEmitter.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, tween, GfLoadingTransition, EventsCode1975, setOpacity, gfDataStore, updateSpineTime, removeEvents, gfEventEmitter, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      GfLoadingTransition = module.GfLoadingTransition;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      updateSpineTime = module.updateSpineTime;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "7981eQp0EhK/KqiiY/uvD2X", "LoadingTransition1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoadingTransition1975 = exports('LoadingTransition1975', (_dec = ccclass('LoadingTransition1975'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = class LoadingTransition1975 extends GfLoadingTransition {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spine", _descriptor, this);
        } // onLoad () {
        //     super.onLoad();
        //     this.spine.setMix("idle")
        // }


        transition(callBack, timeAnimationSpine) {
          gfDataStore.instance.setDataStore({
            "isPlayingLoadingTransition": true
          });
          callBack && callBack();
          tween(this.node).call(() => {
            this.spine.setAnimation(0, 'idle', true);
            updateSpineTime(this.spine, timeAnimationSpine);
            this.spine.setAnimation(1, 'disapear_mix', false);
            setOpacity(this.node, 255);
          }).parallel(fadeOut(0.5), tween().delay(0.3).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.COMMON.SHOW_ANIMATION_LOBBY);
          })).delay(1.5).call(() => {
            gfDataStore.instance.setDataStore({
              "isPlayingLoadingTransition": false
            });
            removeEvents(this);
            this.node.destroy();
          }).start();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyDev.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, director, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "82220qRjXFBT5RKRiUWVVoZ", "LobbyDev", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LobbyDev = exports('LobbyDev', (_dec = ccclass('LobbyDev'), _dec2 = property({
        displayName: "List Game",
        type: Node
      }), _dec3 = property({
        displayName: "Login",
        type: Node
      }), _dec(_class = (_class2 = class LobbyDev extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listGame", _descriptor, this);

          _initializerDefineProperty(this, "btnLogin", _descriptor2, this);
        }

        onLoad() {
          this._bindEvents();
        }

        start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }


        _bindEvents() {
          let arrView = this.listGame.children;
          let length = arrView.length;

          for (let i = 0; i < length; i++) {
            let view = arrView[i];
            view.off("click");
            view.on("click", event => {
              let sceneName = view.name;
              director.loadScene(sceneName);
            });
          }

          if (this.btnLogin) {
            this.btnLogin.off('click');
            this.btnLogin.on('click', () => {
              const {
                LOGIN_SCENE_NAME
              } = loadConfigAsync.getConfig();

              if (LOGIN_SCENE_NAME) {
                director.loadScene(LOGIN_SCENE_NAME);
              }
            });
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnLogin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyLayer1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfLobbyLayer.ts', './EventsCode1975.ts', './gfEventEmitter.ts', './Config1975.ts', './gfDataStore.ts', './gfBaseEvents.ts', './gfNetworkParser.ts', './gfUtilities.ts', './utils.ts', './animateNumberLabel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Node, SpriteFrame, Sprite, _decorator, tween, log, warn, Label, gfLobbyLayer, EventsCode1975, gfEventEmitter, Config1975, gfDataStore, gfBaseEvents, gfNetworkParser, registerEvent, setOpacity, AnimateNumberLabel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      tween = module.tween;
      log = module.log;
      warn = module.warn;
      Label = module.Label;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "66a1fc6I2VDuZGjp/mVGMet", "LobbyLayer1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LobbyLayer1975 = exports('LobbyLayer1975', (_dec = ccclass('LobbyLayer1975'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec4 = property(sp.Skeleton), _dec5 = property(sp.Skeleton), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(sp.Skeleton), _dec11 = property(SpriteFrame), _dec12 = property(Sprite), _dec(_class = (_class2 = class LobbyLayer1975 extends gfLobbyLayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "vipRoom", _descriptor, this);

          _initializerDefineProperty(this, "normalRoom", _descriptor2, this);

          _initializerDefineProperty(this, "jackpotSpine", _descriptor3, this);

          _initializerDefineProperty(this, "spineAnimLobby", _descriptor4, this);

          _initializerDefineProperty(this, "targetBG1", _descriptor5, this);

          _initializerDefineProperty(this, "targetBG2", _descriptor6, this);

          _initializerDefineProperty(this, "BG1", _descriptor7, this);

          _initializerDefineProperty(this, "BG2", _descriptor8, this);

          _initializerDefineProperty(this, "animBGLobby", _descriptor9, this);

          _initializerDefineProperty(this, "spriteWithBack", _descriptor10, this);

          _initializerDefineProperty(this, "spriteLobby2", _descriptor11, this);
        }

        initEvents() {
          super.initEvents();
          registerEvent(EventsCode1975.COMMON.SHOW_ANIMATION_LOBBY, this.showAnimationLobby, this);
        }

        onLoad() {
          super.onLoad();
          this.normalRoom.node.active = false;
          this.vipRoom.node.parent.active = false;
          setOpacity(this.node, 0);
        }

        start() {
          var _DataStore$instance;

          if (this.startCallback) {
            this.startCallback();
            this.startCallback = null;
          }

          gfEventEmitter.instance.emit(EventsCode1975.POPUP.CHECK_SHOW_POPUP_EVENT);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_CHECK_PLAY_BGM_LOBBY, () => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.LOBBY, true);
          });

          if (!((_DataStore$instance = gfDataStore.instance) != null && _DataStore$instance.isPlayingLoadingTransition)) {
            setOpacity(this.node, 255);
            this.normalRoom.node.active = true;
            this.vipRoom.node.parent.active = true;
            this.BG1.active = false;
            this.BG2.active = false;
            this.normalRoom.setAnimation(0, "idle", true);
            this.vipRoom.setAnimation(0, "idle", true);
            this.spineAnimLobby.setAnimation(0, "idle", true);
            this.updateJackpotInfo();
          }
        }

        showAnimationLobby() {
          setOpacity(this.node, 0);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.PLAY_SOUND_BACKGROUND, Config1975.instance.SOUND_BACKGROUND_CONFIG.LOBBY, true);
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_ONCOMPLETE_INTRO_LOADING);
          this.normalRoom.node.active = false;
          this.vipRoom.node.parent.active = false;
          this.spineAnimLobby.setAnimation(0, "appear", false);
          this.spineAnimLobby.addAnimation(0, "idle", true);
          this.animBGLobby.setAnimation(0, "animation_2", false);

          if (!this.btnBack.active) {
            this.spineAnimLobby.setAttachment("btn_back", "empty");
          } else {
            this.spriteLobby2.spriteFrame = this.spriteWithBack;
          }

          tween(this.node).to(0.5, null, {
            onUpdate: (target, ratio) => {
              this.BG1.setScale(this.targetBG1.scale);
              this.BG1.setPosition(this.targetBG1.position);
              this.BG2.setScale(this.targetBG1.scale);
              this.BG2.setPosition(this.targetBG1.position);
            }
          }).call(() => {// this.BG1.active = false;
            // this.BG2.active = false;
            // SetZIndex(this.BG2, 3);
          }).start();
          this.animBGLobby.setEventListener((trackEntry, event) => {
            if (trackEntry.trackIndex === 0) {
              if (event.data.name === "static_2") {
                setOpacity(this.node, 255);
              }
            }
          });
          this.spineAnimLobby.setEventListener((trackEntry, event) => {
            if (trackEntry.trackIndex === 0) {
              if (event.data.name === "anim_lobby_vip") {
                this.vipRoom.node.parent.active = true;
                this.vipRoom.setAnimation(0, "appear", false);
                this.vipRoom.addAnimation(0, "idle", true);
                this.jackpotSpine.setAnimation(0, "appear", false);
                this.jackpotSpine.addAnimation(0, "idle", true);
                this.updateJackpotInfo();
              } else if (event.data.name === "anim_lobby_nor") {
                this.normalRoom.node.active = true;
                this.normalRoom.setAnimation(0, "appear", false);
                this.normalRoom.addAnimation(0, "idle", true);
              }
            }
          });
        }

        onRoomNormalClick() {
          log("::LobbyLayer:: onRoomNormalClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(EventsCode1975.COMMON.HANDLE_SHOW_WAITING);
          this.normalRoom.setAnimation(1, "mix_click", false);
          this.normalRoom.setCompleteListener(() => {
            this.normalRoom.setCompleteListener(() => {});
            gfDataStore.instance.setDataStore({
              currentRoom: Config1975.instance.RoomKind.Normal
            });
            gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, Config1975.instance.RoomKind.Normal);
          });
        }

        onRoomVipClick() {
          log("::LobbyLayer:: onRoomVipClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          this.vipRoom.setAnimation(1, "mix_click", false);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(EventsCode1975.COMMON.HANDLE_SHOW_WAITING);
          this.vipRoom.setCompleteListener(() => {
            this.vipRoom.setCompleteListener(() => {});
            gfDataStore.instance.setDataStore({
              currentRoom: Config1975.instance.RoomKind.VIP
            });
            gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, Config1975.instance.RoomKind.VIP);
          });
        }

        updateJackpotInfo(amount) {
          if (!amount) {
            amount = gfDataStore.instance.getJackpotValue();
          }

          if (!this.txtJackpot) {
            //warn('Cant find node txtJackpot')
            return;
          }

          if (!this.txtJackpot.active) {
            return;
          }

          if (this.txtJackpot.getComponent(AnimateNumberLabel).currentValue === undefined) {
            this.txtJackpot.getComponent(AnimateNumberLabel).currentValue = +amount;
          }

          if (this.txtJackpot.onUpdateValue) {
            this.txtJackpot.onUpdateValue(+amount, 3000);
            this.txtJackpot.getComponent(Label).updateRenderData(true);
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "vipRoom", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalRoom", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpotSpine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spineAnimLobby", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "targetBG1", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "targetBG2", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "BG1", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BG2", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "animBGLobby", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "spriteWithBack", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "spriteLobby2", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "52196V367xKG4EbuCYnH8OC", "LobbyMenu", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LobbyMenu = exports('LobbyMenu', (_dec = ccclass('LobbyMenu'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = class LobbyMenu extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "gameNode", _descriptor, this);

          _initializerDefineProperty(this, "eventNode", _descriptor2, this);
        }

        onGameClick() {
          this.eventNode.active = false;
          this.gameNode.active = true;
        }

        onEventClick() {
          this.eventNode.active = true;
          this.gameNode.active = false;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BubbleFloatGames.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Prefab, Toggle, Button, _decorator, Component, instantiate, game, NodePool, resources, JsonAsset, SpriteAtlas, sys, director, Label, assetManager, setDisplayStats, BubbleFloatGames, setDeviceOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Prefab = module.Prefab;
      Toggle = module.Toggle;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      game = module.game;
      NodePool = module.NodePool;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      SpriteAtlas = module.SpriteAtlas;
      sys = module.sys;
      director = module.director;
      Label = module.Label;
      assetManager = module.assetManager;
      setDisplayStats = module.setDisplayStats;
    }, function (module) {
      BubbleFloatGames = module.BubbleFloatGames;
    }, function (module) {
      setDeviceOrientation = module.setDeviceOrientation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "45d5dpkekdB2pRnLKF2Wj5o", "LobbyScene", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LobbyScene = exports('LobbyScene', (_dec = ccclass('LobbyScene'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Toggle
      }), _dec6 = property({
        type: Button
      }), _dec7 = property({
        type: Prefab
      }), _dec(_class = (_class2 = class LobbyScene extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "iconHolder", _descriptor, this);

          _initializerDefineProperty(this, "iconPrefab", _descriptor2, this);

          _initializerDefineProperty(this, "gameSelection", _descriptor3, this);

          _initializerDefineProperty(this, "toggleDebug", _descriptor4, this);

          this.iconPool = null;
          this.projectConfig = null;
          this.iconList = null;
          this.multiSlotConfig = {};

          _initializerDefineProperty(this, "buttonEvent", _descriptor5, this);

          _initializerDefineProperty(this, "bubbleGamesPrefab", _descriptor6, this);

          this._loadBundleDone = void 0;
          this._mapIconByGameId = {};
        }

        onLoad() {
          let bubbleGames = this.getBubbleFloatGames();

          if (!bubbleGames && this.bubbleGamesPrefab) {
            let bubbleGame = instantiate(this.bubbleGamesPrefab);
            bubbleGame.active = false;
            game.addPersistRootNode(bubbleGame);
          }

          this.node.on('RQ_PLAY_GAME', this.requestPlayGame.bind(this));
          this.iconPool = new NodePool();
          let loadCount = 0;

          let _completeLoad = () => {
            loadCount++;

            if (loadCount >= 2) {
              this.loadProjects();
            }

            this.buttonEvent.interactable = true;
          };

          this.buttonEvent.interactable = false;
          resources.load("jsons/LobbyConfig", JsonAsset, (err, json) => {
            this.projectConfig = json;
            this.projectConfig.addRef();

            _completeLoad();
          });
          resources.load("sprites/iconLobby", SpriteAtlas, (err, atlas) => {
            this.iconList = atlas;
            this.iconList.addRef();

            _completeLoad();
          });

          if (sys.isNative) {
            director.on('INTEGRATION_SET_CANVAS_ORIENT', isLandScape => {
              setDeviceOrientation(isLandScape ? false : true);
            });
          }
        }

        getBubbleFloatGames() {
          let bubbleGames = director.getScene().getChildByName("CanvasBubbleFloatGame");
          return bubbleGames;
        }

        getIcon() {
          let icon = this.iconPool.get();

          if (!icon) {
            icon = instantiate(this.iconPrefab);
          }

          return icon;
        }

        getIconSpriteFrame(id) {
          if (this.iconList) {
            return this.iconList.getSpriteFrame(id);
          }

          return null;
        }

        removeAllIcons() {
          this._mapIconByGameId = {};

          if (this.iconHolder.children) {
            while (this.iconHolder.children.length > 0) {
              this.iconPool.put(this.iconHolder.children[0]);
            }
          }
        }

        loadProjects() {
          this.removeAllIcons();
          const gameList = this.projectConfig.json['games'];

          for (let id in gameList) {
            let config = gameList[id];

            if (config.isActive && config.prefabPath) {
              let bubbleGames = this.getBubbleFloatGames();

              if (bubbleGames) {
                var _bubbleGames$getCompo;

                bubbleGames.active = true;
                (_bubbleGames$getCompo = bubbleGames.getComponentInChildren(BubbleFloatGames)) == null ? void 0 : _bubbleGames$getCompo.addGame(id, config);
              }

              break;
            }

            if (config.isActive) {
              let item = this.getIcon();
              item.setParent(this.iconHolder);
              let icon = this.iconList.getSpriteFrame(config.icon);
              let itemScript = item.getComponent('ItemLobby');

              if (icon) {
                itemScript.setSprite(icon);
              } else {
                item.getChildByName("label").getComponent(Label).string = id;
              }

              itemScript.setGameConfig(id, config);
              this._mapIconByGameId[id] = item;
            }
          }
        }

        requestPlayGame(ev) {
          let config = ev.config;

          if (ev.config.isMultiSlot) {
            director.loadScene("MultiSlot", () => {
              const multiSlotComp = director.getScene().getChildByName('Canvas').getComponentInChildren('MultiSlot');
              multiSlotComp.requestPlayFromLobby(config);
            });
          } else if (ev.config.bundleName) {
            let icon = this._mapIconByGameId[ev.gameId];
            this.loadBundle(ev.config.bundleName, ev.config.prefabPath, percent => {
              icon.getChildByName("label").getComponent(Label).string = `Load ${Math.floor(percent)}%`;
            }, (err, assets, status) => {
              assets.forEach(asset => {
                let prefab = asset;

                if (prefab.data.name == ev.config.startScene) {
                  icon.getChildByName("label").getComponent(Label).string = ev.config.startScene;
                  let node = instantiate(prefab);
                  game.addPersistRootNode(node);
                }
              });
            });
          } else {
            director.preloadScene(ev.config.startScene, () => {
              if (sys.isNative) {
                setDeviceOrientation(ev.config.isPortrait);
              }

              director.loadScene(ev.config.startScene);
            });
          }
        }

        loadBundle(bundleName, prefabPath, onProgress, onComplete) {
          let bundle = assetManager.getBundle(bundleName);

          if (!bundle) {
            this._loadBundleDone = false;
            assetManager.loadBundle(bundleName, (err, bundle) => {
              if (err) {
                this._loadBundleDone = false;
                onComplete && onComplete(err, [], "load bundle error");
              } else {
                bundle.loadDir(prefabPath, Prefab, (finish, total, item) => {
                  let percent = 100 * finish / total;
                  onProgress && onProgress(percent);
                }, (error, assets) => {
                  if (error) {
                    this._loadBundleDone = false;
                    onComplete && onComplete(err, [], "load prefab error");
                    return;
                  }

                  onComplete(error, assets, "done");
                  this._loadBundleDone = true;
                });
              }
            });
          }
        }

        onEnable() {
          if (sys.isNative) {
            sys.garbageCollect();
          }
        }

        showDebug() {
          setDisplayStats(!this.toggleDebug.isChecked);
        }

        onDestroy() {
          if (this.projectConfig) {
            this.projectConfig.decRef();
            this.projectConfig = null;
          }

          if (this.iconList) {
            this.iconList.decRef();
            this.iconList = null;
          }

          this.removeAllIcons();
          this.iconPool.clear();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameSelection", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleDebug", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonEvent", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bubbleGamesPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginDev.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './serviceRest.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Label, director, sys, loadConfigAsync, apiObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      director = module.director;
      sys = module.sys;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "92923CnVDdKsaOVS+yBf9Ay", "LoginDev", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoginDev = exports('LoginDev', (_dec = ccclass('LoginDev'), _dec2 = property({
        displayName: "List User",
        type: Node
      }), _dec(_class = (_class2 = class LoginDev extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listUser", _descriptor, this);
        }

        onLoad() {
          this._bindEvents();
        }

        start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }


        _bindEvents() {
          let startIdx = 100;
          let arrView = this.listUser.children;
          let length = arrView.length;

          for (let i = 0; i < length; i++) {
            let view = arrView[i];
            let userId = arrView[i].getChildByName("Label").getComponent(Label);
            const currentIndex = i + 1;
            userId.string = "User " + currentIndex;
            view.off("click");
            view.on("click", event => {
              let indexUser = startIdx + currentIndex;
              let userName = 'user' + indexUser;
              let password = 'pwduser' + indexUser;
              this.loginSuccess({
                userText: userName,
                pwText: password
              });
            });
          }
        }

        loginSuccess({
          userText,
          pwText
        }) {
          const {
            IS_FINISHED_REMOTE,
            LOBBY_SCENE_NAME,
            API_URL,
            USER_TOKEN
          } = loadConfigAsync.getConfig();

          if (!IS_FINISHED_REMOTE) {
            setTimeout(() => {
              this.loginSuccess({
                userText,
                pwText
              });
            }, 100);
            return;
          }

          const dataPost = {
            userName: userText,
            password: pwText,
            fingerPrint: 'test'
          };
          apiObject.post({
            url: 'auth/login',
            data: dataPost,
            callback: res => {
              const {
                data: {
                  data,
                  error
                }
              } = res;

              if (data) {
                director.loadScene(LOBBY_SCENE_NAME);
                sys.localStorage.setItem(USER_TOKEN, data.token);
              }
            },
            callbackErr: () => {},
            apiUrl: API_URL
          });
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listUser", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginStaging.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './globalNetwork.ts', './loadConfigAsync.ts', './serviceRest.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, EditBox, Label, JsonAsset, Toggle, Node, Button, Prefab, _decorator, Component, sys, native, physics, instantiate, director, globalNetwork, loadConfigAsync, apiObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      Label = module.Label;
      JsonAsset = module.JsonAsset;
      Toggle = module.Toggle;
      Node = module.Node;
      Button = module.Button;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      native = module.native;
      physics = module.physics;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "7042cF+G9VB3aQidFVXOwrG", "LoginStaging", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Login = exports('Login', (_dec = ccclass('Login'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: JsonAsset
      }), _dec8 = property({
        type: Toggle
      }), _dec9 = property({
        type: Toggle
      }), _dec10 = property({
        type: Toggle
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Button
      }), _dec14 = property({
        type: Prefab
      }), _dec15 = property({
        type: Prefab
      }), _dec16 = property({
        type: Label
      }), _dec17 = property({
        type: Prefab
      }), _dec(_class = (_class2 = class Login extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "tokenInput", _descriptor, this);

          _initializerDefineProperty(this, "userInput", _descriptor2, this);

          _initializerDefineProperty(this, "passwordInput", _descriptor3, this);

          _initializerDefineProperty(this, "errorMsg", _descriptor4, this);

          _initializerDefineProperty(this, "version", _descriptor5, this);

          _initializerDefineProperty(this, "versionFile", _descriptor6, this);

          _initializerDefineProperty(this, "toggleStaging", _descriptor7, this);

          _initializerDefineProperty(this, "toggleExStaging", _descriptor8, this);

          _initializerDefineProperty(this, "toggleAccount", _descriptor9, this);

          _initializerDefineProperty(this, "passwordHolder", _descriptor10, this);

          _initializerDefineProperty(this, "tokenHolder", _descriptor11, this);

          _initializerDefineProperty(this, "btnGetToken", _descriptor12, this);

          _initializerDefineProperty(this, "stateMonitorPrefab", _descriptor13, this);

          _initializerDefineProperty(this, "stateMonitorPrefabPortrait", _descriptor14, this);

          _initializerDefineProperty(this, "physicType", _descriptor15, this);

          _initializerDefineProperty(this, "kHelper", _descriptor16, this);

          this.envInfo = {
            stg: {
              userId: '',
              token: ''
            },
            exstg: {
              userId: '',
              token: ''
            },
            account: {
              userId: '',
              password: ''
            },
            current: 'stg'
          };
        }

        onLoad() {
          // console.log('Loaded scene login v341');
          this.getConfigRemote();
          this.version.string = this.versionFile.json['v'];

          if (sys.isNative) {
            let versionFilePath = native.fileUtils.getWritablePath() + 'enotion-hotupdate/' + 'project.manifest';

            if (native.fileUtils.isFileExist(versionFilePath)) {
              let str = native.fileUtils.getStringFromFile(versionFilePath);

              if (str) {
                let obj = JSON.parse(str);
                this.version.string = obj.version;
              }
            }
          }

          if (physics.PhysicsSystem.PHYSICS_PHYSX) {
            this.physicType.string = "PhysicX";
          } else if (physics.PhysicsSystem.PHYSICS_BULLET) {
            this.physicType.string = "PhysicBullet";
          } else if (physics.PhysicsSystem.PHYSICS_CANNON) {
            this.physicType.string = "PhysicCannon";
          } else {
            this.physicType.string = "PhysicBultin";
          }

          if (this.kHelper) {
            let monitor = instantiate(this.kHelper);
            director.addPersistRootNode(monitor);
          }
        }

        getConfigRemote() {
          const {
            IS_FINISHED_REMOTE
          } = loadConfigAsync.getConfig();

          if (!IS_FINISHED_REMOTE) {
            setTimeout(() => {
              this.getConfigRemote();
            }, 100);
            return;
          }

          let cachedInfo = sys.localStorage.getItem('envInfo');
          if (cachedInfo) this.envInfo = JSON.parse(cachedInfo);

          if (this.envInfo && this.envInfo.current == "stg") {
            this.toggleStaging.isChecked = true;
            this.switchStaging();
          } else if (this.envInfo && this.envInfo.current == "exstg") {
            this.toggleExStaging.isChecked = true;
            this.switchExStaging();
          } else {
            this.toggleAccount.isChecked = true;
            this.switchAccount();
          }
        }

        switchStaging() {
          if (!this.toggleStaging.isChecked) return;
          this.envInfo.current = 'stg';
          let config = {
            API_URL: "https://api.staging.enostd.gay/",
            SOCKET_URL: "wss://sock.staging.enostd.gay",
            LOGIN_USE_TOKEN: true,
            URL_TOKEN: 'token',
            URL_CODE: 'code',
            USER_TOKEN: "user_token",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            IPMaster12: "wss://staging.fish.enostd.gay/lobby-1985/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        }

        switchExStaging() {
          if (!this.toggleExStaging.isChecked) return;
          this.envInfo.current = 'exstg';
          let config = {
            API_URL: "https://api.ex-staging.enostd.gay/",
            SOCKET_URL: "wss://sock.ex-staging.enostd.gay",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            IPMaster12: "wss://staging.fish.enostd.gay/lobby-1985/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        }

        switchAccount() {
          if (!this.toggleAccount.isChecked) return;
          this.envInfo.current = 'account';
          let config = {
            API_URL: "https://api2.ex-staging.enostd.gay/",
            SOCKET_URL: "wss://sock2-bin.ex-staging.enostd.gay",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            FISH_CLIENT_TYPE: 2,
            IPMaster12: "wss://staging.fish.enostd.gay/lobby-1985/"
          };
          this.btnGetToken.interactable = false;
          this.tokenHolder.active = false;
          this.passwordHolder.active = true;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        }

        loadUserInfo() {
          let currentEnv = this.envInfo.current;
          let userInfo = this.envInfo[currentEnv] || {};
          if (!userInfo) return;
          if (userInfo.token) this.tokenInput.string = userInfo.token;else {
            this.tokenInput.string = '';
          }
          if (userInfo.password) this.passwordInput.string = userInfo.password;else {
            this.passwordInput.string = '';
          }
          this.userInput.string = userInfo.userId || '';
        }

        getToken() {
          let currentEnv = this.envInfo.current;
          let userInfo = this.envInfo[currentEnv];
          let userName = this.userInput.string.replace(/game_/g, '');
          let tokenApi = 'internal-support-tool/token/generate/';
          const {
            API_URL
          } = loadConfigAsync.getConfig();
          apiObject.post({
            apiUrl: API_URL,
            url: tokenApi + userName,
            callback: data => {
              if (data.status == 200 && data.data && this.tokenInput) {
                this.tokenInput.string = data.data.data.token;
              }
            }
          });
        }

        onLoginPress() {
          if (this.envInfo.current == 'account') {
            this.loginAccount();
          } else {
            this.loginToken();
          }
        }

        loginAccount() {
          const {
            LOBBY_SCENE_NAME,
            USER_TOKEN,
            API_URL
          } = loadConfigAsync.getConfig();
          const dataPost = {
            username: this.userInput.string,
            password: this.passwordInput.string
          };
          apiObject.post({
            apiUrl: API_URL,
            url: 'client2-tool/login',
            data: dataPost,
            callback: res => {
              const {
                data: {
                  data,
                  code
                }
              } = res;

              if (code === 200 && data) {
                const {
                  token,
                  refreshToken
                } = data;
                if (!this.envInfo[this.envInfo.current]) this.envInfo[this.envInfo.current] = {};
                this.envInfo[this.envInfo.current].userId = this.userInput.string;
                this.envInfo[this.envInfo.current].password = this.passwordInput.string;
                sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
                globalNetwork.init(token, refreshToken);
                sys.localStorage.setItem(USER_TOKEN, token);
                director.loadScene(LOBBY_SCENE_NAME);
              } else {
                this.errorMsg.string = "Không thể đăng nhập";
              }
            },
            callbackErr: () => {
              this.errorMsg.string = "Không thể đăng nhập";
            }
          });
        }

        loginToken() {
          const {
            LOBBY_SCENE_NAME,
            USER_TOKEN,
            API_URL
          } = loadConfigAsync.getConfig();
          const userToken = this.tokenInput.string;
          if (!userToken) return;
          const dataPost = {
            token: userToken
          }; // console.log('Trying login user token ' + userToken);

          apiObject.post({
            url: API_URL + 'auth/token/login',
            data: dataPost,
            callback: res => {
              // console.log('login res ' + JSON.stringify(res));
              const {
                data: {
                  data,
                  error
                }
              } = res;

              if (data) {
                const {
                  token,
                  userId
                } = data;

                if (token && token != "") {
                  this.envInfo[this.envInfo.current].token = token;
                  this.envInfo[this.envInfo.current].userId = userId.replace(/xxxxx_|tek_/g, ''), sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
                  sys.localStorage.setItem(USER_TOKEN, token);
                  director.loadScene(LOBBY_SCENE_NAME);
                  this.errorMsg.string = "";
                  globalNetwork.setToken(token);
                  globalNetwork.init(token, null, 'portal', 'all');
                } else {
                  this.errorMsg.string = "Không thể đăng nhập";
                }
              } else if (error || res.data.errors) {
                switch (res.data.errors[0]) {
                  case "ERROR_TOKEN_EXPRIED":
                    this.errorMsg.string = "Token đã expired";
                    break;

                  default:
                    this.errorMsg.string = "Không thể đăng nhập";
                    break;
                }
              }
            }
          });
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tokenInput", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "userInput", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "passwordInput", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "errorMsg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "version", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "versionFile", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "toggleStaging", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "toggleExStaging", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "toggleAccount", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "passwordHolder", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tokenHolder", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btnGetToken", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "stateMonitorPrefab", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "stateMonitorPrefabPortrait", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "physicType", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "kHelper", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./debug-view-runtime-control.ts', './MonoUpdate.ts', './RetryInfo.ts', './jbs_runtime_md5.ts', './HotUpdateV2.ts', './UpdatePanelV2.ts', './HotUpdate.ts', './UpdatePanel.ts', './GameLogo.ts', './LayoutNodeInstance.ts', './Preload.ts', './BubbleFloatGames.ts', './EventList.ts', './GameEvent.ts', './GameQuest.ts', './InitSocketComponent.ts', './ItemLobby.ts', './LobbyDev.ts', './LobbyMenu.ts', './LobbyScene.ts', './LoginDev.ts', './LoginStaging.ts', './connectNetwork.ts', './game-network.mjs_cjs=&original=.js', './globalNetwork.ts', './eDupLogin.ts', './eFishNotify.ts', './eForceLobby.ts', './eSlowNetwork.ts', './eDebugStats.ts', './eFPSGraph.ts', './eHideHelper.ts', './eImageMemory.ts', './eSnapMem.ts', './eEventEmitter.ts', './MenuController.ts', './eDialog.ts', './eDialogController.ts', './eDragUI.ts', './eGraph.ts', './eGroup.ts', './eItem.ts', './eList.ts', './eMenu.ts', './eSlider.ts', './eToggle.ts', './keepAspectRatio.ts', './StateEvents.ts', './captureButton.ts', './fpsGraph.ts', './fpsRecorder.ts', './issuesRecorder.ts', './monitorController.ts', './screenshot.ts', './webDataStore.ts', './monitorDataStore.ts', './sessionModel.ts', './IndexedDB.mjs_cjs=&original=.js', './eUPNG.ts', './recordToggle.ts', './sessionDialog.ts', './sessionItem.ts', './sessionList.ts', './stateMonitorGroup.ts', './targetFpsSlider.ts', './AlignFullScreenButton.ts', './AnimUtils.ts', './AntialiasConfig.ts', './ClickAndShow.ts', './CustomTiledAssembler.ts', './FloatUtils.ts', './LetterSpacing.ts', './LoadingScreen.ts', './animateNumberLabel.ts', './big.mjs_cjs=&original=.js', './gameCommonUtils.ts', './utils.ts', './AnimationCacheConfig.ts', './AudioClipDatabase.ts', './CanvasScaleByOrientation.ts', './CustomCanvasSize.ts', './CustomPageViewIndicator.ts', './CustomTypeShare.ts', './EventListenerManager.ts', './MonitorTarget.ts', './NativeSoundPlayer.ts', './ScreenOrientationControl.ts', './ScrollViewOptimise.ts', './Sound.ts', './SoundPlayerImpl.ts', './WebSoundPlayer.ts', './globalConfig.ts', './XOCypher.ts', './loadConfigAsync.ts', './serviceRest.ts', './MaterialPlatformUpdate.ts', './gfFishGroupData.ts', './gfFishGroupHelper.ts', './gfFishGroupMgr.ts', './gfFishMoveActions.ts', './gfPopupPromotion.ts', './gfPromotionGun.ts', './gfQuickHuntBtn.ts', './gfBallTray.ts', './gfDragon.ts', './gfDragonAssetsManager.ts', './gfDragonBall.ts', './gfDragonConfig.ts', './gfDragonEffectLayer.ts', './gfDragonEvent.ts', './gfDragonExtraSound.ts', './gfDragonJackpotWinPopup.ts', './gfDragonNetworkController.ts', './gfDragonNetworkEvent.ts', './gfDragonWarning.ts', './gfDragonWheel.ts', './gfJackpotDragonInfo.ts', './gfJackpotStarFX.ts', './gfMiniBoss.ts', './gfMiniBossAssetsManager.ts', './gfMiniBossConfig.ts', './gfMiniBossEffectLayer.ts', './gfMiniBossEvent.ts', './gfMiniBossExtraSound.ts', './gfMiniBossItem.ts', './gfMiniBossNetworkController.ts', './gfAnimateNumberLabel.ts', './gfAssetBundle.ts', './gfAutoFireController.ts', './gfAutoFireScheduler.ts', './gfBackgroundController.ts', './gfBubble.ts', './gfCommonRoomController.ts', './gfCurrencyCalculator.ts', './gfCustomDataType.ts', './gfCustomTiledAssembler.ts', './gfDataStore.ts', './gfEventEmitter.ts', './gfExtraNodePoolAssets.ts', './gfFishManager.ts', './gfGameScene.ts', './gfGameScheduler.ts', './gfGeneralInitialization.ts', './gfHUDController.ts', './gfLoadAllInOne.ts', './gfLoadGameByPrefabs.ts', './gfLoadingScene.ts', './gfLoadingTransition.ts', './gfLocalize.ts', './gfMainController.ts', './gfMainFSM.ts', './gfModuleBig.mjs_cjs=&original=.js', './gfNativeSoundPlayer.ts', './gfNode.ts', './gfNodePool.ts', './gfNodePoolAssets.ts', './gfNodePoolConfig.ts', './gfNotifyController.ts', './gfOverrideEngine.ts', './gfPersisNodeController.ts', './gfPoolManager.ts', './gfPopupController.ts', './gfReferenceManager.ts', './gfRoomController.ts', './gfRoundStartTime.ts', './gfSetOrientation.ts', './gfSideMenu.ts', './gfSoundBase.ts', './gfSoundController.ts', './gfWebSoundPlayer.ts', './gfBossAssetsManager.ts', './gfBossBase.ts', './gfBossConfig.ts', './gfBossController.ts', './gfBossEffectLayer.ts', './gfBossExtraNodePoolAsset.ts', './gfBossExtraSound.ts', './gfBossInterface.ts', './gfBossItem.ts', './gfBossLoader.ts', './gfBossNetworkController.ts', './gfJackpotBossInfo.ts', './gfCutSceneItem.ts', './gfCutSceneJackpotWin.ts', './gfCutSceneLayer.ts', './gfCutSceneWin.ts', './gfDecorBullet.ts', './gfDecorFish.ts', './gfDecorGun.ts', './gfDropItem.ts', './gfDropSpecialGunFX.ts', './gfExtraWheelContainer.ts', './gfWheel.ts', './gfWheelAvatar.ts', './gfWheelContainer.ts', './gfWheelController.ts', './gfEffectEvent.ts', './gfEventButton.ts', './gfEventController.ts', './gfEventItemEffect.ts', './gfEventTray.ts', './gfEventTrayController.ts', './gfEventWinWheel.ts', './gfPopupEventInfo.ts', './gfBaseFish.ts', './gfFishUpdateAngle.ts', './gfFishUpdateOutScreen.ts', './gfMoveByFourPoints.ts', './gfMoveByPoints.ts', './gfMoveByThreePoints.ts', './gfMoveByTwoPoints.ts', './gfSpineFish.ts', './gfSpriteFish.ts', './gfBaseGunSkill.ts', './gfGunSkillController.ts', './gfLaserGun.ts', './gfOneShotGunSkill.ts', './gfRifleGunSkill.ts', './gfEventHistory.ts', './gfLuckyEffect.ts', './gfLuckyFish.ts', './gfBaseCellHistory.ts', './gfBaseHistory.ts', './gfPopupJackpotHistory.ts', './gfPopupInfo.ts', './gfPopupInfoPageView.ts', './gfPopupPrompt.ts', './gfPopupSetting.ts', './gfPopupSettingSlider.ts', './gfPopuptutorial.ts', './gfBubbleTransition.ts', './gfWaveTransition.ts', './gf3DParticle.ts', './gfAutoGrayScaleButton.ts', './gfBlockAllInput.ts', './gfBlurScrollView.ts', './gfBlurScrollViewController.ts', './gfBullet.ts', './gfBulletLayer.ts', './gfCoinFX.ts', './gfCoinLabel.ts', './gfEffectLayer.ts', './gfEffectLockFish.ts', './gfExplosionAnimationClip.ts', './gfExplosionSpine.ts', './gfFishLayer.ts', './gfGameLayer.ts', './gfLaserBox.ts', './gfLayerComponent.ts', './gfLobbyLayer.ts', './gfNetFX.ts', './gfNotifyComponent.ts', './gfNotifyItemStack.ts', './gfNotifyJackpot.ts', './gfNotifyLockFish.ts', './gfNotifyMessage.ts', './gfNotifyStack.ts', './gfPlayAndDestroy.ts', './gfPlayer.ts', './gfPlayerLayer.ts', './gfPopupBase.ts', './gfResizeByEvent.ts', './gfResizeWindow.ts', './gfTouchListener.ts', './gfVersion.ts', './gfWaitingLayer.ts', './gfWallet.ts', './gfWifiStatus.ts', './gfBaseConfig.ts', './gfBaseEvents.ts', './gfAssetLangController.ts', './gfLocalizationLoader.ts', './gfLocalizeAsset.ts', './gfLocalizeButton.ts', './gfLocalizeLabel.ts', './gfLocalizeNodeAsset.ts', './gfLocalizeSpine.ts', './gfLocalizeSprite.ts', './gfNetworkEvent.ts', './gfNetworkGameEvent.ts', './gfNetworkKeyMap.ts', './gfNetworkParser.ts', './gfNetworkSocket.ts', './gfActionHelper.ts', './gfUtilities.ts', './state-machine-history.min.mjs_cjs=&original=.js', './crypto-core.ts', './hashKey.ts', './md5.ts', './sha1.ts', './sha224.ts', './sha256.ts', './sha512.ts', './x64-core.ts', './AssetBundle1975.ts', './BackgroundController1975.ts', './Config1975.ts', './CustomDataType1975.ts', './DataStore1975.ts', './EventsCode1975.ts', './FishManager1975.ts', './GeneralInitialization1975.ts', './HandleConfigFish1975.ts', './LoadingScene1975.ts', './LobbyLayer1975.ts', './MainController1975.ts', './NetworkGameEvent1975.ts', './NodePoolConfig1975.ts', './PersisNodeController1975.ts', './PoolManager1975.ts', './PortalController1975.ts', './SideMenu1975.ts', './SoundController1975.ts', './Utilities1975.ts', './WaitingLayer1975.ts', './wifiStatus1975.ts', './BossExtraSound1975.ts', './EffectLeviathan1975.ts', './ItemLeviathan1975.ts', './JackpotInfo1975.ts', './JackpotWinPopup1975.ts', './JackpotWinWheel1975.ts', './Leviathan1975.ts', './LeviathanAssetManager1975.ts', './LeviathanExplosion1975.ts', './LeviathanNetwork1975.ts', './LeviathanNetworkController1975.ts', './LeviathanWarning1975.ts', './Drill1975.ts', './EffectLayer1975.ts', './EffectLockFish1975.ts', './LightningChainEffect1975.ts', './LightningEffect1975.ts', './BombFx1975.ts', './TurtleSkillEffect1975.ts', './VortexAnimateMoney1975.ts', './VortexEffect1975.ts', './Wheel1975.ts', './HUDController1975.ts', './NotifyMessage1975.ts', './NotifyJackpot1975.ts', './Player1975.ts', './PlayerLayer1975.ts', './BoxWave1975.ts', './JoinGameTransition1975.ts', './LoadingTransition1975.ts', './WaveTransition1975.ts', './WarningSkill1975.ts', './NetFx1975.ts', './FishGroupHelper1975.ts', './FishGroupMgr1975.ts', './LfishGroup09.ts', './LfishGroup18.ts', './LfishGroup22.ts', './MultiLevelFish1975.ts', './TurtleSlotMachine1975.ts', './newFishGroup.ts', './PopupPromotion1975.ts', './PromotionGun1975.ts', './NetworkKeyMap1975.ts', './LeaderFish1975.ts', './SpineFish1975.ts', './SpriteFish1975.ts', './JackpotCellHistory1975.ts', './JackpotHistory1975.ts', './PopupInfo1975.ts', './PopupJackpotHistory1975.ts', './PopupPrompt1975.ts', './PopupSetting1975.ts', './PopupTutorial1975.ts', './appConfig-debug.ts', './appConfig.ts', './mock.ts', './state-machine.min.mjs_cjs=&original=.js'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MainController1975.ts", ['cc', './gfMainController.ts', './gfEventEmitter.ts', './EventsCode1975.ts', './gfDataStore.ts', './Config1975.ts', './gfMainFSM.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gameCommonUtils.ts', './Utilities1975.ts'], function (exports) {
  var cclegacy, _decorator, gfMainController, gfEventEmitter, EventsCode1975, gfDataStore, Config1975, gfMainFSM, gfBaseEvents, gfBaseConfig, gameCommonUtils, addHtmlCursor;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfMainController = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      addHtmlCursor = module.addHtmlCursor;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8de77Oj2UdDhrmtCDXzJ/gV", "MainController1975", undefined);

      const {
        handleFlowOutGame
      } = gameCommonUtils;
      const TIME_WARNING_GODZILLA = 12;
      const {
        ccclass,
        property
      } = _decorator;
      let MainController1975 = exports('default', (_dec = ccclass('MainController1975'), _dec(_class = class MainController1975 extends gfMainController {
        constructor(...args) {
          super(...args);
          this._timeoutLoadScene = null;
          this._isSignedInLobby = null;
        }

        initGame() {
          this._isGameHide = true;
          addHtmlCursor();
        }

        onCatchFish(data) {
          if (data.skillInfo && !Array.isArray(data.skillInfo)) {
            data.skillInfo = [data.skillInfo];
          }

          gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.CATCH_FISH, data);
        }

        onDragonWarning(data) {
          const timeRemain = TIME_WARNING_GODZILLA - Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);
          gfEventEmitter.instance.emit(EventsCode1975.DRAGON.WARNING, timeRemain);
        }

        loadScene(sceneName, callback) {
          let duration = 0;

          if (gfDataStore.instance.getCurrentSceneName() == Config1975.instance.SceneName.Lobby) {
            duration = 3400;
            gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_TRANSITION_JOIN_GAME);
          }

          this._timeoutLoadScene = setTimeout(() => {
            gfEventEmitter.instance.emit(EventsCode1975.COMMON.HIDE_WAITING);
            this._timeoutLoadScene = null;
            super.loadScene(sceneName, callback);
          }, duration);
        }

        onQuickJoinRespond() {
          super.onQuickJoinRespond();
          gfEventEmitter.instance.emit(EventsCode1975.COMMON.HIDE_WAITING);
        }

        destroy() {
          clearTimeout(this._timeoutLoadScene);
          super.destroy();
        }

        onLoginLobby(data) {
          if (!this._isSignedInLobby && !data.isUserInGame) {
            this._isSignedInLobby = true;
            gfEventEmitter.instance.emit(EventsCode1975.LOGIN.LOGIN_SUCCESS, data);
          } else {
            data.DeskId = null;
            gfDataStore.instance.setPromotionInfo(data.PromotionInfo);
            gfDataStore.instance.setSelfInfo(data);
            gfDataStore.instance.updateDeltaTime(data.ServerTime);

            if (data.BetConfig) {
              gfDataStore.instance.listJackpotBet = globalThis._(data.BetConfig).values().join('-');
            }

            if (!data.isUserInGame) {
              if (gfDataStore.instance.getCurrentSceneName() !== gfBaseConfig.instance.SceneName.Lobby) {
                this.loadScene(gfBaseConfig.instance.SceneName.Lobby, () => {
                  var _gfMainFSM$instance;

                  (_gfMainFSM$instance = gfMainFSM.instance) == null ? void 0 : _gfMainFSM$instance._fsm.goLobby();
                });
              } else {
                var _gfMainFSM$instance2;

                if ((_gfMainFSM$instance2 = gfMainFSM.instance) != null && _gfMainFSM$instance2._fsm.can('goLobby')) {
                  var _gfMainFSM$instance3;

                  (_gfMainFSM$instance3 = gfMainFSM.instance) == null ? void 0 : _gfMainFSM$instance3._fsm.goLobby();
                } else {
                  var _Emitter$instance, _Emitter$instance2;

                  (_Emitter$instance = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance.emit(EventsCode1975.LOBBY_LAYER.UPDATE_LOBBY_INFO);
                  (_Emitter$instance2 = gfEventEmitter.instance) == null ? void 0 : _Emitter$instance2.emit(EventsCode1975.COMMON.UPDATE_JACKPOT, gfDataStore.instance.getJackpotValue());
                }
              }
            }
          }
        }

        loadGameScene() {
          if (!this._isSignedInLobby) {
            this._isSignedInLobby = true;
            gfEventEmitter.instance.emit(EventsCode1975.LOGIN.LOGIN_SUCCESS, {
              isUserInGame: true
            });
          } else {
            const sceneName = this.getGameSceneName();
            const currentScene = gfDataStore.instance.getCurrentSceneName();

            if (!this.isGameScene() || currentScene !== sceneName) {
              gfMainFSM.instance._fsm.goLoadGame();

              if (currentScene === Config1975.instance.SceneName.Lobby) {
                gfEventEmitter.instance.emit(EventsCode1975.COMMON.HANDLE_SHOW_WAITING, false, true);
              }

              this.loadScene(sceneName, () => {
                if (gfMainFSM.instance.isStateWaitExit()) {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                } else if (this.checkNeedRefresh()) {
                  handleFlowOutGame();
                } else {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.AFTER_LOAD_SCENE_GAME);

                  gfMainFSM.instance._fsm.goLoginGameRoom();
                }
              });
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);

              gfMainFSM.instance._fsm.goLoginGameRoom();
            }
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MaterialPlatformUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Material, _decorator, Component, sys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Material = module.Material;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "80740rdSMZAVoM94wi34+6S", "MaterialPlatformUpdate", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MaterialPlatformUpdate = exports('MaterialPlatformUpdate', (_dec = ccclass('MaterialPlatformUpdate'), _dec2 = property(Material), _dec(_class = (_class2 = class MaterialPlatformUpdate extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "material", _descriptor, this);
        }

        onLoad() {
          this.material.forEach(mat => {
            mat.setProperty('isNative', sys.isNative ? 1.0 : 0.0);
          });
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "material", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/md5.ts", ['cc', './crypto-core.ts'], function () {
  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "81536ybHJVDSYQVBRQE319w", "md5", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Constants table

      var T = []; // Compute constants

      (function () {
        for (var i = 0; i < 64; i++) {
          T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
        }
      })();
      /**
       * MD5 hash algorithm.
       */


      const MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function () {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
        },
        _doProcessBlock: function (M, offset) {
          // Swap endian
          for (var i = 0; i < 16; i++) {
            // Shortcuts
            var offset_i = offset + i;
            var M_offset_i = M[offset_i];
            M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
          } // Shortcuts


          var H = this._hash.words;
          var M_offset_0 = M[offset + 0];
          var M_offset_1 = M[offset + 1];
          var M_offset_2 = M[offset + 2];
          var M_offset_3 = M[offset + 3];
          var M_offset_4 = M[offset + 4];
          var M_offset_5 = M[offset + 5];
          var M_offset_6 = M[offset + 6];
          var M_offset_7 = M[offset + 7];
          var M_offset_8 = M[offset + 8];
          var M_offset_9 = M[offset + 9];
          var M_offset_10 = M[offset + 10];
          var M_offset_11 = M[offset + 11];
          var M_offset_12 = M[offset + 12];
          var M_offset_13 = M[offset + 13];
          var M_offset_14 = M[offset + 14];
          var M_offset_15 = M[offset + 15]; // Working varialbes

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3]; // Computation

          a = FF(a, b, c, d, M_offset_0, 7, T[0]);
          d = FF(d, a, b, c, M_offset_1, 12, T[1]);
          c = FF(c, d, a, b, M_offset_2, 17, T[2]);
          b = FF(b, c, d, a, M_offset_3, 22, T[3]);
          a = FF(a, b, c, d, M_offset_4, 7, T[4]);
          d = FF(d, a, b, c, M_offset_5, 12, T[5]);
          c = FF(c, d, a, b, M_offset_6, 17, T[6]);
          b = FF(b, c, d, a, M_offset_7, 22, T[7]);
          a = FF(a, b, c, d, M_offset_8, 7, T[8]);
          d = FF(d, a, b, c, M_offset_9, 12, T[9]);
          c = FF(c, d, a, b, M_offset_10, 17, T[10]);
          b = FF(b, c, d, a, M_offset_11, 22, T[11]);
          a = FF(a, b, c, d, M_offset_12, 7, T[12]);
          d = FF(d, a, b, c, M_offset_13, 12, T[13]);
          c = FF(c, d, a, b, M_offset_14, 17, T[14]);
          b = FF(b, c, d, a, M_offset_15, 22, T[15]);
          a = GG(a, b, c, d, M_offset_1, 5, T[16]);
          d = GG(d, a, b, c, M_offset_6, 9, T[17]);
          c = GG(c, d, a, b, M_offset_11, 14, T[18]);
          b = GG(b, c, d, a, M_offset_0, 20, T[19]);
          a = GG(a, b, c, d, M_offset_5, 5, T[20]);
          d = GG(d, a, b, c, M_offset_10, 9, T[21]);
          c = GG(c, d, a, b, M_offset_15, 14, T[22]);
          b = GG(b, c, d, a, M_offset_4, 20, T[23]);
          a = GG(a, b, c, d, M_offset_9, 5, T[24]);
          d = GG(d, a, b, c, M_offset_14, 9, T[25]);
          c = GG(c, d, a, b, M_offset_3, 14, T[26]);
          b = GG(b, c, d, a, M_offset_8, 20, T[27]);
          a = GG(a, b, c, d, M_offset_13, 5, T[28]);
          d = GG(d, a, b, c, M_offset_2, 9, T[29]);
          c = GG(c, d, a, b, M_offset_7, 14, T[30]);
          b = GG(b, c, d, a, M_offset_12, 20, T[31]);
          a = HH(a, b, c, d, M_offset_5, 4, T[32]);
          d = HH(d, a, b, c, M_offset_8, 11, T[33]);
          c = HH(c, d, a, b, M_offset_11, 16, T[34]);
          b = HH(b, c, d, a, M_offset_14, 23, T[35]);
          a = HH(a, b, c, d, M_offset_1, 4, T[36]);
          d = HH(d, a, b, c, M_offset_4, 11, T[37]);
          c = HH(c, d, a, b, M_offset_7, 16, T[38]);
          b = HH(b, c, d, a, M_offset_10, 23, T[39]);
          a = HH(a, b, c, d, M_offset_13, 4, T[40]);
          d = HH(d, a, b, c, M_offset_0, 11, T[41]);
          c = HH(c, d, a, b, M_offset_3, 16, T[42]);
          b = HH(b, c, d, a, M_offset_6, 23, T[43]);
          a = HH(a, b, c, d, M_offset_9, 4, T[44]);
          d = HH(d, a, b, c, M_offset_12, 11, T[45]);
          c = HH(c, d, a, b, M_offset_15, 16, T[46]);
          b = HH(b, c, d, a, M_offset_2, 23, T[47]);
          a = II(a, b, c, d, M_offset_0, 6, T[48]);
          d = II(d, a, b, c, M_offset_7, 10, T[49]);
          c = II(c, d, a, b, M_offset_14, 15, T[50]);
          b = II(b, c, d, a, M_offset_5, 21, T[51]);
          a = II(a, b, c, d, M_offset_12, 6, T[52]);
          d = II(d, a, b, c, M_offset_3, 10, T[53]);
          c = II(c, d, a, b, M_offset_10, 15, T[54]);
          b = II(b, c, d, a, M_offset_1, 21, T[55]);
          a = II(a, b, c, d, M_offset_8, 6, T[56]);
          d = II(d, a, b, c, M_offset_15, 10, T[57]);
          c = II(c, d, a, b, M_offset_6, 15, T[58]);
          b = II(b, c, d, a, M_offset_13, 21, T[59]);
          a = II(a, b, c, d, M_offset_4, 6, T[60]);
          d = II(d, a, b, c, M_offset_11, 10, T[61]);
          c = II(c, d, a, b, M_offset_2, 15, T[62]);
          b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
        },
        _doFinalize: function () {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
          var nBitsTotalL = nBitsTotal;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
          data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

          this._process(); // Shortcuts


          var hash = this._hash;
          var H = hash.words; // Swap endian

          for (var i = 0; i < 4; i++) {
            // Shortcut
            var H_i = H[i];
            H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
          } // Return final computed hash


          return hash;
        },
        clone: function () {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });

      function FF(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function GG(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function HH(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function II(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.MD5('message');
       *     var hash = CryptoJS.MD5(wordArray);
       */


      C.MD5 = Hasher._createHelper(MD5);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacMD5(message, key);
       */

      C.HmacMD5 = Hasher._createHmacHelper(MD5);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MenuController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eGroup.ts', './eMenu.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, director, eGroup, eMenu;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      eGroup = module.eGroup;
    }, function (module) {
      eMenu = module.eMenu;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "0a301BKkq1He6cW7Pw9LJhq", "MenuController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MenuController = exports('MenuController', (_dec = property({
        type: eMenu
      }), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), ccclass(_class = (_class2 = class MenuController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "menu", _descriptor, this);

          _initializerDefineProperty(this, "btnMenu", _descriptor2, this);

          _initializerDefineProperty(this, "dialogController", _descriptor3, this);
        }

        onLoad() {
          director.addPersistRootNode(this.node);
          this.node.setSiblingIndex(99);
        }

        start() {
          let groupList = this.menu.node.getComponentsInChildren(eGroup);
          groupList.forEach(item => {
            item.collapse();
          });
          this.menu.node.active = false; // this.initDialogs();

          this.initGroups();
        }

        initGroups() {//Add group manual hereif (!this.menu) return;
        }

        toggleMenu(e) {
          if (!this.menu.node.childrenCount) return;
          this.menu.node.active = !this.menu.node.active;
          this.btnMenu.opacity = this.menu.node.active ? 255 : 40;
          this.btnMenu.angle = this.menu.node.active ? 180 : 0;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnMenu", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "dialogController", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mock.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b3eaHRoJpAl7VdbWi2xxG7", "mock", undefined);

      const userList = ['', '56e6b7cb-533c-4888-9d5a-ab248a06697c', 'd24bb892-2186-4f99-80bf-d86711182e1e', 'dc539325-654e-4e8b-868f-76de25a2f35a', '7f40784b-5a46-4543-8423-fd8f4fcd0279', 'ca23696a-6aff-49e4-8be4-2878a4537265', '2d7fe03b-9e6f-46c2-bd1c-5a62c8d5e047', 'dc8cc0bb-7f25-4284-bbe0-a78d1f5b0f10', '1323b14d-b986-40ae-bc38-1e4362f5f339', '665e2d1b-85a8-486c-951f-4ba6b4a520e2', 'efe80f93-c21d-414b-b6b0-ca6633624b52', 'd2341c95-cc7a-4764-b076-54778df11c58', '7fdfd544-d0f8-4d1c-8f62-5c56857e6fae', 'bb8d1526-f4c0-472c-8308-b6b23dcd6a51', 'aea847a9-9b40-4f27-8f04-b821152d9d95', '122b2b5e-6232-49ac-8c23-5f7f0087a2f5', '5037ff8b-6a53-4812-b961-79984425ec04', 'e88b0830-0de9-4e3b-ae16-29c261cd797a', '3cb48324-b4fe-443a-bb72-94365dfba446', '7d186fb7-9dbc-416f-92f7-098e2b387b41', 'e6d94531-b9a7-4613-a369-88be17c47510', 'bbf5c484-fd49-4712-a74a-d9087fcac470', 'c0fea303-40d9-4916-9469-bb120c9cb946', '7d68da4c-e6f2-4b2e-a062-b42c70d1262f', '1f1d69a8-4de4-4ecf-8038-175c259a1796', '26c969e0-8ca8-4938-964b-5974a22e726f', '708574af-82aa-4dc2-a1ca-d545a45b9406', 'f1e65656-7a7f-4470-a42f-d3f329558882', 'a623678e-3c01-4970-a154-973c4f83b554', '47bc3d24-7c00-49ca-b18a-ae97368b2eab', '1ee89c7f-43d7-4d0f-a07f-35617d832db6', '4b5a50dd-8518-41a7-81a1-ae08634f7224', 'd2cefdae-62e3-4998-9629-ea6ced1b6d37', 'a7e128e6-deff-425d-9c42-a9f7ed32dbe4', '02e7e890-f5e7-46d1-bfb3-664cb80d6014', '0621ed1b-d2b5-480a-bee0-0fa93b72590f', '86e8c8c1-c8ad-495a-a5d6-efcebb93abc6', '68e5ef10-5451-455b-9076-871907548752', '1d05a7b7-fef3-49ad-820d-13cc26dab10c', 'be11c11b-0f04-4827-bf3d-82af3c75dc20', '7f58dd54-8e9f-4fed-b91e-c2657255bc39', '280125a5-92d3-492c-9054-ad163e48b441', '76d73797-4249-429d-8006-5d47cee5f6cb', '6487d34e-9e63-4bbe-8556-2ed6de713d9d', '48c64e13-1310-4a39-b258-1c1417fc486a', '1d231f82-4fc6-47e2-bba4-c203419f8402', 'e9eff152-dcbb-4d85-bc9f-953ae4d12776', '93437ca0-d5a9-446d-9e2d-eb0833c2acc1', 'af67b4e7-eabc-4087-b66a-b8b1bd0a5e00', 'fb3ebe48-caf1-4acc-b4c5-5e12b6126eb8', '0d786d1d-4f1c-46a3-8ffb-54cf80e14d79', 'ce851e2b-8e5e-46bd-8a13-b3d487c7ed6d', 'b890aa8c-ab4b-4b66-8094-d5fa1ce76abd', '56d73399-4231-42b8-bb9e-75ea8c5bdc35', 'b4412364-c3bc-4fa3-9311-1e1a721dd7bd', '30cc4fae-ac36-4eff-884a-7f51812129d0', '8e4cbb6e-72bf-4e79-bb85-eb9ef13bcb82', '2820fb3c-ca83-488b-b4eb-60a462d3940e', 'ddad2b48-8004-4d06-9749-2159e39a502b', 'e2bbb4f7-3987-49b7-9ca9-5e0ed8619f5f', 'a2c21e4f-1cf1-4c08-bd48-23fbafb0193c', 'd8235853-20e5-4c59-a6ec-51b5f920c83d', '5eff7099-0ab5-4218-9e29-ad62a4a7aef6', '8b965686-b37e-4c66-b463-5c7bb61c0be0', 'a85c17e3-6b22-4609-8a5a-9b839bbf27aa', 'd717803c-45aa-4676-b40f-cd8bcb2dfbd3', '7599abed-b608-41c6-a14f-40b94c65ae89', '43b60a97-22f4-4536-b2a7-fd1025df9bc5', '7b1ec585-5323-43b2-80c0-98961fbe7c4d', 'fbd35472-3c35-4764-a5db-39c30483dfb1', '7f5dbeef-cf0d-4715-b730-61548ad8c8b8', '34485d01-c565-4208-921f-c1c07f4b651c', 'b6cf22b0-5c58-4f5d-a5a8-142d431483af', 'a23a5459-1f08-4f0a-821f-0d7bab70aee9', '2d7c1dca-f628-4214-9fe9-c461e5a61774', '775e18f7-f702-471d-847b-e6e1be2dc465', '5ea33124-81a7-4c6c-8a29-67977e4af089', '53a0a688-2d7f-48d8-a8aa-2f83cf339fb4', '5614804e-b27a-4cc2-9317-3c37a2ff4a10', 'f4650e0a-8eae-4c77-8388-a74b24d38deb', 'e25416f1-8c8d-450b-919b-faa97981fe8d', '45e8195b-9ff1-466d-9748-3e1280443dd4', 'da0af4d3-af6b-4af1-977a-34a9e779dca6', 'f5b4323b-37a9-49f2-a4c0-7443515b6443', '360f4086-fc1b-41cf-b322-18ac80ff1636', 'bf0246e7-a179-4a62-843a-5f12036cafd4', '1bdff444-a214-424d-b76f-2c4b75c45c7c', '30e3d2ff-2f05-447b-972d-16571031eb26', 'c2d77d20-f6b3-4e71-bb5e-a7fb8c3e57b4', 'ba8977a8-b8b2-4f27-9c1c-64c68eb4972e', '23459e80-6190-47ab-8639-9cec204fc1ff', '8dbf465d-74b4-480d-af06-11baceadac1a', '0bf53ba8-efab-492a-93bc-086a74f263e6', 'a1560658-5927-4d2b-8bd7-0854f5e04689', '43253665-e9c8-43fa-b8b1-e70b9aa84cbc', '60beb533-fcf9-4927-b89e-884328a4ecfb', '6951de0d-cddc-46a4-abde-3bb44cce0dec', 'd09428f0-c851-4f17-af76-f0c6845e39bb', 'def15344-d560-4434-8a6b-f49274bedb28', '5335474d-cf1a-4acc-8fc0-757bd1bffc37', 'e9cca118-6bbd-4569-b0fb-2134bb75a922'];
      const listToken = ['', 'acb80c1b66e8d7e0238f664f6b2bade2', 'b64ee5942930d546d542b901f59571f8', '2ae5ce8fd3c2443ed9ed03d636870a5c', '5de60fa78df3c8b0d74fdab50bb1f05e', 'ec6418535a9a8c91c51457d95712d4ca', '62894b6a26ab2fc237bf8d337e09bea1', '4844f2fd92183d1e51db69d2262fdf62', '120c1f3746720186db019889e858fe76', '0e68f050850a67c4a4895969b8267ac5', '933529699ea607139e924b07e4ee3bdb', 'f14065e80d3c0c0da8e3231ae6a9e090', 'ca8222f4c8c3289bb6fbaf81720e7718', 'ceb383b6a9b06acb776dd2705345d592', 'bc229dcb0f2f526889046c4cc47ab8a2', '84d5399826046dbd4a06a5f53b15fed4', '64b7587d15c9440dfa9b8027719330eb', '254fd4b630e0554608623c61d4cee589', '9233c0694d2050eacf0cc48e1d92bbcc', '0d84f49e245969c0f075a304f61e7020', 'bee2816e5284e5f443c9bdaaa3b1d01d']; //  const uIndex = 30;

      let mock = exports('mock', {
        // IS_MOCK_NETWORK: true,
        '9999': 'spinNoWin',
        '9998': 'spinMiniGame',
        '5999': 'spinWin',
        userList,
        listToken,
        token: 'CQFYIm.RPD5pXGNK2kvxGyu9Cr11lry',
        userText: 'user180',
        pwText: 'pwduser180',
        userId: 'user180'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monitorController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eEventEmitter.ts', './StateEvents.ts', './monitorDataStore.ts', './fpsRecorder.ts', './issuesRecorder.ts', './webDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, sys, eEventEmitter, StateEvents, MonitorDataStore, FPSRecorder, IssuesRecorder, WebDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      StateEvents = module.default;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }, function (module) {
      FPSRecorder = module.default;
    }, function (module) {
      IssuesRecorder = module.default;
    }, function (module) {
      WebDataStore = module.WebDataStore;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "146f5ejkpxOwLoXnVze2d3z", "monitorController", undefined);

      const AUTO_SAVE_RECORD_DURATION = 240000; //4 minutes

      const {
        ccclass,
        property
      } = _decorator;
      let MonitorController = exports('MonitorController', (_dec = property(FPSRecorder), _dec2 = property(IssuesRecorder), ccclass(_class = (_class2 = class MonitorController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "fpsRecorder", _descriptor, this);

          _initializerDefineProperty(this, "issuesRecorder", _descriptor2, this);

          this.intervalAutoSave = void 0;
        }

        get recordData() {
          return MonitorDataStore.instance.recordData;
        }

        onLoad() {
          this.initEvents();
          this.initializeInstance();
        }

        initializeInstance() {
          if (!sys.isNative) {
            WebDataStore.instance.initIndexedDB(() => {
              MonitorDataStore.instance.loadListRecorded();
            });
          }
        }

        initEvents() {
          eEventEmitter.getInstance().registerEvent(StateEvents.START_RECORD, this.startRecord.bind(this));
          eEventEmitter.getInstance().registerEvent(StateEvents.STOP_RECORD, this.stopRecord.bind(this));
          eEventEmitter.getInstance().registerEvent(StateEvents.CAPTURE_SCREEN, this.takeScreenshot.bind(this));
          eEventEmitter.getInstance().registerEvent(StateEvents.UPLOAD_RECORD, this.uploadRecord.bind(this));
          eEventEmitter.getInstance().registerEvent(StateEvents.DELETE_RECORD, this.deleteRecord.bind(this));
        }

        startRecord() {
          MonitorDataStore.instance.resetForNewRecord();
          this.fpsRecorder.startRecord();
          this.issuesRecorder.startRecord();
          this.intervalAutoSave = setInterval(() => {
            this.saveRecord();
          }, AUTO_SAVE_RECORD_DURATION);
        }

        stopRecord() {
          this.fpsRecorder.stopRecord();
          this.issuesRecorder.stopRecord();
          this.saveRecord();
          clearInterval(this.intervalAutoSave);
          eEventEmitter.getInstance().emit(StateEvents.REFRESH_SESSION_LIST);
        }

        takeScreenshot() {
          this.issuesRecorder.recordIssue();
        }

        saveRecord() {
          MonitorDataStore.instance.saveRecordData();
        }

        uploadRecord(sessionData, cbProgress, cbUploadLabel) {
          MonitorDataStore.instance.uploadRecord(sessionData, cbProgress, cbUploadLabel);
        }

        deleteRecord(sessionId) {
          MonitorDataStore.instance.deleteRecord(sessionId);
          eEventEmitter.getInstance().emit(StateEvents.REFRESH_SESSION_LIST);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fpsRecorder", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "issuesRecorder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monitorDataStore.ts", ['cc', './serviceRest.ts', './webDataStore.ts', './sessionModel.ts'], function (exports) {
  var cclegacy, sys, native, log, error, find, apiObject, WebDataStore, RecordData, DeviceInformation;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      native = module.native;
      log = module.log;
      error = module.error;
      find = module.find;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      WebDataStore = module.WebDataStore;
    }, function (module) {
      RecordData = module.RecordData;
      DeviceInformation = module.DeviceInformation;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09a3ap5WahKDJjbiKA4056c", "monitorDataStore", undefined);

      const KEY_RECORD_CONFIG = 'performanceDebug';
      const PREFIX_LOCAL_STORE = "monitor/";

      class MonitorDataStore {
        static get instance() {
          if (!this._instance) {
            this._instance = new MonitorDataStore();
          }

          return this._instance;
        }

        constructor() {
          this.recordData = new RecordData();
          this.mapRecordDataBySessionId = new Map();
          this.loadConfigCached();
          this.loadListRecorded();
          this.loadDeviceInformation();
        }

        loadConfigCached() {
          var cached = JSON.parse(sys.localStorage.getItem(KEY_RECORD_CONFIG) || '{}');

          if (cached.targetFPS) {
            this.recordData.recordConfig.targetFPS = cached.targetFPS;
          }
        }

        loadListRecorded() {
          if (sys.isNative) {
            this.loadListRecordedNative();
          } else {
            this.loadListRecordedBrowser();
          }
        }

        loadListRecordedNative() {
          var stringListRecorded = this.getStringFromPath(`gemi/list.json`);

          if (!stringListRecorded) {
            return;
          }

          var listRecorded = JSON.parse(stringListRecorded);
          var listKeyRecorded = Object.keys(listRecorded).sort(function (a, b) {
            let timeA = listRecorded[a].timeSave;
            let timeB = listRecorded[b].timeSave;
            return timeB - timeA;
          });
          listKeyRecorded.forEach(key => {
            let stringRecord = this.getStringFromPath(`gemi/${key}/report.json`);
            const recordData = new RecordData();
            recordData.loadJSON(stringRecord);
            this.mapRecordDataBySessionId.set(key, recordData);
          });
        }

        loadListRecordedBrowser() {
          WebDataStore.instance.getListRecorded(arrayData => {
            arrayData.forEach(data => {
              var recordData = new RecordData();
              recordData.loadByObject(data.data);
              this.mapRecordDataBySessionId.set(recordData.sessionId, recordData);
            });
            this.mapRecordDataBySessionId = new Map([...Array.from(this.mapRecordDataBySessionId).sort(function (a, b) {
              let timeA = a[1].endTime;
              let timeB = b[1].endTime;
              return timeB - timeA;
            })]);
          });
        }

        loadDeviceInformation() {
          this.recordData.deviceInformation = new DeviceInformation();
          this.recordData.deviceInformation.os = sys.os;
          this.recordData.deviceInformation.version = sys.osVersion;
          this.recordData.deviceInformation.platform = sys.platform;
          this.recordData.deviceInformation.isNative = sys.isNative;
          this.recordData.deviceInformation.isBrowser = sys.isBrowser;
          this.recordData.deviceInformation.browserType = sys.browserType;
        }

        getStringFromPath(path) {
          var stringResult = '';

          if (sys.isNative) {
            const configPath = `${native.fileUtils.getWritablePath()}` + path;

            if (native.fileUtils.isFileExist(configPath)) {
              stringResult = native.fileUtils.getStringFromFile(configPath);
            }
          } else {
            const configPath = `${PREFIX_LOCAL_STORE}` + path;
            stringResult = sys.localStorage.getItem(configPath) || '';
          }

          return stringResult;
        }

        saveRecordConfig() {
          sys.localStorage.setItem(KEY_RECORD_CONFIG, JSON.stringify(this.recordData.recordConfig));
        }

        saveRecordData() {
          if (this.recordData.arrayChart.length > 0) {
            this.recordData.avgFPS = this.recordData.arrayChart.reduce((a, b) => a + b, 0) / this.recordData.arrayChart.length;
          } else {
            this.recordData.avgFPS = 0;
          }

          this.recordData.endTime = Date.now();
          this.recordData.totalTime = this.recordData.endTime - this.recordData.startTime;
          this.recordData.totalIssue = this.recordData.arrayIssues.length;

          if (sys.isNative) {
            var folderPath = `${native.fileUtils.getWritablePath()}gemi/${this.recordData.sessionId}`;
            let filePath = `${native.fileUtils.getWritablePath()}gemi/${this.recordData.sessionId}/report.json`;
            this.ensureFolder(folderPath);
            let saveReportSuccess = native.fileUtils.writeStringToFile(this.recordData.formatToJSON(), filePath);

            if (saveReportSuccess) {
              log(`[StateMonitor] Report saved at path: ${filePath}`);
            } else {
              error(`[StateMonitor] Failed to save report ${this.recordData.sessionId}`);
            } //save config


            const configPath = `${native.fileUtils.getWritablePath()}gemi/list.json`;
            let jsonConfig = {};

            if (native.fileUtils.isFileExist(configPath)) {
              const stringConfig = native.fileUtils.getStringFromFile(configPath);
              jsonConfig = JSON.parse(stringConfig);
            }

            jsonConfig[this.recordData.sessionId] = {
              gameId: this.recordData.gameId,
              sync: false,
              timeSave: Date.now()
            };
            let saveConfigSuccess = native.fileUtils.writeStringToFile(JSON.stringify(jsonConfig), configPath);
          } else {
            let filePath = `${PREFIX_LOCAL_STORE}gemi/${this.recordData.sessionId}/report.json`;
            WebDataStore.instance.addRecord(this.recordData);
          }

          this.addNewRecordToList();
        }

        uploadRecord(sessionData, cbProgress, cbUploadLabel) {
          const {
            sessionId,
            sessionName
          } = sessionData;
          const sessionRecordData = this.mapRecordDataBySessionId.get(sessionId);
          let uploadData = sessionRecordData.formatToAPIData();
          uploadData.name = sessionName;
          let nameFormatted = sessionName;

          if (sessionName.length > 20) {
            nameFormatted = nameFormatted.slice(0, 20) + '...';
          }

          let stringSuccess = 'Upload  ' + nameFormatted + '  successful!';
          let stringFailed = 'Upload  ' + nameFormatted + '  failed!';

          if (!uploadData) {
            cbProgress(-1);
            cbUploadLabel(stringFailed);
            return;
          }

          let uploadTasks = [];
          let uploaded = 0;
          let task = new Promise((resolve, reject) => {
            apiObject.postWithHeader({
              url: 'fe-testing-tool/upload-json',
              apiUrl: 'https://api.staging.enostd.gay/',
              data: uploadData,
              callback: () => {
                console.log('upload report success');
                uploaded += 1;
                const uploadProgress = uploaded / uploadTasks.length;
                cbProgress(uploadProgress);
                resolve(true);
              },
              callbackErr: () => {
                console.log('upload report fail');
                reject();
              }
            });
          });
          uploadTasks.push(task);

          let _push = () => {
            cbUploadLabel('Uploading');
            Promise.all(uploadTasks).then(uploadTasks => {
              cbUploadLabel(stringSuccess);
              console.log('upload success');
            }).catch(err => {
              cbUploadLabel(stringFailed);
              cbProgress(-1);
              console.log('upload fail ' + err);
            });
          };

          let _commitImage = (base64Img, id, isPush) => {
            let task = new Promise((resolve, reject) => {
              let data = {
                sessionId: sessionId,
                imageBase64: base64Img,
                fileName: `${id}.png`
              };
              console.log('start upload image ' + id);
              apiObject.postWithHeader({
                apiUrl: 'https://api.staging.enostd.gay/',
                url: '/fe-testing-tool/upload-image',
                data,
                callback: () => {
                  console.log(`upload image success ${id}`);
                  uploaded += 1;
                  const uploadProgress = uploaded / uploadTasks.length;
                  cbProgress(uploadProgress);
                  resolve(true);
                },
                callbackErr: () => {
                  console.log(`upload image fail ${id}`);
                  reject();
                }
              });
            });
            uploadTasks.push(task);
            isPush && _push();
          };

          if (uploadData.events.length > 0) {
            for (let i = 0; i < uploadData.events.length; i++) {
              const id = uploadData.events[i].time;

              if (sys.isNative) {
                const filePath = `${native.fileUtils.getWritablePath()}gemi/${sessionData.sessionId}/${id}.png`;

                if (native.fileUtils.isFileExist(filePath)) {
                  let base64Img = native.fileUtils.getStringFromFile(filePath);

                  _commitImage(base64Img, id, i == uploadData.events.length - 1);
                }
              } else {
                WebDataStore.instance.getImage(id.toString(), data => {
                  const {
                    raw
                  } = data;

                  _commitImage(raw, id, i == uploadData.events.length - 1);
                });
              }
            }
          } else {
            _push();
          }
        }

        addNewRecordToList() {
          var newMap = new Map();
          newMap.set(this.recordData.sessionId, this.recordData);
          this.mapRecordDataBySessionId = new Map([...Array.from(newMap.entries()), ...Array.from(this.mapRecordDataBySessionId.entries())]);
        }

        resetForNewRecord() {
          this.recordData = new RecordData();
          this.loadConfigCached();
          this.loadDeviceInformation();
          this.recordData.sessionId = Date.now().toString();
          this.recordData.userId = this.getUserId();
          this.recordData.gameId = this.getGameId();
          this.recordData.startTime = Date.now();
        }

        deleteRecord(sessionId) {
          if (sys.isNative) {
            let folderPath = `${native.fileUtils.getWritablePath()}gemi/${sessionId}`;
            const configPath = `${native.fileUtils.getWritablePath()}gemi/list.json`; //remove from list

            if (native.fileUtils.isFileExist(configPath)) {
              let stringConfig = native.fileUtils.getStringFromFile(configPath);
              let jsonConfig = JSON.parse(stringConfig);
              if (jsonConfig.hasOwnProperty(sessionId)) delete jsonConfig[sessionId];
              let success = native.fileUtils.writeStringToFile(JSON.stringify(jsonConfig), configPath);
            } //remove folder


            if (native.fileUtils.isDirectoryExist(folderPath)) {
              let success = native.fileUtils.removeDirectory(folderPath);

              if (success) {
                log(`[StateMonitor] Deleted session ${sessionId}`);
              } else {
                error(`[StateMonitor] Failed to delete session ${sessionId}`);
              }
            } else {
              error(`[StateMonitor] failed to delete session ${sessionId}, its not exists`);
            }
          } else {
            this.mapRecordDataBySessionId.get(sessionId).arrayIssues.forEach(issue => {
              WebDataStore.instance.removeImage(issue.time.toString());
            });
            WebDataStore.instance.removeRecord(sessionId);
            this.mapRecordDataBySessionId.delete(sessionId);
          }
        }

        ensureFolder(path) {
          if (!native.fileUtils.isDirectoryExist(path)) {
            native.fileUtils.createDirectory(path);
          }
        }

        getUserId() {
          let envInfo = sys.localStorage.getItem('envInfo');

          if (envInfo) {
            let objEnvInfo = JSON.parse(envInfo);
            let currentEnv = objEnvInfo.current;
            return objEnvInfo[currentEnv] ? objEnvInfo[currentEnv].userId : '';
          }

          return '';
        }

        getGameId() {
          var gameId = "0000";
          let director = find('Canvas').getComponentInChildren('Director');
          if (!director) director = find('Canvas').getComponentInChildren('gfMainController');

          if (director && director.getGameId) {
            gameId = director.getGameId() || "0000";
          } else if (director && director.config && director.config.GAME_ID) {
            gameId = director.config.GAME_ID;
          }

          return gameId;
        }

      }

      exports('MonitorDataStore', MonitorDataStore);
      MonitorDataStore._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MonitorTarget.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d9c84VJAbJG55ntfWlMb+mx", "MonitorTarget", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MonitorTarget = exports('MonitorTarget', (_dec = ccclass('MonitorTarget'), _dec(_class = (_class2 = class MonitorTarget extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "gameId", _descriptor, this);
        }

        getGameId() {
          return this.gameId;
        }

        getGameMeta() {
          return "Please Input Any String";
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "0000";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MonoUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RetryInfo.ts', './jbs_runtime_md5.ts', './loadConfigAsync.ts', './gameCommonUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Asset, Node, Label, ProgressBar, _decorator, Component, sys, game, director, RetryInfo, jbs_runtime_md5, loadConfigAsync, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Asset = module.Asset;
      Node = module.Node;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      game = module.game;
      director = module.director;
    }, function (module) {
      RetryInfo = module.default;
    }, function (module) {
      jbs_runtime_md5 = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "0d486UxPHJHh6PXI34akuVx", "MonoUpdate", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const jsb = window.jsb;
      const HOTUPDATE_STATUS = {
        GET_CONFIG: "GET_CONFIG",
        CHECK_UPDATE: "CHECK_UPDATE",
        READY_TO_UPDATE: "READY_TO_UPDATE",
        UPDATING: "UPDATING",
        UPDATE_FAILED: 'UPDATE_FAILED',
        ALREADY_UP_TO_DATE: "ALREADY_UP_TO_DATE",
        UPDATE_SUCCESS: "UPDATE_SUCCESS",
        GET_LOCAL_MANIFEST_FAILED: "GET_LOCAL_MANIFEST_FAILED"
      };
      const NETWORK_STATUS = {
        CONNECTED: "CONNECTED",
        DISCONNECTED: "DISCONNECTED"
      };
      const LOCAL_KEY = "HOT_UPDATE_URL";
      var LOG_UPDATE = null;
      let MonoUpdate = exports('MonoUpdate', (_dec = ccclass('MonoUpdate'), _dec2 = property(Asset), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(ProgressBar), _dec8 = property(Label), _dec9 = property(Node), _dec10 = property(Node), _dec(_class = (_class2 = class MonoUpdate extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "manifestUrl", _descriptor, this);

          _initializerDefineProperty(this, "panel", _descriptor2, this);

          _initializerDefineProperty(this, "info", _descriptor3, this);

          _initializerDefineProperty(this, "detail", _descriptor4, this);

          _initializerDefineProperty(this, "network", _descriptor5, this);

          _initializerDefineProperty(this, "byteProgress", _descriptor6, this);

          _initializerDefineProperty(this, "byteLabel", _descriptor7, this);

          _initializerDefineProperty(this, "btnRetry", _descriptor8, this);

          _initializerDefineProperty(this, "btnQuit", _descriptor9, this);

          _initializerDefineProperty(this, "loadSceneName", _descriptor10, this);

          _initializerDefineProperty(this, "gameId", _descriptor11, this);

          this._am = null;
          this._checkListener = null;
          this._updateListener = null;
          this._failedCount = 0;
          this._storagePath = "";
          this._oldV = "";
          this._newV = "";
          this._remoteURL = "";
          this._localManifestPath = "";
          this._localKey = "";
          this._retryInfo = null;
          this._state = "";
          this._netWorkState = "";
        }

        onLoad() {
          if (!sys.isNative) {
            return;
          }

          this._retryInfo = new RetryInfo(null, 0, null, 0, 3000, 3000, 3);
          this._localKey = LOCAL_KEY + this.gameId;
          this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') + this.gameId;

          LOG_UPDATE = msg => {
            console.log("::HOT UPDATE:: " + this.gameId + " - " + msg);
          };

          LOG_UPDATE('Storage path for remote asset : ' + this._storagePath); // Init with empty manifest url for testing custom manifest
          //Find local manifest path

          this._localManifestPath = this.manifestUrl.nativeUrl;
          this._am = new jsb.AssetsManager('', this._storagePath, this.versionCompareHandle.bind(this));

          this._am.setVerifyCallback(this._verifyFileHandle.bind(this)); // if (sys.os === sys.OS.ANDROID) {
          //     // Some Android device may slow down the download process when concurrent tasks is too much.
          //     // The value may not be accurate, please do more test and find what's most suitable for your game.
          //     this._am.setMaxConcurrentTask(2);
          // }
          // else {
          //     this._am.setMaxConcurrentTask(6);
          // }


          this.reset();
          this.getConfig();
        }
        /**
         * Function for retrieving the remote config
         */


        getConfig() {
          // this.panel.active = false;
          this.updateState(HOTUPDATE_STATUS.GET_CONFIG);

          if (this.isConnected()) {
            this.updateNetworkState(NETWORK_STATUS.CONNECTED);

            if (sys.getNetworkType() === sys.NetworkType.WWAN) {
              this.network.string = "Bạn đang kết nối dữ liêu di động"; // this.network.node.color = new Color(255, 255, 0, 255);

              this.network.node.active = true;
            }

            const CONFIG = loadConfigAsync.getConfig();
            const {
              USER_TOKEN,
              IS_FINISHED_REMOTE,
              HOT_UPDATE_URL
            } = CONFIG;

            if (!IS_FINISHED_REMOTE) {
              setTimeout(() => {
                this.getConfig();
              }, 100);
              return;
            } // gameToken = this.getParamFlutter('getGameToken');
            // sys.localStorage.setItem(USER_TOKEN, gameToken);


            this._remoteURL = "https://192.168.1.37:23071/hot-update/flutter-remote-data/";
            this.checkModifyManifest();
          } else {
            this.updateNetworkState(NETWORK_STATUS.DISCONNECTED);
            this.reconnectNetwork(() => {
              this.updateNetworkState(NETWORK_STATUS.CONNECTED);
              this.getConfig();
            });
          }
        }
        /**
         * Compare remote hot update url with local one
         * if local manifest does not exist, create one
         */


        checkModifyManifest() {
          let tempUpdateUrl = sys.localStorage.getItem(this._localKey);

          if (!tempUpdateUrl) {
            let localManifest = jsb.fileUtils.getStringFromFile(this._localManifestPath);
            let manifestObject = JSON.parse(localManifest);
            sys.localStorage.setItem(this._localKey, manifestObject.packageUrl);
          }

          tempUpdateUrl = sys.localStorage.getItem(this._localKey); //Only modify manifest file if remote URL is changed

          if (this._remoteURL && tempUpdateUrl !== this._remoteURL) {
            this.modifyAppLoadUrlForManifestFile();
          } else {
            this.checkUpdate();
          }
        }
        /**
         * Modify the .manifest file
         * There are 2 cases that need to be mentioned: init package and updated game
         * In devices that update at least once, project.manifest will be stored in hot update directory
         * In init package, there will be no project.manifest file in storage path (this._storagePath)
         */


        modifyAppLoadUrlForManifestFile() {
          try {
            let afterString, manifestObject;

            if (jsb.fileUtils.isFileExist(this._storagePath + '/project.manifest')) {
              let loadManifest = jsb.fileUtils.getStringFromFile(this._storagePath + '/project.manifest');
              manifestObject = JSON.parse(loadManifest);
            } else {
              if (!jsb.fileUtils.isDirectoryExist(this._storagePath)) jsb.fileUtils.createDirectory(this._storagePath);
              let originManifest = jsb.fileUtils.getStringFromFile(this._localManifestPath);
              manifestObject = JSON.parse(originManifest);
            }

            manifestObject.packageUrl = this._remoteURL;
            manifestObject.remoteManifestUrl = manifestObject.packageUrl + this.gameId + "/project.manifest";
            manifestObject.remoteVersionUrl = manifestObject.packageUrl + this.gameId + "/version.manifest";
            afterString = JSON.stringify(manifestObject);
            let isWritten = jsb.fileUtils.writeStringToFile(afterString, this._storagePath + '/project.manifest');

            if (isWritten) {
              sys.localStorage.setItem(this._localKey, this._remoteURL);
            } // Init with empty manifest url for testing custom manifest


            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
              let manifest = new jsb.Manifest(afterString, this._storagePath);

              this._am.loadLocalManifest(manifest, this._storagePath);

              LOG_UPDATE('Successfully load remote manifest');
            }

            this.checkUpdate();
          } catch (error) {
            LOG_UPDATE("Error modify manifest!! See Error -> " + error);
          }
        }

        getParamFlutter(param) {
          let value = '';

          if (sys.os == sys.OS.ANDROID) {
            value = jsb.reflection.callStaticMethod("com/base/getx/base_architecture/game/PlayGameActivity", param, "()Ljava/lang/String;"); // value = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", param, "()Ljava/lang/String;");
          } else if (sys.os == sys.OS.IOS) {
            value = jsb.reflection.callStaticMethod("AppController", param);
          }

          return value;
        }

        formatBytes(bytes) {
          return (bytes / 1048576).toFixed(2) + "MB";
        }

        checkUpdate() {
          LOG_UPDATE("checkUpdate");

          if (!this._am) {
            LOG_UPDATE("Asset manager not found!");
          }

          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            // Resolve md5 url
            LOG_UPDATE('Load local manifest');

            this._am.loadLocalManifest(this._localManifestPath);
          }

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            LOG_UPDATE("unable to get manifest");
            this.initLocalManifestFailed();
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();

          this.updateState(HOTUPDATE_STATUS.CHECK_UPDATE);
        }

        checkCb(event) {
          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              this.getLocalManifestFailed();
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              this.downloadManifestFailed();
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              this.updateState(HOTUPDATE_STATUS.ALREADY_UP_TO_DATE);
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              this.updateState(HOTUPDATE_STATUS.READY_TO_UPDATE);
              break;

            default:
              return;
          }

          this._am.setEventCallback(null);
        }

        hotUpdate() {
          if (this._am) {
            this._am.setEventCallback(this.updateCb.bind(this));

            this._am.update();

            this.updateState(HOTUPDATE_STATUS.UPDATING);
            this.network.string = "";
            this.network.node.active = false;
          }
        }

        updateState(stateName) {
          LOG_UPDATE('Current state: ' + stateName);
          this._state = stateName;
          this.btnRetry.active = false;
          this.btnQuit.active = false;

          switch (this._state) {
            case HOTUPDATE_STATUS.GET_CONFIG:
              this.info.string = "Kiểm tra phiên bản";
              this.detail.string = "\nĐang kiểm tra phiên bản.";
              this.detail.node.active = true;
              break;

            case HOTUPDATE_STATUS.CHECK_UPDATE:
              this.info.string = "Kiểm tra phiên bản";
              this.detail.string = "\nĐang kiểm tra phiên bản.";
              this.detail.node.active = true;
              break;

            case HOTUPDATE_STATUS.READY_TO_UPDATE:
              {
                this.panel.active = true; // this.btnQuit.active = true;

                const totalSize = this.calculateTotalSize();
                this.info.string = "Có phiên bản cập nhật mới";
                this.byteProgress.progress = 0;
                const detailStr = "Phiên bản cũ: " + this._oldV + " | Phiên bản mới: " + this._newV + "\n" + "Dung lượng tải: " + totalSize;
                this.detail.string = detailStr;
                this.detail.node.active = true;
                this.scheduleOnce(this.hotUpdate, 0.5);
                break;
              }

            case HOTUPDATE_STATUS.UPDATING:
              this.info.string = "Đang cập nhật";
              this.detail.string = "Đang tải bản cập nhật\nXin chờ trong giây lát";
              this.detail.node.active = false;
              break;

            case HOTUPDATE_STATUS.UPDATE_FAILED:
              if (!this.isConnected()) {
                this.updateNetworkState(NETWORK_STATUS.DISCONNECTED);
                this.reconnectNetwork(() => {
                  this.updateNetworkState(NETWORK_STATUS.CONNECTED);
                  this.updateState(HOTUPDATE_STATUS.UPDATING);

                  this._am.downloadFailedAssets();

                  this.btnQuit.active = false;
                });
              } else {
                if (this._retryInfo.downloadFailedAssetsCount === 0) {
                  this.downloadFailedAssetsInterval();
                } else {
                  this._retryInfo.downloadFailedAssetsCount++;

                  if (this._retryInfo.downloadFailedAssetsCount > this._retryInfo.maxOfCount) {
                    this.btnRetry.active = true;
                    this.btnQuit.active = true;
                  }
                }
              }

              break;

            case HOTUPDATE_STATUS.ALREADY_UP_TO_DATE:
              this.onUpdateComplete();
              break;

            case HOTUPDATE_STATUS.UPDATE_SUCCESS:
              this._am.setEventCallback(null);

              this._updateListener = null; // Prepend the manifest's search path

              let searchPaths = jsb.fileUtils.getSearchPaths(); // eslint-disable-line

              let newPaths = this._am.getLocalManifest().getSearchPaths(); // eslint-disable-line
              // console.log(JSON.stringify(newPaths));


              Array.prototype.unshift.apply(searchPaths, newPaths); // This value will be retrieved and appended to the default search path during game startup,
              // please refer to samples/js-tests/main.js for detailed usage.
              // !!! Re-add the search paths in main.js is very important, otherwise, new scripts won't take effect.

              sys.localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
              jsb.fileUtils.setSearchPaths(searchPaths);
              game.restart();
              break;
          }
        }

        updateNetworkState(stateName) {
          this._netWorkState = stateName;

          switch (this._netWorkState) {
            case NETWORK_STATUS.CONNECTED:
              this.network.string = "";
              this.network.node.active = false;
              break;

            case NETWORK_STATUS.DISCONNECTED:
              this.network.string = "Không có kết nối...";
              this.network.node.active = true; // this.network.node.color = new cc.Color(219, 53, 53, 255);

              break;
          }
        }

        initLocalManifestFailed() {
          LOG_UPDATE("initLocalManifestFailed " + this._state);
          this.btnRetry.active = false;
          this.btnQuit.active = false;
          this.info.string = "Kiểm tra phiên bản";
          this.detail.string = "Không có bản cập nhật mới.";
          this.detail.node.active = true;
          setTimeout(() => {
            this.onUpdateComplete();
          }, 100);
        }

        getLocalManifestFailed() {}

        downloadManifestFailed() {
          this.btnRetry.active = true;
          this.btnQuit.active = true;
          this.detail.string = "Có lỗi xảy ra, vui lòng thử lại.";
          this.detail.node.active = true;
        }

        reconnectNetwork(callback) {
          clearInterval(this._retryInfo.reConnectInterval);
          this._retryInfo.reconnectCount = 0;
          this._retryInfo.reConnectInterval = setInterval(() => {
            this._retryInfo.reconnectCount++;

            if (this.isConnected()) {
              clearInterval(this._retryInfo.reConnectInterval);
              this._retryInfo.reconnectCount = 0;
              this.btnQuit.active = false;
              callback();
            } else {
              if (this._retryInfo.reconnectCount > this._retryInfo.maxOfCount) {
                this.btnRetry.active = false;
                this.btnQuit.active = true;
              }
            }
          }, this._retryInfo.reconnectionDelay);
        }

        downloadFailedAssetsInterval() {
          clearInterval(this._retryInfo.downloadFailedAssetsInterval);
          this._retryInfo.downloadFailedAssetsCount++;

          this._am.downloadFailedAssets();

          this._retryInfo.downloadFailedAssetsInterval = setInterval(() => {
            if (this._retryInfo.downloadFailedAssetsCount > this._retryInfo.maxOfCount) {
              clearInterval(this._retryInfo.downloadFailedAssetsInterval);
              this.btnRetry.active = true;
              this.btnQuit.active = true;
            } else {
              this._am.downloadFailedAssets();
            }
          }, this._retryInfo.downloadFailedAssetsDelay);
        }

        calculateTotalSize() {
          if (jsb.fileUtils.isFileExist(this._storagePath + "_temp/project.manifest.temp")) {
            let loadManifest = jsb.fileUtils.getStringFromFile(this._storagePath + "_temp/project.manifest.temp");
            let manifestObject = JSON.parse(loadManifest);
            let totalSize = 0;

            for (const key in manifestObject.assets) {
              let obj = manifestObject.assets[key];
              totalSize += obj.size;
            }

            totalSize = this.formatBytes(totalSize);
            LOG_UPDATE('Total size calculated:' + totalSize);
            return totalSize;
          } else {
            LOG_UPDATE('no temp manifest found');
            return null;
          }
        }

        updateCb(event) {
          let failed = false;
          this._failedCount = this._failedCount ? this._failedCount : 0;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              this.updateState(HOTUPDATE_STATUS.GET_LOCAL_MANIFEST_FAILED);
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              {
                if (this._retryInfo.downloadFailedAssetsInterval) {
                  clearInterval(this._retryInfo.downloadFailedAssetsInterval);
                  this._retryInfo.downloadFailedAssetsInterval = null;
                  this._retryInfo.downloadFailedAssetsCount = 0;
                  this.updateState(HOTUPDATE_STATUS.UPDATING);
                }

                this.detail.string = "";
                this.detail.node.active = false;
                this.byteProgress.node.active = true;
                let downloaded = event.getDownloadedBytes();
                let total = event.getTotalBytes();

                if (total > 0) {
                  this.byteProgress.progress = downloaded / total;
                } // this.log("Total size:" + this.formatBytes(total));
                //this.byteLabel.string = this.formatBytes(downloaded) + "/" + this.formatBytes(total);


                const percent = Math.floor(downloaded / total * 100);
                this.byteLabel.string = percent ? percent + "%" : "0%";
              }
              break;

            case jsb.EventAssetsManager.ASSET_UPDATED:
              this._failedCount = 0;
              this.detail.string = "";
              this.detail.node.active = false;
              this.btnQuit.active = false;
              this.updateNetworkState(NETWORK_STATUS.CONNECTED);
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              this.downloadManifestFailed();
              failed = true;
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              this.updateState(HOTUPDATE_STATUS.ALREADY_UP_TO_DATE);
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              this.updateState(HOTUPDATE_STATUS.UPDATE_SUCCESS);
              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              this.updateState(HOTUPDATE_STATUS.UPDATE_FAILED);
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              this._failedCount++;
              LOG_UPDATE('Asset update error: ' + event.getAssetId() + ', ' + event.getMessage());

              if (!this.isConnected()) {
                this.updateNetworkState(NETWORK_STATUS.DISCONNECTED);
              }

              if (this._failedCount > 3) {
                this.detail.node.active = true;
                this.detail.string = "Có lỗi xảy ra!";
                this.btnQuit.active = true;
              }

              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              LOG_UPDATE('Asset decompress failed: ' + event.getAssetId() + ', ' + event.getMessage());
              break;
          }

          if (failed) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        }

        isConnected() {
          return sys.getNetworkType() !== sys.NetworkType.NONE;
        }

        onClickRetry() {
          this.btnRetry.active = false;
          this.btnQuit.active = false;

          switch (this._state) {
            case HOTUPDATE_STATUS.CHECK_UPDATE:
            case HOTUPDATE_STATUS.UPDATING:
              this.checkUpdate();
              this.info.string = "Kiểm tra phiên bản";
              this.detail.string = "\nĐang kiểm tra phiên bản.";
              this.detail.node.active = true;
              break;

            case HOTUPDATE_STATUS.UPDATE_FAILED:
              this.info.string = 'Đang thử tải lại';
              this.detail.string = "";
              this.detail.node.active = false;

              this._am.downloadFailedAssets();

              break;
          }
        }

        onClickQuit() {
          this.reset();
          gameCommonUtils.handleCloseGameIframe();
        }

        versionCompareHandle(versionA, versionB) {
          //this.panel.version.string = "Current Version: " + versionA;
          this._oldV = versionA;
          this._newV = versionB;
          LOG_UPDATE("Version Compare: version A is " + versionA + ', version B is ' + versionB);
          var vA = versionA.split('.');
          var vB = versionB.split('.');

          for (var i = 0; i < vA.length; ++i) {
            var a = parseInt(vA[i]);
            var b = parseInt(vB[i] || 0);

            if (a === b) {
              continue;
            } else {
              return a - b;
            }
          }

          if (vB.length > vA.length) {
            return -1;
          } else {
            return 0;
          }
        }

        _verifyFileHandle(path, asset) {
          // When asset is compressed, we don't need to check its md5, because zip file have been deleted.
          if (asset.compressed) {
            return true;
          }

          let resMD5 = jbs_runtime_md5(jsb.fileUtils.getDataFromFile(path));
          return asset.md5 == resMD5;
        }

        onUpdateComplete() {
          LOG_UPDATE("onUpdateComplete - " + this.loadSceneName);
          director.loadScene(this.loadSceneName);
        }

        reset() {
          clearInterval(this._retryInfo.downloadFailedAssetsInterval);
          clearInterval(this._retryInfo.reConnectInterval);
          this.byteProgress.progress = 0;
          this.byteProgress.node.active = false;
          this.byteLabel.string = "";
          this.detail.string = "";
          this.detail.node.active = false;
          this.btnRetry.active = false;
          this.btnQuit.active = false;
        }

        onDestroy() {
          if (this._updateListener) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "manifestUrl", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "info", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "detail", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "network", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "byteProgress", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "byteLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnRetry", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnQuit", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "loadSceneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "gameId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MultiLevelFish1975.ts", ['cc', './SpineFish1975.ts', './EventsCode1975.ts', './utils.ts', './gfEventEmitter.ts'], function (exports) {
  var cclegacy, sp, BoxCollider2D, _decorator, SpineFish1975, EventsCode1975, setOpacity, gfEventEmitter;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      BoxCollider2D = module.BoxCollider2D;
      _decorator = module._decorator;
    }, function (module) {
      SpineFish1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "885cbakDTxLTqYxogk5RVrX", "MultiLevelFish1975", undefined);

      const {
        ccclass
      } = _decorator;
      let MultiLevelFish1975 = exports('MultiLevelFish1975', (_dec = ccclass('MultiLevelFish1975'), _dec(_class = class MultiLevelFish1975 extends SpineFish1975 {
        constructor(...args) {
          super(...args);
          this._currentLevel = 0;
          this._config = null;
        }

        initAssets(config) {
          this._config = config;
          config.BoxCollider = config.BoxColliderMul[0];
          this.setOpacity(255);
          super.initAssets(config);
        }

        initFishData(data) {
          super.initFishData(data);

          if (data.Level) {
            this.levelUp(data, true);
          }
        }

        initAnimationCacheMode(cacheMode) {
          this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.PRIVATE_CACHE);
        }

        levelUp(data, isInit = false) {
          const {
            Level
          } = data;

          if (Level <= this._currentLevel) {
            return;
          }

          this._currentLevel = Level;
          const levelIdleAnimName = `animation`;

          if (isInit) {
            const skin = this.fishAnim._skeleton.data.findSkin("lv" + Level);

            if (skin) {
              this.fishAnim.setSkin("lv" + Level);
            }

            this.fishAnim.setAnimation(0, levelIdleAnimName, true);
          } else {
            const transAnimName = `${this._config.TransAnimation[0]}${Level - 1}_${Level}`;

            if (transAnimName) {
              setOpacity(this.levelUpFx.node, 255);
              this.levelUpFx.node.active = true;
              this.levelUpFx.setAnimation(0, "animation", false);
              this.scheduleOnce(() => {
                const skin = this.fishAnim._skeleton.data.findSkin("lv" + Level);

                if (skin) {
                  this.fishAnim.setSkin("lv" + Level);
                  gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_FISH_LEVEL_UP);
                }
              }, 0.5);
            } else {
              this.fishAnim.setAnimation(0, levelIdleAnimName, true);
            }
          }

          const targetPointIndex = Level - 1;

          if (this._config.targetPointMul) {
            this._targetPoint = this._config.targetPointMul[targetPointIndex];
          }

          this.updateBoxCollider(Level);
          this.outScreenComp.updateVisibleSize(this._visibleSize, this._maxWidth, this._offsetX);
        }

        playEffectDie() {
          this.unscheduleAllCallbacks();
          this.levelUpFx.clearTrack(0);
          this.levelUpFx.node.active = false;
        }

        updateBoxCollider(level) {
          const boxesIndex = level - 1;
          const boxes = this._config.BoxColliderMul[boxesIndex];
          this.setUpBoxColliders(boxes);
          this._maxWidth = this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x;
          this._offsetX = this.node.getComponent(BoxCollider2D).offset.x * this.node.scale.x;
        }

        update(_deltaTime) {
          let parentAngle = this.node.angle;
          this.levelUpFx.node.angle = -parentAngle;
        }

        unuse() {
          super.unuse();
          this._currentLevel = 0;
          this.levelUpFx.node.active = false;
          this._config = null;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeSoundPlayer.ts", ['cc', './env'], function (exports) {
  var cclegacy, log, sys, Node, AudioSource, tween, Vec3, warn, error, _decorator, DEBUG;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
      Node = module.Node;
      AudioSource = module.AudioSource;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
      error = module.error;
      _decorator = module._decorator;
    }, function (module) {
      DEBUG = module.DEBUG;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2d38eZL5P9DurGNhhptSL0Y", "NativeSoundPlayer", undefined);

      const {
        ccclass
      } = _decorator;
      let NativeSoundPlayer = exports('NativeSoundPlayer', (_dec = ccclass('NativeSoundPlayer'), _dec(_class = class NativeSoundPlayer {
        constructor() {
          this.musicMap = {};
          this.sfxMap = {};
          this.musicList = null;
          this.sfxList = null;
          this.musicAudioNode = null;
          this.currentMusicVolume = 0;
          this.musicAudioSource = null;
          this.subMusicSource = null;
          this.currentMusic = null;
          this._musicTween = null;
          this._tweenChangeMusic = null;
          this._soundTweens = {};
          this._gameNode = null;
          this._isMusicPlaying = false;
          this._playingSfxAudioSources = [];
          this._isAppHide = false;
          this._isThumbMode = false;
          this.webAudioContext = null;
          this._resume_sound_tween = null;
          this._resume_sound_fail = null;
        }

        init(musicList, sfxList, gameNode) {
          log('native sound init');
          this.musicList = musicList;
          this.sfxList = sfxList;
          this.musicList.forEach(soundObj => {
            this.musicMap[soundObj.soundId] = soundObj;
          });
          this.sfxList.forEach(soundObj => {
            this.sfxMap[soundObj.soundId] = soundObj;
          });
          this._gameNode = gameNode;
          this.createMusicAudioSource();

          if (sys.isBrowser && DEBUG) {
            window["NativeSoundPlayer"] = this;
          }
        }

        createMusicAudioSource() {
          if (!this.musicAudioNode) {
            this.musicAudioNode = new Node("MusicAudio");
            this.musicAudioNode.parent = this._gameNode;
            this.musicAudioNode.active = false;
            this.musicAudioSource = this.musicAudioNode.addComponent(AudioSource);
            this.musicAudioSource.playOnAwake = false;
            this.musicAudioSource['isMusicSrc'] = true;
          }
        }

        setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        }

        loadDynamicSounds(sfxList, callback) {
          if (sfxList && sfxList.length > 0) {
            sfxList.forEach(audioObj => {
              if (audioObj.isMusic) {
                if (!this.musicMap[audioObj.soundId]) {
                  this.musicMap[audioObj.soundId] = audioObj;
                }
              } else if (audioObj.isEffect) {
                if (!this.sfxMap[audioObj.soundId]) {
                  this.sfxMap[audioObj.soundId] = audioObj;
                }
              }
            });
            callback && callback();
          } else {
            this.resetAudioMaps();
          }
        }

        resetAudioMaps() {
          for (let key in this.musicMap) {
            const musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (let key in this.sfxMap) {
            const soundObj = this.sfxMap[key];

            if (soundObj && soundObj.destroyedOnSwitchMode) {
              if (soundObj.audioSource && soundObj.audioSource.node) {
                soundObj.audioSource.node.destroy();
              }

              this.sfxMap[key] = null;
              delete this.sfxMap[key];
            }
          }
        }

        onEventShow(isEnableMusic, isEnableSfx) {
          this._isAppHide = false;
          isEnableMusic = isEnableMusic && this._isMusicPlaying;

          if (sys.isBrowser) {
            this.resumeAllSounds(isEnableMusic, isEnableSfx);
          } else {
            if (sys.os == sys.OS.IOS) {
              this.resetSFX(isEnableSfx);
              this.resetMusic(isEnableMusic);
            }

            if (sys.os == sys.OS.WINDOWS) {
              this.resetMusic(isEnableMusic);
            }
          }
        }

        resumeAllSounds(isEnableMusic, isEnableSfx) {
          this.webAudioContext = this.getWebAudioContext();
          if (!this.webAudioContext) return;
          log(`resume context music: ${isEnableMusic} , sfx: ${isEnableSfx}, webAudioContext state: ${this.webAudioContext.state}`);

          if (this.webAudioContext.state !== "running") {
            if (this._resume_sound_tween) {
              this._resume_sound_tween.stop();
            }

            const that = this;
            this._resume_sound_tween = tween(this._gameNode).call(() => {
              this.resumeContext(() => {
                this.handleResumeAttempt(() => {
                  log(`resume context completed, webAudioContext state: ${that.webAudioContext.state}`);
                  this.resetSFX(isEnableSfx);
                });
              });
            }).delay(0.05).call(() => {
              that._resume_sound_tween = null;
              that.resumeAllSounds(isEnableMusic, isEnableSfx);
            });

            this._resume_sound_tween.start();
          } else {
            this.resetSFX(isEnableSfx);
          }
        }

        handleResumeAttempt(callback) {
          if (this.webAudioContext && this.webAudioContext.state !== "running" && sys.isBrowser) {
            log("Resume attempt failed");

            if (this._resume_sound_fail) {
              this._resume_sound_fail.stop();
            }

            this._resume_sound_fail = tween(this._gameNode).delay(0.05).call(() => {
              this._resume_sound_fail = null;
              this.resumeContext(() => {
                this.handleResumeAttempt(callback);
              });
            }).start();
          } else {
            log("Resume attempt successful");
            callback && callback();
          }
        }

        resumeContext(callback) {
          this.webAudioContext = this.getWebAudioContext();

          if (!this.webAudioContext) {
            callback && callback();
            return;
          }

          log("webAudioContext state: ", this.webAudioContext.state);
          this.webAudioContext.suspend().then(() => {
            log(`suspend context successful`);
            return this.webAudioContext.resume().then(() => {
              callback && callback();
              return Promise.resolve();
            });
          }).catch(e => {
            log(`suspend context fail with error ${e}`);
            callback && callback();
          });
        }

        onEventHide() {
          this._isAppHide = true;
          this.webAudioContext = this.getWebAudioContext();

          if (this.webAudioContext) {
            this.webAudioContext.suspend();
          } else {
            if (sys.os == sys.OS.IOS) {
              this.currentMusicVolume = this.musicAudioSource.volume;
              this.musicAudioSource.volume = 0;
            }

            if (sys.os == sys.OS.WINDOWS) {
              this.currentMusicVolume = this.musicAudioSource.volume;
              this.musicAudioSource.volume = 0;
              this.pauseMusic();
            }
          }
        }

        playMusic(id, loop = true, volume) {
          if (this.musicMap.hasOwnProperty(id) == false) {
            return null;
          }

          if (!this.musicAudioNode.active) {
            this.musicAudioNode.active = true;
          }

          if (this.currentMusic && this.currentMusic.soundId == id && !this.musicAudioSource.playing) {
            this.musicAudioSource.clip = this.currentMusic.audioFile;

            this._playMusic(id, loop, volume);
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.musicAudioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this._playMusic(id, loop, volume);
            }
          }

          this._isMusicPlaying = true;
          log("%cSOUND playMusic", "color:red", id);
        }

        changeMusic(id, loop = true, volume = 1, mixTime = 1) {
          if (this.musicMap.hasOwnProperty(id) == false) {
            return null;
          }

          if (!this.musicAudioNode.active) {
            this.musicAudioNode.active = true;
          }

          if (!this.currentMusic) {
            this._playMusic(id, loop, volume);

            return;
          }

          if (this.currentMusic.soundId == id) {
            if (!this.musicAudioSource.playing) {
              this._playMusic(id, loop, volume);
            }

            return;
          }

          this._switchMusicAudioSource();

          this._playMusic(id, loop, 0);

          this.fadeMusicTo(mixTime, volume);
          this._tweenChangeMusic && this._tweenChangeMusic.stop();
          this._tweenChangeMusic = tween(this.subMusicSource).to(mixTime, {
            volume: 0
          }).call(() => {
            this._tweenChangeMusic = null;
            this.subMusicSource.stop();
            this.subMusicSource.node.active = false;
          }).start();
          log("%cSOUND change music", "color:red", id);
        }

        _switchMusicAudioSource() {
          const oldAudioSource = this.musicAudioSource;
          this.subMusicSource = this.subMusicSource || this._createMusicAudioSource();
          this.musicAudioSource = this.subMusicSource;
          this.musicAudioNode = this.subMusicSource.node;
          this.subMusicSource = oldAudioSource;
        }

        _playMusic(id, loop, volume) {
          this.currentMusic = this.musicMap[id];
          this.musicAudioSource.clip = this.currentMusic.audioFile;
          this.musicAudioSource.play();
          this.musicAudioSource.loop = loop;
          this.musicAudioSource.volume = volume;
          this._isMusicPlaying = true;
          this.webAudioContext = this.getWebAudioContext();
        }

        _createMusicAudioSource() {
          const node = new Node("MusicAudio");
          node.parent = this._gameNode;
          node.active = false;
          const audioSource = node.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource['isMusicSrc'] = true;
          return audioSource;
        }

        getCurrentMusic() {
          return this.musicAudioSource;
        }

        pauseMusic() {
          this.currentMusic && this.musicAudioSource.pause();
        }

        resumeMusic() {
          this._isMusicPlaying && this.currentMusic && this.musicAudioSource.play();
        }

        stopMusic() {
          this._isMusicPlaying = false;
          this.currentMusic && this.musicAudioSource && this.musicAudioSource.stop();

          if (this._tweenChangeMusic) {
            this._tweenChangeMusic.stop();

            this._tweenChangeMusic = null;

            if (this.subMusicSource) {
              this.subMusicSource.stop();
              this.subMusicSource.node.active = false;
            }
          }
        }

        setMusicVolume(volume) {
          this.musicAudioSource.volume = volume;
        }

        muteMusic() {
          if (this.musicAudioSource) {
            this.musicAudioSource.volume = 0;
          }
        }

        unmuteMusic(volume = 1) {
          if (this.musicAudioSource) {
            this.musicAudioSource.volume = volume;
          }
        }

        playSfx(id, loop = false, volume) {
          if (!this.sfxMap.hasOwnProperty(id) || this._isAppHide) {
            log(`SOUND playSfx, do not have sfx: ${id}`);
            return null;
          }

          let soundObj = this.sfxMap[id];

          if (!soundObj.audioSource) {
            soundObj.audioSource = this._createSfxAudioSource(soundObj);
          }

          this._discardOnePlayingIfNeeded();

          if (soundObj.audioSource.node) {
            soundObj.audioSource.play();
            soundObj.audioSource.loop = loop;

            if (typeof volume === "number") {
              soundObj.audioSource.volume = volume;
            }
          }

          log("%cSOUND playSfx", "color: blue", id);
          return soundObj.audioSource;
        }

        _createSfxAudioSource(soundObj) {
          const sfxNode = new Node("SFX_" + soundObj.soundId);
          const audioSource = sfxNode.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource['soundId'] = soundObj.soundId;
          audioSource["ignoreCheckMaxChannel"] = soundObj.ignoreCheckMaxChannel;
          audioSource.clip = soundObj.audioFile;
          sfxNode.parent = this._gameNode;
          sfxNode.setPosition(new Vec3(0, 0, 0));
          sfxNode.on(AudioSource.EventType.STARTED, this._addPlayingAudioSource, this);
          sfxNode.on(AudioSource.EventType.ENDED, this._removePlayingAudioSource, this);
          return audioSource;
        }

        _addPlayingAudioSource(audioSource) {
          if (this._playingSfxAudioSources.includes(audioSource)) return;

          this._playingSfxAudioSources.push(audioSource);
        }

        _removePlayingAudioSource(audioSource) {
          const index = this._playingSfxAudioSources.indexOf(audioSource);

          if (index >= 0) this._playingSfxAudioSources.splice(index, 1);

          if (audioSource["isOneShot"]) {
            const soundId = audioSource['soundId'];
            const soundObj = this.sfxMap[soundId];
            soundObj && soundObj.audioSourcePool.push(audioSource);
          }
        }

        _discardOnePlayingIfNeeded() {
          if (this._playingSfxAudioSources.length < AudioSource.maxAudioChannel) return;

          for (let i = 0; i < this._playingSfxAudioSources.length; i++) {
            const audioSource = this._playingSfxAudioSources[i];

            if (!audioSource['ignoreCheckMaxChannel']) {
              const index = this._playingSfxAudioSources.indexOf(audioSource);

              log("Sound: discardOnePlaying ", audioSource);

              this._playingSfxAudioSources.splice(index, 1);

              audioSource.stop();
              return;
            }
          }
        }

        playSfxOneShot(id, volume, loop = false) {
          if (!this.sfxMap.hasOwnProperty(id)) {
            warn(`SOUND, playSfxOneShot: do not have sfx: ${id}`);
            return null;
          }

          this._discardOnePlayingIfNeeded();

          const soundObj = this.sfxMap[id];

          const audioSource = this._getSfxOneShotAudioSource(soundObj);

          if (typeof volume === "number") audioSource.volume = volume;
          audioSource.play();
          audioSource.loop = loop;
          log(`SOUND, playSfxOneShot: ${id}`);
          return audioSource;
        }

        _getSfxOneShotAudioSource(soundObj) {
          let audioSource = soundObj.audioSourcePool.pop();

          if (!audioSource) {
            audioSource = this._createSfxAudioSource(soundObj);
            audioSource['isOneShot'] = true;
          }

          return audioSource;
        }

        _testMaxAudioChanel() {
          const tweenSound = tween(this._gameNode);

          for (let id in this.sfxMap) {
            tweenSound.delay(0.05).call(() => {
              this.playSfx(id);
            });
          }

          tweenSound.start();
        }
        /**
         * @stop_sfx by soundId, including playOneShot
         */


        stopSfx(soundId) {
          const soundObj = this.sfxMap[soundId];

          if (!soundObj) {
            warn(`SOUND stopSfx, do not have sfx: ${soundId}`);
            return;
          }

          this._playingSfxAudioSources.forEach(audioSource => {
            if (audioSource['soundId'] === soundId) {
              audioSource.playing && audioSource.stop();

              this._removePlayingAudioSource(audioSource);
            }
          });
        }

        stopSfxOneShot(audioSource) {
          audioSource.playing && audioSource.stop();

          this._removePlayingAudioSource(audioSource);
        }
        /**
        * @stop_all_sfx including playOneShot
        */


        stopAllEffects() {
          this._playingSfxAudioSources.forEach(audioSource => audioSource.stop());

          this._playingSfxAudioSources.length = 0;
        }

        pauseAllEffects() {
          this._playingSfxAudioSources.forEach(audioSource => {
            log("%cSOUND pauseAllEffects", "color: orange", audioSource['soundId']);
            audioSource.pause();
          });
        }

        setEffectVolume(volume) {
          volume = volume < 0 ? 0 : volume;

          for (let key in this.sfxMap) {
            const soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource) {
              soundObj.audioSource.volume = volume;
              soundObj.audioSourcePool.forEach(audioSource => audioSource.volume = volume);
            }
          }

          this._playingSfxAudioSources.forEach(audioSource => audioSource.volume = volume);
        }

        resetMusic(isEnableMusic) {
          let currentMusicTime = 0;
          tween(this._gameNode).call(() => {
            currentMusicTime = this.musicAudioSource.currentTime;
            this.musicAudioSource.stop();
          }).call(() => {
            this.musicAudioSource.play();
          }).call(() => {
            this.musicAudioSource.pause();
          }).call(() => {
            this.musicAudioSource.currentTime = currentMusicTime;
            this.musicAudioSource.volume = this.currentMusicVolume;
            this.musicAudioSource.play();

            if (isEnableMusic && !this._isThumbMode) {
              this.unmuteMusic();
            } else {
              this.muteMusic();
            }
          }).start();
        }

        resetSFX(isEnableSfx) {
          let audioSources = this._gameNode.getComponentsInChildren(AudioSource);

          audioSources = audioSources.filter(it => {
            return it.playing && !it['isMusicSrc'];
          });
          tween(this._gameNode).call(() => {
            audioSources.forEach(it => {
              if (it.playing) {
                it['_cacheCurrentTime'] = it.currentTime;
                it.stop();
              }
            });
          }).call(() => {
            audioSources.forEach(it => {
              if (it['_cacheCurrentTime']) {
                it.play();
              }
            });
          }).call(() => {
            audioSources.forEach(it => {
              if (it['_cacheCurrentTime']) {
                it.pause();
              }
            });
          }).call(() => {
            audioSources.forEach(it => {
              if (it['_cacheCurrentTime']) {
                it.currentTime = it['_cacheCurrentTime'];
                it['_cacheCurrentTime'] = null;
                if (isEnableSfx) it.play();
              }
            });
          }).start();
        }

        getWebAudioContext() {
          if (this.musicAudioSource && sys.isBrowser) {
            const player = this.musicAudioSource._player;

            if (player && player._player) {
              const gainNode = player._player._gainNode;

              if (gainNode) {
                return gainNode.context;
              }
            }
          }

          return null;
        }

        fadeMusicTo(duration, volume) {
          this._musicTween && this._musicTween.stop();
          this._musicTween = tween(this.musicAudioSource).to(duration, {
            volume
          }).call(() => {
            this._musicTween = null;
          }).start();
        }

        fadeSoundTo(soundId, duration, volume) {
          const soundObj = this.sfxMap[soundId];

          if (!soundObj) {
            error("do not have sound", soundId, soundObj);
            return;
          }

          if (!soundObj.audioSource) {
            error("do not have audio source", soundId, soundObj);
            return;
          }

          if (soundObj["tweenSound"]) {
            soundObj["tweenSound"].stop();
            delete this._soundTweens[soundId];
          }

          soundObj["tweenSound"] = tween(soundObj.audioSource).to(duration, {
            volume
          }).call(() => {
            delete soundObj["tweenSound"];
            delete this._soundTweens[soundId];
          }).start();
          this._soundTweens[soundId] = soundObj["tweenSound"];
        }

        stopAllAudio() {
          this._musicTween && this._musicTween.stop();
          this._musicTween = null;
          this.stopMusic();

          for (let soundId in this._soundTweens) {
            const soundObj = this.sfxMap[soundId];

            if (soundObj['tweenSound']) {
              soundObj['tweenSound'].stop();
              delete soundObj['tweenSound'];
              delete this._soundTweens['soundId'];
            }
          }

          this.stopAllEffects();
        }

        onDestroy() {
          if (this._resume_sound_fail) {
            this._resume_sound_fail.stop();
          }

          if (this._resume_sound_tween) {
            this._resume_sound_tween.stop();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetFx1975.ts", ['cc', './gfNetFX.ts', './DataStore1975.ts', './Config1975.ts'], function (exports) {
  var cclegacy, Animation, _decorator, gfNetFX, DataStore1975, Config1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      _decorator = module._decorator;
    }, function (module) {
      gfNetFX = module.gfNetFX;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      Config1975 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0667fl1DI5NeqkttLzzugr3", "NetFx1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const PromotionConfig = {
        SkillID: 99,
        Index: 7
      };
      let NetFx1975 = exports('default', (_dec = ccclass('NetFx1975'), _dec(_class = class NetFx1975 extends gfNetFX {
        constructor(...args) {
          super(...args);
          this._bulletIndex = 0;
        }

        playAnimCatchFish(config = null) {
          this.playAnimationClip(config);
        }

        playAnimationClip(config) {
          let bulletIndex = 0;

          if (config) {
            const {
              data
            } = config;
            const {
              BulletMultiple
            } = data;

            if (data.SkillID == PromotionConfig.SkillID) {
              bulletIndex = PromotionConfig.Index;
            } else {
              bulletIndex = DataStore1975.instance.getBulletIndex(BulletMultiple);
            }

            this._bulletIndex = bulletIndex;
            this.zIndex = Config1975.instance.TOP_Z_INDEX.NETFX;
          } else {
            bulletIndex = this._bulletIndex;
          }

          const animation = this.getComponent(Animation);
          animation.stop();
          animation.play(animation.clips[bulletIndex || 0].name);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkGameEvent1975.ts", ['cc', './gfNetworkGameEvent.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, gfNetworkGameEvent, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82f675OYylCw5dXJKBSs+Lb", "NetworkGameEvent1975", undefined);

      let NetworkGameEvent1975 = {};
      NetworkGameEvent1975 = mergeTwoObject(gfNetworkGameEvent, NetworkGameEvent1975);
      var NetworkGameEvent1975$1 = exports('default', NetworkGameEvent1975);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkKeyMap1975.ts", ['cc', './gfNetworkKeyMap.ts', './gfUtilities.ts'], function (exports) {
  var cclegacy, gfNetworkKeyMap, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkKeyMap = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "29b24MAyFROLoCrFRBWiJ7k", "NetworkKeyMap1975", undefined);

      let NetworkKeyMap1975 = {
        spd: "Speed",
        bsInf: "bossInfo"
      };
      NetworkKeyMap1975 = mergeTwoObject(NetworkKeyMap1975, gfNetworkKeyMap);
      Object.assign(gfNetworkKeyMap, NetworkKeyMap1975);
      var NetworkKeyMap1975$1 = exports('default', NetworkKeyMap1975);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/newFishGroup.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfUtilities.ts', './FishGroupHelper1975.ts', './gfEventEmitter.ts', './EventsCode1975.ts', './gfGameScheduler.ts'], function (exports) {
  var cclegacy, v2, _decorator, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, v2Distance, FishGroupHelper1975, gfEventEmitter, EventsCode1975, gfGameScheduler;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      FishGroupHelper1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8696dPDcaJELqzSxBQv1PCt", "newFishGroup", undefined);

      const lodash = globalThis._;
      const CONFIG = [{
        type: "openPortal",
        portal: 1,
        delay: 5
      }, {
        type: "",
        portal: 3,
        delay: 5
      }, {
        type: "",
        portal: 1,
        delay: 25
      }, {
        type: "",
        portal: 4,
        delay: 26
      }, {
        type: "",
        portal: 3,
        delay: 50
      }, {
        type: "hidePortal",
        portal: 4,
        delay: 50
      }, {
        type: "bezier",
        count: 40,
        portal: 1,
        delay: 1
      }, {
        type: "bezier",
        count: 40,
        portal: 3,
        delay: 1
      }, {
        type: "bezier",
        count: 1,
        portal: 1
      }, {
        type: "bezier",
        count: 1,
        portal: 3
      }, {
        type: "line",
        count: 2
      }, {
        type: "bezier",
        count: 40,
        delay: 26,
        portal: 4
      }, {
        type: "bezier",
        count: 40,
        delay: 26,
        portal: 2
      }, {
        type: "bezier",
        count: 1,
        delay: 25,
        portal: 4
      }, {
        type: "bezier",
        count: 1,
        delay: 25,
        portal: 2
      }, {
        type: "line",
        count: 2,
        delay: 25
      }];
      const CONFIG_BEZIER = {
        BEZIER_FROM_PORTAL_1: "BEZIER_FROM_PORTAL_1",
        BEZIER_FROM_PORTAL_2: "BEZIER_FROM_PORTAL_2",
        BEZIER_FROM_PORTAL_3: "BEZIER_FROM_PORTAL_3",
        BEZIER_FROM_PORTAL_4: "BEZIER_FROM_PORTAL_4"
      };
      const TIME_SPACE = 0.3;
      const {
        ccclass,
        property
      } = _decorator;
      let newFishGroup = exports('newFishGroup', (_dec = ccclass('newFishGroup'), _dec(_class = class newFishGroup {
        static create() {
          const {
            AppSize
          } = gfBaseConfig.instance;
          const offset = 120;
          const CONFIG_POS = {
            PORTAL_1: FishGroupHelper1975.convertFlipCoordinate(v2(0 - offset + 70, 50)),
            PORTAL_2: FishGroupHelper1975.convertFlipCoordinate(v2(AppSize.Width - 50 + offset / 2, +50)),
            PORTAL_3: FishGroupHelper1975.convertFlipCoordinate(v2(AppSize.Width + offset - 50, AppSize.Height - 50)),
            PORTAL_4: FishGroupHelper1975.convertFlipCoordinate(v2(0 - offset / 2 + 50, AppSize.Height - 50)),
            SINGLE_LINE_1: {
              POS_START: FishGroupHelper1975.convertFlipCoordinate(v2(-350, AppSize.Height / 2 + offset)),
              POS_END: FishGroupHelper1975.convertFlipCoordinate(v2(AppSize.Width + 350, AppSize.Height / 2 + offset / 2))
            },
            SINGLE_LINE_2: {
              POS_START: FishGroupHelper1975.convertFlipCoordinate(v2(AppSize.Width + 350, AppSize.Height / 2 - offset / 2)),
              POS_END: FishGroupHelper1975.convertFlipCoordinate(v2(-350, AppSize.Height / 2 - offset / 2))
            }
          };
          const CONFIG_LINE = [{
            delayStart: 1,
            timeSpace: 0,
            posStart: CONFIG_POS.SINGLE_LINE_1.POS_START,
            posEnd: CONFIG_POS.SINGLE_LINE_1.POS_END,
            speed: 80
          }, {
            delayStart: 1,
            timeSpace: 0,
            posStart: CONFIG_POS.SINGLE_LINE_2.POS_START,
            posEnd: CONFIG_POS.SINGLE_LINE_2.POS_END,
            speed: 80
          }];
          const CONFIG_BEZIER_PATH = [{
            delayStart: 1,
            timeSpace: TIME_SPACE,
            bezierCount: 1,
            posStart: [CONFIG_POS.PORTAL_1],
            configPoint: [this.caculateBezierConfig(CONFIG_BEZIER.BEZIER_FROM_PORTAL_1)]
          }, {
            delayStart: 1,
            timeSpace: TIME_SPACE,
            bezierCount: 1,
            posStart: [CONFIG_POS.PORTAL_2],
            configPoint: [this.caculateBezierConfig(CONFIG_BEZIER.BEZIER_FROM_PORTAL_2)]
          }, {
            delayStart: 1,
            timeSpace: TIME_SPACE,
            bezierCount: 1,
            posStart: [CONFIG_POS.PORTAL_3],
            configPoint: [this.caculateBezierConfig(CONFIG_BEZIER.BEZIER_FROM_PORTAL_3)]
          }, {
            delayStart: 1,
            timeSpace: TIME_SPACE,
            bezierCount: 1,
            posStart: [CONFIG_POS.PORTAL_4],
            configPoint: [this.caculateBezierConfig(CONFIG_BEZIER.BEZIER_FROM_PORTAL_4)]
          }];

          for (let i = 0; i < CONFIG.length; i++) {
            const fishCount = CONFIG[i].count;
            const fishKind = CONFIG[i].type;
            const portal = CONFIG[i].portal;
            const delay = CONFIG[i].delay ? CONFIG[i].delay : 0;

            switch (fishKind) {
              case "bezier":
                console.error(fishCount);
                this.createFishBezier(fishCount, CONFIG_BEZIER_PATH[portal - 1], delay);
                break;

              case "line":
                this.createFishLine(fishCount, CONFIG_LINE, delay);
                break;

              case "openPortal":
                this.showPortal(portal, delay);
                break;

              case "hidePortal":
                this.hidePortal(portal, delay);
                break;
            }
          }
        }

        static createFishBezier(fishCount, config, delay) {
          const {
            delayStart,
            timeSpace,
            bezierCount,
            posStart,
            configPoint
          } = config;

          for (let i = 0; i < fishCount; i++) {
            let fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            const curPosStart = i < fishCount / 2 ? posStart[0] : posStart[0];
            const curConfigPoint = lodash.cloneDeep(i < fishCount / 2 ? configPoint[0] : configPoint[0]);
            const dividedDistance = i;
            const delayTime = delay + dividedDistance * timeSpace;
            fishInfo.moveAction = new FishMoveActions(curPosStart);
            fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delayStart + delayTime
            });

            for (let j = 0; j < bezierCount; j++) {
              fishInfo.moveAction.appendAction(FISH_ACTION.gfBezierLengthBy, {
                time: curConfigPoint.TIME[j],
                points: curConfigPoint.POINT[j]
              });
            }

            let timeToUpdateZIndex = 1.5 + FishGroupHelper1975.FISH_START_DELAY + delayStart + delayTime - gfFishGroupData.instance.timeSkipped;

            if (timeToUpdateZIndex >= 0) {
              FishGroupHelper1975.createFishWithDelay(fishInfo, timeToUpdateZIndex);
            } else {
              FishGroupHelper1975.createFishWithDelay(fishInfo);
            }
          }
        }

        static showPortal(id, delay) {
          if (delay > gfFishGroupData.instance.timeSkipped) {
            gfGameScheduler.scheduleOnce(() => {
              gfEventEmitter.instance.emit(EventsCode1975.PORTAL_LAYER.SHOW_PORTAL, id);
            }, delay - gfFishGroupData.instance.timeSkipped);
          } else {
            gfEventEmitter.instance.emit(EventsCode1975.PORTAL_LAYER.SHOW_PORTAL, id);
          }
        }

        static hidePortal(id, delay) {
          if (delay > gfFishGroupData.instance.timeSkipped) {
            gfGameScheduler.scheduleOnce(() => {
              gfEventEmitter.instance.emit(EventsCode1975.PORTAL_LAYER.HIDE_PORTAL, id);
            }, delay - gfFishGroupData.instance.timeSkipped);
          } else {
            gfEventEmitter.instance.emit(EventsCode1975.PORTAL_LAYER.HIDE_PORTAL, id);
          }
        }

        static createFishLine(fishCount, config, delay) {
          for (let i = 0; i < fishCount; i++) {
            const {
              delayStart,
              timeSpace,
              posStart,
              posEnd,
              speed
            } = config[i];
            const fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            const delayTime = delay + i * timeSpace;
            const timeMove = v2Distance(posEnd, posStart) / speed;
            fishInfo.moveAction = new FishMoveActions(posStart);
            fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delayStart + delayTime
            });
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: timeMove,
              x: posEnd.x,
              y: posEnd.y
            });
            FishGroupHelper1975.createFishWithDelay(fishInfo);
          }
        }

        static caculateBezierConfig(configType) {
          let configBezier = {};
          let cloneConfigBezier = {};

          switch (configType) {
            case CONFIG_BEZIER.BEZIER_FROM_PORTAL_1:
              configBezier = {
                TIME: [10],
                POINT: [[v2(1040, 1220), v2(760, -60), v2(1660, 300)]]
              };
              break;

            case CONFIG_BEZIER.BEZIER_FROM_PORTAL_2:
              configBezier = {
                TIME: [10],
                POINT: [[v2(-920, 1220), v2(-760, 60), v2(-1660, 300)]]
              };
              break;

            case CONFIG_BEZIER.BEZIER_FROM_PORTAL_3:
              configBezier = {
                TIME: [10],
                POINT: [[v2(-1060, -1220), v2(-760, 60), v2(-1660, -300)]]
              };
              break;

            case CONFIG_BEZIER.BEZIER_FROM_PORTAL_4:
              configBezier = {
                TIME: [10],
                POINT: [[v2(920, -1220), v2(760, 60), v2(1660, -300)]]
              };
              break;
          }

          const isFlip = gfFishGroupData.isFlipped();

          if (isFlip) {
            cloneConfigBezier = JSON.parse(JSON.stringify(configBezier));
            Object.getOwnPropertyNames(cloneConfigBezier).forEach(value => {
              if (value == "POINT") {
                cloneConfigBezier[value].forEach(configPoint => {
                  configPoint.forEach(point => {
                    point.x *= -1;
                    point.y *= -1;
                  });
                });
              }
            });
          }

          return isFlip ? cloneConfigBezier : configBezier;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolConfig1975.ts", ['cc', './gfNodePoolConfig.ts', './MultiLevelFish1975.ts'], function (exports) {
  var cclegacy, _decorator, Rect, v2, Color, gfNodePoolConfig, MultiLevelFish1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Rect = module.Rect;
      v2 = module.v2;
      Color = module.Color;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      MultiLevelFish1975 = module.MultiLevelFish1975;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "b1a35NFlU1AyYM4ycPd5L8E", "NodePoolConfig1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let NodePoolConfig1975 = exports('default', (_dec = ccclass('NodePoolConfig1975'), _dec(_class = (_class2 = class NodePoolConfig1975 extends gfNodePoolConfig {
        constructor(listAssets) {
          super(listAssets);
          NodePoolConfig1975.instance = this;
        }

        initDefaultConfig() {
          // If you don't want the fish to rotate, set the skipRotate variable to true.
          // If the fish should have an effect when hit by bullets, set the haveWounded variable to true.
          this.FISH_CONFIG = {
            "0": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 499,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 50, 20),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(61, 48)
            },
            "1": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 498,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-10, 0, 50, 30),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(68, 71)
            },
            "2": {
              speed: 90,
              FishMultiple: -1,
              zIndex: 497,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 50, 30),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(83, 53)
            },
            "3": {
              speed: 90,
              FishMultiple: -1,
              zIndex: 496,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 50, 30),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(82, 78)
            },
            "4": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 99,
              AnimationName: ['animation'],
              BoxColliderMul: [new Rect(5, 0, 60, 50), new Rect(5, 0, 80, 70), new Rect(5, 0, 100, 90)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(77, 77),
              customComponent: MultiLevelFish1975,
              TransAnimation: ['default']
            },
            "5": {
              speed: 70,
              FishMultiple: -1,
              zIndex: 495,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 80, 30),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(101, 72)
            },
            "6": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 494,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 50, 70),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(72, 110)
            },
            "7": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 399,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-20, 0, 90, 30),
              targetPoint: v2(-20, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(126, 76)
            },
            "8": {
              speed: 50,
              FishMultiple: -1,
              zIndex: 398,
              AnimationName: ['animation'],
              BoxCollider: new Rect(10, 0, 100, 30),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(139, 76)
            },
            "9": {
              speed: 35,
              FishMultiple: -1,
              zIndex: 397,
              AnimationName: ['animation'],
              BoxCollider: new Rect(10, 0, 90, 50),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(113, 93)
            },
            "10": {
              speed: 70,
              FishMultiple: -1,
              zIndex: 98,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 70, 80)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: false,
              visibleSize: v2(108, 96),
              hitColor: new Color(255, 89, 89, 255),
              TransAnimation: ['default']
            },
            "11": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 396,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(10, 0, 130, 40)],
              targetPoint: v2(20, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(151, 115),
              hitColor: new Color(255, 89, 89, 255)
            },
            "12": {
              speed: 30,
              FishMultiple: -1,
              zIndex: 97,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(-20, 0, 100, 30), new Rect(30, 0, 30, 100)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: false,
              visibleSize: v2(154, 122),
              hitColor: new Color(255, 89, 89, 255),
              TransAnimation: ['default']
            },
            "13": {
              speed: 50,
              FishMultiple: -1,
              zIndex: 100,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(-20, 0, 100, 30), new Rect(30, 0, 70, 100)],
              targetPoint: v2(35, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(171, 120)
            },
            "14": {
              speed: 50,
              FishMultiple: -1,
              zIndex: 394,
              AnimationName: ['animation'],
              BoxColliderMul: [new Rect(10, 0, 120, 60), new Rect(10, 0, 130, 60), new Rect(15, 0, 160, 70)],
              targetPoint: v2(0, 0),
              skipFlipY: true,
              haveWounded: true,
              visibleSize: v2(211, 117),
              customComponent: MultiLevelFish1975,
              TransAnimation: ['default']
            },
            "15": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 299,
              AnimationName: ['animation'],
              BoxCollider: new Rect(10, 0, 100, 70),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(130, 143),
              hitColor: new Color(255, 89, 89, 255)
            },
            "16": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 298,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 220, 20), new Rect(-20, 0, 30, 80)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(265, 104)
            },
            "17": {
              speed: 45,
              FishMultiple: -1,
              zIndex: 297,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 200, 20), new Rect(10, 0, 30, 100)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: false,
              visibleSize: v2(233.18, 128.24),
              hitColor: new Color(255, 89, 89, 255),
              TransAnimation: ['default']
            },
            "18": {
              speed: 30,
              FishMultiple: -1,
              zIndex: 296,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 110, 110),
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(173.9, 272.5),
              hitColor: new Color(255, 89, 89, 255)
            },
            "19": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 295,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 220, 50), new Rect(0, 0, 30, 110)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: false,
              visibleSize: v2(262.55, 171.21),
              hitColor: new Color(255, 89, 89, 255),
              TransAnimation: ['default']
            },
            "20": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 294,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 220, 50), new Rect(0, 0, 30, 80)],
              targetPoint: v2(0, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(243.62, 197.12),
              hitColor: new Color(255, 89, 89, 255)
            },
            "21": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 199,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 260, 40), new Rect(110, 0, 30, 150)],
              targetPoint: v2(50, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(303.5, 188.4),
              hitColor: new Color(255, 89, 89, 255)
            },
            "22": {
              speed: 30,
              FishMultiple: -1,
              zIndex: 198,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(0, 0, 260, 40), new Rect(80, 0, 50, 180)],
              targetPoint: v2(70, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(307.59, 271.69),
              hitColor: new Color(255, 89, 89, 255)
            },
            "23": {
              speed: 30,
              FishMultiple: -1,
              zIndex: 197,
              AnimationName: ['animation'],
              BoxCollider: [new Rect(10, 0, 310, 40), new Rect(20, 0, 50, 150)],
              targetPoint: v2(50, 0),
              haveWounded: true,
              skipFlipY: true,
              visibleSize: v2(366.62, 252.05)
            },
            "45": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 598,
              AnimationName: ['idle'],
              BoxCollider: new Rect(0, 0, 100, 100),
              customComponent: 'LeaderFish1975',
              targetPoint: v2(0, 0),
              skipFlipY: false,
              visibleSize: v2(168.37, 227.4),
              hitColor: new Color(230, 100, 100, 255)
            }
          };
          this.SPRITE_FISH_KIND = [];
          this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(0, 0, 40, 15)
            },
            "1": {
              BoxCollider: new Rect(0, 0, 50, 15)
            },
            "2": {
              BoxCollider: new Rect(8, 0, 35, 20)
            },
            "3": {
              BoxCollider: new Rect(0, 0, 65, 25)
            },
            "4": {
              BoxCollider: new Rect(0, 0, 65, 25)
            },
            "5": {
              BoxCollider: new Rect(0, 0, 65, 30)
            },
            "6": {
              BoxCollider: new Rect(10, 0, 80, 30)
            },
            "gunskill99": {
              BoxCollider: new Rect(10, 0, 40, 30)
            }
          };
          this.TURTLE_SLOT_MACHINE_CONFIG = {
            speed: 30,
            FishMultiple: -1,
            zIndex: 599,
            targetPoint: v2(0, 0),
            visibleSize: v2(250, 300),
            skipFlipY: false,
            hitColor: new Color(255, 115, 115, 255)
          };
        }

      }, _class2.instance = null, _class2)) || _class));
      NodePoolConfig1975.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyJackpot1975.ts", ['cc', './gfNotifyJackpot.ts', './gfActionHelper.ts'], function (exports) {
  var cclegacy, tween, _decorator, GfNotifyJackpot, fadeIn, fadeOut;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      _decorator = module._decorator;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4cc45aY9xhN/Ls7NUdHdu/V", "NotifyJackpot1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let NotifyJackpot1975 = exports('NotifyJackpot1975', (_dec = ccclass('NotifyJackpot1975'), _dec(_class = class NotifyJackpot1975 extends GfNotifyJackpot {
        playAnimation(type) {
          const notifyConfig = this.findConfigByType(type);
          if (!notifyConfig) return;
          const tweenShowRichText = tween(this.contentNode).then(fadeIn(0.1));
          this.mainAnim.setAnimation(0, notifyConfig.animAppear, false);
          this.mainAnim.addAnimation(0, notifyConfig.animIdle, true);
          tween(this.node).delay(0.8).call(() => {
            tweenShowRichText.start();
          }).delay(3).call(() => {
            this.mainAnim.clearTrack(0);
          }).then(fadeOut(0.5)).call(() => {
            this.onStackMessage();
          }).start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyMessage1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfNotifyMessage.ts', './gfLocalize.ts', './Config1975.ts', './gfBaseConfig.ts', './gfDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Size, sp, _decorator, Layout, UITransform, Tween, tween, UIOpacity, Label, Vec3, Sprite, Color, Node, LabelOutline, deepCopy, formatString, GfNotifyMessage, gfLocalize, Config1975, gfBaseConfig, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Size = module.Size;
      sp = module.sp;
      _decorator = module._decorator;
      Layout = module.Layout;
      UITransform = module.UITransform;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Color = module.Color;
      Node = module.Node;
      LabelOutline = module.LabelOutline;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
    }, function (module) {
      GfNotifyMessage = module.GfNotifyMessage;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "16880RJrRhEhZ+BibDj5UgQ", "NotifyMessage1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const TIME_PLAY_WORD = 0.05;
      const BACKGROUND_NOTIFY_SIZE = new Size(900, 60);
      const BACKGROUND_NOTIFY_START_SIZE = new Size(20, 0);
      const TIME_BLINK_UNDERSCORE = 0.2;
      const TIME_IDLE_MESSAGE = 1.5;
      let NotifyMessage1975 = exports('NotifyMessage1975', (_dec = ccclass('NotifyMessage1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class NotifyMessage1975 extends GfNotifyMessage {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "backgroundNotify", _descriptor, this);

          this.objMessage = {};
          this.listNodeContent = [];
          this.layoutContent = null;
          this.uiTransformContent = null;
        }

        start() {
          this.layoutContent = this.contentNode.getComponent(Layout);
          this.uiTransformContent = this.contentNode.getComponent(UITransform);
        }

        runAnimShow() {
          this.contentNode.getComponent(Layout).enabled = true;
          const position = gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()];
          this._isShow = true;
          this.node.active = true;
          this.node.setPosition(position.x, position.y);

          if (gfDataStore.instance.getCurrentSceneName() !== Config1975.instance.SceneName.Lobby) {
            this.backgroundNotify.setAnimation(0, "appear", false);
            this.backgroundNotify.addAnimation(0, "idle", true);
          }

          Tween.stopAllByTarget(this.node);
          tween(this.backgroundNotify).delay(0.25).call(() => {
            this.onStackMessage();
          }).start();
        }

        play(data) {
          let json = this.getStringDataNotify(data).replace(/'/g, '"');
          this.objMessage = Object.values(JSON.parse(json));
          let contentUI = this.contentNode.getComponent(UITransform);
          Tween.stopAllByTarget(contentUI);
          let startSize = contentUI.contentSize.clone();
          let contentSize = startSize.clone();
          contentSize.width = 0;
          contentUI.contentSize = contentSize;
          let contentOpacity = this.contentNode.getComponent(UIOpacity);
          contentOpacity.opacity = 255;
          this.generateNotifyContent(data);
          tween(this.contentNode).delay(0.1).then(this.playAnimShowTextMessage()).call(() => {
            const labelUnderscore = this.listNodeContent[this.listNodeContent.length - 1].getComponent(Label);
            const repeatTime = Math.floor(TIME_IDLE_MESSAGE / TIME_BLINK_UNDERSCORE);
            this.blinkUnderscore(labelUnderscore, repeatTime);
          }).delay(TIME_IDLE_MESSAGE).then(this.playAnimationHideMessage()).delay(0.2).call(() => {
            this.onStackMessage();
          }).start();
        }

        generateNotifyContent(data) {
          for (let index = 0; index < this.objMessage.length; index++) {
            const message = this.objMessage[index];

            if (message.type == 'label') {
              this.decorLabel(message);
            } else {
              this.decorSprite(message);
            }
          }

          this.decorLabel({
            type: 'label',
            str: "_",
            color: "#FFFFFF"
          });
          this.layoutContent.updateLayout();
          this.uiTransformContent.anchorX = 0;
          const newContentPositionX = -(this.layoutContent.node.getComponent(UITransform).contentSize.width / 2);
          this.contentNode.setPosition(newContentPositionX, 0);
          this.hideListContentNode();
        }

        hideListContentNode() {
          this.listNodeContent.forEach(node => {
            const label = node.getComponent(Label);

            if (label) {
              label.overflow = Label.Overflow.NONE;
              label.string = "";
              label.updateRenderData();
            }

            node.active = false;
          });
        }

        onBeforeSceneChange() {
          super.onBeforeSceneChange();
          this.node.setScale(Vec3.ONE);
          Tween.stopAllByTarget(this.contentNode.getComponent(UITransform));
        }

        hide() {
          this._isShow = false;
          Tween.stopAllByTarget(this.backgroundNotify);

          if (gfDataStore.instance.getCurrentSceneName() !== Config1975.instance.SceneName.Lobby) {
            this.backgroundNotify.setAnimation(0, "disappear", false);
          }

          tween(this.backgroundNotify).delay(0.45).call(() => {
            this.node.active = false;
            this.resetData();
          }).start();
        }

        _updateMessage(message, label) {
          label.string += message;
        }

        playAnimShowTextMessage() {
          const tweenShowMessage = tween(this.contentNode);
          tweenShowMessage.call(() => {
            const labelUnderscore = this.listNodeContent[this.listNodeContent.length - 1].getComponent(Label);
            this.blinkUnderscore(labelUnderscore, 3);
          });
          tweenShowMessage.delay(TIME_BLINK_UNDERSCORE * 3);

          for (let index = 0; index < this.objMessage.length; index++) {
            const message = this.objMessage[index];

            if (message.type == 'label') {
              tweenShowMessage.then(this.animationShowLabel(message.str, this.listNodeContent[index].getComponent(Label)));
            } else {
              tweenShowMessage.then(this.animationShowSprite(this.listNodeContent[index].getComponent(Sprite)));
            }
          }

          return tweenShowMessage;
        }

        blinkUnderscore(labelUnderscore, repeatTime) {
          const tweenBlink = tween(labelUnderscore).call(() => {
            labelUnderscore.string = '_';
            labelUnderscore.node.active = true;
          }).delay(TIME_BLINK_UNDERSCORE / 2).call(() => {
            labelUnderscore.string = '';
          }).delay(TIME_BLINK_UNDERSCORE / 2);
          tween(labelUnderscore).repeat(repeatTime, tweenBlink).call(() => {
            labelUnderscore.string = '_';
            labelUnderscore.node.active = true;
          }).start();
        }

        animationShowLabel(message, label) {
          const tweenLabel = tween(this.contentNode);
          tweenLabel.call(() => {
            label.node.active = true;
          });

          for (let index = 0; index < message.length; index++) {
            const word = message[index];
            tweenLabel.call(() => {
              this._updateMessage(word, label);
            });
            tweenLabel.delay(TIME_PLAY_WORD);
          }

          return tweenLabel;
        }

        animationShowSprite(sprite) {
          const tweenSprite = tween(this.contentNode);
          tweenSprite.call(() => {
            sprite.node.active = true;
          });
          tweenSprite.delay(TIME_PLAY_WORD);
          return tweenSprite;
        }

        playAnimationHideMessage() {
          const labelUnderscore = this.listNodeContent[this.listNodeContent.length - 1].getComponent(Label);
          const tweenHideMessage = tween(this.contentNode);

          for (let index = this.objMessage.length - 1; index >= 0; index--) {
            const message = this.objMessage[index];

            if (message.type == 'label') {
              tweenHideMessage.then(this.animationHideLabel(message.str, this.listNodeContent[index].getComponent(Label)));
            } else {
              tweenHideMessage.then(this.animationHideSprite(this.listNodeContent[index].getComponent(Sprite)));
            }
          }

          tweenHideMessage.call(() => {
            labelUnderscore.string = '';
          });
          return tweenHideMessage;
        }

        animationHideLabel(message, label) {
          const tweenLabel = tween(this.contentNode);
          tweenLabel.call(() => {
            label.horizontalAlign = Label.HorizontalAlign.RIGHT;
          });

          while (message.length > 0) {
            const messageSlice = message.slice(0, -1);
            message = messageSlice;
            tweenLabel.call(() => {
              label.string = messageSlice;
            });
            tweenLabel.delay(0.01);
          }

          return tweenLabel;
        }

        animationHideSprite(sprite) {
          const tweenSprite = tween(this.contentNode);
          tweenSprite.call(() => {
            sprite.node.active = false;
          });
          tweenSprite.delay(0.01);
          return tweenSprite;
        }

        decorLabel(element) {
          const color = new Color("#FFFFFF");
          let node = new Node();
          let label = node.addComponent(Label);
          node.parent = this.contentNode;
          label.string = '';

          if (element.color) {
            label.color = color.fromHEX(element.color);
          }

          label.fontSize = element.fontSize ? element.fontSize : this.defaultFontSize;

          if (element.outline) {
            let outline = node.addComponent(LabelOutline);
            outline.color = color.fromHEX(element.outline.color);
            outline.width = element.outline.width;
          }

          if (element.isMoney && this.moneyFont) {
            label.font = this.moneyFont;
          } else if (this.defaultFont) {
            label.font = this.defaultFont;
          }

          label.getComponent(UITransform).anchorX = 0;
          label.isBold = !!element.isBold;
          label.horizontalAlign = Label.HorizontalAlign.LEFT;
          label.enableWrapText = false;
          label.overflow = Label.Overflow.NONE;
          label.string = element.str;
          label.updateRenderData(true);
          label.overflow = Label.Overflow.CLAMP;
          label.string = '';
          this.listNodeContent.push(label.node);
          return label;
        }

        decorSprite(element) {
          if (!this.atlasFishNotify) {
            return;
          }

          let node = new Node();
          let sprite = node.addComponent(Sprite);
          sprite.node.parent = this.contentNode;
          const spriteFrame = this.atlasFishNotify.getSpriteFrame(element.spriteFrame);
          sprite.spriteFrame = spriteFrame;
          node.getComponent(UITransform).width = spriteFrame.rect.width * 0.2;
          node.getComponent(UITransform).height = spriteFrame.rect.height * 0.2;
          this.listNodeContent.push(node);
          return sprite;
        }

        resetData() {
          this.unscheduleAllCallbacks();
          this.listNodeContent = [];
          this.contentNode.removeAllChildren();
        }

        getStringDataNotify(dataInput) {
          if (!gfLocalize || !gfLocalize.instance) {
            return;
          }

          const {
            data,
            message,
            type
          } = dataInput;
          let str = "";

          if (type >= 0) {
            const configTxtNotify = gfLocalize.instance.txtNotify;
            const {
              NOTIFY_CONFIG,
              NOTIFY_TYPE
            } = Config1975.instance;

            if (type === NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL) {
              str = deepCopy(configTxtNotify.special_skill[data[NOTIFY_CONFIG[type].subID]]);
              str = formatString(str, [data[NOTIFY_CONFIG[type].userName], "skill_" + data[NOTIFY_CONFIG[type].subID], data[NOTIFY_CONFIG[type].multiple], data[NOTIFY_CONFIG[type].goldReward]]);
              return str;
            } else {
              return super.getStringDataNotify(dataInput);
            }
          }
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgroundNotify", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PersisNodeController1975.ts", ['cc', './gfPersisNodeController.ts'], function (exports) {
  var cclegacy, _decorator, GfPersisNodeController;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfPersisNodeController = module.GfPersisNodeController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "72602kHRv9AgZ9xbOyUbfei", "PersisNodeController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PersisNodeController1975 = exports('PersisNodeController1975', (_dec = ccclass('PersisNodeController1975'), _dec(_class = class PersisNodeController1975 extends GfPersisNodeController {}) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPlayer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, SpriteFrame, sp, _decorator, Vec3, gfPlayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      sp = module.sp;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "85120t7/WlA6Kx9dwjjSXi5", "Player1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const GUN_ANIM = {
        idle: "idle",
        shoot: "shoot"
      };
      let Player1975 = exports('Player1975', (_dec = ccclass('Player1975'), _dec2 = property(Sprite), _dec3 = property(SpriteFrame), _dec4 = property(sp.Skeleton), _dec5 = property(sp.Skeleton), _dec(_class = (_class2 = class Player1975 extends gfPlayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "backgroundGun", _descriptor, this);

          _initializerDefineProperty(this, "backgroundGunFrame", _descriptor2, this);

          _initializerDefineProperty(this, "gunSkeleton", _descriptor3, this);

          _initializerDefineProperty(this, "gunFxSkeleton", _descriptor4, this);

          this.listGunSpine = {};
          this.listMuzzleSpine = {};
        }

        initObj(data) {
          super.initObj(data);
          this.updateBackgroundGun();
          this.updatePositionMaxGun();
        }

        updateBackgroundGun() {
          let spriteFrame = this.backgroundGunFrame[this.isMe ? 0 : 1];
          this.backgroundGun.spriteFrame = spriteFrame;
        }

        updatePositionMaxGun() {
          if (this.isMe) {
            let position = new Vec3(0, this.effectMaxGun.position.y, this.effectMaxGun.position.z);
            let isPlayerLeft = this.DeskStation == 0 || this.DeskStation == 2;
            position.x = isPlayerLeft ? -511 : 511;
            this.effectMaxGun.setPosition(position);
          }
        }

        _playEffectFire(gunName) {
          if (!gunName) {
            gunName = (this._gunIndex + 1).toString();
          }

          var isNewGun = this.gunSkeleton.skeletonData != this.listGunSpine[gunName].animation;

          if (isNewGun) {
            this.updateGunSkeleton(gunName);
            this.updateGunFxSkeleton(gunName);
          }

          this.gunSkeleton.setAnimation(1, GUN_ANIM.shoot, false);
          this.gunFxSkeleton.setAnimation(0, GUN_ANIM.shoot, false);
        }

        updateGunSkeleton(gunName) {
          this.gunSkeleton.skeletonData = this.listGunSpine[gunName].animation;
          this.gunSkeleton.clearTracks();
          this.gunSkeleton.setMix(GUN_ANIM.idle, GUN_ANIM.shoot, 0.15);
          this.gunSkeleton.setAnimation(0, GUN_ANIM.idle, true);
        }

        updateGunFxSkeleton(gunName) {
          this.gunFxSkeleton.skeletonData = this.listMuzzleSpine[gunName].animation;
          this.gunFxSkeleton.clearTracks();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgroundGun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "backgroundGunFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gunSkeleton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gunFxSkeleton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerLayer1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Player1975.ts', './utils.ts', './gfCustomDataType.ts', './gfPlayerLayer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Player1975, convertAssetArrayToObject, gfGunSkeletonData, gfPlayerLayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Player1975 = module.Player1975;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfGunSkeletonData = module.gfGunSkeletonData;
    }, function (module) {
      gfPlayerLayer = module.gfPlayerLayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bc1182JdH9KrYJfpkcBU7r0", "PlayerLayer1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PlayerLayer1975 = exports('PlayerLayer1975', (_dec = ccclass('PlayerLayer1975'), _dec2 = property({
        type: Player1975,
        override: true
      }), _dec3 = property(gfGunSkeletonData), _dec4 = property(gfGunSkeletonData), _dec(_class = (_class2 = class PlayerLayer1975 extends gfPlayerLayer {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listPlayer", _descriptor, this);

          _initializerDefineProperty(this, "listGunSpine", _descriptor2, this);

          _initializerDefineProperty(this, "listMuzzleSpine", _descriptor3, this);
        }

        configAllPlayer() {
          super.configAllPlayer();

          for (let i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].listGunSpine = convertAssetArrayToObject(this.listGunSpine);
            this.listPlayer[i].listMuzzleSpine = convertAssetArrayToObject(this.listMuzzleSpine);
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listGunSpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listMuzzleSpine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolManager1975.ts", ['cc', './gfEventEmitter.ts', './gfPoolManager.ts', './gfReferenceManager.ts', './EventsCode1975.ts'], function (exports) {
  var cclegacy, _decorator, v3, gfEventEmitter, gfPoolManager, gfReferenceManager, EventsCode1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c525fTxO9JOJKmkqEqG0lG/", "PoolManager1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let POOL_TYPE = exports('POOL_TYPE', /*#__PURE__*/function (POOL_TYPE) {
        POOL_TYPE[POOL_TYPE["SpineFish"] = 0] = "SpineFish";
        POOL_TYPE[POOL_TYPE["SpriteFish"] = 1] = "SpriteFish";
        POOL_TYPE[POOL_TYPE["Bullet"] = 2] = "Bullet";
        POOL_TYPE[POOL_TYPE["NetFX"] = 3] = "NetFX";
        POOL_TYPE[POOL_TYPE["Coin"] = 4] = "Coin";
        POOL_TYPE[POOL_TYPE["LuckyEffect"] = 5] = "LuckyEffect";
        POOL_TYPE[POOL_TYPE["LabelCoin"] = 6] = "LabelCoin";
        POOL_TYPE[POOL_TYPE["BigExplosion"] = 7] = "BigExplosion";
        POOL_TYPE[POOL_TYPE["SmallExplosion"] = 8] = "SmallExplosion";
        POOL_TYPE[POOL_TYPE["DragonBall"] = 9] = "DragonBall";
        POOL_TYPE[POOL_TYPE["DrillExplosion"] = 10] = "DrillExplosion";
        POOL_TYPE[POOL_TYPE["DrillBigExplosion"] = 11] = "DrillBigExplosion";
        POOL_TYPE[POOL_TYPE["DrillImpact"] = 12] = "DrillImpact";
        return POOL_TYPE;
      }({}));
      let PoolManager1975 = exports('default', (_dec = ccclass('PoolManager1975'), _dec(_class = (_class2 = class PoolManager1975 extends gfPoolManager {
        constructor(listPrefab) {
          super(listPrefab);
          PoolManager1975.instance = this;
        }

        initPools() {
          this.pools = []; //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish1975", "SpineFish1975", 10);
          this.initPool(POOL_TYPE.SpriteFish, "SpriteFish1975", "gfSpriteFish", 10);
          this.initPool(POOL_TYPE.Coin, "Coin1975", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet1975", "gfBullet", 5);
          this.initPool(POOL_TYPE.NetFX, "NetFx1975", "NetFx1975", 5);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin1975", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.BigExplosion, "ExplosionBig1975", "gfExplosionSpine", 1);
          this.initPool(POOL_TYPE.SmallExplosion, "ExplosionFX1975", "gfExplosionSpine", 5);
          this.initPool(POOL_TYPE.DrillExplosion, "DrillExplosionFX1975", "gfExplosionSpine", 5);
          this.initPool(POOL_TYPE.DrillBigExplosion, "DrillExplosionBig1975", "gfExplosionSpine", 1);
          this.initPool(POOL_TYPE.DrillImpact, "DrillImpact1975", "gfExplosionSpine", 1);
        }

        createBigExplosion({
          position
        }) {
          const explosion = this.getObjectMainComponentByType(POOL_TYPE.BigExplosion);
          explosion.node.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.node.position = position;
          gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_FISH_DIE_EXPLOSION);
          return explosion;
        }

        createDrillFxExplosion({
          position
        }) {
          const explosion = this.getObjectMainComponentByType(POOL_TYPE.DrillExplosion);
          explosion.node.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.node.setPosition(position);
          return explosion;
        }

        createDrillBigExplosion({
          position
        } = {
          position: v3(.0, .0, .0)
        }) {
          const explosion = this.getObjectMainComponentByType(POOL_TYPE.DrillBigExplosion);
          explosion.node.parent = gfReferenceManager.instance.getEffectLayer();

          if (position) {
            explosion.node.position = position;
          }

          return explosion;
        }

        createDrillImpact({
          position
        } = {
          position: v3(.0, .0, .0)
        }) {
          const explosion = this.getObjectMainComponentByType(POOL_TYPE.DrillImpact);
          explosion.node.parent = gfReferenceManager.instance.getEffectLayer();

          if (position) {
            explosion.node.position = position;
          }

          return explosion.node;
        }

      }, _class2.instance = null, _class2)) || _class));
      PoolManager1975.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupInfo1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfEventEmitter.ts', './gfPopupInfo.ts', './gfBaseEvents.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, ToggleContainer, ScrollView, Node, _decorator, gfBaseConfig, gfEventEmitter, GfPopupInfo, gfBaseEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      ToggleContainer = module.ToggleContainer;
      ScrollView = module.ScrollView;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7f227591WpABa/Bom6uKAOG", "PopupInfo1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupInfo1975 = exports('PopupInfo1975', (_dec = ccclass('PopupInfo1975'), _dec2 = property(ToggleContainer), _dec3 = property([ScrollView]), _dec4 = property([Node]), _dec(_class = (_class2 = class PopupInfo1975 extends GfPopupInfo {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "toggleContainer", _descriptor, this);

          _initializerDefineProperty(this, "lstScrollView", _descriptor2, this);

          _initializerDefineProperty(this, "lstTitle", _descriptor3, this);

          this._choiceIndex = void 0;
        }

        show() {
          this._choiceIndex = 0;
          super.show();
          this.initialized = true;
          this.resetInfo();
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
        }

        resetInfo() {
          this.toggleContainer.toggleItems[0].isChecked = true;
          this.onResetScrollView();
        }

        updateTabs() {
          this.lstTitle.forEach(node => {
            node.active = false;
          });
          this.lstTitle[this._choiceIndex].active = true;
        }

        onResetScrollView() {
          this.lstScrollView.forEach(scrollView => {
            scrollView.scrollToTop(0);
          });
        }

        onClick(e, index) {
          if (index == this._choiceIndex) return;

          if (this.initialized) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }

          this.onResetScrollView();
          this._choiceIndex = parseInt(index);
          this.updateTabs();
        }

        hide(animStyle) {
          super.hide(animStyle);
          this.initialized = false;
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggleContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lstScrollView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lstTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupJackpotHistory1975.ts", ['cc', './gfUtilities.ts', './EventsCode1975.ts', './gfBaseConfig.ts', './DataStore1975.ts', './gfPopupJackpotHistory.ts'], function (exports) {
  var cclegacy, _decorator, registerEvent, EventsCode1975, gfBaseConfig, DataStore1975, GfPopupJackpotHistory;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      GfPopupJackpotHistory = module.GfPopupJackpotHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "38930rlWVVNbpi5rY7DRCQp", "PopupJackpotHistory1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupJackpotHistory1975 = exports('PopupJackpotHistory1975', (_dec = ccclass('PopupJackpotHistory1975'), _dec(_class = class PopupJackpotHistory1975 extends GfPopupJackpotHistory {
        initEvent() {
          registerEvent(EventsCode1975.POPUP.HISTORY_BLOCK_TOUCH, this.onBlockTouch, this);
        }

        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
        }

        show() {
          super.show();
          this.overlay.active = false;
          this.initialized = true;
        }

        hide(animStyle) {
          super.hide(animStyle);
          this.history.closePanel();
          this.initialized = false;
        }

        getData() {
          return {
            gameId: gfBaseConfig.instance.GameId,
            jpList: "GRAND",
            jpPrefix: "ktf_",
            url: "jackpothistory/fish",
            betIDs: DataStore1975.instance.listJackpotBet
          };
        }

        onBlockTouch() {
          this.overlay.active = true;
          this.scheduleOnce(() => {
            this.overlay.active = false;
          }, .1);
        }

        initLanguage() {}

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupPromotion1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopupPromotion.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, gfPopupPromotion, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      gfPopupPromotion = module.gfPopupPromotion;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d657ec4ReFPxLXB5bMBGq6Y", "PopupPromotion1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupPromotion1975 = exports('PopupPromotion1975', (_dec = ccclass('PopupPromotion1975'), _dec2 = property(Label), _dec(_class = (_class2 = class PopupPromotion1975 extends gfPopupPromotion {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtBulletMultiple", _descriptor, this);
        }

        show(data) {
          const {
            BulletMultiple
          } = data;
          super.show(data);
          this.txtBulletMultiple.string = formatMoney(BulletMultiple);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtBulletMultiple", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupPrompt1975.ts", ['cc', './gfBaseConfig.ts', './gfPopupPrompt.ts'], function (exports) {
  var cclegacy, _decorator, gfBaseConfig, GfPopupPrompt;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupPrompt = module.GfPopupPrompt;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1da1bV0UAFIYqeTYMxzWOqi", "PopupPrompt1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupPrompt1975 = exports('PopupPrompt1975', (_dec = ccclass('PopupPrompt1975'), _dec(_class = class PopupPrompt1975 extends GfPopupPrompt {
        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupSetting1975.ts", ['cc', './gfBaseConfig.ts', './gfPopupSetting.ts'], function (exports) {
  var cclegacy, _decorator, gfBaseConfig, GfPopupSetting;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupSetting = module.GfPopupSetting;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4fbf6csS1dIqarFrixIMDRd", "PopupSetting1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupSetting1975 = exports('PopupSetting1975', (_dec = ccclass('PopupSetting1975'), _dec(_class = class PopupSetting1975 extends GfPopupSetting {
        setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.PULSE;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupTutorial1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPopuptutorial.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, GfPopuptutorial;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      GfPopuptutorial = module.GfPopuptutorial;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7d01bmVvupMFqPmS4BQ7ao8", "PopupTutorial1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupTutorial1975 = exports('PopupTutorial1975', (_dec = ccclass('PopupTutorial1975'), _dec2 = property({
        type: Node,
        visible: false,
        override: true
      }), _dec3 = property({
        type: Node,
        visible: false,
        override: true
      }), _dec(_class = (_class2 = class PopupTutorial1975 extends GfPopuptutorial {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "popupTitle", _descriptor, this);

          _initializerDefineProperty(this, "popupBackground", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupBackground", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PortalController1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './DataStore1975.ts', './gfActionHelper.ts', './Config1975.ts', './EventsCode1975.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, sp, _decorator, Component, v3, tween, gfBaseEvents, registerEvent, SetZIndex, DataStore1975, fadeIn, fadeOut, Config1975, EventsCode1975, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "67248n0f5xBi7Veqi5sE0sI", "PortalController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const ANIMATION_NAME = {
        APPEAR: "appear",
        DISAPPEAR: "disappear",
        IDLE: "idle"
      };
      let PortalController1975 = exports('PortalController1975', (_dec = ccclass('PortalController1975'), _dec2 = property(Node), _dec3 = property(sp.Skeleton), _dec4 = property(sp.Skeleton), _dec(_class = (_class2 = class PortalController1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listPortal", _descriptor, this);

          this._currentSceneKind = 0;
          this._listSceneHavePortal = [0, 1, 2];

          _initializerDefineProperty(this, "aboveEffect", _descriptor2, this);

          _initializerDefineProperty(this, "belowEffect", _descriptor3, this);
        }

        onLoad() {
          this.initEvent();
        }

        initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(EventsCode1975.PORTAL_LAYER.SHOW_PORTAL, this.showPortal, this);
          registerEvent(EventsCode1975.PORTAL_LAYER.HIDE_PORTAL, this.hidePortal, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        }

        onInitBackground(data) {
          let {
            SceneKind
          } = data;

          if (!this._listSceneHavePortal.includes(SceneKind)) {
            setOpacity(this.node, 0);
          } else {
            setOpacity(this.node, 255);
          }

          this.listPortal.forEach(portal => {
            setOpacity(portal, 0);
          });
          const flip = DataStore1975.instance.getSelfDeskStation() > 1;

          if (flip) {
            this.node.setScale(v3(-1, -1, 1));
          } else {
            this.node.setScale(v3(1, 1, 1));
          }

          SetZIndex(this.node, Config1975.instance.BOTTOM_Z_INDEX.PORTAL);
          this.hidePortal(0);
        }

        onChangeRound(data) {
          let {
            SceneKind
          } = data;

          if (SceneKind === 2) {
            tween(this.node).delay(1.).then(fadeIn(1.5)).start();
            this.listPortal.forEach(portal => {
              setOpacity(portal, 255);
            });
          } else {
            tween(this.node).then(fadeOut(1.5)).start();
            this.listPortal.forEach(portal => {
              setOpacity(portal, 0);
            });
          }

          this._currentSceneKind = SceneKind;
        }

        showPortal(_id) {
          this.aboveEffect.node.active = true;
          this.belowEffect.node.active = true;
          this.aboveEffect.setAnimation(0, "above_" + ANIMATION_NAME.APPEAR, false);
          this.belowEffect.setAnimation(0, "below_" + ANIMATION_NAME.APPEAR, false);
          this.aboveEffect.addAnimation(0, "above_" + ANIMATION_NAME.IDLE, true);
          this.belowEffect.addAnimation(0, "below_" + ANIMATION_NAME.IDLE, true);
        }

        hidePortal(_id) {
          this.aboveEffect.setAnimation(0, "above_" + ANIMATION_NAME.DISAPPEAR, false);
          this.belowEffect.setAnimation(0, "below_" + ANIMATION_NAME.DISAPPEAR, false);
        }

        resetOnExit() {
          this._currentSceneKind = -1;
          this.hidePortal(0);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPortal", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "aboveEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "belowEffect", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Preload.ts", ['cc', './utils.ts'], function (exports) {
  var cclegacy, Component, resources, JsonAsset, sys, director, _decorator, setDeviceOrientation;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      sys = module.sys;
      director = module.director;
      _decorator = module._decorator;
    }, function (module) {
      setDeviceOrientation = module.setDeviceOrientation;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "02f2arnQQxBu6l59PA/5a/7", "Preload", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Preload = exports('Preload', (_dec = ccclass('Preload'), _dec(_class = class Preload extends Component {
        onLoad() {
          resources.load("jsons/LobbyConfig", JsonAsset, (err, json) => {
            if (sys.isNative) {
              setDeviceOrientation(json.json.isPortrait);
            }

            director.loadScene("Login");
          });
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PromotionGun1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfPromotionGun.ts', './DataStore1975.ts', './gfEventEmitter.ts', './EventsCode1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCString, _decorator, gfPromotionGun, DataStore1975, gfEventEmitter, EventsCode1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCString = module.CCString;
      _decorator = module._decorator;
    }, function (module) {
      gfPromotionGun = module.gfPromotionGun;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "742c0RaHr5K24mxyBWzkJgs", "PromotionGun1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PromotionGun1975 = exports('PromotionGun1975', (_dec = ccclass('PromotionGun1975'), _dec2 = property(CCString), _dec(_class = (_class2 = class PromotionGun1975 extends gfPromotionGun {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "idle", _descriptor, this);
        }

        show(data) {
          super.show(data);
          this.resetChildNodeParent();
        }

        onResumeShowGunSkill() {
          super.onResumeShowGunSkill();

          this._mainSpine.setCompleteListener(() => {
            this._mainSpine.setCompleteListener(() => {});

            if (this.idle) {
              this._mainSpine.setAnimation(0, this.idle, true);
            }

            if (this._isMe) {
              DataStore1975.instance.setSelfInfo({
                isLockGun: false
              });
              gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.INTERACTABLE_HUD, true);
              gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.RESUME_OLD_TARGET);
            }
          });
        }

        onShowGunSkill() {
          super.onShowGunSkill();

          this._mainSpine.setCompleteListener(() => {
            this._mainSpine.setCompleteListener(() => {});

            if (this._isMe) {
              if (this.idle) {
                this._mainSpine.setAnimation(0, this.idle, true);
              }

              DataStore1975.instance.setSelfInfo({
                isLockGun: false
              });
              gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.INTERACTABLE_HUD, true);
              gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.RESUME_OLD_TARGET);
            }
          });
        }

        gunFire(data) {
          this._mainSpine.setCompleteListener(() => {});

          this._mainSpine.setAnimation(1, this.shoot, false);

          data.Angle = this._player.checkAngleByLockFish(data);
          this._nodeParent.angle = data.Angle;
          if (DataStore1975.instance.isReachMaxNumBullet()) return;

          if (this._isMe) {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.GUN_FIRE);

            if (this._player.effectIsMe.active) {
              this._player.effectIsMe.active = false;
            }

            if (data.LockedFishID > -1) {
              this._player._playEffectLockFish(data);
            }
          }

          gfEventEmitter.instance.emit(EventsCode1975.GAME_LAYER.CREATE_BULLET, data);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "idle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "Idle";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/recordToggle.ts", ['cc', './eEventEmitter.ts', './eToggle.ts', './StateEvents.ts'], function (exports) {
  var cclegacy, _decorator, eEventEmitter, eToggle, StateEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eToggle = module.eToggle;
    }, function (module) {
      StateEvents = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "a7f36DhWeRJw7lhYbzndZsQ", "recordToggle", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let RecordToggle = exports('default', ccclass(_class = class RecordToggle extends eToggle {
        onLoad() {
          this.callback = this.toggleRecord.bind(this);
          this.toggle.isChecked = false;
        }

        toggleRecord(isChecked) {
          if (isChecked) {
            eEventEmitter.getInstance().emit(StateEvents.START_RECORD);
          } else {
            eEventEmitter.getInstance().emit(StateEvents.STOP_RECORD);
          }
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RetryInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "98186Px5T5HU4RwAWbZMqDi", "RetryInfo", undefined);

      class RetryInfo {
        constructor(reConnectInterval, reconnectCount, downloadFailedAssetsInterval, downloadFailedAssetsCount, reconnectionDelay, downloadFailedAssetsDelay, maxOfCount) {
          this._reConnectInterval = 0;
          this._reconnectCount = 0;
          this._downloadFailedAssetsInterval = 0;
          this._downloadFailedAssetsCount = 0;
          this._reconnectionDelay = 0;
          this._downloadFailedAssetsDelay = 0;
          this._maxOfCount = 0;
          this._reConnectInterval = reConnectInterval;
          this._reconnectCount = reconnectCount;
          this._downloadFailedAssetsInterval = downloadFailedAssetsInterval;
          this._downloadFailedAssetsCount = downloadFailedAssetsCount;
          this._reconnectionDelay = reconnectionDelay;
          this._downloadFailedAssetsDelay = downloadFailedAssetsDelay;
          this._maxOfCount = maxOfCount;
        }

        get reConnectInterval() {
          return this._reConnectInterval;
        }

        set reConnectInterval(value) {
          this._reConnectInterval = value;
        }

        get reconnectCount() {
          return this._reconnectCount;
        }

        set reconnectCount(value) {
          this._reconnectCount = value;
        }

        get downloadFailedAssetsInterval() {
          return this._downloadFailedAssetsInterval;
        }

        set downloadFailedAssetsInterval(value) {
          this._downloadFailedAssetsInterval = value;
        }

        get downloadFailedAssetsCount() {
          return this._downloadFailedAssetsCount;
        }

        set downloadFailedAssetsCount(value) {
          this._downloadFailedAssetsCount = value;
        }

        get reconnectionDelay() {
          return this._reconnectionDelay;
        }

        set reconnectionDelay(value) {
          this._reconnectionDelay = value;
        }

        get downloadFailedAssetsDelay() {
          return this._downloadFailedAssetsDelay;
        }

        set downloadFailedAssetsDelay(value) {
          this._downloadFailedAssetsDelay = value;
        }

        get maxOfCount() {
          return this._maxOfCount;
        }

        set maxOfCount(value) {
          this._maxOfCount = value;
        }

      }

      exports('default', RetryInfo);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScreenOrientationControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CanvasScaleByOrientation.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, game, sys, settings, Settings, view, ResolutionPolicy, Size, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      game = module.game;
      sys = module.sys;
      settings = module.settings;
      Settings = module.Settings;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Size = module.Size;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "83e61WQNGlGjYAM2fCdDGW1", "ScreenOrientationControl", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ScreenOrientationControl = exports('ScreenOrientationControl', (_dec = ccclass('ScreenOrientationControl'), _dec(_class = (_class2 = class ScreenOrientationControl extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "portraitDesignResolution", _descriptor, this);

          _initializerDefineProperty(this, "landscapeDesignResolution", _descriptor2, this);

          this._canvasScaleComp = void 0;
        }

        start() {
          this._canvasScaleComp = this.getComponent(CanvasScaleByOrientation);

          if (this._canvasScaleComp && game.config && sys.isMobile) {
            const designResolution = settings.querySettings(Settings.Category.SCREEN, 'designResolution');
            let orientation = settings.querySettings(Settings.Category.SCREEN, 'orientation');

            if (!orientation) {
              if (designResolution) {
                orientation = designResolution.height > designResolution.width ? 'portrait' : 'landscape';
              } else {
                orientation = 'auto';
              }
            }

            if (orientation == "portrait") {
              this._canvasScaleComp.isPortrait = true;
              this.setPortraitDS();
            } else if (orientation == "landscape") {
              this._canvasScaleComp.isPortrait = false;
              this.setLandscapeDS();
            }

            this._canvasScaleComp.scaleCanvasByOrientation();
          }
        }

        setPortraitDS() {
          view.setDesignResolutionSize(this.portraitDesignResolution.width, this.portraitDesignResolution.height, ResolutionPolicy.FIXED_WIDTH);
        }

        setLandscapeDS() {
          view.setDesignResolutionSize(this.landscapeDesignResolution.width, this.landscapeDesignResolution.height, ResolutionPolicy.FIXED_HEIGHT);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "portraitDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return new Size(720, 1280);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "landscapeDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return new Size(1560, 720);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/screenshot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './monitorDataStore.ts', './eUPNG.ts', './webDataStore.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Camera, Canvas, _decorator, Component, log, sys, native, UITransform, RenderTexture, error, game, MonitorDataStore, UNPNG, WebDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Camera = module.Camera;
      Canvas = module.Canvas;
      _decorator = module._decorator;
      Component = module.Component;
      log = module.log;
      sys = module.sys;
      native = module.native;
      UITransform = module.UITransform;
      RenderTexture = module.RenderTexture;
      error = module.error;
      game = module.game;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }, function (module) {
      UNPNG = module.default;
    }, function (module) {
      WebDataStore = module.WebDataStore;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "24226WE5NNKao8lACdnEeOz", "screenshot", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ScreenShot = exports('ScreenShot', (_dec = property(Camera), _dec2 = property(Camera), _dec3 = property(Canvas), ccclass(_class = (_class2 = class ScreenShot extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "captureCamera", _descriptor, this);

          _initializerDefineProperty(this, "uiCamera", _descriptor2, this);

          _initializerDefineProperty(this, "canvas", _descriptor3, this);
        }

        get recordData() {
          return MonitorDataStore.instance.recordData;
        }

        takeScreenshot(textureName) {
          if (!this.recordData.sessionId) {
            log(`[StateMonitor] Need to be in a session to snapshot`);
          }

          if (!this.recordData.sessionId) this.recordData.sessionId = "99999";
          if (textureName) textureName = Date.now().toString();

          if (sys.isNative) {
            this.nativeScreenshot(textureName);
          } else {
            this.browserScreenshot(textureName);
          }
        }

        getScreenshot(sessionId, imageName) {
          let base64Image = '';

          if (sys.isNative) {
            const filePath = `${native.fileUtils.getWritablePath()}gemi/${sessionId}/${imageName}.jpg`;

            if (native.fileUtils.isFileExist(filePath)) {
              let fileData = native.fileUtils.getDataFromFile(filePath);
              base64Image = "data:image/jpeg;base64," + bytesToBase64(fileData);
            }
          } else {
            WebDataStore.instance.getImage(imageName, data => {
              const {
                raw
              } = data;
              base64Image = raw;
            });
          }

          return base64Image;
        }

        nativeScreenshot(imageName) {
          this.canvas.cameraComponent = this.captureCamera;
          let canvasSize = this.canvas.getComponent(UITransform);
          let texture = new RenderTexture();
          let imageSize = this.getScreenshotSize({
            width: canvasSize.width,
            height: canvasSize.height
          });
          imageSize.width = canvasSize.width;
          imageSize.height = canvasSize.height;
          texture.reset({
            width: imageSize.width,
            height: imageSize.height
          });
          this.captureCamera.node.active = true;
          this.captureCamera.targetTexture = texture;
          this.captureCamera.scheduleOnce(() => {
            let width = texture.width;
            let height = texture.height; //@ts-ignore

            let data = texture.readPixels();
            let flippedImage = this.flipYImage(data, width, height);
            let pngBytes = UNPNG['encode']([flippedImage], width, height, 0);
            let dataURL = "data:image/png;base64," + bytesToBase64(new Uint8Array(pngBytes));
            let folderPath = `${native.fileUtils.getWritablePath()}gemi/${this.recordData.sessionId}`;
            let filePath = `${native.fileUtils.getWritablePath()}gemi/${this.recordData.sessionId}/${imageName}.png`;
            this.ensureFolder(folderPath); //@ts-ignore

            let success = native.fileUtils.writeStringToFile(dataURL, filePath);

            if (success) {
              log(`[StateMonitor] Saved snapshot id ${imageName} at path ${filePath}`);
            } else {
              error(`[StateMonitor] Failed to save snapshot ${imageName}, god know it`);
            }

            this.captureCamera.targetTexture = null;
            this.captureCamera.node.active = false;
            this.canvas.cameraComponent = this.uiCamera;
          });
        }

        browserScreenshot(imageName) {
          this.canvas.cameraComponent = this.captureCamera;
          let canvasSize = this.canvas.getComponent(UITransform);
          let texture = new RenderTexture();
          let gl = game['_renderContext'];
          let imageSize = this.getScreenshotSize({
            width: canvasSize.width,
            height: canvasSize.height
          }); // texture.initWithSize(imageSize.width, imageSize.height, gl.STENCIL_INDEX8);

          texture.initDefault();
          texture.resize(imageSize.width, imageSize.height);
          this.captureCamera.node.active = true;
          this.captureCamera.targetTexture = texture; // this.camera.render(canvas);

          this.captureCamera.scheduleOnce(() => {
            let width = texture.width;
            let height = texture.height; //@ts-ignore

            let data = texture.readPixels();
            let flippedImage = this.flipYImage(data, width, height);
            let pngBytes = UNPNG['encode']([flippedImage], width, height, 255); // compress for optimize cache

            let dataURL = "data:image/png;base64," + bytesToBase64(new Uint8Array(pngBytes));
            WebDataStore.instance.addImage({
              raw: dataURL,
              id: imageName
            });
            this.captureCamera.targetTexture = null;
            this.captureCamera.node.active = false;
            this.canvas.cameraComponent = this.uiCamera;
          });
        }

        getScreenshotSize(canvasSize) {
          var screenshotSize = {
            width: 0,
            height: 0
          };
          var ratioWidth = 16 / canvasSize.width;
          var ratioHeight = 9 / canvasSize.height;

          if (ratioHeight > ratioWidth) {
            screenshotSize.width = canvasSize.width;
            screenshotSize.height = canvasSize.width * (9 / 16);
          } else {
            screenshotSize.height = canvasSize.height;
            screenshotSize.width = canvasSize.height * (16 / 9);
          }

          return screenshotSize;
        }

        flipYImage(data, width, height) {
          // create the data array
          let picData = new Uint8Array(width * height * 4);
          let rowBytes = width * 4;

          for (let row = 0; row < height; row++) {
            let srow = height - 1 - row;
            let start = srow * width * 4;
            let reStart = row * width * 4; // save the piexls data

            for (let i = 0; i < rowBytes; i++) {
              picData[reStart + i] = data[start + i];
            }
          }

          return picData;
        }

        ensureFolder(path) {
          if (!native.fileUtils.isDirectoryExist(path)) {
            native.fileUtils.createDirectory(path);
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "captureCamera", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "uiCamera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      const base64abc = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];

      const bytesToBase64 = function (bytes) {
        let result = '',
            i,
            l = bytes.length;

        for (i = 2; i < l; i += 3) {
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
          result += base64abc[(bytes[i - 1] & 0x0F) << 2 | bytes[i] >> 6];
          result += base64abc[bytes[i] & 0x3F];
        }

        if (i === l + 1) {
          // 1 octet yet to write
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4];
          result += "==";
        }

        if (i === l) {
          // 2 octets yet to write
          result += base64abc[bytes[i - 2] >> 2];
          result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
          result += base64abc[(bytes[i - 1] & 0x0F) << 2];
          result += "=";
        }

        return result;
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollViewOptimise.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, UITransform, rect, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      rect = module.rect;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6547cfR5o5FmrQN3VeIh2x3", "ScrollViewOptimise", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ScrollViewOptimise = exports('ScrollViewOptimise', (_dec = ccclass('ScrollViewOptimise'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = class ScrollViewOptimise extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "view", _descriptor, this);

          _initializerDefineProperty(this, "content", _descriptor2, this);
        }

        update(dt) {
          const viewUI = this.view.getComponent(UITransform);
          const contentPos = this.content.getPosition();
          var viewRect = rect(-contentPos.x - viewUI.width * viewUI.anchorX, -contentPos.y - viewUI.height * viewUI.anchorY, viewUI.width, viewUI.height);

          for (let i = 0; i < this.content.children.length; i++) {
            const node = this.content.children[i];

            if (viewRect.intersects(node.getComponent(UITransform).getBoundingBox())) {
              setOpacity(node, 255);
            } else {
              setOpacity(node, 0);
            }
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/serviceRest.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e18ccAUCBxLoaFRV2OtkUct", "serviceRest", undefined); // Rest API to connect to server


      class ServiceRest {
        constructor() {
          this.request = void 0;
          this.request = new XMLHttpRequest();
        }

        encodeQueryData(data) {
          return Object.keys(data).map(function (key) {
            return [key, data[key]].map(encodeURIComponent).join("=");
          }).join("&");
        }

        getRawDataWeb({
          fullURL = '',
          callback = data => {},
          callbackErr = e => {}
        }) {
          const request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  try {
                    const data = JSON.parse(request.responseText);
                    callback(data);
                  } catch (error) {
                    callbackErr(null);
                  }
                } else {
                  callbackErr(null);
                }
              }
            } else if (request.readyState === 0) {
              callbackErr(null);
            }

            if (request.status !== 200) {
              callbackErr(null);
            }
          };

          request.ontimeout = function (e) {
            callbackErr(e);
          };

          request.onerror = e => {
            callbackErr(e);
          };

          request.send();
        }

        get({
          url = '',
          params = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const querystring = '?' + this.encodeQueryData(params);
          const fullURL = apiUrl + url + querystring;
          const request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  try {
                    let content = JSON.parse(request.responseText);
                    callback(content);
                  } catch (e) {
                    callbackErr();
                  }
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = e => {
            callbackErr();
          };

          request.send();
        }

        getWithHeader({
          url = '',
          params = {},
          headers = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const querystring = '?' + this.encodeQueryData(params);
          const fullURL = apiUrl + url + querystring;
          const request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          Object.keys(headers).forEach(key => {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  try {
                    const data = JSON.parse(request.responseText);
                    callback(data);
                  } catch (error) {
                    callbackErr();
                  }
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function () {
            callbackErr();
          };

          request.onerror = () => {
            callbackErr();
          };

          request.send();
        }

        post({
          url = '',
          data = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const dataPost = this.encodeQueryData(data);
          const fullURL = apiUrl + url;
          const request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                try {
                  const data = JSON.parse(request.responseText);
                  callback({
                    status: request.status,
                    data: data
                  });
                } catch (error) {
                  callbackErr();
                }
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = e => {
            callbackErr();
          };

          request.send(dataPost);
        }

        postWithHeader({
          url = '',
          params = {},
          headers = {},
          data = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const dataPost = JSON.stringify(data);
          const querystring = '?' + this.encodeQueryData(params);
          const fullURL = apiUrl + url + querystring;
          const request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/json');
          Object.keys(headers).forEach(key => {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                try {
                  const data = JSON.parse(request.responseText);
                  callback({
                    status: request.status,
                    data: data
                  });
                } catch (error) {
                  callbackErr();
                }
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = e => {
            callbackErr();
          };

          request.send(dataPost);
        }

        postRaw({
          url = '',
          data = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const dataPost = data;
          const fullURL = apiUrl + url;
          const request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.status == 200) {
              callback({
                status: request.status,
                data: request.responseText
              });
            } else {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = e => {
            callbackErr();
          };

          request.send(dataPost);
        }

        put({
          url = '',
          data = {},
          callback = data => {},
          apiUrl = '',
          callbackErr = () => {}
        }) {
          const dataPost = this.encodeQueryData(data);
          const fullURL = apiUrl + url;
          const request = new XMLHttpRequest();
          request.open('PUT', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                try {
                  const data = JSON.parse(request.responseText);
                  callback({
                    status: request.status,
                    data: data
                  });
                } catch (error) {
                  callbackErr();
                }
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = e => {
            callbackErr();
          };

          request.send(dataPost);
        }

      }

      const apiObject = exports('default', new ServiceRest());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sessionDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './eEventEmitter.ts', './eDialog.ts', './monitorDataStore.ts', './StateEvents.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, EditBox, Node, ProgressBar, _decorator, customDateFormat, secondsToHHMMSS, eEventEmitter, eDialog, MonitorDataStore, StateEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      EditBox = module.EditBox;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      _decorator = module._decorator;
    }, function (module) {
      customDateFormat = module.customDateFormat;
      secondsToHHMMSS = module.secondsToHHMMSS;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eDialog = module.eDialog;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }, function (module) {
      StateEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "45716ofF+5PGLJFKSZqvYfM", "sessionDialog", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SessionDialog = exports('default', (_dec = property(Label), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(EditBox), _dec9 = property(Node), _dec10 = property(ProgressBar), _dec11 = property(Label), ccclass(_class = (_class2 = class SessionDialog extends eDialog {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "labelSessionID", _descriptor, this);

          _initializerDefineProperty(this, "labelStartTime", _descriptor2, this);

          _initializerDefineProperty(this, "labelEndTime", _descriptor3, this);

          _initializerDefineProperty(this, "labelTotalTime", _descriptor4, this);

          _initializerDefineProperty(this, "labelMinFps", _descriptor5, this);

          _initializerDefineProperty(this, "labelAvgFps", _descriptor6, this);

          _initializerDefineProperty(this, "labelIssueFps", _descriptor7, this);

          _initializerDefineProperty(this, "editBoxFileName", _descriptor8, this);

          _initializerDefineProperty(this, "uploadContainer", _descriptor9, this);

          _initializerDefineProperty(this, "progressBarUpload", _descriptor10, this);

          _initializerDefineProperty(this, "labelUpload", _descriptor11, this);

          this._sessionId = void 0;
        }

        show(data) {
          const sessionData = MonitorDataStore.instance.mapRecordDataBySessionId.get(data.sessionID);

          if (!sessionData) {
            return;
          }

          this._sessionId = sessionData.sessionId;
          super.show();
          this.displaySessionDetail(sessionData);
          this.uploadContainer.active = true;
          this.editBoxFileName.placeholder = sessionData.sessionId;
          this.progressBarUpload.node.active = false;
        }

        displaySessionDetail(data) {
          const startTime = new Date(data.startTime);
          const endTime = new Date(data.endTime);
          this.labelSessionID.string = data.sessionId;
          this.labelStartTime.string = customDateFormat(startTime, '#DD#-#MM#-#YYYY# #hhhh#:#mm#:#ss#');
          this.labelEndTime.string = customDateFormat(endTime, '#DD#-#MM#-#YYYY# #hhhh#:#mm#:#ss#');
          this.labelTotalTime.string = secondsToHHMMSS(data.totalTime / 1000);
          this.labelMinFps.string = data.minFPS.toFixed(2);
          this.labelAvgFps.string = data.avgFPS.toFixed(2);
          this.labelIssueFps.string = data.totalIssue.toString();
        }

        uploadRecordData() {
          if (!this._sessionId) {
            return;
          }

          let sessionName = this.editBoxFileName.string;

          if (!sessionName) {
            sessionName = this._sessionId;
          }

          const uploadData = {
            sessionId: this._sessionId,
            sessionName: sessionName
          };
          this.uploadContainer.active = false;
          this.progressBarUpload.node.active = true;
          eEventEmitter.getInstance().emit(StateEvents.UPLOAD_RECORD, uploadData, this.updateUploadProgressBar.bind(this), this.updateUploadLabel.bind(this));
        }

        updateUploadProgressBar(uploadProgress) {
          this.progressBarUpload.progress = uploadProgress;

          if (uploadProgress <= -1 || uploadProgress >= 1) {
            this.progressBarUpload.node.active = false;
          }
        }

        updateUploadLabel(uploadString) {
          this.labelUpload.string = uploadString;
        }

        deleteRecordData() {
          eEventEmitter.getInstance().emit(StateEvents.DELETE_RECORD, this._sessionId);
          this.hide();
        }

        clearDialog() {
          this._sessionId = null;
          this.labelSessionID.string = '';
          this.labelStartTime.string = '';
          this.labelEndTime.string = '';
          this.labelTotalTime.string = '';
          this.labelMinFps.string = '';
          this.labelAvgFps.string = '';
          this.labelIssueFps.string = '';
          this.labelUpload.string = '';
          this.editBoxFileName.string = '';
          this.editBoxFileName.placeholder = '';
          this.progressBarUpload.progress = 0;
        }

        hide() {
          this.clearDialog();
          super.hide();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelSessionID", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelStartTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelEndTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labelTotalTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labelMinFps", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labelAvgFps", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labelIssueFps", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "editBoxFileName", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "uploadContainer", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "progressBarUpload", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "labelUpload", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sessionItem.ts", ['cc', './eEventEmitter.ts', './eItem.ts'], function (exports) {
  var cclegacy, _decorator, eEventEmitter, eItem;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eItem = module.eItem;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "25548GBEihPYLLeZKbr9JQY", "sessionItem", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SessionItem = exports('default', ccclass(_class = class SessionItem extends eItem {
        onLoad() {
          this.callback = this.showSessionDialog.bind(this);
        }

        showSessionDialog() {
          const data = {
            sessionID: this.node.name
          };
          eEventEmitter.getInstance().emit("OPEN_POPUP", 'sessionDialog', data);
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sessionList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eEventEmitter.ts', './eList.ts', './monitorDataStore.ts', './sessionItem.ts', './StateEvents.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, ScrollView, Node, _decorator, instantiate, Label, eEventEmitter, eList, MonitorDataStore, SessionItem, StateEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      ScrollView = module.ScrollView;
      Node = module.Node;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      Label = module.Label;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eList = module.eList;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }, function (module) {
      SessionItem = module.default;
    }, function (module) {
      StateEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "50b98zDshBIcrLJkov8TYX8", "sessionList", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SessionList = exports('default', (_dec = property(ScrollView), _dec2 = property(Node), ccclass(_class = (_class2 = class SessionList extends eList {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "sessionScrollView", _descriptor, this);

          _initializerDefineProperty(this, "itemSession", _descriptor2, this);
        }

        get mapRecordDataBySessionId() {
          return MonitorDataStore.instance.mapRecordDataBySessionId;
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          eEventEmitter.getInstance().registerEvent(StateEvents.REFRESH_SESSION_LIST, this.refreshSessionItem.bind(this));
        }

        onEnable() {
          this.refreshSessionItem();
        }

        onDisable() {}

        refreshSessionItem() {
          this.sessionScrollView.content.removeAllChildren();
          const arraySessionId = Array.from(this.mapRecordDataBySessionId.keys());

          if (arraySessionId) {
            for (let i = 0; i < arraySessionId.length; ++i) {
              let item = instantiate(this.itemSession);
              item.active = true;
              item.getComponent(SessionItem).init(arraySessionId[i]);
              item.getComponent(Label).string = "" + arraySessionId[i];
              this.sessionScrollView.content.addChild(item);
            }
          }
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sessionScrollView", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "itemSession", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sessionModel.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74eb2NrH9ZBHqew39/doyIx", "sessionModel", undefined);

      class RecordData {
        constructor() {
          this.gameId = "";
          this.userId = "";
          this.sessionId = "";
          this.avgFPS = 0;
          this.minFPS = 0;
          this.startTime = 0;
          this.endTime = 0;
          this.totalTime = 0;
          this.recordConfig = new RecordConfig();
          this.arrayIssues = [];
          this.arrayChart = [];
          this.deviceInformation = new DeviceInformation();
          this.totalIssue = 0;
        }

        loadJSON(json) {
          if (json == '') return;
          var data = JSON.parse(json);
          this.gameId = data.gameId;
          this.sessionId = data.sessionId;
          this.userId = data.userId;
          this.avgFPS = data.fpsAvg;
          this.minFPS = data.minFps;
          this.startTime = data.startTime;
          this.endTime = data.finishTime;
          this.totalTime = data.totalTime;
          this.arrayChart = data.timeline;
          this.deviceInformation = Object.assign({}, data.deviceInfo);
          this.recordConfig = new RecordConfig();
          this.recordConfig.chartTime = data.chartTime;
          this.recordConfig.eventTime = data.eventTime;
          this.recordConfig.targetFPS = data.targetFps;
        }

        loadByObject(data) {
          this.gameId = data.gameId;
          this.sessionId = data.sessionId;
          this.userId = data.userId;
          this.avgFPS = data.avgFPS;
          this.minFPS = data.minFPS;
          this.startTime = data.startTime;
          this.endTime = data.endTime;
          this.totalTime = data.totalTime;
          this.arrayChart = data.arrayChart;
          this.totalIssue = data.totalIssue;
          this.deviceInformation = data.deviceInfo;
          this.recordConfig = data.recordConfig;
          this.arrayIssues = data.arrayIssues;
        }

        formatToJSON() {
          var session = this.cloneSessionData();
          session.issues = this.totalIssue;
          session.deviceInfo = Object.assign({}, this.deviceInformation);
          session.events = Object.assign({}, this.arrayIssues);
          var sessionConfig = Object.assign({}, this.recordConfig);
          var combineObject = Object.assign({}, sessionConfig, session);
          return JSON.stringify(combineObject);
        }

        formatToAPIData() {
          var session = this.cloneSessionData();
          session.issues = this.totalIssue;
          session.deviceInfo = Object.assign({}, this.deviceInformation);
          session.events = [];
          this.arrayIssues.forEach(issues => {
            session.events.push(this.cloneObjectAndRename(issues, {
              FPS: 'fps'
            }));
          });
          var sessionConfig = this.cloneObjectAndRename(this.recordConfig, {
            targetFPS: "targetFps"
          });
          var combineObject = Object.assign({}, sessionConfig, session);
          return combineObject;
        }

        cloneSessionData() {
          var clone = (({
            recordConfig: sessionConfig,
            arrayIssues: arrayIssue,
            deviceInformation,
            ...o
          }) => o)(this);

          clone = this.cloneObjectAndRename(clone, {
            avgFPS: "fpsAvg",
            arrayChart: "timeline",
            endTime: "finishTime",
            minFPS: "minFps"
          });
          return clone;
        }

        cloneObjectAndRename(object, renames) {
          let clone = {};
          Object.keys(object).forEach(function (key) {
            if (renames[key] !== undefined) {
              clone[renames[key]] = object[key];
            } else {
              clone[key] = object[key];
            }
          });
          return clone;
        }

      }

      exports('RecordData', RecordData);

      class RecordConfig {
        constructor() {
          this.targetFPS = 60;
          this.chartTime = 5;
          this.eventTime = 2;
        }

      }

      exports('RecordConfig', RecordConfig);

      class IssueInformation {
        constructor() {
          this.time = void 0;
          this.FPS = void 0;
          this.metaData = void 0;
        }

      }

      exports('IssueInformation', IssueInformation);

      class DeviceInformation {
        constructor() {
          this.os = void 0;
          this.version = void 0;
          this.platform = void 0;
          this.isNative = void 0;
          this.isBrowser = void 0;
          this.browserType = void 0;
        }

      }

      exports('DeviceInformation', DeviceInformation);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha1.ts", ['cc', './crypto-core.ts'], function () {
  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "089a7e1551NLYG+wDwiHvdt", "sha1", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Reusable object

      var W = [];
      /**
       * SHA-1 hash algorithm.
       */

      var SHA1 = C_algo.SHA1 = Hasher.extend({
        _doReset: function () {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
        },
        _doProcessBlock: function (M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4]; // Computation

          for (var i = 0; i < 80; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = n << 1 | n >>> 31;
            }

            var t = (a << 5 | a >>> 27) + e + W[i];

            if (i < 20) {
              t += (b & c | ~b & d) + 0x5a827999;
            } else if (i < 40) {
              t += (b ^ c ^ d) + 0x6ed9eba1;
            } else if (i < 60) {
              t += (b & c | b & d | c & d) - 0x70e44324;
            } else
              /* if (i < 80) */
              {
                t += (b ^ c ^ d) - 0x359d3e2a;
              }

            e = d;
            d = c;
            c = b << 30 | b >>> 2;
            b = a;
            a = t;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
        },
        _doFinalize: function () {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function () {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA1('message');
       *     var hash = CryptoJS.SHA1(wordArray);
       */

      C.SHA1 = Hasher._createHelper(SHA1);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA1(message, key);
       */

      C.HmacSHA1 = Hasher._createHmacHelper(SHA1);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha224.ts", ['cc', './crypto-core.ts', './sha256.ts'], function () {
  var cclegacy, CryptoJS, SHA256;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      SHA256 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "493c45OpJJG1IEuQ6YUvsdh", "sha224", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo; // var SHA256: any = C_algo.SHA256;

      /**
       * SHA-224 hash algorithm.
       */

      var SHA224 = C_algo.SHA224 = SHA256.extend({
        _doReset: function () {
          this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
        },
        _doFinalize: function () {
          var hash = SHA256._doFinalize.call(this);

          hash.sigBytes -= 4;
          return hash;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA224('message');
       *     var hash = CryptoJS.SHA224(wordArray);
       */

      C.SHA224 = SHA256._createHelper(SHA224);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA224(message, key);
       */

      C.HmacSHA224 = SHA256._createHmacHelper(SHA224);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha256.ts", ['cc', './crypto-core.ts'], function (exports) {
  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c26c2TLqLlIYIykCCfyqi7o", "sha256", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Initialization and round constants tables

      var H = [];
      var K = []; // Compute constants

      (function () {
        function isPrime(n) {
          var sqrtN = Math.sqrt(n);

          for (var factor = 2; factor <= sqrtN; factor++) {
            if (!(n % factor)) {
              return false;
            }
          }

          return true;
        }

        function getFractionalBits(n) {
          return (n - (n | 0)) * 0x100000000 | 0;
        }

        var n = 2;
        var nPrime = 0;

        while (nPrime < 64) {
          if (isPrime(n)) {
            if (nPrime < 8) {
              H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
            }

            K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
            nPrime++;
          }

          n++;
        }
      })(); // Reusable object


      var W = [];
      /**
       * SHA-256 hash algorithm.
       */

      var SHA256 = exports('default', C_algo.SHA256 = Hasher.extend({
        _doReset: function () {
          this._hash = new WordArray.init(H.slice(0));
        },
        _doProcessBlock: function (M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4];
          var f = H[5];
          var g = H[6];
          var h = H[7]; // Computation

          for (var i = 0; i < 64; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var gamma0x = W[i - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W[i - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
            }

            var ch = e & f ^ ~e & g;
            var maj = a & b ^ a & c ^ b & c;
            var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
            var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
            var t1 = h + sigma1 + ch + K[i] + W[i];
            var t2 = sigma0 + maj;
            h = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
          H[5] = H[5] + f | 0;
          H[6] = H[6] + g | 0;
          H[7] = H[7] + h | 0;
        },
        _doFinalize: function () {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function () {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      }));
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA256('message');
       *     var hash = CryptoJS.SHA256(wordArray);
       */

      C.SHA256 = Hasher._createHelper(SHA256);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA256(message, key);
       */

      C.HmacSHA256 = Hasher._createHmacHelper(SHA256);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha512.ts", ['cc', './crypto-core.ts', './x64-core.ts'], function () {
  var cclegacy, CryptoJS, C_x64;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      C_x64 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5d1e62122NOj6bU0n0LsOM1", "sha512", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var Hasher = C_lib.Hasher; // var C_x64 = C.x64;

      var X64Word = C_x64.Word;
      var X64WordArray = C_x64.WordArray;
      var C_algo = C.algo;

      function X64Word_create(...args) {
        return X64Word.create.apply(X64Word, arguments);
      } // Constants


      var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)]; // Reusable objects

      var W = [];

      (function () {
        for (var i = 0; i < 80; i++) {
          W[i] = X64Word_create();
        }
      })();
      /**
       * SHA-512 hash algorithm.
       */


      var SHA512 = C_algo.SHA512 = Hasher.extend({
        _doReset: function () {
          this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
        },
        _doProcessBlock: function (M, offset) {
          // Shortcuts
          var H = this._hash.words;
          var H0 = H[0];
          var H1 = H[1];
          var H2 = H[2];
          var H3 = H[3];
          var H4 = H[4];
          var H5 = H[5];
          var H6 = H[6];
          var H7 = H[7];
          var H0h = H0.high;
          var H0l = H0.low;
          var H1h = H1.high;
          var H1l = H1.low;
          var H2h = H2.high;
          var H2l = H2.low;
          var H3h = H3.high;
          var H3l = H3.low;
          var H4h = H4.high;
          var H4l = H4.low;
          var H5h = H5.high;
          var H5l = H5.low;
          var H6h = H6.high;
          var H6l = H6.low;
          var H7h = H7.high;
          var H7l = H7.low; // Working variables

          var ah = H0h;
          var al = H0l;
          var bh = H1h;
          var bl = H1l;
          var ch = H2h;
          var cl = H2l;
          var dh = H3h;
          var dl = H3l;
          var eh = H4h;
          var el = H4l;
          var fh = H5h;
          var fl = H5l;
          var gh = H6h;
          var gl = H6l;
          var hh = H7h;
          var hl = H7l; // Rounds

          for (var i = 0; i < 80; i++) {
            var Wil;
            var Wih; // Shortcut

            var Wi = W[i]; // Extend message

            if (i < 16) {
              Wih = Wi.high = M[offset + i * 2] | 0;
              Wil = Wi.low = M[offset + i * 2 + 1] | 0;
            } else {
              // Gamma0
              var gamma0x = W[i - 15];
              var gamma0xh = gamma0x.high;
              var gamma0xl = gamma0x.low;
              var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
              var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1

              var gamma1x = W[i - 2];
              var gamma1xh = gamma1x.high;
              var gamma1xl = gamma1x.low;
              var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
              var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

              var Wi7 = W[i - 7];
              var Wi7h = Wi7.high;
              var Wi7l = Wi7.low;
              var Wi16 = W[i - 16];
              var Wi16h = Wi16.high;
              var Wi16l = Wi16.low;
              Wil = gamma0l + Wi7l;
              Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
              Wil = Wil + gamma1l;
              Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
              Wil = Wil + Wi16l;
              Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
              Wi.high = Wih;
              Wi.low = Wil;
            }

            var chh = eh & fh ^ ~eh & gh;
            var chl = el & fl ^ ~el & gl;
            var majh = ah & bh ^ ah & ch ^ bh & ch;
            var majl = al & bl ^ al & cl ^ bl & cl;
            var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
            var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
            var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
            var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]

            var Ki = K[i];
            var Kih = Ki.high;
            var Kil = Ki.low;
            var t1l = hl + sigma1l;
            var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
            t1l = t1l + chl;
            t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
            t1l = t1l + Kil;
            t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
            t1l = t1l + Wil;
            t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj

            var t2l = sigma0l + majl;
            var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables

            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = dl + t1l | 0;
            eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = t1l + t2l | 0;
            ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
          } // Intermediate hash value


          H0l = H0.low = H0l + al;
          H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
          H1l = H1.low = H1l + bl;
          H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
          H2l = H2.low = H2l + cl;
          H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
          H3l = H3.low = H3l + dl;
          H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
          H4l = H4.low = H4l + el;
          H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
          H5l = H5.low = H5l + fl;
          H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
          H6l = H6.low = H6l + gl;
          H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
          H7l = H7.low = H7l + hl;
          H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
        },
        _doFinalize: function () {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Convert hash to 32-bit word array before returning


          var hash = this._hash.toX32(); // Return final computed hash


          return hash;
        },
        clone: function () {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        },
        blockSize: 1024 / 32
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA512('message');
       *     var hash = CryptoJS.SHA512(wordArray);
       */

      C.SHA512 = Hasher._createHelper(SHA512);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA512(message, key);
       */

      C.HmacSHA512 = Hasher._createHmacHelper(SHA512);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SideMenu1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSideMenu.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Tween, Sprite, tween, Vec3, UIOpacity, Button, GfSideMenu, gfFadeOutAll, gfFadeInAll;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Tween = module.Tween;
      Sprite = module.Sprite;
      tween = module.tween;
      Vec3 = module.Vec3;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
    }, function (module) {
      GfSideMenu = module.GfSideMenu;
    }, function (module) {
      gfFadeOutAll = module.gfFadeOutAll;
      gfFadeInAll = module.gfFadeInAll;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "b6587427OVDQ6bJzeAW7PvG", "SideMenu1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SideMenu1975 = exports('SideMenu1975', (_dec = ccclass('SideMenu1975'), _dec2 = property([Node]), _dec3 = property(Node), _dec(_class = (_class2 = class SideMenu1975 extends GfSideMenu {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "listButtonSideMenu", _descriptor, this);

          _initializerDefineProperty(this, "background", _descriptor2, this);
        }

        hideSideBar() {
          if (!this.isActionDone) {
            return;
          }

          this.isActionDone = false;
          this.unschedule(this.scheduleHide);
          this.isHide = !this.isHide;

          if (!this.isHide) {
            this.scheduleOnce(this.scheduleHide, 3);
          }

          this.playAnimRotate();
          this.playAnimFadeAllButtons();
        }

        playAnimRotate() {
          let baseEasing = this.isHide ? "sineIn" : "sineOut";
          const timePlayAnimRotate = 0.5;
          Tween.stopAllByTarget(this.iconHide);
          const iconSprite = this.iconHide.getComponent(Sprite);

          if (iconSprite) {
            tween(iconSprite).to(0.05, {
              fillRange: 0.3
            }, {
              easing: "bounceOut"
            }).to(0.05, {
              fillRange: 0.8
            }, {
              easing: "bounceIn"
            }).to(0.05, {
              fillRange: 0.2
            }, {
              easing: "bounceOut"
            }).to(0.05, {
              fillRange: 0.9
            }, {
              easing: "bounceIn"
            }).to(timePlayAnimRotate / 4, {
              fillRange: 0
            }, {
              easing: baseEasing
            }).call(() => {
              const originalPos = this.isHide ? new Vec3(-9, 0, 0) : new Vec3(0, 0, 0);
              tween(this.iconHide).to(0.03, {
                position: new Vec3(originalPos.x + 2, originalPos.y, 0)
              }).to(0.03, {
                position: new Vec3(originalPos.x - 2, originalPos.y, 0)
              }).to(0.03, {
                position: new Vec3(originalPos.x, originalPos.y + 2, 0)
              }).to(0.03, {
                position: new Vec3(originalPos.x, originalPos.y - 2, 0)
              }).to(0.03, {
                position: originalPos
              }).start();
              this.iconHide.angle = this.isHide ? 0 : 180;
              this.iconHide.position = this.isHide ? new Vec3(-9, 0, 0) : new Vec3(0, 0, 0);
            }).to(0.08, {
              fillRange: 0.4
            }, {
              easing: "quadOut"
            }).to(0.08, {
              fillRange: 0.2
            }, {
              easing: "quadIn"
            }).to(0.08, {
              fillRange: 0.7
            }, {
              easing: "quadOut"
            }).to(timePlayAnimRotate / 4, {
              fillRange: 1
            }, {
              easing: baseEasing
            }).call(() => {
              tween(this.iconHide).to(0.1, {
                scale: new Vec3(1.1, 1.1, 1)
              }).to(0.1, {
                scale: new Vec3(1, 1, 1)
              }).start();
              this.isActionDone = true;
            }).start();
          }

          let tweenFade = this.isHide ? gfFadeOutAll(timePlayAnimRotate) : gfFadeInAll(timePlayAnimRotate);
          Tween.stopAllByTarget(this.background);
          tween(this.background).parallel(tween().to(timePlayAnimRotate, {
            angle: this.isHide ? -180 : 0
          }, {
            easing: baseEasing
          }), tween().then(tweenFade)).call(() => {
            this.background.getComponent(UIOpacity).opacity = this.isHide ? 0 : 255;
          }).start();
        }

        playAnimFadeAllButtons() {
          const fadeFunction = this.isHide ? gfFadeOutAll : gfFadeInAll;
          const length = this.listButtonSideMenu.length;

          for (let i = 0; i < length; i++) {
            const index = this.isHide ? length - i - 1 : i;
            const nodeButton = this.listButtonSideMenu[index];
            nodeButton.active = true;
            nodeButton.getComponent(Button).interactable = false;
            Tween.stopAllByTarget(nodeButton);
            tween(nodeButton).delay(0.075).then(fadeFunction(0.075 * i)).call(() => {
              nodeButton.active = !this.isHide;
              nodeButton.getComponent(UIOpacity).opacity = this.isHide ? 0 : 255;
              nodeButton.getComponent(Button).interactable = !this.isHide;
            }).start();
          }
        }

        resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.isActionDone = true;
          Tween.stopAllByTarget(this.iconHide);
          this.iconHide.angle = 0;
          const iconSprite = this.iconHide.getComponent(Sprite);

          if (iconSprite) {
            iconSprite.fillRange = 1;
          }

          Tween.stopAllByTarget(this.background);
          this.background.angle = -180;
          this.background.getComponent(UIOpacity).opacity = 0;
          this.resetButtonsSideMenu();
        }

        resetButtonsSideMenu() {
          this.listButtonSideMenu.forEach(node => {
            Tween.stopAllByTarget(node);
            node.getComponent(Button).interactable = true;
            node.active = false;
            node.getComponent(UIOpacity).opacity = 0;
          });
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listButtonSideMenu", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomTypeShare.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, Node, AudioSource, warn, UITransform, Size, log, sys, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Node = module.Node;
      AudioSource = module.AudioSource;
      warn = module.warn;
      UITransform = module.UITransform;
      Size = module.Size;
      log = module.log;
      sys = module.sys;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "9292cCzeGpJ2qYW3aEq3Ldq", "Sound", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Sound = exports('Sound', (_dec = ccclass('Sound'), _dec2 = property(CustomAudioClip), _dec3 = property(CustomAudioClip), _dec(_class = (_class2 = class Sound extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "musicList", _descriptor, this);

          _initializerDefineProperty(this, "sfxList", _descriptor2, this);

          _initializerDefineProperty(this, "musicVolume", _descriptor3, this);

          _initializerDefineProperty(this, "sfxVolume", _descriptor4, this);

          _initializerDefineProperty(this, "isDebug", _descriptor5, this);

          _initializerDefineProperty(this, "dynamicLoading", _descriptor6, this);

          _initializerDefineProperty(this, "storageKeyBGM", _descriptor7, this);

          _initializerDefineProperty(this, "storageKeySFX", _descriptor8, this);

          this.currentMusic = void 0;
          this.isEnableBGM = false;
          this.isEnableSFX = false;
          this.enableMusicFunc = void 0;
          this.MUSIC_VOLUME = 1;
          this.isMuteMusic = false;
          this.isMuteEffect = false;
          this.userGestureNode = void 0;
          this.musicMap = {};
          this.sfxMap = {};
        }

        onLoad() {
          {
            globalThis['sound'] = this;
          }
          super.onLoad();
          this.loadCacheConfig();
          this.createUserGestureNode();
          this.userGestureNode.on(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
          this.musicList.forEach(soundObj => {
            this.musicMap[soundObj.soundId] = soundObj;
            let audioSource = this.node.addComponent(AudioSource);
            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            this.musicMap[soundObj.soundId].audioSource = audioSource;
          });
          this.sfxList.forEach(soundObj => {
            this.sfxMap[soundObj.soundId] = soundObj;
            let audioSource = this.node.addComponent(AudioSource);
            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            this.sfxMap[soundObj.soundId].audioSource = audioSource;
          });

          if (this.isDebug) {
            warn("musicList", this.musicList.map(soundObj => soundObj.soundId));
            warn("sfxList", this.sfxList.map(soundObj => soundObj.soundId));
          }

          if (this.dynamicLoading) {
            this.node.on('SET_UP_AUDIO_DATABASE', this.mappingAudioFiles.bind(this));
          }
        }

        mappingAudioFiles(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            const audioList = evt.details.audioList;

            if (audioList && audioList.length > 0) {
              audioList.forEach(audioObj => {
                if (audioObj.isMusic) {
                  if (!this.musicMap[audioObj.soundId]) {
                    this.musicMap[audioObj.soundId] = audioObj;
                  }
                } else if (audioObj.isEffect) {
                  if (!this.sfxMap[audioObj.soundId]) {
                    this.sfxMap[audioObj.soundId] = audioObj;
                  }
                }
              });
            } else {
              this.resetAudioMaps();
            }
          }
        }

        resetAudioMaps() {
          for (let key in this.musicMap) {
            const musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (let key in this.sfxMap) {
            const soudObj = this.sfxMap[key];

            if (soudObj && soudObj.destroyedOnSwitchMode) {
              this.sfxMap[key] = null;
              delete this.sfxMap[key];
            }
          }
        }

        createUserGestureNode() {
          if (!this.userGestureNode) {
            this.userGestureNode = new Node("UserGesture");
            this.userGestureNode.parent = this.node.parent;
            this.userGestureNode.active = true;
            this.userGestureNode.setPosition(0, 0);
            this.userGestureNode.layer = this.node.layer;
            const transform = this.userGestureNode.addComponent(UITransform);
            transform.setContentSize(new Size(2024, 1200));
            this.userGestureNode.setSiblingIndex(this.userGestureNode.parent.children.length);
          }
        }

        startPlayWithUserGesture() {
          this.playMainBGM();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        }
        /**
         * @music_API
         *  */


        playMusic(id, loop = true, volume) {
          if (!this.isEnableBGM) return;
          if (this.musicMap.hasOwnProperty(id) == false) return null;
          volume = this.isMuteMusic ? 0 : volume > 0 ? volume : this.musicVolume;

          if (this.currentMusic && this.currentMusic.soundId == id && !this.currentMusic.audioSource.playing) {
            this.currentMusic.audioSource.play();
            this.currentMusic.audioSource.loop = loop;
            this.currentMusic.audioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.currentMusic.audioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this.currentMusic.audioSource.play();
              this.currentMusic.audioSource.loop = loop;
              this.currentMusic.audioSource.volume = volume;
            }
          }

          if (this.isDebug) {
            log("%cSOUND playMusic", "color:red", id);
          }

          return this.currentMusic;
        }

        stopMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.stop();
        }

        pauseMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.pause();
        }

        setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          for (let key in this.musicMap) {
            const musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = volume;
          }
        }

        muteMusic() {
          this.isMuteMusic = true;

          for (let key in this.musicMap) {
            const musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = 0;
          }
        }

        unmuteMusic() {
          this.isMuteMusic = false;

          for (let key in this.musicMap) {
            const musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = this.musicVolume;
          }
        }
        /**
         * @sfx_API 
         * */


        playSfx(id, loop = false, volume) {
          if (!this.isEnableSFX) return;
          volume = this.isMuteEffect ? 0 : volume > 0 ? volume : this.sfxVolume;

          if (this.sfxMap.hasOwnProperty(id)) {
            let soundObj = this.sfxMap[id];

            if (soundObj) {
              soundObj.audioSource.play();
              soundObj.audioSource.loop = loop;

              if (typeof volume !== "undefined") {
                soundObj.audioSource.volume = volume;
              }
            }

            if (this.isDebug) {
              log("%cSOUND playSfx", "color: blue", id);
            }

            return soundObj;
          } else {
            warn(`SOUND playSfx, do not have sfx: ${id}`);
            return null;
          }
        }

        stopSfx(id) {
          if (this.sfxMap.hasOwnProperty(id)) {
            let soundObj = this.sfxMap[id];
            soundObj && soundObj.audioSource.playing && soundObj.audioSource.stop();
          } else {
            warn(`SOUND stopSfx, do not have sfx: ${id}`);
          }
        }

        stopAllEffects() {
          for (let key in this.sfxMap) {
            const soundObj = this.sfxMap[key];
            if (soundObj) this.stopSfx(soundObj.soundId);
          }
        }

        pauseAllEffects() {
          for (let key in this.sfxMap) {
            const soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource.playing) {
              soundObj.audioSource.pause();

              if (this.isDebug) {
                log("%cSOUND pauseAllEffects", "color: orange", soundObj.soundId);
              }
            }
          }
        }

        muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        }

        unmuteAllEffects() {
          this.isMuteEffect = false;
          this.setEffectVolume(this.sfxVolume, true);
        }

        setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          for (let key in this.sfxMap) {
            const soundObj = this.sfxMap[key];
            if (soundObj) soundObj.audioSource.volume = volume;
          }
        }
        /**
         * @canNotStop 
         */


        playSfxOneShot(id, volume) {
          if (!this.isEnableSFX || this.isMuteEffect) return;

          if (this.sfxMap.hasOwnProperty(id)) {
            let soundObj = this.sfxMap[id];
            volume = volume || this.sfxVolume;
            soundObj && soundObj.audioSource.playOneShot(soundObj.audioFile, volume);
          } else {
            warn(`SOUND, playSfxOneShot: do not have sfx: ${id}`);
          }
        }

        stopAllAudio() {
          this.stopMusic();
          this.stopAllEffects();
        }
        /**@control_setting */


        loadCacheConfig() {
          let isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          let isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        }

        bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        }

        setBgmEnable(enable) {
          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM);

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(() => {
            if (this.isEnableBGM) {
              this.playMainBGM();
            } else {
              this.pauseMusic();
            }

            this.enableMusicFunc = null;
          }, 100);
        }

        sfxToggle() {
          this.setEffectEnable(!this.isEnableBGM);
        }

        setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX);

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        }
        /**@implements */


        playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        }

        playSFXClick() {
          this.playSfxOneShot('CLICK');
        }

        getSfxMap() {
          return this.sfxMap;
        }

        setSfxMap(data) {
          if (data) {
            Object.keys(data).forEach(key => {
              if (!this.sfxMap[key]) {
                this.sfxMap[key] = {};
              }

              Object.assign(this.sfxMap[key], data[key]);
            });
          }
        }

        getMusicMap() {
          return this.musicMap;
        }

        setMusicMap(data) {
          if (data) {
            Object.keys(data).forEach(key => {
              if (!this.musicMap[key]) {
                this.musicMap[key] = {};
              }

              Object.assign(this.musicMap[key], data[key]);
            });
          }
        }

        onDisable() {
          this.stopAllAudio();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        }

        test() {
          this.playMusic("MUSIC_MAIN", true);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.8;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundController1975.ts", ['cc', './gfSoundController.ts', './DataStore1975.ts', './gfUtilities.ts', './gfBossController.ts', './gfActionHelper.ts', './Config1975.ts', './EventsCode1975.ts', './gfEventEmitter.ts', './gfBaseEvents.ts'], function (exports) {
  var cclegacy, log, Node, _decorator, GfSoundController, DataStore1975, registerEvent, gfBossController, stopAllActions, Config1975, EventsCode1975, gfEventEmitter, gfBaseEvents;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      GfSoundController = module.GfSoundController;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      gfBossController = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f42f1dN+CNN85GU+2o5gA8R", "SoundController1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SoundController1975 = exports('default', (_dec = ccclass('SoundController1975'), _dec(_class = class SoundController1975 extends GfSoundController {
        constructor(...args) {
          super(...args);
          this.coinLoopId = {
            soundID: null
          };
          this._drillFly = void 0;
          this._hasPlayIntroLoading = false;
        }

        initEvents() {
          super.initEvents();
          registerEvent(EventsCode1975.SOUND.SOUND_COIN_EARN, this.playSFXCoinEarn, this);
          registerEvent(EventsCode1975.SOUND.SOUND_TRAINSION_LOBBY, this.playSfxTransitionLobby, this);
          registerEvent(EventsCode1975.SOUND.SUPER_WIN, this.playSfxSuperWin, this);
          registerEvent(EventsCode1975.SOUND.SOUND_FISH_LEVEL_UP, this.playSfxFishLevelUp, this);
          registerEvent(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL, this.playSfxTurtleReel, this);
          registerEvent(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL_STOP, this.playSfxTurtleReelStop, this);
          registerEvent(EventsCode1975.SOUND.SOUND_SKILL_WARNING, this.playSfxSkillWarning, this);
          registerEvent(EventsCode1975.SOUND.SOUND_BOM_SKILL, this.playSfxBoomSkill, this);
          registerEvent(EventsCode1975.SOUND.SOUND_VORTEX_SKILL, this.playSfxVortexSkill, this);
          registerEvent(EventsCode1975.SOUND.SOUND_DRILL_TRANS_FORM, this.playSfxDrillTransform, this);
          registerEvent(EventsCode1975.SOUND.SOUND_DRILL_FLY, this.playSfxDrillFly, this);
          registerEvent(EventsCode1975.SOUND.SOUND_STOP_DRILL_FLY, this.stopSfxDrillFly, this);
          registerEvent(EventsCode1975.SOUND.SOUND_DRILL_IMPACT, this.playSfxDrillImpact, this);
          registerEvent(EventsCode1975.SOUND.SOUND_DRILL_SKILL, this.playSfxDrillSkill, this);
          registerEvent(EventsCode1975.SOUND.SOUND_TURTLE_GOLD, this.playSfxTurtleGold, this);
          registerEvent(EventsCode1975.SOUND.SOUND_FISH_LANTERN, this.playSfxFishLantern, this);
          registerEvent(EventsCode1975.SOUND.COUNT_COIN, this.playSfxCountCoin, this);
          registerEvent(EventsCode1975.SOUND.STOP_COUNT_COIN, this.stopSfxCountCoin, this);
          registerEvent(EventsCode1975.SOUND.SOUND_LOADING_INTRO, this.playSfxLoadingIntro, this);
          registerEvent(EventsCode1975.SOUND.SOUND_ONCOMPLETE_INTRO_LOADING, this.onCompletePlayIntroLoading, this);
          registerEvent(EventsCode1975.SOUND.SOUND_CHECK_PLAY_BGM_LOBBY, this.onCheckPlayLobbyBGM, this);
          registerEvent(EventsCode1975.SOUND.SOUND_FISH_DIE_EXPLOSION, this.playSfxFishDieExplosion, this);
        }

        playFishSFX(id, loop = false, ratio = 1) {
          const dataSfx = this.playSfx(id, loop, ratio);
          return dataSfx;
        }

        onCheckPlayLobbyBGM(callBack) {
          if (this._hasPlayIntroLoading) {
            callBack();
          }
        }

        playSfxCatch() {// this.playFishSFX("sfxCatch");
        }

        onCompletePlayIntroLoading() {
          this._hasPlayIntroLoading = true;
        }

        playFishSfxByName(data) {
          const {
            name,
            loop,
            ratio,
            sound,
            callBack
          } = data;

          if (sound) {
            const soundId = this.playSfx(name, loop, ratio);

            if (typeof callBack === "function") {
              callBack(soundId);
            }
          } else {
            this.playSfx(name, loop, ratio);
          }
        }

        resumeSoundBackground() {
          var _gfBossController$ins;

          const leviathan = (_gfBossController$ins = gfBossController.instance) == null ? void 0 : _gfBossController$ins.getBossByKind(32);

          if (leviathan) {
            this.playBackGroundMusic(Config1975.instance.SOUND_BACKGROUND_CONFIG.BOSS_JACKPOT);
          } else {
            this.playBgmInGame();
          }
        }

        playBgmInGame() {
          const currentSceneKind = DataStore1975.instance.getSceneKind();

          if (Config1975.instance.LIST_SCENE_KIND_OF_FISH_GROUP.find(item => item == currentSceneKind)) {
            this.playBackGroundMusic(Config1975.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP);
          } else {
            this.playBackGroundMusic(Config1975.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        }

        playBackGroundMusic(data, init = false) {
          if (DataStore1975.instance.getCurBGMusic() === data && !init && this.getCurrentMusicIsPlaying()) return;
          this.unscheduleAllCallbacks();
          stopAllActions(this._soundPlayer._gameNode);
          this.onResumeSound();

          switch (data) {
            case Config1975.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case Config1975.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              this.playFishBGM("bgmMain", true);
              break;

            case Config1975.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP:
              this.playFishBGM("bgmFishGroup", true);
              break;

            case Config1975.instance.SOUND_BACKGROUND_CONFIG.BOSS_JACKPOT:
              this.playFishBGM("bgmBoss", true);
              break;

            default:
              if (data && typeof data === 'string') {
                this.playFishBGM(data, true);
              }

              break;
          }

          DataStore1975.instance.setCurBGMusic(data);
        }

        _startPlayWithUserGesture(ev) {
          log(`[SoundPlayerImpl] start sound with user gesture`);
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);

          if (!globalThis.Howler.ctx) {
            return;
          }

          globalThis.Howler.ctx.resume().then(() => {
            this._soundPlayer.resumeWithGesture();

            if (!this.isGameHided && this._soundPlayer._gamePaused) {
              this._soundPlayer._gamePaused = false;
            }
          });
        }

        playSFXClickBet() {
          this.playFishSFX("sfxBet");
        }

        playSFXCoinEarn() {
          this.playFishSFX("sfxEarn");
        }

        playSfxFire(gunIndex) {
          this.playFishSFX("sfxGun_fire_" + gunIndex);
        }

        playSfxTransitionLobby() {
          this.playFishSFX("sfxTransionLobby");
        }

        playSfxFishLevelUp() {
          this.playFishSFX("sfxFishLevelUp");
        }

        playSfxTurtleReel() {
          this.playFishSFX("sfxTurtleReel");
        }

        playSfxTurtleReelStop() {
          this.playFishSFX("sfxTurtleReelStop");
        }

        playSfxSkillWarning(soundName) {
          this.playFishSFX(soundName);
        }

        playSfxBoomSkill() {
          this.playFishSFX('sfxBomSkill');
        }

        playSfxVortexSkill() {
          this.playFishSFX('sfxVortexSkill');
        }

        playSfxDrillTransform() {
          this.playFishSFX('sfxDrillTransform');
        }

        playSfxDrillFly() {
          if (!this._drillFly) {
            this._drillFly = this.playFishSFX('sfxDrillFly', true);
          }
        }

        stopSfxDrillFly() {
          this.stopSound(this._drillFly);
          this._drillFly = null;
        }

        playSfxDrillImpact() {
          this.playFishSFX('sfxDrillImpact');
        }

        playSfxDrillSkill() {
          this.playFishSFX('sfxDrillSkill');
        }

        playSfxTurtleGold() {
          this.playFishSFX('sfxTurtleGold');
        }

        playSfxFishLantern() {
          this.playFishSFX('sfxFishLantern');
        }

        playSfxLoadingIntro() {
          this.playFishSFX('sfxLoadingIntro');
        }

        playSfxFishDieExplosion() {
          this.playFishSFX('sfxFishDieExplosion');
        }

        playSfxSuperWin() {
          this.unschedule(this.scheduleResetVolume); // this.setEffectVolume(DataStore.instance.getCurrentSFXVolume() * 0.4);
          // this.setMusicVolume(DataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxSuper_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        }

        playSfxBigwin() {
          this.unschedule(this.scheduleResetVolume); // this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          // this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxBig_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        }

        playSfxMegawin() {
          this.unschedule(this.scheduleResetVolume); // this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          // this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxMega_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          } else {
            this.onResumeSound();
          }
        }

        stopSfxCountCoin() {
          if (this.coinLoopId) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_SOUND, this.coinLoopId.soundID);
            this.coinLoopId.soundID = 0;
          }
        }

        playSfxCountCoin() {
          const data = {
            name: "sfxJackpot_coin",
            loop: true,
            ratio: 0.4,
            sound: this.coinLoopId,
            callBack: soundID => {
              this.coinLoopId.soundID = soundID;
            }
          };
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BY_NAME, data);
        }

        stopAllAudio() {
          if (this._hasPlayIntroLoading) {
            super.stopAllAudio();
          }
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundPlayerImpl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './WebSoundPlayer.ts', './NativeSoundPlayer.ts', './CustomTypeShare.ts', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, warn, game, Game, sys, assetManager, UITransform, view, log, error, director, WebSoundPlayer, NativeSoundPlayer, CustomAudioClip, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      warn = module.warn;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      assetManager = module.assetManager;
      UITransform = module.UITransform;
      view = module.view;
      log = module.log;
      error = module.error;
      director = module.director;
    }, function (module) {
      WebSoundPlayer = module.WebSoundPlayer;
    }, function (module) {
      NativeSoundPlayer = module.NativeSoundPlayer;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "27112mPy0pFfJ1GtTI+J91P", "SoundPlayerImpl", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SoundPlayerImpl = exports('SoundPlayerImpl', (_dec = ccclass('SoundPlayerImpl'), _dec2 = property({
        type: CustomAudioClip
      }), _dec3 = property({
        type: CustomAudioClip
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = class SoundPlayerImpl extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "musicList", _descriptor, this);

          _initializerDefineProperty(this, "sfxList", _descriptor2, this);

          _initializerDefineProperty(this, "userGestureNode", _descriptor3, this);

          _initializerDefineProperty(this, "musicVolume", _descriptor4, this);

          _initializerDefineProperty(this, "sfxVolume", _descriptor5, this);

          _initializerDefineProperty(this, "isDebug", _descriptor6, this);

          _initializerDefineProperty(this, "storageKeyBGM", _descriptor7, this);

          _initializerDefineProperty(this, "storageKeySFX", _descriptor8, this);

          this.currentMusic = void 0;
          this.isEnableBGM = false;
          this.isEnableSFX = false;
          this.resumeSfxList = [];
          this.enableMusicFunc = void 0;
          this.MUSIC_VOLUME = 1;
          this.isMuteMusic = false;
          this.isMuteEffect = false;
          this.musicAudioSource = null;
          this.isWebSound = false;
          this._soundPlayer = null;
          this._hasAudioContext = true;
        }

        onLoad() {
          // globalThis.soundPlayer = this;
          this._checkDuplicateAudioFile();

          this.node.setSiblingIndex(this.node.parent.children.length + 1);
          this.loadCacheConfig();

          if (this.isDebug) {
            warn("musicList", this.musicList.map(soundObj => soundObj.soundId));
            warn("sfxList", this.sfxList.map(soundObj => soundObj.soundId));
          }

          this.node.on('SET_UP_AUDIO_DATABASE', this._loadDynamicSounds.bind(this));
          game.on(Game.EVENT_HIDE, this._onEventHide, this);
          game.on(Game.EVENT_SHOW, this._onEventShow, this);
          this.isWebSound = sys.isBrowser == true && globalThis.Howl;

          if (this.isWebSound) {
            this._soundPlayer = new WebSoundPlayer();
          } else {
            this._soundPlayer = new NativeSoundPlayer();
          }

          this._soundPlayer.init(this.musicList, this.sfxList, this.node);

          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(this.sfxList, () => {});

            this._soundPlayer.loadMusicList(this.musicList, () => {
              this._hasAudioContext = globalThis.Howler.ctx && globalThis.Howler.ctx.state === 'running';

              if (!this._hasAudioContext) {
                this._waitForUserGesture();
              } else {
                this._soundPlayer.skipGesture();
              }

              this.playMainBGM();
            });
          } else if (sys.isMobile && sys.isBrowser) {
            this._waitForUserGesture();
          }
        }

        _checkDuplicateAudioFile() {
          const musicFileNames = this.musicList.map(soundObj => soundObj.audioFile.name);
          musicFileNames.forEach((music, index) => {
            if (musicFileNames.indexOf(music) !== index) {
              warn("duplicate music file", music, musicFileNames.indexOf(music), index);
            }
          });
          const sfxFileNames = this.sfxList.map(soundObj => soundObj.audioFile.name);
          sfxFileNames.forEach((sfx, index) => {
            if (sfxFileNames.indexOf(sfx) !== index) {
              warn("duplicate sfx file", sfx, sfxFileNames.indexOf(sfx), index);
            }
          });
        }

        _loadDynamicSounds(ev) {
          let sfxList = ev.details.audioList;

          if (sfxList) {
            this._soundPlayer.loadDynamicSounds(sfxList, () => {
              if (this.isWebSound) {
                sfxList.forEach(soundObj => {
                  assetManager.releaseAsset(soundObj.audioFile);
                });
              }
            });
          }

          ev.propagationStopped = true;
        }

        setThumbMode(isThumbMode) {
          this._soundPlayer.setThumbMode(isThumbMode);
        }

        _waitForUserGesture() {
          let uiTransform = this.node.getComponent(UITransform);

          if (!uiTransform) {
            uiTransform = this.node.addComponent(UITransform);
          }

          uiTransform.setContentSize(view.getDesignResolutionSize());
          this.node.on(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
        }

        _startPlayWithUserGesture(ev) {
          log(`[SoundPlayerImpl] start sound with user gesture`);
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);

          if (this.isWebSound) {
            this._resumeContextGesture().then(() => {
              this._soundPlayer.resumeWithGesture();
            }).catch(e => {
              log(`resume context fail with error ${e}`);
            });
          }
        }

        _resumeContextGesture() {
          const Howler = globalThis.Howler;

          if (sys.os === sys.OS.IOS) {
            const iOSVersion = this._getVersionIOS();

            if (iOSVersion >= 14) {
              return Howler.ctx.suspend().then(() => {
                return Howler.ctx.resume();
              });
            }
          }

          return Howler.ctx.resume();
        }

        _getVersionIOS() {
          var userAgent = window.navigator.userAgent;
          var match = userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);

          if (match !== null && match.length >= 4) {
            let iOSVersion = parseInt(match[1], 10);
            return iOSVersion;
          }

          return 13;
        }

        _onEventHide() {
          this._soundPlayer && this._soundPlayer.onEventHide(this.isEnableBGM, this.isEnableSFX);
        }

        _onEventShow() {
          this._soundPlayer && this._soundPlayer.onEventShow(this.isEnableBGM, this.isEnableSFX);
        }

        playMusic(id, loop = true, volume) {
          volume = this.isMuteMusic || !this.isEnableBGM ? 0 : volume > 0 ? volume : this.musicVolume;
          log(`[SoundPlayerImpl] Play music ${id}`);
          return this._soundPlayer.playMusic(id, loop, volume);
        }

        changeMusic(id, loop, volume, mixTime) {
          volume = this.isMuteMusic || !this.isEnableBGM ? 0 : volume > 0 ? volume : this.musicVolume;
          log(`[SoundPlayerImpl] change music ${id}`);
          return this._soundPlayer.changeMusic(id, loop, volume, mixTime);
        }

        stopMusic() {
          this._soundPlayer.stopMusic();
        }

        pauseMusic() {
          this._soundPlayer.pauseMusic();
        }

        resumeMusic() {
          this._soundPlayer.resumeMusic();
        }

        setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          this._soundPlayer.setMusicVolume(volume);
        }

        muteMusic() {
          this.isMuteMusic = true;

          this._soundPlayer.muteMusic();
        }

        unmuteMusic() {
          if (this.isEnableBGM) {
            this.isMuteMusic = false;

            this._soundPlayer.unmuteMusic(this.musicVolume);
          }
        }

        playSfx(sfx, loop = false, volume) {
          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          log(`[SoundPlayerImpl] Play sfx ${sfx}`);
          return this._soundPlayer.playSfx(sfx, loop, volume);
        }

        stopSfx(sfx) {
          this._soundPlayer.stopSfx(sfx);
        }

        stopAllEffects() {
          this._soundPlayer.stopAllEffects();
        }

        pauseAllEffects(isInterrupt = false) {
          this._soundPlayer.pauseAllEffects(isInterrupt);
        }

        muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        }

        unmuteAllEffects() {
          if (this.isEnableSFX) {
            this.isMuteEffect = false;
            this.setEffectVolume(this.sfxVolume, true);
          }
        }

        setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          this._soundPlayer.setEffectVolume(volume, immediate);
        }

        setSoundVolume(soundId, volume) {
          if (typeof volume !== 'number') {
            error("invalid volume", volume);
            return;
          }

          this._soundPlayer.setSoundVolume(soundId, volume);
        }

        fadeMusicTo(duration, volume) {
          this._soundPlayer.fadeMusicTo(duration, volume);
        }

        fadeSoundTo(soundId, duration, volume) {
          this._soundPlayer.fadeSoundTo(soundId, duration, volume);
        }
        /**
         * using to play one clip many times
         * save the return data to stopSfxOneShot 
         */


        playSfxOneShot(soundId, volume, loop = false) {
          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          return this._soundPlayer.playSfxOneShot(soundId, volume, loop);
        }

        stopSfxOneShot(data = null) {
          if (!data) {
            error("stopSfxOneShot invalid data", data);
            return;
          }

          this._soundPlayer.stopSfxOneShot(data);
        }

        stopAllAudio() {
          this._soundPlayer.stopAllAudio();
        }

        loadCacheConfig() {
          const {
            ENABLE_BGM,
            ENABLE_SFX
          } = loadConfigAsync.getConfig();
          this.storageKeyBGM = ENABLE_BGM ? ENABLE_BGM : this.storageKeyBGM;
          this.storageKeySFX = ENABLE_SFX ? ENABLE_SFX : this.storageKeySFX;
          let isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          let isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        }

        bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        }

        setBgmEnable(enable) {
          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString());

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(() => {
            if (this.isEnableBGM) {
              this.unmuteMusic();
            } else {
              this.muteMusic();
            }

            this.enableMusicFunc = null;
          }, 100);
        }

        sfxToggle() {
          this.setEffectEnable(!this.isEnableSFX);
        }

        setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }

          if (director) {
            director.emit('UPDATE_SFX_SETTING', enable);
          }
        }

        playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        }

        playSFXClick() {
          this.playSfx('CLICK');
        }

        update(dt) {
          if (this._soundPlayer && typeof this._soundPlayer.update == "function") {
            this._soundPlayer.update(dt);
          }
        }

        onDisable() {
          this.stopAllAudio();
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
        }

        onDestroy() {
          this._soundPlayer.onDestroy();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "userGestureNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.8;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineFish1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfSpineFish.ts', './gfActionHelper.ts', './Config1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, tween, math, Color, gfSpineFish, v3f, stopAllActions, gfMoveByDistance, Config1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      tween = module.tween;
      math = module.math;
      Color = module.Color;
    }, function (module) {
      gfSpineFish = module.gfSpineFish;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
      gfMoveByDistance = module.gfMoveByDistance;
    }, function (module) {
      Config1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "99ebe9BFbNMq79MMS911Lxt", "SpineFish1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SpineFish1975 = exports('default', (_dec = ccclass('SpineFish1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class SpineFish1975 extends gfSpineFish {
        constructor(...args) {
          super(...args);
          this._config = null;
          this._timeScale = 1;
          this._inPortal = false;

          _initializerDefineProperty(this, "levelUpFx", _descriptor, this);
        }

        initAssets(config) {
          super.initAssets(config);

          if (config.hitColor) {
            this.HIT_COLOR = config.hitColor;
          }

          if (config.ScaleSize) {
            this.node.scale = v3f(config.ScaleSize);
          }

          if (!this.levelUpFx) {
            this.levelUpFx = this.node.getChildByName("levelUpFx").getComponent(sp.Skeleton);
          }

          this._config = config;
          this._timeScale = config.timeScale || 1;
          this.fishAnim.timeScale = this._timeScale;
        }

        initFishData(data) {
          if (data.Speed) {
            this.speed = data.Speed;
          }

          super.initFishData(data);
          this._inPortal = !!data.inPortal;
        }

        decreaseFishSpeed(speedChange) {
          const baseSpeed = 1;
          tween(this.node).to(0.5, null, {
            onUpdate: (_target, ratio) => {
              const curSpeed = baseSpeed - (baseSpeed - speedChange) * ratio;
              this.moveAction.setSpeed(curSpeed);
            }
          }).start();
        }

        playResetColor() {
          if (!this.fishAnim) return;
          const startColor = this.fishAnim.color.clone();
          const endColor = this.NORMAL_COLOR;
          tween(this.fishAnim).to(0.1, {
            color: endColor
          }, {
            onUpdate: (target, ratio) => {
              const r = math.lerp(startColor.r, endColor.r, ratio);
              const g = math.lerp(startColor.g, endColor.g, ratio);
              const b = math.lerp(startColor.b, endColor.b, ratio);
              target.color = new Color(r, g, b, 255);
            }
          }).start();
        }

        playHitColor() {
          if (!this.fishAnim) return;
          const startColor = this.fishAnim.color.clone();
          const endColor = this.HIT_COLOR;
          stopAllActions(this.fishAnim);
          tween(this.fishAnim).to(0.1, {
            color: endColor
          }, {
            onUpdate: (target, ratio) => {
              const r = math.lerp(startColor.r, endColor.r, ratio);
              const g = math.lerp(startColor.g, endColor.g, ratio);
              const b = math.lerp(startColor.b, endColor.b, ratio);
              target.color = new Color(r, g, b, 255);
            }
          }).delay(0.1).call(() => {
            this.playResetColor();
          }).start();
        }

        moveOut() {
          if (this._isDie) return;

          if (this.checkOutScene()) {
            this.onDie();
            return;
          }

          this.movePath = null;
          this.outScreenComp.enabled = true;
          this.angleComp.enabled = true;
          this.stopAllActions();
          this.changeAnimationSpeed(2.5);
          tween(this.node).then(gfMoveByDistance(3, Config1975.instance.AppSize.MaxWidth * 1.5)).call(() => {
            this.onDie();
          }).start();
        }

        isAvailable() {
          return !this.checkDie() && !this.checkOutScene() && !this.checkInPortal();
        }

        checkInPortal() {
          return this._inPortal && this._isFishGroup;
        }

        setInPortal(value) {
          this._inPortal = value;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "levelUpFx", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpriteFish1975.ts", ['cc', './gfSpriteFish.ts'], function (exports) {
  var cclegacy, _decorator, gfSpriteFish;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfSpriteFish = module.gfSpriteFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1e649HBXklLZLAWR/8gDdK/", "SpriteFish1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SpriteFish1975 = exports('SpriteFish1975', (_dec = ccclass('SpriteFish1975'), _dec(_class = class SpriteFish1975 extends gfSpriteFish {
        initFishData(data) {
          if (data.Speed) {
            this.speed = data.Speed;
          }

          super.initFishData(data);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/state-machine-history.min.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        !function (t, e) {
          "object" == typeof exports$1 && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define("StateMachineHistory", [], e) : "object" == typeof exports$1 ? exports$1.StateMachineHistory = e() : t.StateMachineHistory = e();
        }(this, function () {
          return function (t) {
            function e(r) {
              if (n[r]) return n[r].exports;
              var o = n[r] = {
                i: r,
                l: !1,
                exports: {}
              };
              return t[r].call(o.exports, o, o.exports, e), o.l = !0, o.exports;
            }

            var n = {};
            return e.m = t, e.c = n, e.i = function (t) {
              return t;
            }, e.d = function (t, n, r) {
              e.o(t, n) || Object.defineProperty(t, n, {
                configurable: !1,
                enumerable: !0,
                get: r
              });
            }, e.n = function (t) {
              var n = t && t.__esModule ? function () {
                return t.default;
              } : function () {
                return t;
              };
              return e.d(n, "a", n), n;
            }, e.o = function (t, e) {
              return Object.prototype.hasOwnProperty.call(t, e);
            }, e.p = "", e(e.s = 1);
          }([function (t, e, n) {
            function r(t) {
              if (0 === t.length) return t;
              var e,
                  n,
                  r = t.split(/[_-]/);
              if (1 === r.length && r[0][0].toLowerCase() === r[0][0]) return t;

              for (n = r[0].toLowerCase(), e = 1; e < r.length; e++) n = n + r[e].charAt(0).toUpperCase() + r[e].substring(1).toLowerCase();

              return n;
            }

            r.prepended = function (t, e) {
              return e = r(e), t + e[0].toUpperCase() + e.substring(1);
            }, t.exports = r;
          }, function (t, e, n) {
            var r = n(0);

            t.exports = function (t) {
              t = t || {};
              var e = r(t.name || t.past || "history"),
                  n = r(t.future || "future"),
                  o = r.prepended("clear", e),
                  i = r.prepended(e, "back"),
                  s = r.prepended(e, "forward"),
                  u = r.prepended("can", i),
                  p = r.prepended("can", s),
                  c = t.max,
                  f = {
                configure: function (t) {
                  t.addTransitionLifecycleNames(i), t.addTransitionLifecycleNames(s);
                },
                init: function (t) {
                  t[e] = [], t[n] = [];
                },
                lifecycle: function (t, r) {
                  "onEnterState" === r.event && (t[e].push(r.to), c && t[e].length > c && t[e].shift(), r.transition !== i && r.transition !== s && (t[n].length = 0));
                },
                methods: {},
                properties: {}
              };
              return f.methods[o] = function () {
                this[e].length = 0, this[n].length = 0;
              }, f.properties[u] = {
                get: function () {
                  return this[e].length > 1;
                }
              }, f.properties[p] = {
                get: function () {
                  return this[n].length > 0;
                }
              }, f.methods[i] = function () {
                if (!this[u]) throw Error("no history");
                var t = this[e].pop(),
                    r = this[e].pop();
                this[n].push(t), this._fsm.transit(i, t, r, []);
              }, f.methods[s] = function () {
                if (!this[p]) throw Error("no history");
                var t = this.state,
                    e = this[n].pop();

                this._fsm.transit(s, t, e, []);
              }, f;
            };
          }]);
        }); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
        module.exports.StateMachineHistory;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/state-machine.min.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      let _cjsExports;

      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        !function (t, n) {
          "object" == typeof exports$1 && "object" == typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define("StateMachine", [], n) : "object" == typeof exports$1 ? exports$1.StateMachine = n() : t.StateMachine = n();
        }(this, function () {
          return function (t) {
            function n(e) {
              if (i[e]) return i[e].exports;
              var s = i[e] = {
                i: e,
                l: !1,
                exports: {}
              };
              return t[e].call(s.exports, s, s.exports, n), s.l = !0, s.exports;
            }

            var i = {};
            return n.m = t, n.c = i, n.i = function (t) {
              return t;
            }, n.d = function (t, i, e) {
              n.o(t, i) || Object.defineProperty(t, i, {
                configurable: !1,
                enumerable: !0,
                get: e
              });
            }, n.n = function (t) {
              var i = t && t.__esModule ? function () {
                return t.default;
              } : function () {
                return t;
              };
              return n.d(i, "a", i), i;
            }, n.o = function (t, n) {
              return Object.prototype.hasOwnProperty.call(t, n);
            }, n.p = "", n(n.s = 5);
          }([function (t, n, i) {
            t.exports = function (t, n) {
              var i, e, s;

              for (i = 1; i < arguments.length; i++) {
                e = arguments[i];

                for (s in e) e.hasOwnProperty(s) && (t[s] = e[s]);
              }

              return t;
            };
          }, function (t, n, i) {
            var e = i(0);
            t.exports = {
              build: function (t, n) {
                var i,
                    s,
                    r,
                    o = n.plugins;

                for (i = 0, s = o.length; i < s; i++) r = o[i], r.methods && e(t, r.methods), r.properties && Object.defineProperties(t, r.properties);
              },
              hook: function (t, n, i) {
                var e,
                    s,
                    r,
                    o,
                    a = t.config.plugins,
                    f = [t.context];

                for (i && (f = f.concat(i)), e = 0, s = a.length; e < s; e++) o = a[e], (r = a[e][n]) && r.apply(o, f);
              }
            };
          }, function (t, n, i) {
            function e(t) {
              if (0 === t.length) return t;
              var n,
                  i,
                  e = t.split(/[_-]/);
              if (1 === e.length && e[0][0].toLowerCase() === e[0][0]) return t;

              for (i = e[0].toLowerCase(), n = 1; n < e.length; n++) i = i + e[n].charAt(0).toUpperCase() + e[n].substring(1).toLowerCase();

              return i;
            }

            e.prepended = function (t, n) {
              return n = e(n), t + n[0].toUpperCase() + n.substring(1);
            }, t.exports = e;
          }, function (t, n, i) {
            function e(t, n) {
              t = t || {}, this.options = t, this.defaults = n.defaults, this.states = [], this.transitions = [], this.map = {}, this.lifecycle = this.configureLifecycle(), this.init = this.configureInitTransition(t.init), this.data = this.configureData(t.data), this.methods = this.configureMethods(t.methods), this.map[this.defaults.wildcard] = {}, this.configureTransitions(t.transitions || []), this.plugins = this.configurePlugins(t.plugins, n.plugin);
            }

            var s = i(0),
                r = i(2);
            s(e.prototype, {
              addState: function (t) {
                this.map[t] || (this.states.push(t), this.addStateLifecycleNames(t), this.map[t] = {});
              },
              addStateLifecycleNames: function (t) {
                this.lifecycle.onEnter[t] = r.prepended("onEnter", t), this.lifecycle.onLeave[t] = r.prepended("onLeave", t), this.lifecycle.on[t] = r.prepended("on", t);
              },
              addTransition: function (t) {
                this.transitions.indexOf(t) < 0 && (this.transitions.push(t), this.addTransitionLifecycleNames(t));
              },
              addTransitionLifecycleNames: function (t) {
                this.lifecycle.onBefore[t] = r.prepended("onBefore", t), this.lifecycle.onAfter[t] = r.prepended("onAfter", t), this.lifecycle.on[t] = r.prepended("on", t);
              },
              mapTransition: function (t) {
                var n = t.name,
                    i = t.from,
                    e = t.to;
                return this.addState(i), "function" != typeof e && this.addState(e), this.addTransition(n), this.map[i][n] = t, t;
              },
              configureLifecycle: function () {
                return {
                  onBefore: {
                    transition: "onBeforeTransition"
                  },
                  onAfter: {
                    transition: "onAfterTransition"
                  },
                  onEnter: {
                    state: "onEnterState"
                  },
                  onLeave: {
                    state: "onLeaveState"
                  },
                  on: {
                    transition: "onTransition"
                  }
                };
              },
              configureInitTransition: function (t) {
                return "string" == typeof t ? this.mapTransition(s({}, this.defaults.init, {
                  to: t,
                  active: !0
                })) : "object" == typeof t ? this.mapTransition(s({}, this.defaults.init, t, {
                  active: !0
                })) : (this.addState(this.defaults.init.from), this.defaults.init);
              },
              configureData: function (t) {
                return "function" == typeof t ? t : "object" == typeof t ? function () {
                  return t;
                } : function () {
                  return {};
                };
              },
              configureMethods: function (t) {
                return t || {};
              },
              configurePlugins: function (t, n) {
                t = t || [];
                var i, e, s;

                for (i = 0, e = t.length; i < e; i++) s = t[i], "function" == typeof s && (t[i] = s = s()), s.configure && s.configure(this);

                return t;
              },
              configureTransitions: function (t) {
                var n,
                    i,
                    e,
                    s,
                    r,
                    o = this.defaults.wildcard;

                for (i = 0; i < t.length; i++) for (e = t[i], s = Array.isArray(e.from) ? e.from : [e.from || o], r = e.to || o, n = 0; n < s.length; n++) this.mapTransition({
                  name: e.name,
                  from: s[n],
                  to: r
                });
              },
              transitionFor: function (t, n) {
                var i = this.defaults.wildcard;
                return this.map[t][n] || this.map[i][n];
              },
              transitionsFor: function (t) {
                var n = this.defaults.wildcard;
                return Object.keys(this.map[t]).concat(Object.keys(this.map[n]));
              },
              allStates: function () {
                return this.states;
              },
              allTransitions: function () {
                return this.transitions;
              }
            }), t.exports = e;
          }, function (t, n, i) {
            function e(t, n) {
              this.context = t, this.config = n, this.state = n.init.from, this.observers = [t];
            }

            var s = i(0),
                r = i(6),
                o = i(1),
                a = [null, []];
            s(e.prototype, {
              init: function (t) {
                if (s(this.context, this.config.data.apply(this.context, t)), o.hook(this, "init"), this.config.init.active) return this.fire(this.config.init.name, []);
              },
              is: function (t) {
                return Array.isArray(t) ? t.indexOf(this.state) >= 0 : this.state === t;
              },
              isPending: function () {
                return this.pending;
              },
              can: function (t) {
                return !this.isPending() && !!this.seek(t);
              },
              cannot: function (t) {
                return !this.can(t);
              },
              allStates: function () {
                return this.config.allStates();
              },
              allTransitions: function () {
                return this.config.allTransitions();
              },
              transitions: function () {
                return this.config.transitionsFor(this.state);
              },
              seek: function (t, n) {
                var i = this.config.defaults.wildcard,
                    e = this.config.transitionFor(this.state, t),
                    s = e && e.to;
                return "function" == typeof s ? s.apply(this.context, n) : s === i ? this.state : s;
              },
              fire: function (t, n) {
                return this.transit(t, this.state, this.seek(t, n), n);
              },
              transit: function (t, n, i, e) {
                var s = this.config.lifecycle,
                    r = this.config.options.observeUnchangedState || n !== i;
                return i ? this.isPending() ? this.context.onPendingTransition(t, n, i) : (this.config.addState(i), this.beginTransit(), e.unshift({
                  transition: t,
                  from: n,
                  to: i,
                  fsm: this.context
                }), this.observeEvents([this.observersForEvent(s.onBefore.transition), this.observersForEvent(s.onBefore[t]), r ? this.observersForEvent(s.onLeave.state) : a, r ? this.observersForEvent(s.onLeave[n]) : a, this.observersForEvent(s.on.transition), r ? ["doTransit", [this]] : a, r ? this.observersForEvent(s.onEnter.state) : a, r ? this.observersForEvent(s.onEnter[i]) : a, r ? this.observersForEvent(s.on[i]) : a, this.observersForEvent(s.onAfter.transition), this.observersForEvent(s.onAfter[t]), this.observersForEvent(s.on[t])], e)) : this.context.onInvalidTransition(t, n, i);
              },
              beginTransit: function () {
                this.pending = !0;
              },
              endTransit: function (t) {
                return this.pending = !1, t;
              },
              failTransit: function (t) {
                throw this.pending = !1, t;
              },
              doTransit: function (t) {
                this.state = t.to;
              },
              observe: function (t) {
                if (2 === t.length) {
                  var n = {};
                  n[t[0]] = t[1], this.observers.push(n);
                } else this.observers.push(t[0]);
              },
              observersForEvent: function (t) {
                for (var n, i = 0, e = this.observers.length, s = []; i < e; i++) n = this.observers[i], n[t] && s.push(n);

                return [t, s, !0];
              },
              observeEvents: function (t, n, i, e) {
                if (0 === t.length) return this.endTransit(void 0 === e || e);
                var s = t[0][0],
                    r = t[0][1],
                    a = t[0][2];
                if (n[0].event = s, s && a && s !== i && o.hook(this, "lifecycle", n), 0 === r.length) return t.shift(), this.observeEvents(t, n, s, e);
                var f = r.shift(),
                    c = f[s].apply(f, n);
                return c && "function" == typeof c.then ? c.then(this.observeEvents.bind(this, t, n, s)).catch(this.failTransit.bind(this)) : !1 === c ? this.endTransit(!1) : this.observeEvents(t, n, s, c);
              },
              onInvalidTransition: function (t, n, i) {
                throw new r("transition is invalid in current state", t, n, i, this.state);
              },
              onPendingTransition: function (t, n, i) {
                throw new r("transition is invalid while previous transition is still in progress", t, n, i, this.state);
              }
            }), t.exports = e;
          }, function (t, n, i) {
            function e(t) {
              return r(this || {}, t);
            }

            function s() {
              var t, n;
              "function" == typeof arguments[0] ? (t = arguments[0], n = arguments[1] || {}) : (t = function () {
                this._fsm.apply(this, arguments);
              }, n = arguments[0] || {});
              var i = new u(n, e);
              return o(t.prototype, i), t.prototype._fsm.config = i, t;
            }

            function r(t, n) {
              return o(t, new u(n, e)), t._fsm(), t;
            }

            function o(t, n) {
              if ("object" != typeof t || Array.isArray(t)) throw Error("StateMachine can only be applied to objects");
              c.build(t, n), Object.defineProperties(t, d), a(t, l), a(t, n.methods), n.allTransitions().forEach(function (n) {
                t[f(n)] = function () {
                  return this._fsm.fire(n, [].slice.call(arguments));
                };
              }), t._fsm = function () {
                this._fsm = new h(this, n), this._fsm.init(arguments);
              };
            }

            var a = i(0),
                f = i(2),
                c = i(1),
                u = i(3),
                h = i(4),
                l = {
              is: function (t) {
                return this._fsm.is(t);
              },
              can: function (t) {
                return this._fsm.can(t);
              },
              cannot: function (t) {
                return this._fsm.cannot(t);
              },
              observe: function () {
                return this._fsm.observe(arguments);
              },
              transitions: function () {
                return this._fsm.transitions();
              },
              allTransitions: function () {
                return this._fsm.allTransitions();
              },
              allStates: function () {
                return this._fsm.allStates();
              },
              onInvalidTransition: function (t, n, i) {
                return this._fsm.onInvalidTransition(t, n, i);
              },
              onPendingTransition: function (t, n, i) {
                return this._fsm.onPendingTransition(t, n, i);
              }
            },
                d = {
              state: {
                configurable: !1,
                enumerable: !0,
                get: function () {
                  return this._fsm.state;
                },
                set: function (t) {
                  throw Error("use transitions to change state");
                }
              }
            };
            e.version = "3.0.1", e.factory = s, e.apply = r, e.defaults = {
              wildcard: "*",
              init: {
                name: "init",
                from: "none"
              }
            }, t.exports = e;
          }, function (t, n, i) {
            t.exports = function (t, n, i, e, s) {
              this.message = t, this.transition = n, this.from = i, this.to = e, this.current = s;
            };
          }]);
        }); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
        module.exports.StateMachine;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/StateEvents.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c4752RVQnxJV4Cy5bI4v5eJ", "StateEvents", undefined);

      const StateEvents = exports('default', {
        LOAD_TARGET_FPS: 'LOAD_TARGET_FPS',
        CHANGE_TARGET_FPS: 'CHANGE_TARGET_FPS',
        START_RECORD: 'START_RECORD',
        STOP_RECORD: 'STOP_RECORD',
        CAPTURE_SCREEN: 'CAPTURE_SCREEN',
        UPLOAD_RECORD: 'UPLOAD_RECORD',
        DELETE_RECORD: 'DELETE_RECORD',
        REFRESH_SESSION_LIST: 'REFRESH_SESSION_LIST'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/stateMonitorGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './eEventEmitter.ts', './eGroup.ts', './StateEvents.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, eEventEmitter, eGroup, StateEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
    }, function (module) {
      eEventEmitter = module.eEventEmitter;
    }, function (module) {
      eGroup = module.eGroup;
    }, function (module) {
      StateEvents = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "78e26XRPTdHKqHZrb61Mi9H", "stateMonitorGroup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let StateMonitorGroup = exports('StateMonitorGroup', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), ccclass(_class = (_class2 = class StateMonitorGroup extends eGroup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "targetFps", _descriptor, this);

          _initializerDefineProperty(this, "fpsGraph", _descriptor2, this);

          _initializerDefineProperty(this, "recordToggle", _descriptor3, this);

          _initializerDefineProperty(this, "captureButton", _descriptor4, this);

          _initializerDefineProperty(this, "sessionList", _descriptor5, this);

          this.isRecording = false;
        }

        onLoad() {
          this.initEvents();
        }

        initEvents() {
          eEventEmitter.getInstance().registerEvent(StateEvents.START_RECORD, this.onRecording.bind(this));
          eEventEmitter.getInstance().registerEvent(StateEvents.STOP_RECORD, this.onIdle.bind(this));
        }

        changeVisible() {
          super.changeVisible();
          this.changeVisibleByMonitorState();
        }

        get isGroupVisible() {
          return this.recordToggle.active;
        }

        changeVisibleByMonitorState() {
          if (!this.isGroupVisible) {
            return;
          }

          this.targetFps.active = !this.isRecording;
          this.sessionList.active = !this.isRecording;
          this.fpsGraph.active = this.isRecording;
          this.captureButton.active = this.isRecording;
        }

        onIdle() {
          this.isRecording = false;
          this.changeVisibleByMonitorState();
        }

        onRecording() {
          this.isRecording = true;
          this.changeVisibleByMonitorState();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetFps", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fpsGraph", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "recordToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "captureButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sessionList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/targetFpsSlider.ts", ['cc', './eSlider.ts', './monitorDataStore.ts'], function (exports) {
  var cclegacy, _decorator, eSlider, MonitorDataStore;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      eSlider = module.eSlider;
    }, function (module) {
      MonitorDataStore = module.MonitorDataStore;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "f4868b09m1Hz5fAWgWVXcX7", "targetFpsSlider", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const MAX_TARGET_FPS = 60;
      let TargetFpsSlider = exports('default', ccclass(_class = class TargetFpsSlider extends eSlider {
        get recordConfig() {
          return MonitorDataStore.instance.recordData.recordConfig;
        }

        onLoad() {
          this.init('Target FPS', this.onChangeTargetFps.bind(this), MAX_TARGET_FPS);
          super.onLoad();
          this.onLoadTargetFps();
        }

        onChangeTargetFps(value) {
          this.recordConfig.targetFPS = value;
          MonitorDataStore.instance.saveRecordConfig();
        }

        onLoadTargetFps() {
          const targetFps = this.recordConfig.targetFPS;
          this.slider.progress = this.calculateProgress(targetFps);
          this.editBox.string = "" + targetFps;
        }

      }) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TurtleSkillEffect1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "8da29eYmzRMTa6t1tr4MQ+u", "TurtleSkillEffect1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TurtleSkillEffect1975 = exports('TurtleSkillEffect1975', (_dec = ccclass('TurtleSkillEffect1975'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = class TurtleSkillEffect1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "turtleSpine", _descriptor, this);
        }

        playAnimation(data, callBack = null) {
          this.turtleSpine.node.angle = data.fishAngle;
          this.turtleSpine.node.setScale(data.fishScale);
          this.initTurtleAnimation(data.fishAnimationInfo);
          this.runAnimationSequence(data, callBack);
        }

        initTurtleAnimation(animationInfo) {
          const {
            turtle,
            item1,
            item2,
            item3,
            screen
          } = animationInfo;
          let turtleAnimation = this.turtleSpine.setAnimation(0, turtle.name, true);
          turtleAnimation.trackTime = turtle.currentTime;
          let item1Animation = this.turtleSpine.setAnimation(1, item1.name, false);
          item1Animation.trackTime = item1.currentTime;
          let item2Animation = this.turtleSpine.setAnimation(2, item2.name, false);
          item2Animation.trackTime = item2.currentTime;
          let item3Animation = this.turtleSpine.setAnimation(3, item3.name, false);
          item3Animation.trackTime = item3.currentTime;
          let screenAnimation = this.turtleSpine.setAnimation(4, screen.name, false);
          screenAnimation.trackTime = screen.currentTime;
        }

        runAnimationSequence(data, callBack) {}

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "turtleSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TurtleSlotMachine1975.ts", ['cc', './gfEventEmitter.ts', './gfBaseEvents.ts', './SpineFish1975.ts', './gfUtilities.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './Config1975.ts', './FishManager1975.ts', './gfActionHelper.ts', './NodePoolConfig1975.ts', './gfEffectLayer.ts', './DataStore1975.ts', './EventsCode1975.ts'], function (exports) {
  var cclegacy, tween, Color, Tween, UITransform, v3, _decorator, gfEventEmitter, gfBaseEvents, SpineFish1975, SetZIndex, getPositionInOtherNode, randomBetween, gfBaseConfig, gfReferenceManager, Config1975, FishManager1975, v3f, stopAllActions, NodePoolConfig1975, gfEffectLayer, DataStore1975, EventsCode1975;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      Color = module.Color;
      Tween = module.Tween;
      UITransform = module.UITransform;
      v3 = module.v3;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      SpineFish1975 = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      getPositionInOtherNode = module.getPositionInOtherNode;
      randomBetween = module.randomBetween;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      FishManager1975 = module.default;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      NodePoolConfig1975 = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      DataStore1975 = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a8d65DsnnNCgoeEjavITOnZ", "TurtleSlotMachine1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const TurtleAnimationTrack = {
        Fish: 0,
        Item1: 1,
        Item2: 2,
        Item3: 3,
        Screen: 4
      };
      const ItemAnimation = {
        RollSlow: "slot{0}_roll_slow_mix",
        Idle: "slot{0}_item{1}_idle_mix",
        Spin: "slot{0}_item{1}_spin_mix",
        Win: "slot{0}_item{1}_result_mix",
        TransformCoin: "slot{0}_item{1}_coin_mix"
      };
      const ScreenAnimationName = {
        Idle: "screen_idle_mix",
        Spin: "screen_spin_mix",
        Match: "match_symbol_mix"
      };
      const ItemAnimationID = {
        Coin: 1,
        Bomb: 2,
        Vortex: 3,
        Drill: 4
      };
      const EVENT_NAME = {
        SPEED_UP: "speed_up",
        SLOW_DOWN: "slow_down"
      };
      let TurtleSlotMachine1975 = exports('TurtleSlotMachine1975', (_dec = ccclass('TurtleSlotMachine1975'), _dec(_class = class TurtleSlotMachine1975 extends SpineFish1975 {
        constructor(...args) {
          super(...args);
          this.mapItemIDBySkillID = new Map();
          this.isHit = false;
          this.tweenTimingResetColor = null;
          this.arraySlotFixColor = ["slot", "fish44_item_2", "fish44_item_3", "fish44_item_4", "fish44_item_5", "item_gold5", "fish44_item_6", "fish44_item_7", "fish44_item_8", "fish44_item_9", "item_gold9", "fish44_item_10", "fish44_item_11", "fish44_item_12", "fish44_item_13", "item_gold13", "slot_f", "slot_f2", "slot_f3"];
          this.resultData = null;
        }

        initFishData(data) {
          this.initFishByConfig();
          super.initFishData(data);
          this.initMapItemIDBySkillID();
          this.resetAllActions();
          this.initAnimation();
          this.fishAnim.timeScale = this._timeScale;
        }

        calculateTimeSpent(TimeFreeze = 0) {
          let timeSpent = (DataStore1975.instance.getTime() - this._buildTick - TimeFreeze / 2) / 1000;
          timeSpent += timeSpent / 6.6 * 5.5;
          return timeSpent;
        }

        initFishByConfig() {
          const {
            TURTLE_SLOT_MACHINE_CONFIG
          } = NodePoolConfig1975.instance;
          this.HIT_COLOR = TURTLE_SLOT_MACHINE_CONFIG.hitColor;
          this.speed = TURTLE_SLOT_MACHINE_CONFIG.speed;
          this._skipFlipY = TURTLE_SLOT_MACHINE_CONFIG.skipFlipY;
          SetZIndex(this.node, TURTLE_SLOT_MACHINE_CONFIG.zIndex);
          this._skipRotate = TURTLE_SLOT_MACHINE_CONFIG.skipRotate;
          this._targetPoint = TURTLE_SLOT_MACHINE_CONFIG.targetPoint;
          this._timeScale = TURTLE_SLOT_MACHINE_CONFIG.timeScale || 1;
          this.node.setScale(v3f((TURTLE_SLOT_MACHINE_CONFIG == null ? void 0 : TURTLE_SLOT_MACHINE_CONFIG.ScaleSize) || 1));
        }

        initMapItemIDBySkillID() {
          this.mapItemIDBySkillID.set(Config1975.instance.SKILL_CONFIG.FISH_BOOM.SkillID, ItemAnimationID.Bomb);
          this.mapItemIDBySkillID.set(Config1975.instance.SKILL_CONFIG.VORTEX.SkillID, ItemAnimationID.Vortex);
          this.mapItemIDBySkillID.set(Config1975.instance.SKILL_CONFIG.DRILL.SkillID, ItemAnimationID.Drill);
        }

        initAnimation() {
          this.fishAnim.setAnimation(TurtleAnimationTrack.Fish, "idle", true);
          this.fishAnim.setAnimation(TurtleAnimationTrack.Screen, ScreenAnimationName.Idle, true);
          this.playRollSlowItem(TurtleAnimationTrack.Item1, 1.6);
          this.playRollSlowItem(TurtleAnimationTrack.Item2, 0);
          this.playRollSlowItem(TurtleAnimationTrack.Item3, 3.2);
          this.fishAnim.setEventListener((trackEntry, event) => {
            if (trackEntry.trackIndex === TurtleAnimationTrack.Fish) {
              if (event.data.name === EVENT_NAME.SPEED_UP) {
                const baseSpeed = 1;
                const speedChange = 4;
                tween(this.node).to(1, null, {
                  onUpdate: (_target, ratio) => {
                    const curSpeed = baseSpeed - (baseSpeed - speedChange) * ratio;
                    this.moveAction.setSpeed(curSpeed);
                  }
                }).start();
              } else if (event.data.name === EVENT_NAME.SLOW_DOWN) {
                const baseSpeed = 4;
                const speedChange = 1;
                tween(this.node).to(1, null, {
                  onUpdate: (_target, ratio) => {
                    const curSpeed = baseSpeed - (baseSpeed - speedChange) * ratio;
                    this.moveAction.setSpeed(curSpeed);
                  }
                }).start();
              }
            }
          });
        }

        tweenHitColor() {
          var _this$tweenTimingRese;

          if (!this.fishAnim || !this.fishAnim.node) {
            return;
          }

          if (this.isHit == false) {
            this.isHit = true;
            const currentColor = this.fishAnim.color.g > 133 ? 133 : this.fishAnim.color.g;
            const targetColor = this.HIT_COLOR.g;
            stopAllActions(this.fishAnim.color);
            const listSlots = this.fishAnim._skeleton.slots;
            tween(this.fishAnim.color).to(0.15, {
              a: 255
            }, {
              progress: (start, end, _current, ratio) => {
                if (this.HIT_COLOR) {
                  const newColor = new Color(this.HIT_COLOR.r, currentColor - (currentColor - targetColor) * ratio, currentColor - (currentColor - targetColor) * ratio);
                  listSlots.forEach(slot => {
                    if (this.validateSlotChangeColor(slot.data.name)) {
                      slot.color.r = newColor.x;
                      slot.color.g = newColor.y;
                      slot.color.b = newColor.z;
                    }
                  });
                }

                return start + (end - start) * ratio;
              }
            }).start();
          }

          (_this$tweenTimingRese = this.tweenTimingResetColor) == null ? void 0 : _this$tweenTimingRese.stop();
          this.tweenTimingResetColor = tween(this.fishAnim.color).delay(0.45).call(() => {
            if (this._isFreezed) {
              return;
            }

            this.tweenResetColor();
            this.isHit = false;
          }).start();
        }

        validateSlotChangeColor(slotName) {
          if (this.arraySlotFixColor.includes(slotName)) {
            return false;
          }

          return true;
        }

        tweenResetColor() {
          if (!this.fishAnim || !this.fishAnim.node) {
            return;
          }

          const currentColor = this.HIT_COLOR;
          const listSlots = this.fishAnim._skeleton.slots;
          tween(this.fishAnim.color).to(1, {
            a: 255
          }, {
            progress: (start, end, _current, ratio) => {
              if (this.fishAnim) {
                const red = currentColor.r + (this.NORMAL_COLOR.r - currentColor.r) * ratio;
                const green = currentColor.g + (this.NORMAL_COLOR.g - currentColor.g) * ratio;
                const blue = currentColor.b + (this.NORMAL_COLOR.b - currentColor.b) * ratio;
                const newColor = new Color(red, green, blue);
                listSlots.forEach(slot => {
                  if (this.validateSlotChangeColor(slot.data.name)) {
                    slot.color.r = newColor.x;
                    slot.color.g = newColor.y;
                    slot.color.b = newColor.z;
                  }
                });
              }

              return start + (end - start) * ratio;
            }
          }).call(() => {
            this.fishAnim.color = this.NORMAL_COLOR;
          }).start();
        }

        resetColor() {
          stopAllActions(this.fishAnim.color);
          this.tweenResetColor();
        }

        playRollSlowItem(trackIndex, animationTime) {
          let animationName = ItemAnimation.RollSlow.replace('{0}', trackIndex.toString());
          let track = this.fishAnim.setAnimation(trackIndex, animationName, true);
          track.trackTime = animationTime;
        }

        onCatch(data) {
          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.handleFakeFishes(data);
          this.stopAllActions();
          this.resetColor();
          this.setDie(true);
          this.onPlayEffectWinInCatchFish(data);
        }

        handleFakeFishes(data) {
          const {
            skillInfo
          } = data;
          const isValidSkill = this.isValidSkill(skillInfo);

          if (isValidSkill) {
            const turtleSkills = skillInfo.filter(skill => skill.IsActive).filter(skill => this.isTurtleSkill(skill.SkillID));

            for (const skill of turtleSkills) {
              const {
                ListFish
              } = skill;
              FishManager1975.instance.processFishesKilledBySkill(ListFish);
            }
          }
        }

        isTurtleSkill(skillID) {
          return this.mapItemIDBySkillID.has(skillID);
        }

        onPlayEffectWinInCatchFish(data) {
          data.isSkill = true;
          this.resultData = data;
          this.playSlotMachine(data);
        }

        playSlotMachine(data) {
          const {
            listItem
          } = data; // SOUND.SOUND_SOUND_TURTLE_REEL

          tween(this.node).call(() => {
            this.fishAnim.setAnimation(TurtleAnimationTrack.Screen, ScreenAnimationName.Spin, false);
          }).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL);
            this.animateSpinItem(TurtleAnimationTrack.Item2, this.mapItemIDBySkillID.get(listItem[1]));
          }).delay(0.1).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL);
            this.animateSpinItem(TurtleAnimationTrack.Item1, this.mapItemIDBySkillID.get(listItem[0]));
          }).delay(0.1).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL);
            this.animateSpinItem(TurtleAnimationTrack.Item3, this.mapItemIDBySkillID.get(listItem[2]));
          }).delay(1).call(() => {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_SOUND_TURTLE_REEL_STOP);
            this.collectResultSlotMachine(data);
          }).start();
        }

        animateSpinItem(itemIndex, itemID) {
          let animationName = ItemAnimation.Spin.replace('{0}', itemIndex.toString()).replace('{1}', itemID.toString());
          this.fishAnim.setAnimation(itemIndex, animationName, false);
        }

        collectResultSlotMachine(data) {
          const {
            skillInfo,
            listItem,
            DeskStation
          } = data;
          const turtleSkills = skillInfo.filter(skill => skill.IsActive).filter(skill => this.isTurtleSkill(skill.SkillID));
          Tween.stopAllByTarget(this.node);
          var tweenCollectResult = tween(this.node);

          if (turtleSkills.length > 0) {
            for (const skill of turtleSkills) {
              tweenCollectResult.then(this.playEffectMatchSkill(skill.SkillID, DeskStation));
            }
          } else {
            tweenCollectResult.then(this.playEffectTransformCoin(listItem));
          }

          tweenCollectResult.call(() => {
            this.slotMachineCompleted(data);
          });
          tweenCollectResult.start();
        }

        slotMachineCompleted(data) {
          const {
            skillInfo
          } = data;
          const isValidSkill = this.isValidSkill(skillInfo);
          var tweenSkill = tween(this.node);

          if (isValidSkill) {
            tweenSkill.call(() => {
              this.processSkill(data);
            });
            tweenSkill.call(() => {
              this.onDie();
            });
          } else {
            // show coin
            tweenSkill.then(this.playWinCoin());
          }

          tweenSkill.start();
        }

        playEffectMatchSkill(skillID, DeskStation = -1) {
          var tweenSkill = tween(this.node);
          const itemID = this.mapItemIDBySkillID.get(skillID);
          const timeScreenMatch = this.fishAnim.findAnimation(ScreenAnimationName.Match).duration;
          const timeShowItem = this.fishAnim.findAnimation(ItemAnimation.Win.replace('{0}', "1").replace('{1}', "3")).duration * 3;
          tweenSkill.call(() => {
            this.fishAnim.setAnimation(TurtleAnimationTrack.Screen, ScreenAnimationName.Match, false);
          });
          tweenSkill.delay(timeScreenMatch);
          tweenSkill.call(() => {
            this.fishAnim.setAnimation(TurtleAnimationTrack.Screen, ScreenAnimationName.Idle, true);
            const selfDesk = DataStore1975.instance.getSelfDeskStation();

            if (selfDesk === DeskStation) {
              gfEventEmitter.instance.emit(EventsCode1975.EFFECT_LAYER.PLAY_WARNING_SKILL, skillID);
            }

            this.fishAnim.setAnimation(TurtleAnimationTrack.Item1, ItemAnimation.Win.replace('{0}', "1").replace('{1}', itemID.toString()), true);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item2, ItemAnimation.Win.replace('{0}', "2").replace('{1}', itemID.toString()), true);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item3, ItemAnimation.Win.replace('{0}', "3").replace('{1}', itemID.toString()), true);
          });
          tweenSkill.delay(timeShowItem);
          tweenSkill.call(() => {
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item1, ItemAnimation.Idle.replace('{0}', "1").replace('{1}', itemID.toString()), true);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item2, ItemAnimation.Idle.replace('{0}', "2").replace('{1}', itemID.toString()), true);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item3, ItemAnimation.Idle.replace('{0}', "3").replace('{1}', itemID.toString()), true);
          });
          return tweenSkill;
        }

        playEffectTransformCoin(listItem) {
          var tweenSkill = tween(this.node);
          const item1AnimationName = ItemAnimation.TransformCoin.replace('{0}', "1").replace('{1}', this.mapItemIDBySkillID.get(listItem[0]).toString());
          const item2AnimationName = ItemAnimation.TransformCoin.replace('{0}', "2").replace('{1}', this.mapItemIDBySkillID.get(listItem[1]).toString());
          const item3AnimationName = ItemAnimation.TransformCoin.replace('{0}', "3").replace('{1}', this.mapItemIDBySkillID.get(listItem[2]).toString());
          var timeTransformCoin = this.fishAnim.findAnimation(item1AnimationName).duration;
          tweenSkill.delay(1);
          tweenSkill.call(() => {
            this.fishAnim.setAnimation(TurtleAnimationTrack.Screen, ScreenAnimationName.Idle, true);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item1, item1AnimationName, false);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item2, item2AnimationName, false);
            this.fishAnim.setAnimation(TurtleAnimationTrack.Item3, item3AnimationName, false);
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_TURTLE_GOLD);
          });
          tweenSkill.delay(timeTransformCoin);
          return tweenSkill;
        }

        playWinCoin() {
          var tweenSkill = tween(this.node);
          tweenSkill.call(() => {
            this.processSkill(this.resultData);
          });
          tweenSkill.delay(0.25);
          tweenSkill.call(() => {
            this.playEffectParticleCoin(this.resultData);
          });
          tweenSkill.call(() => {
            this.onDie();
          });
          return tweenSkill;
        }

        playEffectParticleCoin(data) {
          const effectLayerLayer = gfReferenceManager.instance.getEffectLayer();
          const effectLayerComp = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          const dataParticle = {
            DeskStation: data.DeskStation,
            beganPos: getPositionInOtherNode(effectLayerLayer, this.node),
            GoldReward: data.GoldReward
          };
          effectLayerComp.playParticleEffect(dataParticle);
        }

        processSkill(data) {
          const isValidSkill = this.isValidSkill(data.skillInfo);

          if (isValidSkill) {
            this.playSkillEffects(data.skillInfo, data);
          } else {
            data.fishKind = this._FishKind;
            data.fishPos = this.getLockPositionByWorldSpace();
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, data, true);
          }
        }

        playSkillEffects(skillInfo, data) {
          skillInfo.forEach(skillData => {
            const {
              SkillID,
              IsActive
            } = skillData;
            Object.assign(skillData, {
              DeskStation: data.DeskStation,
              BulletMultiple: data.BulletMultiple,
              FishKind: this._FishKind,
              isSkill: data.isSkill,
              mainPoint: this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0)),
              fishAngle: this.node.angle,
              fishScale: this.node.getScale(),
              fishAnimationInfo: this.collectTurtleAnimationInfo()
            });

            if (IsActive && SkillID) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_SPECIAL_FISH, skillData);
            }
          });
        }

        collectTurtleAnimationInfo() {
          const tracks = this.fishAnim.getState().tracks;
          const animationInfo = {
            turtle: {
              name: tracks[TurtleAnimationTrack.Fish].animation.name,
              currentTime: tracks[TurtleAnimationTrack.Fish].nextAnimationLast
            },
            item1: {
              name: tracks[TurtleAnimationTrack.Item1].animation.name,
              currentTime: tracks[TurtleAnimationTrack.Item1].nextAnimationLast
            },
            item2: {
              name: tracks[TurtleAnimationTrack.Item2].animation.name,
              currentTime: tracks[TurtleAnimationTrack.Item2].nextAnimationLast
            },
            item3: {
              name: tracks[TurtleAnimationTrack.Item3].animation.name,
              currentTime: tracks[TurtleAnimationTrack.Item3].nextAnimationLast
            },
            screen: {
              name: tracks[TurtleAnimationTrack.Screen].animation.name,
              currentTime: tracks[TurtleAnimationTrack.Screen].nextAnimationLast
            }
          };
          return animationInfo;
        }

        isValidSkill(skillArray) {
          if (!skillArray || skillArray.length === 0) {
            return false;
          }

          return skillArray.some(skill => skill.IsActive);
        }

        onDie() {
          this.setDie(true);
          this.resultData = null;
          this.resetColor();
          this.stopAllActions();
          this.node.removeFromParent();
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
        }

        resetAllActions() {
          this.unscheduleAllCallbacks();
        }

        getRandomPositionOutScreen() {
          const {
            SceneBox
          } = gfBaseConfig.instance;
          const x = [SceneBox.Left, SceneBox.Right][randomBetween(0, 1)];
          const y = randomBetween(SceneBox.Bottom + 100, SceneBox.Top - 100);
          const nodeFishLayer = gfReferenceManager.instance.getNodeFishLayer();
          return nodeFishLayer.getComponent(UITransform).convertToNodeSpaceAR(nodeFishLayer.getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpdatePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, ProgressBar, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d896fFhBk9A57gLMvEj3KZ7", "UpdatePanel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UpdatePanel = exports('UpdatePanel', (_dec = ccclass('UpdatePanel'), _dec2 = property(Label), _dec3 = property(ProgressBar), _dec(_class = (_class2 = class UpdatePanel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "info", _descriptor, this);

          _initializerDefineProperty(this, "byteProgress", _descriptor2, this);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "info", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "byteProgress", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpdatePanelV2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, ProgressBar, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "871359SSeZGnJ8cMWF7lP3A", "UpdatePanelV2", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UpdatePanel = exports('UpdatePanel', (_dec = ccclass('UpdatePanel'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: ProgressBar
      }), _dec(_class = (_class2 = class UpdatePanel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "display", _descriptor, this);

          _initializerDefineProperty(this, "updateProgress", _descriptor2, this);
        }

        onLoad() {
          this.node.on('HOT_UPDATE_PROGRESS', progress => {
            this.updateProgress.progress = progress.byte;
          });
          this.node.on('HOT_UPDATE_START', () => {
            this.display.active = true;
          });
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "display", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "updateProgress", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utilities1975.ts", ['cc', './Config1975.ts'], function (exports) {
  var cclegacy, sys, Config1975;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      Config1975 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fc508PHrulMtbXjd4O+ZyMv", "Utilities1975", undefined);

      const addHtmlCursor = exports('addHtmlCursor', function () {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          let css = document.createElement('style');
          css.type = 'text/css';
          css.id = 'cursorId';
          let styles = 'canvas { color: #555;cursor: url(data:image/cur;base64,' + Config1975.instance.CursorBase64 + ') 48 61, default; background:#F4F4F4; display: block;  text-align: center;}';
          if (css['styleSheet']) css['styleSheet'].cssText = styles;else css.appendChild(document.createTextNode(styles));
          document.getElementsByTagName("head")[0].appendChild(css);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['cc', './Big.mjs_cjs=&original=2.js', './Big2.js'], function (exports) {
  var cclegacy, Vec3, UITransform, error, UIRenderer, tween, UIOpacity, Color, bezier, director, v3, native, sys, log, assetManager, Texture2D, SpriteFrame, Sprite, isValid, Node, view, macro, SpriteAtlas, warn, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      error = module.error;
      UIRenderer = module.UIRenderer;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      bezier = module.bezier;
      director = module.director;
      v3 = module.v3;
      native = module.native;
      sys = module.sys;
      log = module.log;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      isValid = module.isValid;
      Node = module.Node;
      view = module.view;
      macro = module.macro;
      SpriteAtlas = module.SpriteAtlas;
      warn = module.warn;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      exports({
        MD5: MD5,
        addZero: addZero,
        changeParent: changeParent,
        convertAssetArrayToObject: convertAssetArrayToObject,
        convertPayLine: convertPayLine,
        convertPayLineAllways: convertPayLineAllways,
        customDateFormat: customDateFormat,
        disableButton: disableButton,
        fadeIn: fadeIn,
        fadeInDeep: fadeInDeep,
        fadeOut: fadeOut,
        fadeOutDeep: fadeOutDeep,
        fadeTo: fadeTo,
        fadeToAllChild: fadeToAllChild,
        findKeyByValue: findKeyByValue,
        formatCoin: formatCoin,
        formatMoney: formatMoney,
        formatUserName: formatUserName,
        formatWalletMoney: formatWalletMoney,
        getAngleTwoPoint: getAngleTwoPoint,
        getAnimationsName: getAnimationsName,
        getDecimalCount: getDecimalCount,
        getDefaultManifest: getDefaultManifest,
        getDistance: getDistance,
        getFBAvatar: getFBAvatar,
        getLeftTime: getLeftTime,
        getOpacity: getOpacity,
        getPostionInOtherNode: getPostionInOtherNode,
        getRandomElement: getRandomElement,
        getRandomInt: getRandomInt,
        getText: getText,
        getTime: getTime,
        getUtilConfig: getUtilConfig,
        loadAvatarFacebook: loadAvatarFacebook,
        mapObjectKey: mapObjectKey,
        pickOutRandomElement: pickOutRandomElement,
        randRange: randRange,
        registerLoadHowl: registerLoadHowl,
        removeDuplicates: removeDuplicates,
        removeElementByValue: removeElementByValue,
        replaceElement: replaceElement,
        roundDecimal: roundDecimal,
        secondsToHHMMSS: secondsToHHMMSS,
        setDeviceOrientation: setDeviceOrientation,
        setIndexZ: setIndexZ,
        setLayerAlls: setLayerAlls,
        setLayerForAllChildrens: setLayerForAllChildrens,
        setMixAllAnims: setMixAllAnims,
        setOpacity: setOpacity,
        setOpacityDeep: setOpacityDeep,
        setRenderColor: setRenderColor,
        shaking: shaking,
        shuffleArray: shuffleArray,
        startGameFromEvent: startGameFromEvent,
        toFixed: toFixed,
        toLocalClockTime: toLocalClockTime,
        toLocalTime: toLocalTime,
        toLocalTimeHHMM: toLocalTimeHHMM,
        tweenBezier2DTo: tweenBezier2DTo,
        tweenMoney: tweenMoney,
        tweenMoney2: tweenMoney2,
        tweenMoneyByCurrency: tweenMoneyByCurrency,
        tweenWalletMoney: tweenWalletMoney,
        unregisterLoadHowl: unregisterLoadHowl,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "61e2aeL1yJB6r+n4NcvBChY", "utils", undefined);

      const lodash = globalThis._;
      const UTIL_CONFIG = exports('UTIL_CONFIG', {
        FORMAT_MONEY_EVENT: false,
        CURRENCY_CONFIG: null
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      function getUtilConfig() {
        return UTIL_CONFIG;
      }

      function getDecimalCount(number, min = 0, max = 0) {
        const converted = number.toString();

        if (converted.includes('.')) {
          let count = converted.split('.')[1].length;
          count = Math.max(count, min);

          if (max && count > max) {
            count = max;
          }

          return count;
        }

        return min || 0;
      }

      function formatCoin(amount, decimalCount = 0, decimal = ".", thousands = ",") {
        if (amount < 0) return toFixed(0, decimalCount);
        const splitStr = toFixed(amount, decimalCount).split(".");

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          decimal = ',';
          thousands = '.';
        }

        const decimalStr = splitStr[1] || "";
        const integerArr = splitStr[0].split("");
        let index = integerArr.length;

        while ((index -= 3) > 0) {
          integerArr.splice(index, 0, thousands);
        }

        if (decimalStr) {
          integerArr.push(decimal, decimalStr);
        }

        return integerArr.join("");
      }

      function findKeyByValue(object, value) {
        return Object.keys(object).find(key => object[key] == value);
      }

      function customDateFormat(date, formatString) {
        var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
        YY = ((YYYY = date.getFullYear()) + "").slice(-2);
        MM = (M = date.getMonth() + 1) < 10 ? '0' + M : M;
        MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
        DD = (D = date.getDate()) < 10 ? '0' + D : D;
        DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][date.getDay()]).substring(0, 3);
        th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';
        formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
        h = hhh = date.getHours();
        if (h == 0) h = 24;
        if (h > 12) h -= 12;
        hh = h < 10 ? '0' + h : h;
        hhhh = hhh < 10 ? '0' + hhh : hhh;
        AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
        mm = (m = date.getMinutes()) < 10 ? '0' + m : m;
        ss = (s = date.getSeconds()) < 10 ? '0' + s : s;
        return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
      }

      function toLocalTimeHHMM(ts) {
        let timestamp = new Date(parseInt(ts));
        let hour = timestamp.getHours();
        let minutes = timestamp.getMinutes();
        let localTime = (hour < 10 ? "0" : "") + hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function toLocalClockTime(ts) {
        let timestamp = new Date(parseInt(ts));
        let hour = timestamp.getHours();
        let minutes = timestamp.getMinutes();
        let localTime = hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function formatUserName(userName) {
        let correctUserName = userName.trim();

        if (correctUserName.length > 18) {
          correctUserName = correctUserName.slice(0, 15) + '...';
        }

        return correctUserName;
      }

      function secondsToHHMMSS(secs) {
        if (secs == 0) return "00:00";
        let sec_num = parseInt(secs, 10);
        let hours = Math.floor(sec_num / 3600);
        let minutes = Math.floor(sec_num / 60) % 60;
        let seconds = sec_num % 60;
        return [hours, minutes, seconds].map(v => v < 10 ? "0" + v : v).filter((v, i) => v !== "00" || i > 0).join(":");
      }

      function toLocalTime(ts, format) {
        return customDateFormat(new Date(ts * 1000), format);
      }

      function randRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function toFixed(num, fixed = 0) {
        try {
          _cjsExports.RM = 0;
          if (isNaN(+num) || typeof num === "object") num = 0;
          return _cjsExports(num).toFixed(fixed);
        } catch (e) {}

        return "0";
      }

      function getPostionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        let pos = new Vec3(0, 0, 0);
        const targetNodeComponent = targetNode.parent.getComponent(UITransform);
        const spaceNodeComponent = spaceNode.getComponent(UITransform);

        if (!targetNodeComponent) {
          targetNode.parent.addComponent(UITransform);
        }

        if (!spaceNodeComponent) {
          spaceNode.addComponent(UITransform);
        }

        pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
      }

      function getSpriteNameFromAtlas(uuid) {
        const mainUUID = uuid.split('@')[0];
        const mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset) {
          const keys = Object.keys(mainAsset.spriteFrames);

          for (let i = 0; i < keys.length; i++) {
            if (mainAsset.spriteFrames[keys[i]]._uuid == uuid) {
              return keys[i];
            }
          }
        }

        return '';
      }

      function isSpriteFrameFromAtlas(uuid) {
        const mainUUID = uuid.split('@')[0];
        const mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset && mainAsset instanceof SpriteAtlas) {
          return true;
        }

        return false;
      }

      function convertAssetArrayToObject(arr) {
        let obj = {};

        for (let i = 0; i < arr.length; i++) {
          if (arr[i]._name == "" && arr[i].data) {
            arr[i]._name = arr[i].data._name;
          }

          if (arr[i]) {
            let uuid = arr[i]._uuid ? arr[i]._uuid : arr[i].uuid;
            const name = uuid && isSpriteFrameFromAtlas(uuid) ? getSpriteNameFromAtlas(uuid) : arr[i]._name;
            obj[name] = arr[i];
          }
        }

        return obj;
      }

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime = 0.15) {
        const animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          error("spine have to have many animations");
          return;
        }

        for (let i = 0; i < animNames.length; i++) {
          for (let j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      function convertPayLineAllways(payLines = [], multiplier = 1, betDenom) {
        const listNewPL = [];

        for (let i = 0; i < payLines.length; i++) {
          if (payLines[i].includes(';')) {
            const dataSplit = payLines[i].split(';');

            if (dataSplit.length !== 0) {
              listNewPL.push({
                symbolId: dataSplit[0],
                totalWinAmount: dataSplit[1],
                symbolCount: dataSplit[2],
                combination: dataSplit[3],
                payableSymbol: dataSplit[4],
                betDenom,
                multiplier
              });
            } else {
              error("payLines is not right AKTV formatted");
            }
          }
        }

        return listNewPL;
      }

      function convertPayLine(payLines) {
        const listNewPL = [];

        for (let i = 0; i < payLines.length; i++) {
          const dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              payLineSymbol: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function formatWalletMoney(num, digits = 2) {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          return formatWalletMoneyByCurrency(num, digits);
        }

        return formatWallet(num, digits);
      }

      function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          if (isNaN(decimalCount) || decimalCount === null) decimalCount = UTIL_CONFIG.CURRENCY_CONFIG.DECIMAL_COUNT;
          return formatMoneyByCurrency(amount, decimalCount, decimal, thousands);
        }

        return formatCoin(amount, decimalCount || 0, decimal, thousands);
      }

      function formatMoneyByCurrency(amount, decimalCount = 0, decimal = ".", thousands = ",") {
        const {
          CENT_UNIT,
          CENT_SUFFIX,
          CURRENCY_PREFIX,
          DECIMAL_COUNT
        } = UTIL_CONFIG.CURRENCY_CONFIG;
        let prefix = CURRENCY_PREFIX || "";
        let suffix = "";

        if (isNaN(decimalCount) || decimalCount === null) {
          decimalCount = decimalCount || DECIMAL_COUNT;
        }

        if (isNaN(amount) || amount === null) return "";

        if (CENT_UNIT && _cjsExports(amount).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          amount = _cjsExports(amount || 0).times(100).toNumber();
        }

        return prefix + formatCoin(amount, decimalCount || 0, decimal, thousands) + suffix;
      }

      function formatWalletMoneyByCurrency(num, digits) {
        const {
          CENT_UNIT,
          CENT_SUFFIX,
          CURRENCY_PREFIX,
          DECIMAL_COUNT,
          TRIM_ZERO
        } = UTIL_CONFIG.CURRENCY_CONFIG;
        let prefix = CURRENCY_PREFIX || "";
        let suffix = "";

        if (isNaN(digits) || digits === null) {
          digits = DECIMAL_COUNT || 2;
        }

        if (isNaN(num) || num === null) return "";
        let trimZero = TRIM_ZERO;

        if (CENT_UNIT && _cjsExports(num).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          num = _cjsExports(num || 0).times(100).toNumber();
        }

        return prefix + formatWallet(num, digits, trimZero) + suffix;
      }

      function formatWallet(num, digits, trimZero = true) {
        if (isNaN(parseFloat(num))) num = 0;
        const si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        let i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) break;
        }

        let wallet = toFixed(num / si[i].value, digits);
        if (trimZero) wallet = wallet.replace(rx, "$1");
        wallet = wallet + si[i].symbol;

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          wallet = wallet.replace('.', ',');
        }

        return wallet;
      }

      function changeParent(node, newParent) {
        if (node.parent === newParent) return;

        const getWorldRotation = function (node) {
          let currNode = node;
          let resultRot = currNode.angle || 0;

          do {
            currNode = currNode.parent;
            resultRot += currNode.angle || 0;
          } while (currNode.parent != null);

          resultRot = resultRot % 360;
          return resultRot;
        };

        const oldWorRot = getWorldRotation(node);
        const newParentWorRot = getWorldRotation(newParent);
        const newLocRot = oldWorRot - newParentWorRot;

        if (!node.getComponent(UITransform)) {
          node.addComponent(UITransform);
        }

        if (!newParent.getComponent(UITransform)) {
          newParent.addComponent(UITransform);
        }

        const oldWorPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0));
        const newLocPos = newParent.getComponent(UITransform).convertToNodeSpaceAR(oldWorPos);
        node.parent = newParent;
        node.position = newLocPos;
        node.angle = newLocRot;
      }

      function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function roundDecimal(num, numDecimal) {
        let rate = 1;

        for (let i = 0; i < numDecimal; i++) {
          rate *= 10;
        }

        return Math.round((num + Number.EPSILON) * rate) / rate;
      }

      function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }

        return array;
      }

      function getRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        return array[Math.floor(Math.random() * array.length)];
      }

      function pickOutRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        let randomIndex = Math.floor(Math.random() * array.length);
        return array.splice(randomIndex, 1)[0];
      }

      function removeElementByValue(array, value) {
        array.splice(array.indexOf(value), 1);
        return array;
      }

      function replaceElement(array, oldElement, newElement) {
        let index = array.indexOf(oldElement);
        if (index > -1) array[index] = newElement;
        return array;
      }

      function getText(text = '', length = 0) {
        let result = text;
        const n = length - text.length;

        if (n) {
          for (var i = 0; i < n; i++) {
            result += ' ';
          }
        }

        return result;
      }

      function getLeftTime(endTime, serverTime, millisecond = 1000) {
        serverTime = serverTime ? new Date(serverTime).getTime() : new Date().getTime();
        let time = Math.floor((new Date(endTime).getTime() - serverTime) / millisecond);
        if (time < 0) time = 0;
        return time;
      }

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      function getTime() {
        const d = new Date();
        const h = addZero(d.getHours());
        const m = addZero(d.getMinutes());
        const s = addZero(d.getSeconds());
        const t = h + ':' + m + ':' + s;
        return t;
      }

      function mapObjectKey(obj, keysMap) {
        return lodash.transform(obj, function (result, value, key) {
          var currentKey = key;

          if (keysMap[key]) {
            currentKey = keysMap[key].name;
            if (keysMap[key].type == Boolean) value = value == 'T';
          }

          if (lodash.isObject(value)) {
            result[currentKey] = mapObjectKey(value, keysMap);
          } else {
            result[currentKey] = value;
          }
        });
      }

      function fadeTo(target, duration, opacity, options) {
        let render2D = target.getComponent(UIRenderer);
        options = options || {};

        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        let tweenFade = null;

        if (render2D) {
          let obj = {
            alpha: render2D.color.a
          };

          options.onUpdate = function () {
            if (render2D && render2D.color) {
              setRenderColor(render2D, obj.alpha);
            }
          };

          tweenFade = tween(obj).to(duration, {
            alpha: opacity
          }, options).call(() => {
            if (target) {
              target['tweenFade'] = null;
            }
          }).start();
          target['tweenFade'] = tweenFade;
        } else {
          let uiOpacity = target.getComponent(UIOpacity);

          if (uiOpacity === null) {
            uiOpacity = target.addComponent(UIOpacity);
          }

          tweenFade = tween(uiOpacity);
          target['tweenFade'] = tweenFade;
          tweenFade.to(duration, {
            opacity
          }, options).call(() => {
            target['tweenFade'] = null;
          }).start();
        }

        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        let uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        let render2D = node.getComponent(UIRenderer);
        let uiOpacity = node.getComponent(UIOpacity);

        if (render2D) {
          if (uiOpacity) {
            uiOpacity.opacity = 255;
          }

          setRenderColor(render2D, opacity);
        } else {
          if (uiOpacity === null) {
            uiOpacity = node.addComponent(UIOpacity);
          }

          uiOpacity.opacity = opacity;
        }

        if (node) {
          //cheat for v373 to flag dirty transform
          node.position = node.position;
        }
      }

      function setOpacityDeep(node, opacity) {
        setOpacity(node, opacity);
        let childRenders = node.getComponentsInChildren(UIRenderer);
        childRenders.forEach(it => {
          setOpacity(it.node, opacity);
        });
      }

      function fadeOutDeep(target, duration, options) {
        return fadeToAllChild(target, duration, 0, options);
      }

      function fadeInDeep(target, duration, options) {
        return fadeToAllChild(target, duration, 255, options);
      } //fade all renderer in node child, use it carefully


      function fadeToAllChild(target, duration, opacity, options) {
        let render2D = target.getComponent(UIRenderer);
        let childRenders = target.getComponentsInChildren(UIRenderer);
        options = options || {};

        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        let tweenFade = null;

        if (render2D) {
          let obj = {
            alpha: render2D.color.a
          };

          options.onUpdate = function () {
            childRenders.forEach(it => {
              setRenderColor(it, obj.alpha);
            });
          };

          tweenFade = tween(obj).to(duration, {
            alpha: opacity
          }, options).call(() => {
            if (target) {
              target['tweenFade'] = null;
            }
          }).start();
          target['tweenFade'] = tweenFade;
        } else {
          let uiOpacity = target.getComponent(UIOpacity);

          if (uiOpacity === null) {
            uiOpacity = target.addComponent(UIOpacity);
          }

          options.onUpdate = function () {
            childRenders.forEach(it => {
              setRenderColor(it, uiOpacity.opacity);
            });
          };

          tweenFade = tween(uiOpacity);
          target['tweenFade'] = tweenFade;
          tweenFade.to(duration, {
            opacity
          }, options).call(() => {
            target['tweenFade'] = null;
          }).start();
        }

        return tweenFade;
      }

      function setRenderColor(render, alpha) {
        let color = Color.clone(render.color);
        color.a = alpha;
        render.color = color;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          return tweenMoneyByCurrency(label, duration, endValue, options);
        }

        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        let currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        const _target = {
          value: currentVal
        };
        options = options || {};
        let count = 0;
        const gap = options["gap"] || 3;
        delete options["gap"];

        options.onUpdate = function (target, ratio) {
          count++;

          if (count >= gap || ratio === 1) {
            count = 0;
            label.string = formatMoney(_target.value, null, '.', ',');
          }
        };

        let tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(() => {
          label.string = formatMoney(endValue, null, '.', ',');
          label["_tweenMoney"] = null;
        }).start();
        label.string = formatMoney(currentVal, null, '.', ',');
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenMoneyByCurrency(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        const {
          CENT_SUFFIX
        } = UTIL_CONFIG.CURRENCY_CONFIG;
        const isCentNumber = label.string.includes(CENT_SUFFIX);
        let currentVal = Number(label.string.replace(/[^\d.]/g, ''));

        if (isCentNumber) {
          currentVal = _cjsExports(currentVal || 0).div(100).toNumber();
        }

        const _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Number(_target.value), null, '.', ',');
        };

        let tweenMoney = tween(_target).to(duration, {
          value: Number(endValue)
        }, options).call(() => {
          label.string = formatMoney(Number(endValue), null, '.', ',');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      } //for slot event only


      function tweenMoney2(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        let currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        const _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(_target.value, 0, ',', '.');
        };

        let tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(() => {
          label.string = formatMoney(endValue, 0, ',', '.');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenWalletMoney(label, duration, startValue, endValue, options) {
        if (label["tweenWalletMoney"]) label["tweenWalletMoney"].stop(); // stop if on tween;

        let currentVal = startValue || 0;
        const _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatWalletMoney(_target.value);
        };

        const tweenWalletMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(() => {
          label.string = formatWalletMoney(endValue);
          label["tweenWalletMoney"] = null;
        }).start();
        label["tweenWalletMoney"] = tweenWalletMoney;
        return tweenWalletMoney;
      }

      function tweenBezier2DTo(target, duration, c1, c2, to, opts) {
        if (target['bezierX']) target['bezierX'].stop();
        if (target['bezierY']) target['bezierY'].stop();
        let c0x = c1.x,
            c0y = c1.y,
            c1x = c2.x,
            c1y = c2.y;
        const _targetX = {
          value: target.getPosition().x
        };
        const _targetY = {
          value: target.getPosition().y
        };
        const aOpts = opts ? { ...opts
        } : Object.create(null);

        aOpts.progress = function (startX, endX, currentX, t) {
          currentX = bezier(startX, c0x, c1x, endX, t);
          return currentX;
        };

        aOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(_targetX.value, target.position.y, target.position.z));
          }
        };

        const bOpts = opts ? { ...opts
        } : Object.create(null);

        bOpts.progress = function (startY, endY, currentY, t) {
          currentY = bezier(startY, c0y, c1y, endY, t);
          return currentY;
        };

        bOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(target.position.x, _targetY.value, target.position.z));
          }
        };

        target['bezierX'] = tween(_targetX).to(duration, {
          value: to.x
        }, aOpts).call(() => {
          target['bezierX'] = null;
        }).start();
        target['bezierY'] = tween(_targetY).to(duration, {
          value: to.y
        }, bOpts).call(() => {
          target['bezierY'] = null;
        }).start();
      }

      function startGameFromEvent(gameId) {
        director.loadScene("MultiSlot", () => {
          const multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

          if (multiSlotComp) {
            let config = {
              gameId,
              startScene: `g${gameId}`
            };
            multiSlotComp.emit('RQ_PLAY_FROM_EVENT', {
              config
            });
          }
        });
      }

      function removeDuplicates(array) {
        return array.filter((item, index) => array.indexOf(item) === index);
      }
      /**
       * @returns degree angle
      */


      function getAngleTwoPoint(p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }

      function getDistance(p1, p2) {
        return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
      }

      function shaking(node, {
        duration = 0.16,
        distance = 10,
        repeat = 1
      }) {
        const dur = duration / 8;
        const shake = tween().by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(distance, 0)
        });
        const tweenShake = tween(node).repeat(repeat, shake).start();
        return tweenShake;
      }

      function MD5(e) {
        function h(a, b) {
          var c, d, e, f, g;
          e = a & 2147483648;
          f = b & 2147483648;
          c = a & 1073741824;
          d = b & 1073741824;
          g = (a & 1073741823) + (b & 1073741823);
          return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
        }

        function k(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & c | ~b & d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function l(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & d | c & ~d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function m(a, b, d, c, e, f, g) {
          a = h(a, h(h(b ^ d ^ c, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function n(a, b, d, c, e, f, g) {
          a = h(a, h(h(d ^ (b | ~c), e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function p(a) {
          var b = "",
              d = "",
              c;

          for (c = 0; 3 >= c; c++) d = (a >>> 8 * c & 255).toString(), d = "0" + parseInt(d).toString(16), b += d.substr(d.length - 2, 2);

          return b;
        }

        var f = [],
            q,
            r,
            s,
            t,
            a,
            b,
            c,
            d;

        e = function (a) {
          a = a.replace(/\r\n/g, "\n");

          for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
          }

          return b;
        }(e);

        f = function (b) {
          var a,
              c = b.length;
          a = c + 8;

          for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;

          a = (g - g % 4) / 4;
          e[a] |= 128 << g % 4 * 8;
          e[d - 2] = c << 3;
          e[d - 1] = c >>> 29;
          return e;
        }(e);

        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;

        for (e = 0; e < f.length; e += 16) q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);

        return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
      }

      function getFBAvatar(url, spriteA, defaultAvatar, AvatarAtlas) {
        let dirpath = native.fileUtils.getWritablePath() + 'avaImg/';
        let filepath = dirpath + MD5(url) + '.png';

        function loadEnd() {
          assetManager.loadAny({
            url: filepath
          }, function (err, tex) {
            if (err) {
              warn(err);
              spriteA.spriteFrame = defaultAvatar;
            } else {
              let spriteFrame = new SpriteFrame();
              spriteFrame.texture = tex;

              if (spriteFrame) {
                spriteA.spriteFrame = spriteFrame;
              }
            }
          });
        }

        if (sys.os === sys.OS_ANDROID && sys.isNative) {
          if (native.fileUtils.isFileExist(filepath)) {
            //remove old file
            native.fileUtils.removeFile(filepath);
          }
        }

        let saveFile = function (data) {
          if (typeof data !== 'undefined') {
            if (!native.fileUtils.isDirectoryExist(dirpath)) {
              native.fileUtils.createDirectory(dirpath);
            }

            if (native.fileUtils.writeValueMapToFile(new Uint8Array(data), filepath)) {
              warn('Remote write file succeed.');
              loadEnd();
            } else {
              spriteA.spriteFrame = defaultAvatar;
              warn('Remote write file failed.');
            }
          } else {
            spriteA.spriteFrame = defaultAvatar;
            warn('Remote download file failed.');
          }
        };

        if (sys.os === sys.OS_IOS && sys.isNative) {
          if (url.indexOf("facebook") !== -1) {
            if (native.fileUtils.isFileExist(filepath)) {
              loadEnd();
            }

            let xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';

            xhr.onreadystatechange = function () {
              log("xhr.readyState  " + xhr.readyState);
              log("xhr.status  " + xhr.status);

              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  saveFile(xhr.response);
                }
              }
            }.bind(this);

            xhr.open("GET", url, true);
            xhr.send();
          } else {
            let spFrame = defaultAvatar;

            if (url) {
              let filename = url.substring(url.lastIndexOf('/') + 1);

              if (filename.match(/avatar_[0-9][0-9].png/)) {
                let num = filename.substring(7, 8);
                let spInt = parseInt(num);

                if (spInt >= 0 && spInt <= 32) {
                  spFrame = filename.split('.')[0];
                } else {
                  spFrame = defaultAvatar;
                }
              } else {
                spFrame = defaultAvatar;
              }
            }

            spriteA.spriteFrame = AvatarAtlas.getSpriteFrame(spFrame);
          }
        } else {
          let xhr = new XMLHttpRequest();
          xhr.responseType = 'arraybuffer';

          xhr.onreadystatechange = function () {
            log("xhr.readyState  " + xhr.readyState);
            log("xhr.status  " + xhr.status);

            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                saveFile(xhr.response);
              } else {
                saveFile(null);
              }
            }
          }.bind(this);

          xhr.open("GET", url, true);
          xhr.send();
        }
      }

      function loadAvatarFacebook(avatarSprite, ava, atlas, prefix = 'avatar_', leadingZeroLength = 0, avatarDefault = 'avatar_01') {
        if (!avatarSprite || !avatarSprite.node) return;
        const defaultAvatar = atlas.getSpriteFrame(avatarDefault);
        if (!defaultAvatar) return;

        let _sframe = decodeURIComponent(ava);

        if ((ava + '').indexOf('avatar_') > -1) {
          _sframe = ava || avatarDefault;
        } else {
          if (!isNaN(ava)) {
            ava = Number.parseInt(ava);
          }

          if (lodash.isNumber(ava)) {
            // avatar start from 1
            ava += 1;

            if (leadingZeroLength > 0) {
              const zeroPad = (num, places) => String(num).padStart(places, '0');

              ava = zeroPad(ava, leadingZeroLength);
            }

            _sframe = prefix + ava;
          }
        }

        if (_sframe.indexOf('avatar_') > -1 && _sframe.indexOf("facebook") === -1 && _sframe.indexOf("http") > -1) {
          let avaId = _sframe.split('avatar_');

          let frame = defaultAvatar;

          if (avaId[1]) {
            frame = atlas.getSpriteFrame('avatar_' + avaId[1].replace('.png', ''));
          }

          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } else if (_sframe.indexOf("http") === -1) {
          let frame = atlas.getSpriteFrame(_sframe);
          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } // else if(cc.sys.isNative){
        //     getFBAvatar(_sframe, avatarSprite, defaultAvatar, atlas);
        // } 
        else {
            if (_sframe.indexOf("facebook") !== -1) {
              _sframe = _sframe.replace("http://", "https://");
            }

            assetManager.loadRemote(decodeURIComponent(ava), {
              ext: 'png'
            }, (err, imageRes) => {
              if (!avatarSprite || !avatarSprite.node) return;

              if (err) {
                avatarSprite.spriteFrame = defaultAvatar;
              } else if (imageRes instanceof Texture2D) {
                let spriteFrame = new SpriteFrame();
                spriteFrame.texture = imageRes;

                if (avatarSprite && avatarSprite.node && avatarSprite.node.getComponent) {
                  let com = avatarSprite.node.getComponent(Sprite);

                  if (!com || isValid(com, true) == false) {
                    com = avatarSprite.node.addComponent(Sprite);
                  }

                  com.spriteFrame = new SpriteFrame();
                  com.spriteFrame.texture = spriteFrame.texture;
                }
              } else {
                avatarSprite.spriteFrame = defaultAvatar;
              }
            });
            return true;
          }
      }

      function setLayerForAllChildrens(target, layer) {
        target.walk(it => {
          it.layer = layer;
          it.off(Node.EventType.CHILD_ADDED);
          it.on(Node.EventType.CHILD_ADDED, child => {
            setLayerForAllChildrens(child, child.parent.layer);
          });
        }, () => {});
      }

      function setLayerAlls(target, layer) {
        target.walk(it => {
          it.layer = layer;
        }, () => {});
      }

      function setIndexZ(node, zIndex) {
        if (!node || !node.parent) return;
        const copySiblings = node.parent.children.slice();
        node['customIndexZ'] = zIndex;
        copySiblings.sort((a, b) => (a['customIndexZ'] || 0) - (b['customIndexZ'] || 0));

        for (let index = copySiblings.length - 1; index >= 0; index--) {
          const child = copySiblings[index];

          if (child.getSiblingIndex() !== index) {
            child.setSiblingIndex(index);
          }
        }
      }

      function registerLoadHowl() {
        if (globalThis.Howler) {
          assetManager.downloader['_downloaders']['.mp3cache'] = assetManager.downloader['_downloaders']['.mp3'];

          assetManager.downloader['_downloaders']['.mp3'] = (url, options, onComplete) => {
            const howl = new globalThis.Howl({
              src: [url],
              preload: true
            });
            howl.once('load', () => {
              onComplete(null, howl);
            });
            howl.once('loaderror', () => {
              onComplete(new Error(`Fail to load sound ${url}`), howl);
            });
          };
        }
      }

      function unregisterLoadHowl() {
        let cacheLoader = assetManager.downloader['_downloaders']['.mp3cache'];

        if (cacheLoader) {
          assetManager.downloader['_downloaders']['.mp3'] = cacheLoader;
        }
      }

      function setDeviceOrientation(isPortrait = false) {
        if (!sys.isNative) return;

        if (isPortrait) {
          if (sys.os == sys.OS.ANDROID) {
            log("==== Android setDeviceOrientation Portrait ====");
            let className = "com/cocos/game/AppActivity";
            let methodName = "setNativeOrientation";
            let methodSignature = "(I)V";
            native.reflection.callStaticMethod(className, methodName, methodSignature, 1);
          } else if (sys.os == sys.OS.IOS) {
            native.reflection.callStaticMethod('ViewController', 'setGamePortrait');
          }

          view.setOrientation(macro.ORIENTATION_PORTRAIT);
        } else {
          if (sys.os == sys.OS.ANDROID) {
            log("==== Android setDeviceOrientation Landscape ====");
            let className = "com/cocos/game/AppActivity";
            let methodName = "setNativeOrientation";
            let methodSignature = "(I)V";
            native.reflection.callStaticMethod(className, methodName, methodSignature, 0);
          } else if (sys.os == sys.OS.IOS) {
            native.reflection.callStaticMethod('ViewController', 'setGameLandScape');
          }

          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
        }
      }

      function disableButton(button) {
        button.interactable = true;
        button.interactable = false;
      }

      function getDefaultManifest() {
        return {
          "packageUrl": "",
          "remoteManifestUrl": "",
          "remoteVersionUrl": "",
          "version": "0.0.0",
          "assets": {},
          "searchPaths": []
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VortexAnimateMoney1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './animateNumberLabel.ts', './gfDataStore.ts', './gfReferenceManager.ts', './gfEffectLayer.ts', './gfActionHelper.ts', './gfUtilities.ts', './PoolManager1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Font, Node, _decorator, Component, Label, tween, AnimateNumberLabel, gfDataStore, gfReferenceManager, gfEffectLayer, stopAllActions, scaleTo, moveTo, getPositionInOtherNode, PoolManager1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Font = module.Font;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      tween = module.tween;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
      moveTo = module.moveTo;
    }, function (module) {
      getPositionInOtherNode = module.getPositionInOtherNode;
    }, function (module) {
      PoolManager1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "3b17bCbVOpBnqToIJQlDRYB", "VortexAnimateMoney1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let VortexAnimateMoney1975 = exports('VortexAnimateMoney1975', (_dec = ccclass('VortexAnimateMoney1975'), _dec2 = property(AnimateNumberLabel), _dec3 = property(Font), _dec4 = property(Font), _dec5 = property(Node), _dec(_class = (_class2 = class VortexAnimateMoney1975 extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txtReward", _descriptor, this);

          _initializerDefineProperty(this, "fontOther", _descriptor2, this);

          _initializerDefineProperty(this, "fontMain", _descriptor3, this);

          this.totalReward = 0;
          this.deskStation = null;
          this.delayTime = 0;
          this.effectTime = 0;

          _initializerDefineProperty(this, "frameMoney", _descriptor4, this);

          this.FADE_TIME = 0.2;
        }

        playAnimation(data) {
          const {
            DeskStation,
            TotalReward,
            delayTime,
            effectTime
          } = data;
          this.deskStation = DeskStation;
          this.totalReward = TotalReward;
          this.delayTime = delayTime;
          this.effectTime = effectTime - 0.7;
          let isMainPlayer = gfDataStore.instance.getSelfDeskStation() == DeskStation;
          this.txtReward.getComponent(Label).font = isMainPlayer ? this.fontMain : this.fontOther;
          stopAllActions(this.frameMoney);
          tween(this.frameMoney).delay(this.delayTime).then(this.onShow()).delay(0.5).then(this.onHide()).start();
        }

        onShow() {
          return tween(this.frameMoney).parallel(tween().then(scaleTo(this.FADE_TIME, 1, 1, "bounceOut")), tween().then(moveTo(this.FADE_TIME, 0, -100, 0, "bounceOut"))).delay(0.2).call(() => {
            this.txtReward.onUpdateValue(this.totalReward, this.effectTime * 1000);
          }).delay(this.effectTime);
        }

        onHide() {
          return tween(this.frameMoney).call(() => {
            const effectLayerLayer = gfReferenceManager.instance.getEffectLayer();
            const effectLayerComp = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
            let clonePosition = getPositionInOtherNode(effectLayerLayer, this.node);
            clonePosition.y += 100;
            PoolManager1975.instance.createBigExplosion({
              position: clonePosition
            });
            const dataParticle = {
              DeskStation: this.deskStation,
              beganPos: clonePosition,
              GoldReward: this.totalReward
            };
            effectLayerComp.playParticleEffect(dataParticle);
          }).then(scaleTo(this.FADE_TIME, 0, 0, "bounceOut"));
        }

        onDestroy() {
          stopAllActions(this.frameMoney);
          this.node.destroy();
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtReward", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fontOther", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fontMain", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "frameMoney", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VortexEffect1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VortexAnimateMoney1975.ts', './utils.ts', './gfFishManager.ts', './gfReferenceManager.ts', './gfActionHelper.ts', './gfUtilities.ts', './Config1975.ts', './TurtleSkillEffect1975.ts', './EffectLayer1975.ts', './EventsCode1975.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Prefab, _decorator, UITransform, v3, tween, instantiate, v2, VortexAnimateMoney1975, changeParent, gfFishManager, gfReferenceManager, stopAllActions, v3f, bezierTo, rotateTo, SetZIndex, randomBetween, v2Distance, getRotation, Config1975, TurtleSkillEffect1975, EffectLayer1975, EventsCode1975, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Prefab = module.Prefab;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      instantiate = module.instantiate;
      v2 = module.v2;
    }, function (module) {
      VortexAnimateMoney1975 = module.VortexAnimateMoney1975;
    }, function (module) {
      changeParent = module.changeParent;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      v3f = module.v3f;
      bezierTo = module.bezierTo;
      rotateTo = module.rotateTo;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      randomBetween = module.randomBetween;
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      TurtleSkillEffect1975 = module.TurtleSkillEffect1975;
    }, function (module) {
      EffectLayer1975 = module.EffectLayer1975;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b56f0qgklBCq6vL9Z4cJ1tO", "VortexEffect1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const Z_INDEX_VORTEX = 600;
      let VortexEffect1975 = exports('VortexEffect1975', (_dec = ccclass('VortexEffect1975'), _dec2 = property(sp.Skeleton), _dec3 = property(Prefab), _dec4 = property(VortexAnimateMoney1975), _dec(_class = (_class2 = class VortexEffect1975 extends TurtleSkillEffect1975 {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "skillSpine", _descriptor, this);

          _initializerDefineProperty(this, "effectFirefly", _descriptor2, this);

          _initializerDefineProperty(this, "vortexAnimateMoney", _descriptor3, this);

          this._minTimeMoveFish = 10;
        }

        onLoad() {
          this.skillSpine.setMix('transform_vortex', "skill_vortex", 0.1);
        }

        playAnimation(data, callBack = null) {
          const fishLayer = gfReferenceManager.instance.getNodeFishLayer();
          changeParent(this.node, fishLayer);
          SetZIndex(this.node, Z_INDEX_VORTEX);
          super.playAnimation(data, callBack);
        }

        runAnimationSequence(data, callBack) {
          let timeAppearVortex = this.turtleSpine.findAnimation("transform_vortex").duration;
          let timeDisappearVortex = this.turtleSpine.findAnimation("disappear_vortex").duration;
          let timeSkillVortex = this.turtleSpine.findAnimation("skill_vortex").duration;
          const {
            Width,
            Height
          } = Config1975.instance.realSize;
          const {
            SceneBox
          } = Config1975.instance; // this.node.position = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(data.mainPoint);

          let posConvert = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(data.mainPoint);
          this.node.position = v3(posConvert.x, posConvert.y);
          data.mainPoint.x = Width / 2;
          data.mainPoint.y = Height / 2;
          tween(this.node).call(() => {
            this.turtleSpine.setAnimation(0, 'transform_vortex', false); // this.skillSpine.setAnimation(0, "transform_vortex", false);

            this.vortexAnimateMoney.node.active = true;
            this.vortexAnimateMoney.playAnimation({
              delayTime: timeAppearVortex,
              effectTime: timeSkillVortex,
              ...data
            });
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_VORTEX_SKILL);
          }).to(timeAppearVortex, {
            position: v3(Width / 2 + SceneBox.Left, Height / 2)
          }).call(() => {
            // data.ListFishAbsorb = lf1;
            data.ListFishAbsorb = data.ListFish;
            this.absorbFish(data);
          }) // .delay(timeAppearVortex )
          .call(() => {
            this.skillSpine.node.active = true;
            this.turtleSpine.setAnimation(0, "skill_vortex", false);
            this.skillSpine.setAnimation(0, "skill_vortex", true);
          }).delay(timeSkillVortex).call(() => {
            this.turtleSpine.setAnimation(0, "disappear_vortex", false);
            this.skillSpine.setAnimation(0, "disappear_vortex", false);
          }).delay(timeDisappearVortex / 3).call(() => {
            if (typeof callBack === "function") {
              callBack();
            }
          }).delay(timeDisappearVortex / 2 + 0.6).call(() => this.node.destroy()).start();
        }

        absorbFish(data, timeSkillVortex) {
          const {
            DeskStation,
            ListFishAbsorb,
            SkillID,
            effectTime,
            mainPoint
          } = data;
          ListFishAbsorb.forEach((fishData, index) => {
            const fishOnScene = gfFishManager.instance.getFishById(fishData.FishID);
            const dataAbsorb = {
              dataFish: fishData,
              fish: fishOnScene,
              DeskStation,
              effectTime: effectTime - 0.8,
              SkillID,
              mainPoint,
              isEffect: false,
              index
            };

            if (!fishOnScene) {
              const fakeFish = gfFishManager.instance.createFakeFish(fishData);
              dataAbsorb.fish = fakeFish; // const effectFirefly = this.createEffectFireflyEffect(mainPoint);
              // dataAbsorb.isEffect = true;
            }

            this.playAnimAbsorb(dataAbsorb);
          });
        }

        createEffectFireflyEffect(mainPoint) {
          const effect = instantiate(this.effectFirefly);
          this.node.addChild(effect);
          mainPoint = this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          effect.setPosition(this.getRandomPositionOutScreen());
          effect.angle = randomBetween(0, 360);
          SetZIndex(effect, Z_INDEX_VORTEX + 1);
          return effect;
        }

        playAnimAbsorb(data) {
          const {
            dataFish,
            fish,
            DeskStation,
            SkillID,
            mainPoint,
            isEffect,
            index
          } = data;
          const player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);
          const effectLayer = gfReferenceManager.instance.getEffectLayer();
          const nodeFishLayer = gfReferenceManager.instance.getNodeFishLayer();
          let posHole = isEffect ? this.node.getComponent(UITransform).convertToNodeSpaceAR(mainPoint) : nodeFishLayer.getComponent(UITransform).convertToNodeSpaceAR(mainPoint);
          const posFish = fish.node ? fish.node.position : fish.getPosition();
          const endPos = v2(posHole.x, posHole.y);
          const A = posFish;
          const B = endPos;
          const M = {
            x: (A.x + B.x) / 2,
            y: (A.y + B.y) / 2
          };
          const dx = B.x - A.x;
          const dy = B.y - A.y;
          const length = Math.sqrt(dx * dx + dy * dy);
          const perpendicular = {
            x: -dy / length,
            y: dx / length
          };
          const h = v2Distance(posFish, endPos) / 2;
          const C = {
            x: M.x + h * perpendicular.x,
            y: M.y + h * perpendicular.y
          };
          const bezierConfig = [A, C, B];
          const timeByDistance = v2Distance(posFish, endPos) / 1000;
          dataFish.mainPoint = mainPoint;
          const DELAY_ABSORB = 0.15;
          this._minTimeMoveFish = Math.min(this._minTimeMoveFish, timeByDistance);
          let fishNode = fish.node;

          if (isEffect) {
            fishNode = fish;
          }

          const angle = getRotation(endPos, posFish);
          SetZIndex(fishNode, Z_INDEX_VORTEX + 1);
          stopAllActions(fishNode);
          tween(fishNode).delay(DELAY_ABSORB * (index % 10)).parallel(tween().delay(timeByDistance / 2).to(timeByDistance / 2, {
            scale: v3f(0)
          }), // tween().then(moveTo(timeByDistance, endPos.x, endPos.y, 0)),
          tween().then(bezierTo(timeByDistance, bezierConfig)), tween().then(rotateTo(0.1, angle))).call(() => {
            if (!isEffect) {
              fish.onDie();
            }

            this.playLabelCoinEffect(effectLayer, dataFish, player, SkillID);
          }).start();
        }

        playLabelCoinEffect(effectLayer, dataFish, player, SkillID) {
          let beganPos = effectLayer.getComponent(UITransform).convertToNodeSpaceAR(dataFish.mainPoint);
          const x = randomBetween(-30, 30);
          const y = randomBetween(-10, 10);
          beganPos.x += x;
          beganPos.y += y;
          const dataLabelCoin = {
            beganPos: beganPos,
            player,
            GoldReward: dataFish.GoldReward,
            isPlayLabelCoin: true,
            SkillID
          };
          effectLayer.getComponent(EffectLayer1975).playLabelCoinEffect(dataLabelCoin);
        }

        getRandomPositionOutScreen() {
          const {
            SceneBox
          } = Config1975.instance;
          const randomDeduct = randomBetween(150, 350);
          const posY = randomBetween(SceneBox.Bottom - randomDeduct, SceneBox.Top + randomDeduct);
          const posX = [SceneBox.Left - randomDeduct, SceneBox.Right + randomDeduct][randomBetween(0, 1)];
          return v3(posX, posY, 0);
        }

      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "skillSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effectFirefly", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "vortexAnimateMoney", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaitingLayer1975.ts", ['cc', './gfWaitingLayer.ts', './gfUtilities.ts', './EventsCode1975.ts', './Config1975.ts', './utils.ts'], function (exports) {
  var cclegacy, _decorator, gfWaitingLayer, registerEvent, EventsCode1975, Config1975, setOpacity;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfWaitingLayer = module.gfWaitingLayer;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4317el5UX5GwZjtTjWsFw77", "WaitingLayer1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let WaitingLayer1975 = exports('WaitingLayer1975', (_dec = ccclass('WaitingLayer1975'), _dec(_class = class WaitingLayer1975 extends gfWaitingLayer {
        runIconAction() {}

        initEvents() {
          super.initEvents();
          registerEvent(EventsCode1975.COMMON.HANDLE_SHOW_WAITING, this.handleShowWaiting, this);
        }

        handleShowWaiting(needTimeoutNetwork = false, needTimeoutLoadScene = false) {
          this.resetWaiting();
          this.node.active = true;
          setOpacity(this.node, 0);
          this.scheduleOnce(() => {
            this.showWaiting(needTimeoutNetwork, needTimeoutLoadScene);
          }, Config1975.instance.block_touch_timeout);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WarningSkill1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config1975.ts', './gfPlayAndDestroy.ts', './EventsCode1975.ts', './gfEventEmitter.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCString, _decorator, sp, Config1975, gfPlayAndDestroy, EventsCode1975, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCString = module.CCString;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      Config1975 = module.default;
    }, function (module) {
      gfPlayAndDestroy = module.gfPlayAndDestroy;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0b508IH0ENK5KnO9DrPMNlL", "WarningSkill1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let WarningSkill1975 = exports('WarningSkill1975', (_dec = ccclass('WarningSkill1975'), _dec2 = property(CCString), _dec(_class = (_class2 = class WarningSkill1975 extends gfPlayAndDestroy {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "animationName", _descriptor, this);
        }

        showWarning(skillID) {
          this.scheduleOnce(() => {
            const spine = this.node.getComponent(sp.Skeleton);

            switch (skillID) {
              case Config1975.instance.SKILL_CONFIG.FISH_BOOM.SkillID:
                spine.setSkin(Config1975.instance.SKILL_CONFIG.FISH_BOOM.WARNING_ANIM);
                break;

              case Config1975.instance.SKILL_CONFIG.VORTEX.SkillID:
                spine.setSkin(Config1975.instance.SKILL_CONFIG.VORTEX.WARNING_ANIM);
                break;

              case Config1975.instance.SKILL_CONFIG.DRILL.SkillID:
                spine.setSkin(Config1975.instance.SKILL_CONFIG.DRILL.WARNING_ANIM);
                break;
            }

            gfEventEmitter.instance.emit(EventsCode1975.SOUND.SOUND_SKILL_WARNING, "sfxWarning_" + skillID);
            spine.setAnimation(0, this.animationName, false);
          }, 0);
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "animation";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaveTransition1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfWaveTransition.ts', './EventsCode1975.ts', './gfUtilities.ts', './gfActionHelper.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, BoxCollider2D, _decorator, UIOpacity, sp, GfWaveTransition, EventsCode1975, registerEvent, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      BoxCollider2D = module.BoxCollider2D;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      sp = module.sp;
    }, function (module) {
      GfWaveTransition = module.GfWaveTransition;
    }, function (module) {
      EventsCode1975 = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "637e8C+diRMSYPfm6xuoDaK", "WaveTransition1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let WaveTransition1975 = exports('WaveTransition1975', (_dec = ccclass('WaveTransition1975'), _dec2 = property(BoxCollider2D), _dec(_class = (_class2 = class WaveTransition1975 extends GfWaveTransition {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "boxWave", _descriptor, this);
        }

        initEvents() {
          registerEvent(EventsCode1975.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(EventsCode1975.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playWaveTransition, this);
        }

        playWaveTransition() {
          this.resetOnExit();
          this.wave.active = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          const spineComp = this.wave.getComponent(sp.Skeleton);
          spineComp.setAnimation(0, 'animation', false);
          this.boxWave.enabled = true;
          spineComp.setCompleteListener(() => {
            this.node.getComponent(UIOpacity).opacity = 0;
            this.boxWave.enabled = false;
          });
        }

        resetOnExit() {
          stopAllActions(this.node);
          this.boxWave.enabled = false;
          this.wave.getComponent(sp.Skeleton).setCompleteListener(() => {});
          this.wave.getComponent(sp.Skeleton).clearTracks();
          this.wave.active = false;
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "boxWave", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/webDataStore.ts", ['cc', './IndexedDB.mjs_cjs=&original=.js', './IndexedDB.js'], function (exports) {
  var cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff01f4q3S9DiJurw0T0iESX", "webDataStore", undefined);

      const OBJECT_KEY_IMAGES = 'images';
      const OBJECT_KEY_LIST_RECORDED = 'list_recorded';
      const INDEX_KEY_IMAGES = 'by_id';
      const INDEX_KEY_RECORD = 'sessionId';

      class WebDataStore {
        constructor() {
          this.indexedDB = void 0;
        }

        static get instance() {
          if (!this._instance) {
            this._instance = new WebDataStore();
          }

          return this._instance;
        }

        initIndexedDB(callback) {
          this.indexedDB = new _cjsExports(callback);
        }

        addImage(data) {
          this.indexedDB && this.indexedDB.add(OBJECT_KEY_IMAGES, {
            raw: data.raw,
            id: data.id,
            sessionId: data.sessionId
          });
        }

        addRecord(data) {
          this.indexedDB && this.indexedDB.add(OBJECT_KEY_LIST_RECORDED, {
            data: data,
            sessionId: data.sessionId
          });
        }

        getImage(id, callback) {
          this.indexedDB && this.indexedDB.get(OBJECT_KEY_IMAGES, INDEX_KEY_IMAGES, id, callback);
        }

        getRecord(sessionId, callback) {
          this.indexedDB && this.indexedDB.get(OBJECT_KEY_LIST_RECORDED, INDEX_KEY_RECORD, sessionId, callback);
        }

        getListRecorded(callback) {
          this.indexedDB && this.indexedDB.getAll(OBJECT_KEY_LIST_RECORDED, INDEX_KEY_RECORD, callback);
        }

        removeImage(id) {
          this.indexedDB && this.indexedDB.remove(OBJECT_KEY_IMAGES, id);
        }

        removeRecord(sessionId) {
          this.indexedDB && this.indexedDB.remove(OBJECT_KEY_LIST_RECORDED, sessionId);
        }

        destroyDB() {
          this.indexedDB && this.indexedDB.destroyDB();
        }

      }

      exports('WebDataStore', WebDataStore);
      WebDataStore._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSoundPlayer.ts", ['cc'], function (exports) {
  var cclegacy, AudioClip, warn, log, game, error, tween, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      AudioClip = module.AudioClip;
      warn = module.warn;
      log = module.log;
      game = module.game;
      error = module.error;
      tween = module.tween;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "665a6jOt8tNUoF71xXbg++z", "WebSoundPlayer", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let WebSoundPlayer = exports('WebSoundPlayer', (_dec = ccclass('WebSoundPlayer'), _dec(_class = class WebSoundPlayer {
        constructor() {
          this.musicMap = {};
          this.sfxMap = {};
          this.currentMusic = null;
          this._musicTween = null;
          this._sfxList = [];
          this.loadedSoundMap = {};
          this.musicInstance = null;
          this.sfxCachedOnHide = [];
          this.sfxCacheGesture = [];
          this.howlMap = {};
          this.totalSound = 0;
          this.onWebSoundLoaded = null;
          this._hasAudioContext = false;
          this._isMusicPlaying = false;
          this._gamePaused = false;
          this._soundLoaded = [];
          this._isThumbMode = false;
          this._playedInitMusic = false;
          this._resume_sound_action = null;
          this.playOneShotTweens = [];
        }

        init() {} //merge more sound from dynamic loading


        loadDynamicSounds(sfxList, callback) {
          this.loadSfxList(sfxList, callback);
        }

        loadMusicList(list, callback) {
          list.forEach(soundObj => {
            this.musicMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        }

        loadSfxList(list, callback) {
          this._sfxList = this._sfxList.concat(list);
          list.forEach(soundObj => {
            this.sfxMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        }

        setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        }

        loadSoundList(soundList, callback) {
          let soundInfos = [];
          let loadTasks = [];
          this.loadedSoundMap = {};
          soundList.forEach(soundObj => {
            let clip = soundObj.audioFile;

            if (clip._nativeAsset instanceof globalThis.Howl) {
              this.howlMap[clip._uuid] = clip._nativeAsset;

              this._soundLoaded.push(clip._uuid);
            } else if (clip instanceof AudioClip) {
              soundInfos.push({
                uuid: clip._uuid,
                name: clip.name,
                src: clip['_meta'].url
              });
              this.loadedSoundMap[clip.name] = false;
            }
          });
          soundInfos.forEach(info => {
            if (this._soundLoaded.indexOf(info.uuid) < 0) {
              let task = new Promise((resolve, reject) => {
                const howl = new globalThis.Howl({
                  src: [info.src],
                  preload: true
                });
                howl.once('load', () => {
                  this.howlMap[info.uuid] = howl;
                  resolve(true);
                });
                howl.once('loaderror', () => {
                  reject();
                });
              });
              loadTasks.push(task);

              this._soundLoaded.push(info.uuid);
            } else {
              warn('theres duplicated sound in list');
            }
          });
          Promise.all(loadTasks).then(() => {
            callback && callback();
          });
        }

        skipGesture() {
          this._hasAudioContext = true;
        }

        resumeWithGesture() {
          this._hasAudioContext = true;

          if (this.musicInstance) {
            this.musicInstance.stop();

            if (this._isMusicPlaying) {
              this.musicInstance.play();
            }
          }

          this.sfxCacheGesture.forEach(sound => {
            let position = (Date.now() - sound.startTime) / 1000;
            let clip = sound.clip;

            if (sound.loop === true) {
              position = position % clip.duration();
            }

            if (position < clip.duration()) {
              clip.volume(sound.volume);
              clip.loop(sound.loop);
              let id = clip.play();
              clip.seek(position, id);
              log(`[WebSoundPlayer] play resume sound ${sound.name}`);
            }
          });
          this.sfxCacheGesture = [];
        }

        onEventHide() {
          this._gamePaused = true;
          if (!this._hasAudioContext) return;
          this.pauseMusic();
          this.pauseEffects();
        }

        onEventShow() {
          if (!this._gamePaused) return;
          this._gamePaused = false;
          if (!this._hasAudioContext) return;
          this.resumeAllSounds();
        }

        resumeAllSounds(shouldResumeContext = true) {
          const Howler = globalThis.Howler;

          if (Howler && Howler.ctx && Howler.ctx.state !== "running") {
            if (this._resume_sound_action) {
              clearTimeout(this._resume_sound_action);
            }

            this.runResumeContextAction(0.02, () => {
              this.resumeAllSounds(false);
            });
            return;
          }

          if (shouldResumeContext) {
            this.runResumeContextAction(0.1);
          }

          if (this._playedInitMusic) {
            log(`WebSoundPlayer: resumeMusic successfully`);
            this.resumeMusic();
          }

          this.resumeEffects();
        }

        runResumeContextAction(delayTime, callback = null) {
          this._resume_sound_action = setTimeout(() => {
            this._resume_sound_action = null;
            this.resumeContext().then(() => {
              log(`resume context successfully`);
            }).catch(e => {
              log(`resume context fail with error ${e}`);
            });
            callback && callback();
          }, delayTime);
        }

        playMusic(id, loop = true, volume) {
          const oldMusic = this.musicInstance;
          this._isMusicPlaying = true;
          const newMusic = this.musicMap[id];
          const musicInstance = newMusic ? this.howlMap[newMusic.audioFile._uuid] : null;

          if (!musicInstance) {
            warn("[WebSoundPlayer] invalid Music:", id);
            return;
          }

          this.currentMusic = newMusic;
          this.musicInstance = musicInstance;

          if (this.musicInstance === oldMusic && this.musicInstance.playing()) {
            log(`[WebSoundPlayer] duplicate play music ${id}`);
            return;
          }

          if (oldMusic && oldMusic.playing()) {
            oldMusic.stop();
          }

          this.musicInstance.loop(loop);
          this.musicInstance.volume(volume);

          if (this._hasAudioContext && !game.isPaused()) {
            this.musicInstance.play();
          }

          this._playedInitMusic = true;
          log(`[WebSoundPlayer] play music ${id}`);
        }

        changeMusic(id, loop, volume = 1, mixTime = 1) {
          const newMusic = this.musicMap[id];

          if (!newMusic || newMusic === this.currentMusic) {
            error('invalid music', {
              id,
              currentId: this.currentMusic.soundId
            });
            return;
          }

          const oldMusicInstance = this.musicInstance;
          this.currentMusic = newMusic;
          this.musicInstance = this.howlMap[newMusic.audioFile._uuid];
          this.musicInstance.play();
          this.musicInstance.loop(loop);

          if (oldMusicInstance && oldMusicInstance.playing()) {
            const currentVolume = oldMusicInstance.volume();
            oldMusicInstance.fade(currentVolume, 0, mixTime * 1000);
            this.musicInstance.fade(0, volume, mixTime * 1000);
            this._musicTween && this._musicTween.stop();
            this._musicTween = tween(this).delay(mixTime).call(() => {
              this._musicTween = null;
              oldMusicInstance.stop();
            }).start();
          }
        }

        getCurrentMusic() {
          return this.musicInstance;
        }

        pauseMusic() {
          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.pause();
          }
        }

        resumeMusic() {
          if (this.musicInstance && this._isMusicPlaying) {
            this.musicInstance.play();
          }
        }

        stopMusic() {
          log(`[WebSoundPlayer] stop music`);
          this._isMusicPlaying = false;

          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.stop();
          }
        }

        muteMusic() {
          if (this.musicInstance) {
            this.musicInstance.volume(0);
          }
        }

        unmuteMusic(volume = 1) {
          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        }

        setMusicVolume(volume) {
          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        }

        playSfx(sfx, loop = false, volume) {
          let soundObj = this.sfxMap[sfx];

          if (!soundObj) {
            warn("playSfx: invalid sfx", sfx);
            return null;
          }

          let clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip) {
            if (this._hasAudioContext) {
              if (clip.playing()) {
                clip.stop();
              }

              clip.loop(loop);
              clip.volume(volume);
              clip.play();

              if (this._gamePaused) {
                clip.pause();
              }
            } else {
              this.sfxCacheGesture.push({
                name: sfx,
                clip,
                startTime: Date.now(),
                volume,
                loop
              });
            }

            return {
              clip
            };
          }
        }

        resumeContext() {
          const Howler = globalThis.Howler;

          if (Howler.ctx.state == "interrupted") {
            return Howler.ctx.resume();
          } else {
            return Howler.ctx.suspend().then(() => {
              return Howler.ctx.resume();
            });
          }
        }

        playSfxOneShot(sfx, volume, loop = false) {
          if (!this.sfxMap.hasOwnProperty(sfx)) {
            warn("playSfxOneShot: invalid sfx", sfx);
            return;
          }

          const soundObj = this.sfxMap[sfx];
          const clip = this.howlMap[soundObj.audioFile._uuid];

          if (!clip) {
            warn("playSfxOneShot: invalid howl", soundObj);
            return;
          }

          let id;

          if (this._hasAudioContext) {
            clip.volume(volume);
            id = clip.play();
            clip.loop(loop, id);
            this._gamePaused && clip.pause(id);
          } else {
            this.sfxCacheGesture.push({
              name: sfx,
              clip,
              startTime: Date.now(),
              volume,
              loop
            });
          }

          const duration = clip.duration();

          if (duration > 0) {
            this.stopAndRemoveTweenOnShot(clip);
            const sfxOneShotTween = tween(this).delay(duration).call(() => {
              this.stopAndRemoveTweenOnShot(clip);
              if (clip) clip.stop();
            }).start();
            const clipTween = {
              clip: clip,
              tweenOneShot: sfxOneShotTween
            };
            this.playOneShotTweens.push(clipTween);
          }

          return {
            clip,
            id
          };
        }

        stopAndRemoveTweenOnShot(_clip) {
          const availableTweenObject = this.hasClipOneShotTween(_clip);

          if (availableTweenObject) {
            const {
              index,
              tweenOneShot
            } = availableTweenObject;

            if (tweenOneShot) {
              tweenOneShot.stop();
            }

            this.playOneShotTweens.splice(index, 1);
          }
        }

        hasClipOneShotTween(_clip) {
          for (let i = 0; i < this.playOneShotTweens.length; i++) {
            const _tweenObj = this.playOneShotTweens[i];

            if (_tweenObj) {
              const {
                clip,
                tweenOneShot
              } = _tweenObj;

              if (clip == _clip) {
                return {
                  index: i,
                  tweenOneShot
                };
              }
            }
          }

          return null;
        }

        stopSfxOneShot(sfxData) {
          if (!sfxData) {
            warn("stopSfxOneShot invalid data", sfxData);
            return;
          }

          const {
            clip,
            id
          } = sfxData;
          clip && clip.stop(id);

          this._removeClipFromGestureList(clip);
        }

        stopSfx(sfx) {
          let soundObj = this.sfxMap[sfx];

          if (soundObj) {
            let clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              if (clip.playing()) {
                clip.stop();
              } else {
                log(`${sfx} is not playing`);
              }

              this._removeClipFromGestureList(clip);
            }
          }
        }

        stopAllEffects() {
          this._sfxList.forEach(sfx => {
            this.stopSfx(sfx.soundId);
          });
        }

        pauseEffects() {
          this._sfxList.forEach(it => {
            let clip = this.howlMap[it.audioFile._uuid];

            if (clip && clip.playing()) {
              clip.pause();
              this.sfxCachedOnHide.push(clip);
            }
          });
        }

        resumeEffects() {
          this.sfxCachedOnHide.forEach(it => {
            it.play();
          });
          this.sfxCachedOnHide = [];
        }

        resumeEffect(sfx) {
          let soundObj = this.sfxMap[sfx];
          let clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip && clip.playing()) {
            clip.play();
          }
        }

        setEffectVolume(volume, immediate) {
          this._sfxList.forEach(sfx => {
            this._setSfxVolume(sfx.soundId, volume);
          });
        }

        fadeMusicTo(duration, volume) {
          if (this.musicInstance) {
            let currentVolume = this.musicInstance.volume();
            duration *= 1000;

            if (this.musicInstance.playing()) {
              this.musicInstance.fade(currentVolume, volume, duration);
            } else {
              this.musicInstance.volume(volume);
            }
          }
        }

        fadeSoundTo(sfx, duration, volume) {
          if (this.sfxMap.hasOwnProperty(sfx)) {
            let soundObj = this.sfxMap[sfx];
            let clip = this.howlMap[soundObj.audioFile._uuid];
            let currentVolume = clip.volume() || 0;
            duration *= 1000;

            if (clip.playing()) {
              clip.fade(currentVolume, volume, duration);
            } else {
              clip.volume(volume);
            }
          }
        }

        stopAllAudio() {
          this.stopAllEffects();
          this.stopMusic();
        }

        playHowl(howl, options, id = -1) {
          if (options.loop) howl.loop(options.loop);
          if (options.volume) howl.volume(options.volume);
          if (options.offset) howl.seek(options.offset);
          return id >= 0 ? howl.play(id) : howl.play();
        }

        _setSfxVolume(sfx, volume) {
          let soundObj = this.sfxMap[sfx];

          if (soundObj) {
            let clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              clip.volume(volume);
            }
          }
        }

        _removeClipFromGestureList(clip) {
          if (this.sfxCacheGesture && this.sfxCacheGesture.length > 0 && clip) {
            let index = this.sfxCacheGesture.findIndex(i => i.clip == clip);
            index >= 0 && this.sfxCacheGesture.splice(index, 1);
          }
        }

        onDestroy() {
          for (const i in this.howlMap) {
            this.howlMap[i].unload();
          }

          if (this._musicTween) {
            this._musicTween.stop();
          }

          this._soundLoaded = [];

          if (this._resume_sound_action) {
            clearTimeout(this._resume_sound_action);
          }

          for (let i = 0; i < this.playOneShotTweens.length; i++) {
            const onShotTweenObj = this.playOneShotTweens[i];

            if (onShotTweenObj && onShotTweenObj.tweenOneShot) {
              onShotTweenObj.tweenOneShot.stop();
            }
          }

          this.playOneShotTweens = [];
        }

        _testPlayMusic() {
          const musicId = "BGM_MAIN";
          tween(this).call(() => {
            this.stopMusic();
          }).delay(0.5).call(() => {
            this.playMusic(musicId, true);
            log(this.musicInstance.seek());
          }).delay(1).call(() => {
            this.playMusic(musicId, true);
          }).call(() => {
            if (Math.round(this.musicInstance.seek()) !== 1) {
              log("FAIL!");
            } else {
              log("passed");
            }
          }).start();
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Wheel1975.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gfWheel.ts', './gfEventEmitter.ts', './gfBaseEvents.ts', './gfReferenceManager.ts', './EventsCode1975.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, tween, gfWheel, gfEventEmitter, gfBaseEvents, gfReferenceManager, EventsCode1975;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      gfWheel = module.gfWheel;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      EventsCode1975 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "25264LMhilBB60ufy2mdRu7", "Wheel1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      const ANIMATION_NAME = {
        "bigWin": {
          "idle": "bigwin_idle",
          "appear": "bigwin_appear",
          "hide": "bigwin_disappear"
        },
        "megaWin": {
          "idle": "megawin_idle",
          "appear": "megawin_appear",
          "hide": "megawin_disappear"
        },
        "superWin": {
          "idle": "supermegawin_idle",
          "appear": "supermegawin_appear",
          "hide": "supermegawin_disappear"
        }
      };
      let Wheel1975 = exports('Wheel1975', (_dec = ccclass('Wheel1975'), _dec2 = property(Node), _dec(_class = (_class2 = class Wheel1975 extends gfWheel {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "frameMoney", _descriptor, this);
        }

        playAnimSpine(skinName) {
          this.curSkin = skinName;
          let animationName = this.getAnimationName(skinName);
          this.spine.setAnimation(0, animationName.appear, false);
          this.spine.addAnimation(0, animationName.idle, true);

          const callback = () => {
            let soundEvent;

            if (skinName === this.skinName.megaWin) {
              soundEvent = gfBaseEvents.SOUND.MEGA_WIN;
            } else if (skinName === gfBaseEvents.SOUND.BIG_WIN) {
              soundEvent = gfBaseEvents.SOUND.BIG_WIN;
            } else {
              soundEvent = gfBaseEvents.SOUND.SUPER_WIN;
            }

            gfEventEmitter.instance.emit(soundEvent);
          };

          this.scheduleOnce(callback, 0);
        }

        getAnimationName(skinName) {
          return ANIMATION_NAME[skinName];
        }

        tweenLblCoin() {}

        playAnimHideLblCoin() {}

        hideAnimation() {
          this.isShowing = false; // let stepMoveOut = this.index > 1 ? -20 : 20;

          const player = gfReferenceManager.instance.getPlayerByIndex(this.index); // let endPos = this.originPos;

          if (player) {
            // endPos = getPositionInOtherNode(this.node.parent, player.gun);
            if (player.isMe) {
              player.addToDisplayWallet(this.getUpdateWalletValue());
            }
          }

          let animationName = this.getAnimationName(this.curSkin);
          this.spine.setAnimation(0, animationName.hide, false);
          this.playAnimHideLblCoin();
          tween(this.node) // .to(0.23, {position: v3(this.node.position.x, this.node.position.y + stepMoveOut, 0)})
          // .delay(0.1)
          // .to(0.4, {position: endPos, scale: v3(0, 0, 0)})
          .delay(0.73).call(() => {
            this.onFinish();
          }).start();
        }

        update(dt) {
          if (this.frameMoney) {
            this.curLabel.node.setPosition(this.frameMoney.position.x, this.frameMoney.position.y + 5);
            this.curLabel.node.setScale(this.frameMoney.worldScale);
          }
        }

        tweenCoin(isMe) {
          this.resetLblCoinAngle();
          const curValue = this.coinValue;

          if (isMe) {
            gfEventEmitter.instance.emit(EventsCode1975.SOUND.COUNT_COIN);
          }

          tween(this.node).to(this.increaseTime, null, {
            onUpdate: (target, ratio) => {
              this.coinValue = curValue + ratio * (this.winValue - curValue);
            }
          }).call(() => {
            if (isMe) {
              this.tweenLblCoin();
              gfEventEmitter.instance.emit(EventsCode1975.SOUND.STOP_COUNT_COIN);
            }
          }).delay(1).call(() => {
            this.tweenCoinFinish();
          }).start();
        }

      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "frameMoney", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/wifiStatus1975.ts", ['cc', './gfWifiStatus.ts'], function (exports) {
  var cclegacy, _decorator, GfWifiStatus;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfWifiStatus = module.GfWifiStatus;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bd553MGUJpOdrwE2HBQ6daM", "wifiStatus1975", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let wifiStatus1975 = exports('default', (_dec = ccclass('wifiStatus1975'), _dec(_class = class wifiStatus1975 extends GfWifiStatus {
        onPingUpdate(ms) {
          super.onPingUpdate(ms);
          this.labelPing.string = this._averagePing.toString() + "ms";
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/x64-core.ts", ['cc', './crypto-core.ts'], function (exports) {
  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "831f4MLuttBKYuR24inm+u/", "x64-core", undefined); // Shortcuts


      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var X32WordArray = C_lib.WordArray;
      /**
       * x64 namespace.
       */

      var C_x64 = exports('default', C.x64 = {});
      /**
       * A 64-bit word.
       */

      C_x64.Word = Base.extend({
        /**
         * Initializes a newly created 64-bit word.
         *
         * @param {number} high The high 32 bits.
         * @param {number} low The low 32 bits.
         *
         * @example
         *
         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
         */
        init: function (high, low) {
          this.high = high;
          this.low = low;
        }
        /**
         * Bitwise NOTs this word.
         *
         * @return {X64Word} A new x64-Word object after negating.
         *
         * @example
         *
         *     var negated = x64Word.not();
         */
        // not: function () {
        // var high = ~this.high;
        // var low = ~this.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ANDs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to AND with this word.
         *
         * @return {X64Word} A new x64-Word object after ANDing.
         *
         * @example
         *
         *     var anded = x64Word.and(anotherX64Word);
         */
        // and: function (word) {
        // var high = this.high & word.high;
        // var low = this.low & word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to OR with this word.
         *
         * @return {X64Word} A new x64-Word object after ORing.
         *
         * @example
         *
         *     var ored = x64Word.or(anotherX64Word);
         */
        // or: function (word) {
        // var high = this.high | word.high;
        // var low = this.low | word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise XORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to XOR with this word.
         *
         * @return {X64Word} A new x64-Word object after XORing.
         *
         * @example
         *
         *     var xored = x64Word.xor(anotherX64Word);
         */
        // xor: function (word) {
        // var high = this.high ^ word.high;
        // var low = this.low ^ word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the left.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftL(25);
         */
        // shiftL: function (n) {
        // if (n < 32) {
        // var high = (this.high << n) | (this.low >>> (32 - n));
        // var low = this.low << n;
        // } else {
        // var high = this.low << (n - 32);
        // var low = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the right.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftR(7);
         */
        // shiftR: function (n) {
        // if (n < 32) {
        // var low = (this.low >>> n) | (this.high << (32 - n));
        // var high = this.high >>> n;
        // } else {
        // var low = this.high >>> (n - 32);
        // var high = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Rotates this word n bits to the left.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotL(25);
         */
        // rotL: function (n) {
        // return this.shiftL(n).or(this.shiftR(64 - n));
        // },

        /**
         * Rotates this word n bits to the right.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotR(7);
         */
        // rotR: function (n) {
        // return this.shiftR(n).or(this.shiftL(64 - n));
        // },

        /**
         * Adds this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to add with this word.
         *
         * @return {X64Word} A new x64-Word object after adding.
         *
         * @example
         *
         *     var added = x64Word.add(anotherX64Word);
         */
        // add: function (word) {
        // var low = (this.low + word.low) | 0;
        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
        // var high = (this.high + word.high + carry) | 0;
        // return X64Word.create(high, low);
        // }

      });
      /**
       * An array of 64-bit words.
       *
       * @property {Array} words The array of CryptoJS.x64.Word objects.
       * @property {number} sigBytes The number of significant bytes in this word array.
       */

      C_x64.WordArray = Base.extend({
        /**
         * Initializes a newly created word array.
         *
         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
         *
         * @example
         *
         *     var wordArray = CryptoJS.x64.WordArray.create();
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ]);
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ], 10);
         */
        init: function (words, sigBytes) {
          words = this.words = words || [];

          if (sigBytes != undefined) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 8;
          }
        },

        /**
         * Converts this 64-bit word array to a 32-bit word array.
         *
         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
         *
         * @example
         *
         *     var x32WordArray = x64WordArray.toX32();
         */
        toX32: function () {
          // Shortcuts
          var x64Words = this.words;
          var x64WordsLength = x64Words.length; // Convert

          var x32Words = [];

          for (var i = 0; i < x64WordsLength; i++) {
            var x64Word = x64Words[i];
            x32Words.push(x64Word.high);
            x32Words.push(x64Word.low);
          }

          return X32WordArray.create(x32Words, this.sigBytes);
        },

        /**
         * Creates a copy of this word array.
         *
         * @return {X64WordArray} The clone.
         *
         * @example
         *
         *     var clone = x64WordArray.clone();
         */
        clone: function () {
          var clone = Base.clone.call(this); // Clone "words" array

          var words = clone.words = this.words.slice(0); // Clone each X64Word object

          var wordsLength = words.length;

          for (var i = 0; i < wordsLength; i++) {
            words[i] = words[i].clone();
          }

          return clone;
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XOCypher.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "effd4CcclVCIblXmo9eBV5+", "XOCypher", undefined);

      const b64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

      class XORCipher {
        encode(key, data) {
          data = xor_encrypt(key, data);
          return b64_encode(data);
        }

        decode(key, data) {
          data = b64_decode(data);
          return xor_decrypt(key, data);
        }

        encode_new(key, data) {
          data = xor_encrypt_new(key, data);
          return b64_encode(data);
        }

        decode_new(key, data) {
          data = b64_decode(data);
          return xor_decrypt_new(key, data);
        }

        encode_tutorial(data) {
          let key = randomString(10);
          data = xor_encrypt_new(key, data);
          return b64_encode(data) + key;
        }

        decode_tutorial(data) {
          let key = data.slice(-10);
          data = b64_decode(data.slice(0, -10));
          return xor_decrypt_new(key, data);
        }

      }

      function stringToUtf8ByteArray(str) {
        let out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);

          if (c < 128) {
            out[p++] = c;
          } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
          } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          }
        }

        return out;
      }

      function utf8ByteArrayToString(bytes) {
        let out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
          let c1 = bytes[pos++];

          if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
          } else if (c1 > 191 && c1 < 224) {
            let c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
          } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            let c2 = bytes[pos++]; // eslint-disable-line

            let c3 = bytes[pos++];
            let c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xD800 + (u >> 10));
            out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
          } else {
            let c2 = bytes[pos++]; // eslint-disable-line

            let c3 = bytes[pos++]; // eslint-disable-line

            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          }
        }

        return out.join('');
      }

      function b64_encode(data) {
        let o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            r,
            i = 0,
            enc = "";

        if (!data) {
          return data;
        }

        do {
          o1 = data[i++];
          o2 = data[i++];
          o3 = data[i++];
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 0x3f;
          h2 = bits >> 12 & 0x3f;
          h3 = bits >> 6 & 0x3f;
          h4 = bits & 0x3f;
          enc += b64_table.charAt(h1) + b64_table.charAt(h2) + b64_table.charAt(h3) + b64_table.charAt(h4);
        } while (i < data.length);

        r = data.length % 3;
        return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
      }

      function b64_decode(data) {
        let o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            i = 0,
            result = [];

        if (!data) {
          return data;
        }

        data += "";

        do {
          h1 = b64_table.indexOf(data.charAt(i++));
          h2 = b64_table.indexOf(data.charAt(i++));
          h3 = b64_table.indexOf(data.charAt(i++));
          h4 = b64_table.indexOf(data.charAt(i++));
          bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
          o1 = bits >> 16 & 0xff;
          o2 = bits >> 8 & 0xff;
          o3 = bits & 0xff;
          result.push(o1);

          if (h3 !== 64) {
            result.push(o2);

            if (h4 !== 64) {
              result.push(o3);
            }
          }
        } while (i < data.length);

        return result;
      }

      function xor_encrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        });
      }

      function xor_decrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        }));
      }

      function xor_encrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        });
      }

      function xor_decrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        }));
      }

      function randomString(length = 10) {
        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        let result = '';
        const lettersLength = letters.length;

        for (let i = 0; i < length; i++) {
          const randomIndex = Math.floor(Math.random() * lettersLength);
          result += letters.charAt(randomIndex);
        }

        return result;
      }

      const xorCipher = exports('default', new XORCipher());

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=index.js.map